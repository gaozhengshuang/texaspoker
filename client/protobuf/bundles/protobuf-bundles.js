var $protobuf = window.protobuf;
$protobuf.roots.default=window;
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.msg = (function() {

    /**
     * Namespace msg.
     * @exports msg
     * @namespace
     */
    var msg = {};

    msg.AccountInfo = (function() {

        /**
         * Properties of an AccountInfo.
         * @memberof msg
         * @interface IAccountInfo
         * @property {string|null} [account] AccountInfo account
         * @property {string|null} [passwd] AccountInfo passwd
         * @property {number|Long|null} [userid] AccountInfo userid
         */

        /**
         * Constructs a new AccountInfo.
         * @memberof msg
         * @classdesc Represents an AccountInfo.
         * @implements IAccountInfo
         * @constructor
         * @param {msg.IAccountInfo=} [properties] Properties to set
         */
        function AccountInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountInfo account.
         * @member {string} account
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.account = "";

        /**
         * AccountInfo passwd.
         * @member {string} passwd
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.passwd = "";

        /**
         * AccountInfo userid.
         * @member {number|Long} userid
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new AccountInfo instance using the specified properties.
         * @function create
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo=} [properties] Properties to set
         * @returns {msg.AccountInfo} AccountInfo instance
         */
        AccountInfo.create = function create(properties) {
            return new AccountInfo(properties);
        };

        /**
         * Encodes the specified AccountInfo message. Does not implicitly {@link msg.AccountInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo} message AccountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified AccountInfo message, length delimited. Does not implicitly {@link msg.AccountInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo} message AccountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.AccountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.AccountInfo} AccountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AccountInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 5:
                    message.userid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.AccountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.AccountInfo} AccountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountInfo message.
         * @function verify
         * @memberof msg.AccountInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates an AccountInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.AccountInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.AccountInfo} AccountInfo
         */
        AccountInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.AccountInfo)
                return object;
            var message = new $root.msg.AccountInfo();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from an AccountInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.AccountInfo} message AccountInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            return object;
        };

        /**
         * Converts this AccountInfo to JSON.
         * @function toJSON
         * @memberof msg.AccountInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountInfo;
    })();

    msg.AccountGateInfo = (function() {

        /**
         * Properties of an AccountGateInfo.
         * @memberof msg
         * @interface IAccountGateInfo
         * @property {string|null} [ip] AccountGateInfo ip
         * @property {number|null} [port] AccountGateInfo port
         * @property {string|null} [verifykey] AccountGateInfo verifykey
         */

        /**
         * Constructs a new AccountGateInfo.
         * @memberof msg
         * @classdesc Represents an AccountGateInfo.
         * @implements IAccountGateInfo
         * @constructor
         * @param {msg.IAccountGateInfo=} [properties] Properties to set
         */
        function AccountGateInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountGateInfo ip.
         * @member {string} ip
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.ip = "";

        /**
         * AccountGateInfo port.
         * @member {number} port
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.port = 0;

        /**
         * AccountGateInfo verifykey.
         * @member {string} verifykey
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.verifykey = "";

        /**
         * Creates a new AccountGateInfo instance using the specified properties.
         * @function create
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo=} [properties] Properties to set
         * @returns {msg.AccountGateInfo} AccountGateInfo instance
         */
        AccountGateInfo.create = function create(properties) {
            return new AccountGateInfo(properties);
        };

        /**
         * Encodes the specified AccountGateInfo message. Does not implicitly {@link msg.AccountGateInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo} message AccountGateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountGateInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            if (message.port != null && message.hasOwnProperty("port"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified AccountGateInfo message, length delimited. Does not implicitly {@link msg.AccountGateInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo} message AccountGateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountGateInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountGateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.AccountGateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.AccountGateInfo} AccountGateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountGateInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AccountGateInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                case 2:
                    message.port = reader.int32();
                    break;
                case 3:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountGateInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.AccountGateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.AccountGateInfo} AccountGateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountGateInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountGateInfo message.
         * @function verify
         * @memberof msg.AccountGateInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountGateInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates an AccountGateInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.AccountGateInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.AccountGateInfo} AccountGateInfo
         */
        AccountGateInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.AccountGateInfo)
                return object;
            var message = new $root.msg.AccountGateInfo();
            if (object.ip != null)
                message.ip = String(object.ip);
            if (object.port != null)
                message.port = object.port | 0;
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from an AccountGateInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.AccountGateInfo} message AccountGateInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountGateInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = "";
                object.port = 0;
                object.verifykey = "";
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this AccountGateInfo to JSON.
         * @function toJSON
         * @memberof msg.AccountGateInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountGateInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountGateInfo;
    })();

    msg.BT_ReqEnterRoom = (function() {

        /**
         * Properties of a BT_ReqEnterRoom.
         * @memberof msg
         * @interface IBT_ReqEnterRoom
         * @property {number|Long|null} [roomid] BT_ReqEnterRoom roomid
         * @property {string|null} [passwd] BT_ReqEnterRoom passwd
         * @property {number|Long|null} [userid] BT_ReqEnterRoom userid
         */

        /**
         * Constructs a new BT_ReqEnterRoom.
         * @memberof msg
         * @classdesc Represents a BT_ReqEnterRoom.
         * @implements IBT_ReqEnterRoom
         * @constructor
         * @param {msg.IBT_ReqEnterRoom=} [properties] Properties to set
         */
        function BT_ReqEnterRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqEnterRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_ReqEnterRoom passwd.
         * @member {string} passwd
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.passwd = "";

        /**
         * BT_ReqEnterRoom userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_ReqEnterRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom=} [properties] Properties to set
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom instance
         */
        BT_ReqEnterRoom.create = function create(properties) {
            return new BT_ReqEnterRoom(properties);
        };

        /**
         * Encodes the specified BT_ReqEnterRoom message. Does not implicitly {@link msg.BT_ReqEnterRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom} message BT_ReqEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqEnterRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqEnterRoom message, length delimited. Does not implicitly {@link msg.BT_ReqEnterRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom} message BT_ReqEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqEnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqEnterRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqEnterRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqEnterRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.userid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqEnterRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqEnterRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqEnterRoom message.
         * @function verify
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqEnterRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_ReqEnterRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         */
        BT_ReqEnterRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqEnterRoom)
                return object;
            var message = new $root.msg.BT_ReqEnterRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqEnterRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.BT_ReqEnterRoom} message BT_ReqEnterRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqEnterRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.passwd = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            return object;
        };

        /**
         * Converts this BT_ReqEnterRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqEnterRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqEnterRoom;
    })();

    msg.BT_ReqLeaveRoom = (function() {

        /**
         * Properties of a BT_ReqLeaveRoom.
         * @memberof msg
         * @interface IBT_ReqLeaveRoom
         * @property {number|Long|null} [roomid] BT_ReqLeaveRoom roomid
         * @property {number|Long|null} [userid] BT_ReqLeaveRoom userid
         */

        /**
         * Constructs a new BT_ReqLeaveRoom.
         * @memberof msg
         * @classdesc Represents a BT_ReqLeaveRoom.
         * @implements IBT_ReqLeaveRoom
         * @constructor
         * @param {msg.IBT_ReqLeaveRoom=} [properties] Properties to set
         */
        function BT_ReqLeaveRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqLeaveRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_ReqLeaveRoom
         * @instance
         */
        BT_ReqLeaveRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_ReqLeaveRoom userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqLeaveRoom
         * @instance
         */
        BT_ReqLeaveRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_ReqLeaveRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {msg.IBT_ReqLeaveRoom=} [properties] Properties to set
         * @returns {msg.BT_ReqLeaveRoom} BT_ReqLeaveRoom instance
         */
        BT_ReqLeaveRoom.create = function create(properties) {
            return new BT_ReqLeaveRoom(properties);
        };

        /**
         * Encodes the specified BT_ReqLeaveRoom message. Does not implicitly {@link msg.BT_ReqLeaveRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {msg.IBT_ReqLeaveRoom} message BT_ReqLeaveRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqLeaveRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqLeaveRoom message, length delimited. Does not implicitly {@link msg.BT_ReqLeaveRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {msg.IBT_ReqLeaveRoom} message BT_ReqLeaveRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqLeaveRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqLeaveRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqLeaveRoom} BT_ReqLeaveRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqLeaveRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqLeaveRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqLeaveRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqLeaveRoom} BT_ReqLeaveRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqLeaveRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqLeaveRoom message.
         * @function verify
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqLeaveRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_ReqLeaveRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqLeaveRoom} BT_ReqLeaveRoom
         */
        BT_ReqLeaveRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqLeaveRoom)
                return object;
            var message = new $root.msg.BT_ReqLeaveRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqLeaveRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqLeaveRoom
         * @static
         * @param {msg.BT_ReqLeaveRoom} message BT_ReqLeaveRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqLeaveRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            return object;
        };

        /**
         * Converts this BT_ReqLeaveRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqLeaveRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqLeaveRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqLeaveRoom;
    })();

    msg.BT_GameInit = (function() {

        /**
         * Properties of a BT_GameInit.
         * @memberof msg
         * @interface IBT_GameInit
         * @property {number|Long|null} [roomid] BT_GameInit roomid
         * @property {number|Long|null} [ownerid] BT_GameInit ownerid
         * @property {number|null} [gamekind] BT_GameInit gamekind
         */

        /**
         * Constructs a new BT_GameInit.
         * @memberof msg
         * @classdesc Represents a BT_GameInit.
         * @implements IBT_GameInit
         * @constructor
         * @param {msg.IBT_GameInit=} [properties] Properties to set
         */
        function BT_GameInit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameInit roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameInit ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameInit gamekind.
         * @member {number} gamekind
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.gamekind = 0;

        /**
         * Creates a new BT_GameInit instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit=} [properties] Properties to set
         * @returns {msg.BT_GameInit} BT_GameInit instance
         */
        BT_GameInit.create = function create(properties) {
            return new BT_GameInit(properties);
        };

        /**
         * Encodes the specified BT_GameInit message. Does not implicitly {@link msg.BT_GameInit.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit} message BT_GameInit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameInit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ownerid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamekind);
            return writer;
        };

        /**
         * Encodes the specified BT_GameInit message, length delimited. Does not implicitly {@link msg.BT_GameInit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit} message BT_GameInit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameInit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameInit message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameInit} BT_GameInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameInit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameInit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.int64();
                    break;
                case 3:
                    message.gamekind = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameInit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameInit} BT_GameInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameInit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameInit message.
         * @function verify
         * @memberof msg.BT_GameInit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameInit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            return null;
        };

        /**
         * Creates a BT_GameInit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameInit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameInit} BT_GameInit
         */
        BT_GameInit.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameInit)
                return object;
            var message = new $root.msg.BT_GameInit();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = false;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_GameInit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.BT_GameInit} message BT_GameInit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameInit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber() : message.ownerid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            return object;
        };

        /**
         * Converts this BT_GameInit to JSON.
         * @function toJSON
         * @memberof msg.BT_GameInit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameInit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameInit;
    })();

    msg.BT_RoomUser = (function() {

        /**
         * Properties of a BT_RoomUser.
         * @memberof msg
         * @interface IBT_RoomUser
         * @property {number|Long|null} [id] BT_RoomUser id
         * @property {string|null} [name] BT_RoomUser name
         * @property {string|null} [face] BT_RoomUser face
         * @property {number|null} [seatno] BT_RoomUser seatno
         */

        /**
         * Constructs a new BT_RoomUser.
         * @memberof msg
         * @classdesc Represents a BT_RoomUser.
         * @implements IBT_RoomUser
         * @constructor
         * @param {msg.IBT_RoomUser=} [properties] Properties to set
         */
        function BT_RoomUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_RoomUser id.
         * @member {number|Long} id
         * @memberof msg.BT_RoomUser
         * @instance
         */
        BT_RoomUser.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_RoomUser name.
         * @member {string} name
         * @memberof msg.BT_RoomUser
         * @instance
         */
        BT_RoomUser.prototype.name = "";

        /**
         * BT_RoomUser face.
         * @member {string} face
         * @memberof msg.BT_RoomUser
         * @instance
         */
        BT_RoomUser.prototype.face = "";

        /**
         * BT_RoomUser seatno.
         * @member {number} seatno
         * @memberof msg.BT_RoomUser
         * @instance
         */
        BT_RoomUser.prototype.seatno = 0;

        /**
         * Creates a new BT_RoomUser instance using the specified properties.
         * @function create
         * @memberof msg.BT_RoomUser
         * @static
         * @param {msg.IBT_RoomUser=} [properties] Properties to set
         * @returns {msg.BT_RoomUser} BT_RoomUser instance
         */
        BT_RoomUser.create = function create(properties) {
            return new BT_RoomUser(properties);
        };

        /**
         * Encodes the specified BT_RoomUser message. Does not implicitly {@link msg.BT_RoomUser.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_RoomUser
         * @static
         * @param {msg.IBT_RoomUser} message BT_RoomUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RoomUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.face);
            if (message.seatno != null && message.hasOwnProperty("seatno"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatno);
            return writer;
        };

        /**
         * Encodes the specified BT_RoomUser message, length delimited. Does not implicitly {@link msg.BT_RoomUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_RoomUser
         * @static
         * @param {msg.IBT_RoomUser} message BT_RoomUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RoomUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_RoomUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_RoomUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_RoomUser} BT_RoomUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RoomUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_RoomUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.face = reader.string();
                    break;
                case 4:
                    message.seatno = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_RoomUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_RoomUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_RoomUser} BT_RoomUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RoomUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_RoomUser message.
         * @function verify
         * @memberof msg.BT_RoomUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_RoomUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.seatno != null && message.hasOwnProperty("seatno"))
                if (!$util.isInteger(message.seatno))
                    return "seatno: integer expected";
            return null;
        };

        /**
         * Creates a BT_RoomUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_RoomUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_RoomUser} BT_RoomUser
         */
        BT_RoomUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_RoomUser)
                return object;
            var message = new $root.msg.BT_RoomUser();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.face != null)
                message.face = String(object.face);
            if (object.seatno != null)
                message.seatno = object.seatno | 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_RoomUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_RoomUser
         * @static
         * @param {msg.BT_RoomUser} message BT_RoomUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_RoomUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.name = "";
                object.face = "";
                object.seatno = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.seatno != null && message.hasOwnProperty("seatno"))
                object.seatno = message.seatno;
            return object;
        };

        /**
         * Converts this BT_RoomUser to JSON.
         * @function toJSON
         * @memberof msg.BT_RoomUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_RoomUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_RoomUser;
    })();

    msg.BT_NewUserInRoom = (function() {

        /**
         * Properties of a BT_NewUserInRoom.
         * @memberof msg
         * @interface IBT_NewUserInRoom
         * @property {msg.IBT_RoomUser|null} [user] BT_NewUserInRoom user
         */

        /**
         * Constructs a new BT_NewUserInRoom.
         * @memberof msg
         * @classdesc Represents a BT_NewUserInRoom.
         * @implements IBT_NewUserInRoom
         * @constructor
         * @param {msg.IBT_NewUserInRoom=} [properties] Properties to set
         */
        function BT_NewUserInRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_NewUserInRoom user.
         * @member {msg.IBT_RoomUser|null|undefined} user
         * @memberof msg.BT_NewUserInRoom
         * @instance
         */
        BT_NewUserInRoom.prototype.user = null;

        /**
         * Creates a new BT_NewUserInRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {msg.IBT_NewUserInRoom=} [properties] Properties to set
         * @returns {msg.BT_NewUserInRoom} BT_NewUserInRoom instance
         */
        BT_NewUserInRoom.create = function create(properties) {
            return new BT_NewUserInRoom(properties);
        };

        /**
         * Encodes the specified BT_NewUserInRoom message. Does not implicitly {@link msg.BT_NewUserInRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {msg.IBT_NewUserInRoom} message BT_NewUserInRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_NewUserInRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.user != null && message.hasOwnProperty("user"))
                $root.msg.BT_RoomUser.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_NewUserInRoom message, length delimited. Does not implicitly {@link msg.BT_NewUserInRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {msg.IBT_NewUserInRoom} message BT_NewUserInRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_NewUserInRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_NewUserInRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_NewUserInRoom} BT_NewUserInRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_NewUserInRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_NewUserInRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.user = $root.msg.BT_RoomUser.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_NewUserInRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_NewUserInRoom} BT_NewUserInRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_NewUserInRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_NewUserInRoom message.
         * @function verify
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_NewUserInRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.user != null && message.hasOwnProperty("user")) {
                var error = $root.msg.BT_RoomUser.verify(message.user);
                if (error)
                    return "user." + error;
            }
            return null;
        };

        /**
         * Creates a BT_NewUserInRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_NewUserInRoom} BT_NewUserInRoom
         */
        BT_NewUserInRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_NewUserInRoom)
                return object;
            var message = new $root.msg.BT_NewUserInRoom();
            if (object.user != null) {
                if (typeof object.user !== "object")
                    throw TypeError(".msg.BT_NewUserInRoom.user: object expected");
                message.user = $root.msg.BT_RoomUser.fromObject(object.user);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_NewUserInRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_NewUserInRoom
         * @static
         * @param {msg.BT_NewUserInRoom} message BT_NewUserInRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_NewUserInRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.user = null;
            if (message.user != null && message.hasOwnProperty("user"))
                object.user = $root.msg.BT_RoomUser.toObject(message.user, options);
            return object;
        };

        /**
         * Converts this BT_NewUserInRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_NewUserInRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_NewUserInRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_NewUserInRoom;
    })();

    msg.BT_SendRoomUser = (function() {

        /**
         * Properties of a BT_SendRoomUser.
         * @memberof msg
         * @interface IBT_SendRoomUser
         * @property {Array.<msg.IBT_RoomUser>|null} [users] BT_SendRoomUser users
         */

        /**
         * Constructs a new BT_SendRoomUser.
         * @memberof msg
         * @classdesc Represents a BT_SendRoomUser.
         * @implements IBT_SendRoomUser
         * @constructor
         * @param {msg.IBT_SendRoomUser=} [properties] Properties to set
         */
        function BT_SendRoomUser(properties) {
            this.users = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_SendRoomUser users.
         * @member {Array.<msg.IBT_RoomUser>} users
         * @memberof msg.BT_SendRoomUser
         * @instance
         */
        BT_SendRoomUser.prototype.users = $util.emptyArray;

        /**
         * Creates a new BT_SendRoomUser instance using the specified properties.
         * @function create
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {msg.IBT_SendRoomUser=} [properties] Properties to set
         * @returns {msg.BT_SendRoomUser} BT_SendRoomUser instance
         */
        BT_SendRoomUser.create = function create(properties) {
            return new BT_SendRoomUser(properties);
        };

        /**
         * Encodes the specified BT_SendRoomUser message. Does not implicitly {@link msg.BT_SendRoomUser.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {msg.IBT_SendRoomUser} message BT_SendRoomUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_SendRoomUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.users != null && message.users.length)
                for (var i = 0; i < message.users.length; ++i)
                    $root.msg.BT_RoomUser.encode(message.users[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_SendRoomUser message, length delimited. Does not implicitly {@link msg.BT_SendRoomUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {msg.IBT_SendRoomUser} message BT_SendRoomUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_SendRoomUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_SendRoomUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_SendRoomUser} BT_SendRoomUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_SendRoomUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_SendRoomUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.users && message.users.length))
                        message.users = [];
                    message.users.push($root.msg.BT_RoomUser.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_SendRoomUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_SendRoomUser} BT_SendRoomUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_SendRoomUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_SendRoomUser message.
         * @function verify
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_SendRoomUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.users != null && message.hasOwnProperty("users")) {
                if (!Array.isArray(message.users))
                    return "users: array expected";
                for (var i = 0; i < message.users.length; ++i) {
                    var error = $root.msg.BT_RoomUser.verify(message.users[i]);
                    if (error)
                        return "users." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BT_SendRoomUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_SendRoomUser} BT_SendRoomUser
         */
        BT_SendRoomUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_SendRoomUser)
                return object;
            var message = new $root.msg.BT_SendRoomUser();
            if (object.users) {
                if (!Array.isArray(object.users))
                    throw TypeError(".msg.BT_SendRoomUser.users: array expected");
                message.users = [];
                for (var i = 0; i < object.users.length; ++i) {
                    if (typeof object.users[i] !== "object")
                        throw TypeError(".msg.BT_SendRoomUser.users: object expected");
                    message.users[i] = $root.msg.BT_RoomUser.fromObject(object.users[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_SendRoomUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_SendRoomUser
         * @static
         * @param {msg.BT_SendRoomUser} message BT_SendRoomUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_SendRoomUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.users = [];
            if (message.users && message.users.length) {
                object.users = [];
                for (var j = 0; j < message.users.length; ++j)
                    object.users[j] = $root.msg.BT_RoomUser.toObject(message.users[j], options);
            }
            return object;
        };

        /**
         * Converts this BT_SendRoomUser to JSON.
         * @function toJSON
         * @memberof msg.BT_SendRoomUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_SendRoomUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_SendRoomUser;
    })();

    msg.BT_GameStart = (function() {

        /**
         * Properties of a BT_GameStart.
         * @memberof msg
         * @interface IBT_GameStart
         * @property {number|Long|null} [roomid] BT_GameStart roomid
         * @property {number|Long|null} [ownerid] BT_GameStart ownerid
         */

        /**
         * Constructs a new BT_GameStart.
         * @memberof msg
         * @classdesc Represents a BT_GameStart.
         * @implements IBT_GameStart
         * @constructor
         * @param {msg.IBT_GameStart=} [properties] Properties to set
         */
        function BT_GameStart(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameStart roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameStart
         * @instance
         */
        BT_GameStart.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameStart ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameStart
         * @instance
         */
        BT_GameStart.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_GameStart instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart=} [properties] Properties to set
         * @returns {msg.BT_GameStart} BT_GameStart instance
         */
        BT_GameStart.create = function create(properties) {
            return new BT_GameStart(properties);
        };

        /**
         * Encodes the specified BT_GameStart message. Does not implicitly {@link msg.BT_GameStart.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart} message BT_GameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameStart.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ownerid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameStart message, length delimited. Does not implicitly {@link msg.BT_GameStart.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart} message BT_GameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameStart.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameStart message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameStart} BT_GameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameStart.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameStart();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameStart message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameStart} BT_GameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameStart.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameStart message.
         * @function verify
         * @memberof msg.BT_GameStart
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameStart.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameStart message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameStart
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameStart} BT_GameStart
         */
        BT_GameStart.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameStart)
                return object;
            var message = new $root.msg.BT_GameStart();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = false;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_GameStart message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.BT_GameStart} message BT_GameStart
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameStart.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber() : message.ownerid;
            return object;
        };

        /**
         * Converts this BT_GameStart to JSON.
         * @function toJSON
         * @memberof msg.BT_GameStart
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameStart.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameStart;
    })();

    msg.BT_GameEnd = (function() {

        /**
         * Properties of a BT_GameEnd.
         * @memberof msg
         * @interface IBT_GameEnd
         * @property {number|Long|null} [roomid] BT_GameEnd roomid
         * @property {number|Long|null} [ownerid] BT_GameEnd ownerid
         * @property {string|null} [reason] BT_GameEnd reason
         * @property {msg.ISerialize|null} [bin] BT_GameEnd bin
         */

        /**
         * Constructs a new BT_GameEnd.
         * @memberof msg
         * @classdesc Represents a BT_GameEnd.
         * @implements IBT_GameEnd
         * @constructor
         * @param {msg.IBT_GameEnd=} [properties] Properties to set
         */
        function BT_GameEnd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameEnd roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameEnd ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameEnd reason.
         * @member {string} reason
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.reason = "";

        /**
         * BT_GameEnd bin.
         * @member {msg.ISerialize|null|undefined} bin
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.bin = null;

        /**
         * Creates a new BT_GameEnd instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd=} [properties] Properties to set
         * @returns {msg.BT_GameEnd} BT_GameEnd instance
         */
        BT_GameEnd.create = function create(properties) {
            return new BT_GameEnd(properties);
        };

        /**
         * Encodes the specified BT_GameEnd message. Does not implicitly {@link msg.BT_GameEnd.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd} message BT_GameEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameEnd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ownerid);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
            if (message.bin != null && message.hasOwnProperty("bin"))
                $root.msg.Serialize.encode(message.bin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_GameEnd message, length delimited. Does not implicitly {@link msg.BT_GameEnd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd} message BT_GameEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameEnd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameEnd message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameEnd} BT_GameEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameEnd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameEnd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.int64();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.bin = $root.msg.Serialize.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameEnd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameEnd} BT_GameEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameEnd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameEnd message.
         * @function verify
         * @memberof msg.BT_GameEnd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameEnd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.bin != null && message.hasOwnProperty("bin")) {
                var error = $root.msg.Serialize.verify(message.bin);
                if (error)
                    return "bin." + error;
            }
            return null;
        };

        /**
         * Creates a BT_GameEnd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameEnd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameEnd} BT_GameEnd
         */
        BT_GameEnd.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameEnd)
                return object;
            var message = new $root.msg.BT_GameEnd();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = false;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber();
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.bin != null) {
                if (typeof object.bin !== "object")
                    throw TypeError(".msg.BT_GameEnd.bin: object expected");
                message.bin = $root.msg.Serialize.fromObject(object.bin);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_GameEnd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.BT_GameEnd} message BT_GameEnd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameEnd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.reason = "";
                object.bin = null;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber() : message.ownerid;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.bin != null && message.hasOwnProperty("bin"))
                object.bin = $root.msg.Serialize.toObject(message.bin, options);
            return object;
        };

        /**
         * Converts this BT_GameEnd to JSON.
         * @function toJSON
         * @memberof msg.BT_GameEnd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameEnd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameEnd;
    })();

    msg.BT_GameOver = (function() {

        /**
         * Properties of a BT_GameOver.
         * @memberof msg
         * @interface IBT_GameOver
         * @property {number|Long|null} [roomid] BT_GameOver roomid
         */

        /**
         * Constructs a new BT_GameOver.
         * @memberof msg
         * @classdesc Represents a BT_GameOver.
         * @implements IBT_GameOver
         * @constructor
         * @param {msg.IBT_GameOver=} [properties] Properties to set
         */
        function BT_GameOver(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameOver roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameOver
         * @instance
         */
        BT_GameOver.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_GameOver instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver=} [properties] Properties to set
         * @returns {msg.BT_GameOver} BT_GameOver instance
         */
        BT_GameOver.create = function create(properties) {
            return new BT_GameOver(properties);
        };

        /**
         * Encodes the specified BT_GameOver message. Does not implicitly {@link msg.BT_GameOver.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver} message BT_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameOver.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameOver message, length delimited. Does not implicitly {@link msg.BT_GameOver.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver} message BT_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameOver.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameOver message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameOver} BT_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameOver.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameOver();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameOver message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameOver} BT_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameOver.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameOver message.
         * @function verify
         * @memberof msg.BT_GameOver
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameOver.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameOver message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameOver
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameOver} BT_GameOver
         */
        BT_GameOver.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameOver)
                return object;
            var message = new $root.msg.BT_GameOver();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_GameOver message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.BT_GameOver} message BT_GameOver
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameOver.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this BT_GameOver to JSON.
         * @function toJSON
         * @memberof msg.BT_GameOver
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameOver.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameOver;
    })();

    msg.EntityBase = (function() {

        /**
         * Properties of an EntityBase.
         * @memberof msg
         * @interface IEntityBase
         * @property {number|Long|null} [id] EntityBase id
         * @property {string|null} [name] EntityBase name
         * @property {string|null} [face] EntityBase face
         * @property {number|null} [sex] EntityBase sex
         * @property {string|null} [account] EntityBase account
         */

        /**
         * Constructs a new EntityBase.
         * @memberof msg
         * @classdesc Represents an EntityBase.
         * @implements IEntityBase
         * @constructor
         * @param {msg.IEntityBase=} [properties] Properties to set
         */
        function EntityBase(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EntityBase id.
         * @member {number|Long} id
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * EntityBase name.
         * @member {string} name
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.name = "";

        /**
         * EntityBase face.
         * @member {string} face
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.face = "";

        /**
         * EntityBase sex.
         * @member {number} sex
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.sex = 0;

        /**
         * EntityBase account.
         * @member {string} account
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.account = "";

        /**
         * Creates a new EntityBase instance using the specified properties.
         * @function create
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase=} [properties] Properties to set
         * @returns {msg.EntityBase} EntityBase instance
         */
        EntityBase.create = function create(properties) {
            return new EntityBase(properties);
        };

        /**
         * Encodes the specified EntityBase message. Does not implicitly {@link msg.EntityBase.verify|verify} messages.
         * @function encode
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase} message EntityBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.face);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sex);
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.account);
            return writer;
        };

        /**
         * Encodes the specified EntityBase message, length delimited. Does not implicitly {@link msg.EntityBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase} message EntityBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EntityBase message from the specified reader or buffer.
         * @function decode
         * @memberof msg.EntityBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.EntityBase} EntityBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.EntityBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.face = reader.string();
                    break;
                case 4:
                    message.sex = reader.int32();
                    break;
                case 5:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EntityBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.EntityBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.EntityBase} EntityBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EntityBase message.
         * @function verify
         * @memberof msg.EntityBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EntityBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            return null;
        };

        /**
         * Creates an EntityBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.EntityBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.EntityBase} EntityBase
         */
        EntityBase.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.EntityBase)
                return object;
            var message = new $root.msg.EntityBase();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.face != null)
                message.face = String(object.face);
            if (object.sex != null)
                message.sex = object.sex | 0;
            if (object.account != null)
                message.account = String(object.account);
            return message;
        };

        /**
         * Creates a plain object from an EntityBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.EntityBase
         * @static
         * @param {msg.EntityBase} message EntityBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EntityBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.name = "";
                object.face = "";
                object.sex = 0;
                object.account = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            return object;
        };

        /**
         * Converts this EntityBase to JSON.
         * @function toJSON
         * @memberof msg.EntityBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EntityBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EntityBase;
    })();

    msg.SimpleCounter = (function() {

        /**
         * Properties of a SimpleCounter.
         * @memberof msg
         * @interface ISimpleCounter
         * @property {number|null} [freestep] SimpleCounter freestep
         * @property {number|Long|null} [givestep] SimpleCounter givestep
         * @property {number|Long|null} [moneyCost] SimpleCounter moneyCost
         * @property {number|Long|null} [moneyCostReset] SimpleCounter moneyCostReset
         */

        /**
         * Constructs a new SimpleCounter.
         * @memberof msg
         * @classdesc Represents a SimpleCounter.
         * @implements ISimpleCounter
         * @constructor
         * @param {msg.ISimpleCounter=} [properties] Properties to set
         */
        function SimpleCounter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SimpleCounter freestep.
         * @member {number} freestep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.freestep = 0;

        /**
         * SimpleCounter givestep.
         * @member {number|Long} givestep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.givestep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter moneyCost.
         * @member {number|Long} moneyCost
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.moneyCost = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter moneyCostReset.
         * @member {number|Long} moneyCostReset
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.moneyCostReset = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SimpleCounter instance using the specified properties.
         * @function create
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter=} [properties] Properties to set
         * @returns {msg.SimpleCounter} SimpleCounter instance
         */
        SimpleCounter.create = function create(properties) {
            return new SimpleCounter(properties);
        };

        /**
         * Encodes the specified SimpleCounter message. Does not implicitly {@link msg.SimpleCounter.verify|verify} messages.
         * @function encode
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter} message SimpleCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCounter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.freestep);
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.givestep);
            if (message.moneyCost != null && message.hasOwnProperty("moneyCost"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.moneyCost);
            if (message.moneyCostReset != null && message.hasOwnProperty("moneyCostReset"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.moneyCostReset);
            return writer;
        };

        /**
         * Encodes the specified SimpleCounter message, length delimited. Does not implicitly {@link msg.SimpleCounter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter} message SimpleCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCounter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SimpleCounter message from the specified reader or buffer.
         * @function decode
         * @memberof msg.SimpleCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.SimpleCounter} SimpleCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCounter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.SimpleCounter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.freestep = reader.int32();
                    break;
                case 2:
                    message.givestep = reader.int64();
                    break;
                case 3:
                    message.moneyCost = reader.int64();
                    break;
                case 4:
                    message.moneyCostReset = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SimpleCounter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.SimpleCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.SimpleCounter} SimpleCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCounter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SimpleCounter message.
         * @function verify
         * @memberof msg.SimpleCounter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SimpleCounter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                if (!$util.isInteger(message.freestep))
                    return "freestep: integer expected";
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                if (!$util.isInteger(message.givestep) && !(message.givestep && $util.isInteger(message.givestep.low) && $util.isInteger(message.givestep.high)))
                    return "givestep: integer|Long expected";
            if (message.moneyCost != null && message.hasOwnProperty("moneyCost"))
                if (!$util.isInteger(message.moneyCost) && !(message.moneyCost && $util.isInteger(message.moneyCost.low) && $util.isInteger(message.moneyCost.high)))
                    return "moneyCost: integer|Long expected";
            if (message.moneyCostReset != null && message.hasOwnProperty("moneyCostReset"))
                if (!$util.isInteger(message.moneyCostReset) && !(message.moneyCostReset && $util.isInteger(message.moneyCostReset.low) && $util.isInteger(message.moneyCostReset.high)))
                    return "moneyCostReset: integer|Long expected";
            return null;
        };

        /**
         * Creates a SimpleCounter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.SimpleCounter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.SimpleCounter} SimpleCounter
         */
        SimpleCounter.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.SimpleCounter)
                return object;
            var message = new $root.msg.SimpleCounter();
            if (object.freestep != null)
                message.freestep = object.freestep | 0;
            if (object.givestep != null)
                if ($util.Long)
                    (message.givestep = $util.Long.fromValue(object.givestep)).unsigned = false;
                else if (typeof object.givestep === "string")
                    message.givestep = parseInt(object.givestep, 10);
                else if (typeof object.givestep === "number")
                    message.givestep = object.givestep;
                else if (typeof object.givestep === "object")
                    message.givestep = new $util.LongBits(object.givestep.low >>> 0, object.givestep.high >>> 0).toNumber();
            if (object.moneyCost != null)
                if ($util.Long)
                    (message.moneyCost = $util.Long.fromValue(object.moneyCost)).unsigned = false;
                else if (typeof object.moneyCost === "string")
                    message.moneyCost = parseInt(object.moneyCost, 10);
                else if (typeof object.moneyCost === "number")
                    message.moneyCost = object.moneyCost;
                else if (typeof object.moneyCost === "object")
                    message.moneyCost = new $util.LongBits(object.moneyCost.low >>> 0, object.moneyCost.high >>> 0).toNumber();
            if (object.moneyCostReset != null)
                if ($util.Long)
                    (message.moneyCostReset = $util.Long.fromValue(object.moneyCostReset)).unsigned = false;
                else if (typeof object.moneyCostReset === "string")
                    message.moneyCostReset = parseInt(object.moneyCostReset, 10);
                else if (typeof object.moneyCostReset === "number")
                    message.moneyCostReset = object.moneyCostReset;
                else if (typeof object.moneyCostReset === "object")
                    message.moneyCostReset = new $util.LongBits(object.moneyCostReset.low >>> 0, object.moneyCostReset.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SimpleCounter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.SimpleCounter} message SimpleCounter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SimpleCounter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.freestep = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.givestep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.givestep = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.moneyCost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.moneyCost = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.moneyCostReset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.moneyCostReset = options.longs === String ? "0" : 0;
            }
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                object.freestep = message.freestep;
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                if (typeof message.givestep === "number")
                    object.givestep = options.longs === String ? String(message.givestep) : message.givestep;
                else
                    object.givestep = options.longs === String ? $util.Long.prototype.toString.call(message.givestep) : options.longs === Number ? new $util.LongBits(message.givestep.low >>> 0, message.givestep.high >>> 0).toNumber() : message.givestep;
            if (message.moneyCost != null && message.hasOwnProperty("moneyCost"))
                if (typeof message.moneyCost === "number")
                    object.moneyCost = options.longs === String ? String(message.moneyCost) : message.moneyCost;
                else
                    object.moneyCost = options.longs === String ? $util.Long.prototype.toString.call(message.moneyCost) : options.longs === Number ? new $util.LongBits(message.moneyCost.low >>> 0, message.moneyCost.high >>> 0).toNumber() : message.moneyCost;
            if (message.moneyCostReset != null && message.hasOwnProperty("moneyCostReset"))
                if (typeof message.moneyCostReset === "number")
                    object.moneyCostReset = options.longs === String ? String(message.moneyCostReset) : message.moneyCostReset;
                else
                    object.moneyCostReset = options.longs === String ? $util.Long.prototype.toString.call(message.moneyCostReset) : options.longs === Number ? new $util.LongBits(message.moneyCostReset.low >>> 0, message.moneyCostReset.high >>> 0).toNumber() : message.moneyCostReset;
            return object;
        };

        /**
         * Converts this SimpleCounter to JSON.
         * @function toJSON
         * @memberof msg.SimpleCounter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SimpleCounter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SimpleCounter;
    })();

    msg.FreePresentMoney = (function() {

        /**
         * Properties of a FreePresentMoney.
         * @memberof msg
         * @interface IFreePresentMoney
         * @property {number|null} [count] FreePresentMoney count
         * @property {number|Long|null} [tmrecord] FreePresentMoney tmrecord
         */

        /**
         * Constructs a new FreePresentMoney.
         * @memberof msg
         * @classdesc Represents a FreePresentMoney.
         * @implements IFreePresentMoney
         * @constructor
         * @param {msg.IFreePresentMoney=} [properties] Properties to set
         */
        function FreePresentMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FreePresentMoney count.
         * @member {number} count
         * @memberof msg.FreePresentMoney
         * @instance
         */
        FreePresentMoney.prototype.count = 0;

        /**
         * FreePresentMoney tmrecord.
         * @member {number|Long} tmrecord
         * @memberof msg.FreePresentMoney
         * @instance
         */
        FreePresentMoney.prototype.tmrecord = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new FreePresentMoney instance using the specified properties.
         * @function create
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney=} [properties] Properties to set
         * @returns {msg.FreePresentMoney} FreePresentMoney instance
         */
        FreePresentMoney.create = function create(properties) {
            return new FreePresentMoney(properties);
        };

        /**
         * Encodes the specified FreePresentMoney message. Does not implicitly {@link msg.FreePresentMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney} message FreePresentMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FreePresentMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.count);
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tmrecord);
            return writer;
        };

        /**
         * Encodes the specified FreePresentMoney message, length delimited. Does not implicitly {@link msg.FreePresentMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney} message FreePresentMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FreePresentMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FreePresentMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.FreePresentMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.FreePresentMoney} FreePresentMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FreePresentMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.FreePresentMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.count = reader.int32();
                    break;
                case 2:
                    message.tmrecord = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FreePresentMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.FreePresentMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.FreePresentMoney} FreePresentMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FreePresentMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FreePresentMoney message.
         * @function verify
         * @memberof msg.FreePresentMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FreePresentMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                if (!$util.isInteger(message.tmrecord) && !(message.tmrecord && $util.isInteger(message.tmrecord.low) && $util.isInteger(message.tmrecord.high)))
                    return "tmrecord: integer|Long expected";
            return null;
        };

        /**
         * Creates a FreePresentMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.FreePresentMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.FreePresentMoney} FreePresentMoney
         */
        FreePresentMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.FreePresentMoney)
                return object;
            var message = new $root.msg.FreePresentMoney();
            if (object.count != null)
                message.count = object.count | 0;
            if (object.tmrecord != null)
                if ($util.Long)
                    (message.tmrecord = $util.Long.fromValue(object.tmrecord)).unsigned = false;
                else if (typeof object.tmrecord === "string")
                    message.tmrecord = parseInt(object.tmrecord, 10);
                else if (typeof object.tmrecord === "number")
                    message.tmrecord = object.tmrecord;
                else if (typeof object.tmrecord === "object")
                    message.tmrecord = new $util.LongBits(object.tmrecord.low >>> 0, object.tmrecord.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a FreePresentMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.FreePresentMoney} message FreePresentMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FreePresentMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmrecord = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmrecord = options.longs === String ? "0" : 0;
            }
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                if (typeof message.tmrecord === "number")
                    object.tmrecord = options.longs === String ? String(message.tmrecord) : message.tmrecord;
                else
                    object.tmrecord = options.longs === String ? $util.Long.prototype.toString.call(message.tmrecord) : options.longs === Number ? new $util.LongBits(message.tmrecord.low >>> 0, message.tmrecord.high >>> 0).toNumber() : message.tmrecord;
            return object;
        };

        /**
         * Converts this FreePresentMoney to JSON.
         * @function toJSON
         * @memberof msg.FreePresentMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FreePresentMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FreePresentMoney;
    })();

    msg.UserWechat = (function() {

        /**
         * Properties of a UserWechat.
         * @memberof msg
         * @interface IUserWechat
         * @property {string|null} [openid] UserWechat openid
         */

        /**
         * Constructs a new UserWechat.
         * @memberof msg
         * @classdesc Represents a UserWechat.
         * @implements IUserWechat
         * @constructor
         * @param {msg.IUserWechat=} [properties] Properties to set
         */
        function UserWechat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserWechat openid.
         * @member {string} openid
         * @memberof msg.UserWechat
         * @instance
         */
        UserWechat.prototype.openid = "";

        /**
         * Creates a new UserWechat instance using the specified properties.
         * @function create
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat=} [properties] Properties to set
         * @returns {msg.UserWechat} UserWechat instance
         */
        UserWechat.create = function create(properties) {
            return new UserWechat(properties);
        };

        /**
         * Encodes the specified UserWechat message. Does not implicitly {@link msg.UserWechat.verify|verify} messages.
         * @function encode
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat} message UserWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserWechat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            return writer;
        };

        /**
         * Encodes the specified UserWechat message, length delimited. Does not implicitly {@link msg.UserWechat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat} message UserWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserWechat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserWechat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserWechat} UserWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserWechat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserWechat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserWechat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserWechat} UserWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserWechat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserWechat message.
         * @function verify
         * @memberof msg.UserWechat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserWechat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            return null;
        };

        /**
         * Creates a UserWechat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserWechat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserWechat} UserWechat
         */
        UserWechat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserWechat)
                return object;
            var message = new $root.msg.UserWechat();
            if (object.openid != null)
                message.openid = String(object.openid);
            return message;
        };

        /**
         * Creates a plain object from a UserWechat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserWechat
         * @static
         * @param {msg.UserWechat} message UserWechat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserWechat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.openid = "";
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            return object;
        };

        /**
         * Converts this UserWechat to JSON.
         * @function toJSON
         * @memberof msg.UserWechat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserWechat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserWechat;
    })();

    msg.UserTask = (function() {

        /**
         * Properties of a UserTask.
         * @memberof msg
         * @interface IUserTask
         * @property {Array.<msg.ITaskData>|null} [tasks] UserTask tasks
         */

        /**
         * Constructs a new UserTask.
         * @memberof msg
         * @classdesc Represents a UserTask.
         * @implements IUserTask
         * @constructor
         * @param {msg.IUserTask=} [properties] Properties to set
         */
        function UserTask(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserTask tasks.
         * @member {Array.<msg.ITaskData>} tasks
         * @memberof msg.UserTask
         * @instance
         */
        UserTask.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new UserTask instance using the specified properties.
         * @function create
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask=} [properties] Properties to set
         * @returns {msg.UserTask} UserTask instance
         */
        UserTask.create = function create(properties) {
            return new UserTask(properties);
        };

        /**
         * Encodes the specified UserTask message. Does not implicitly {@link msg.UserTask.verify|verify} messages.
         * @function encode
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask} message UserTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.msg.TaskData.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserTask message, length delimited. Does not implicitly {@link msg.UserTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask} message UserTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserTask message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserTask} UserTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.msg.TaskData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserTask} UserTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserTask message.
         * @function verify
         * @memberof msg.UserTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.msg.TaskData.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a UserTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserTask} UserTask
         */
        UserTask.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserTask)
                return object;
            var message = new $root.msg.UserTask();
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".msg.UserTask.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".msg.UserTask.tasks: object expected");
                    message.tasks[i] = $root.msg.TaskData.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a UserTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserTask
         * @static
         * @param {msg.UserTask} message UserTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.msg.TaskData.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this UserTask to JSON.
         * @function toJSON
         * @memberof msg.UserTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserTask;
    })();

    msg.TaskData = (function() {

        /**
         * Properties of a TaskData.
         * @memberof msg
         * @interface ITaskData
         * @property {number|null} [id] TaskData id
         * @property {number|null} [progress] TaskData progress
         * @property {number|null} [completed] TaskData completed
         */

        /**
         * Constructs a new TaskData.
         * @memberof msg
         * @classdesc Represents a TaskData.
         * @implements ITaskData
         * @constructor
         * @param {msg.ITaskData=} [properties] Properties to set
         */
        function TaskData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaskData id.
         * @member {number} id
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.id = 0;

        /**
         * TaskData progress.
         * @member {number} progress
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.progress = 0;

        /**
         * TaskData completed.
         * @member {number} completed
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.completed = 0;

        /**
         * Creates a new TaskData instance using the specified properties.
         * @function create
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData=} [properties] Properties to set
         * @returns {msg.TaskData} TaskData instance
         */
        TaskData.create = function create(properties) {
            return new TaskData(properties);
        };

        /**
         * Encodes the specified TaskData message. Does not implicitly {@link msg.TaskData.verify|verify} messages.
         * @function encode
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData} message TaskData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.progress != null && message.hasOwnProperty("progress"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
            if (message.completed != null && message.hasOwnProperty("completed"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.completed);
            return writer;
        };

        /**
         * Encodes the specified TaskData message, length delimited. Does not implicitly {@link msg.TaskData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData} message TaskData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TaskData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.progress = reader.int32();
                    break;
                case 3:
                    message.completed = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaskData message.
         * @function verify
         * @memberof msg.TaskData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaskData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (!$util.isInteger(message.progress))
                    return "progress: integer expected";
            if (message.completed != null && message.hasOwnProperty("completed"))
                if (!$util.isInteger(message.completed))
                    return "completed: integer expected";
            return null;
        };

        /**
         * Creates a TaskData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TaskData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TaskData} TaskData
         */
        TaskData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TaskData)
                return object;
            var message = new $root.msg.TaskData();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.progress != null)
                message.progress = object.progress | 0;
            if (object.completed != null)
                message.completed = object.completed | 0;
            return message;
        };

        /**
         * Creates a plain object from a TaskData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TaskData
         * @static
         * @param {msg.TaskData} message TaskData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaskData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.progress = 0;
                object.completed = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = message.progress;
            if (message.completed != null && message.hasOwnProperty("completed"))
                object.completed = message.completed;
            return object;
        };

        /**
         * Converts this TaskData to JSON.
         * @function toJSON
         * @memberof msg.TaskData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaskData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaskData;
    })();

    msg.LuckyDrawItem = (function() {

        /**
         * Properties of a LuckyDrawItem.
         * @memberof msg
         * @interface ILuckyDrawItem
         * @property {number|Long|null} [time] LuckyDrawItem time
         * @property {number|null} [item] LuckyDrawItem item
         * @property {number|null} [num] LuckyDrawItem num
         * @property {number|null} [worth] LuckyDrawItem worth
         */

        /**
         * Constructs a new LuckyDrawItem.
         * @memberof msg
         * @classdesc Represents a LuckyDrawItem.
         * @implements ILuckyDrawItem
         * @constructor
         * @param {msg.ILuckyDrawItem=} [properties] Properties to set
         */
        function LuckyDrawItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LuckyDrawItem time.
         * @member {number|Long} time
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * LuckyDrawItem item.
         * @member {number} item
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.item = 0;

        /**
         * LuckyDrawItem num.
         * @member {number} num
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.num = 0;

        /**
         * LuckyDrawItem worth.
         * @member {number} worth
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.worth = 0;

        /**
         * Creates a new LuckyDrawItem instance using the specified properties.
         * @function create
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.ILuckyDrawItem=} [properties] Properties to set
         * @returns {msg.LuckyDrawItem} LuckyDrawItem instance
         */
        LuckyDrawItem.create = function create(properties) {
            return new LuckyDrawItem(properties);
        };

        /**
         * Encodes the specified LuckyDrawItem message. Does not implicitly {@link msg.LuckyDrawItem.verify|verify} messages.
         * @function encode
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.ILuckyDrawItem} message LuckyDrawItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.item != null && message.hasOwnProperty("item"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.item);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
            if (message.worth != null && message.hasOwnProperty("worth"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.worth);
            return writer;
        };

        /**
         * Encodes the specified LuckyDrawItem message, length delimited. Does not implicitly {@link msg.LuckyDrawItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.ILuckyDrawItem} message LuckyDrawItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LuckyDrawItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.LuckyDrawItem} LuckyDrawItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.LuckyDrawItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.item = reader.int32();
                    break;
                case 3:
                    message.num = reader.int32();
                    break;
                case 4:
                    message.worth = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LuckyDrawItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.LuckyDrawItem} LuckyDrawItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LuckyDrawItem message.
         * @function verify
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LuckyDrawItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.item != null && message.hasOwnProperty("item"))
                if (!$util.isInteger(message.item))
                    return "item: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.worth != null && message.hasOwnProperty("worth"))
                if (!$util.isInteger(message.worth))
                    return "worth: integer expected";
            return null;
        };

        /**
         * Creates a LuckyDrawItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.LuckyDrawItem} LuckyDrawItem
         */
        LuckyDrawItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.LuckyDrawItem)
                return object;
            var message = new $root.msg.LuckyDrawItem();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.item != null)
                message.item = object.item | 0;
            if (object.num != null)
                message.num = object.num | 0;
            if (object.worth != null)
                message.worth = object.worth | 0;
            return message;
        };

        /**
         * Creates a plain object from a LuckyDrawItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.LuckyDrawItem} message LuckyDrawItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LuckyDrawItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                object.item = 0;
                object.num = 0;
                object.worth = 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = message.item;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.worth != null && message.hasOwnProperty("worth"))
                object.worth = message.worth;
            return object;
        };

        /**
         * Converts this LuckyDrawItem to JSON.
         * @function toJSON
         * @memberof msg.LuckyDrawItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LuckyDrawItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LuckyDrawItem;
    })();

    msg.LuckyDrawRecord = (function() {

        /**
         * Properties of a LuckyDrawRecord.
         * @memberof msg
         * @interface ILuckyDrawRecord
         * @property {Array.<msg.ILuckyDrawItem>|null} [drawlist] LuckyDrawRecord drawlist
         * @property {number|Long|null} [totalvalue] LuckyDrawRecord totalvalue
         */

        /**
         * Constructs a new LuckyDrawRecord.
         * @memberof msg
         * @classdesc Represents a LuckyDrawRecord.
         * @implements ILuckyDrawRecord
         * @constructor
         * @param {msg.ILuckyDrawRecord=} [properties] Properties to set
         */
        function LuckyDrawRecord(properties) {
            this.drawlist = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LuckyDrawRecord drawlist.
         * @member {Array.<msg.ILuckyDrawItem>} drawlist
         * @memberof msg.LuckyDrawRecord
         * @instance
         */
        LuckyDrawRecord.prototype.drawlist = $util.emptyArray;

        /**
         * LuckyDrawRecord totalvalue.
         * @member {number|Long} totalvalue
         * @memberof msg.LuckyDrawRecord
         * @instance
         */
        LuckyDrawRecord.prototype.totalvalue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new LuckyDrawRecord instance using the specified properties.
         * @function create
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.ILuckyDrawRecord=} [properties] Properties to set
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord instance
         */
        LuckyDrawRecord.create = function create(properties) {
            return new LuckyDrawRecord(properties);
        };

        /**
         * Encodes the specified LuckyDrawRecord message. Does not implicitly {@link msg.LuckyDrawRecord.verify|verify} messages.
         * @function encode
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.ILuckyDrawRecord} message LuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawRecord.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.drawlist != null && message.drawlist.length)
                for (var i = 0; i < message.drawlist.length; ++i)
                    $root.msg.LuckyDrawItem.encode(message.drawlist[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.totalvalue != null && message.hasOwnProperty("totalvalue"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.totalvalue);
            return writer;
        };

        /**
         * Encodes the specified LuckyDrawRecord message, length delimited. Does not implicitly {@link msg.LuckyDrawRecord.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.ILuckyDrawRecord} message LuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawRecord.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LuckyDrawRecord message from the specified reader or buffer.
         * @function decode
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawRecord.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.LuckyDrawRecord();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.drawlist && message.drawlist.length))
                        message.drawlist = [];
                    message.drawlist.push($root.msg.LuckyDrawItem.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.totalvalue = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LuckyDrawRecord message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawRecord.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LuckyDrawRecord message.
         * @function verify
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LuckyDrawRecord.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.drawlist != null && message.hasOwnProperty("drawlist")) {
                if (!Array.isArray(message.drawlist))
                    return "drawlist: array expected";
                for (var i = 0; i < message.drawlist.length; ++i) {
                    var error = $root.msg.LuckyDrawItem.verify(message.drawlist[i]);
                    if (error)
                        return "drawlist." + error;
                }
            }
            if (message.totalvalue != null && message.hasOwnProperty("totalvalue"))
                if (!$util.isInteger(message.totalvalue) && !(message.totalvalue && $util.isInteger(message.totalvalue.low) && $util.isInteger(message.totalvalue.high)))
                    return "totalvalue: integer|Long expected";
            return null;
        };

        /**
         * Creates a LuckyDrawRecord message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord
         */
        LuckyDrawRecord.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.LuckyDrawRecord)
                return object;
            var message = new $root.msg.LuckyDrawRecord();
            if (object.drawlist) {
                if (!Array.isArray(object.drawlist))
                    throw TypeError(".msg.LuckyDrawRecord.drawlist: array expected");
                message.drawlist = [];
                for (var i = 0; i < object.drawlist.length; ++i) {
                    if (typeof object.drawlist[i] !== "object")
                        throw TypeError(".msg.LuckyDrawRecord.drawlist: object expected");
                    message.drawlist[i] = $root.msg.LuckyDrawItem.fromObject(object.drawlist[i]);
                }
            }
            if (object.totalvalue != null)
                if ($util.Long)
                    (message.totalvalue = $util.Long.fromValue(object.totalvalue)).unsigned = false;
                else if (typeof object.totalvalue === "string")
                    message.totalvalue = parseInt(object.totalvalue, 10);
                else if (typeof object.totalvalue === "number")
                    message.totalvalue = object.totalvalue;
                else if (typeof object.totalvalue === "object")
                    message.totalvalue = new $util.LongBits(object.totalvalue.low >>> 0, object.totalvalue.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a LuckyDrawRecord message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.LuckyDrawRecord} message LuckyDrawRecord
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LuckyDrawRecord.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.drawlist = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.totalvalue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.totalvalue = options.longs === String ? "0" : 0;
            if (message.drawlist && message.drawlist.length) {
                object.drawlist = [];
                for (var j = 0; j < message.drawlist.length; ++j)
                    object.drawlist[j] = $root.msg.LuckyDrawItem.toObject(message.drawlist[j], options);
            }
            if (message.totalvalue != null && message.hasOwnProperty("totalvalue"))
                if (typeof message.totalvalue === "number")
                    object.totalvalue = options.longs === String ? String(message.totalvalue) : message.totalvalue;
                else
                    object.totalvalue = options.longs === String ? $util.Long.prototype.toString.call(message.totalvalue) : options.longs === Number ? new $util.LongBits(message.totalvalue.low >>> 0, message.totalvalue.high >>> 0).toNumber() : message.totalvalue;
            return object;
        };

        /**
         * Converts this LuckyDrawRecord to JSON.
         * @function toJSON
         * @memberof msg.LuckyDrawRecord
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LuckyDrawRecord.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LuckyDrawRecord;
    })();

    msg.MapEvent = (function() {

        /**
         * Properties of a MapEvent.
         * @memberof msg
         * @interface IMapEvent
         * @property {number|Long|null} [id] MapEvent id
         * @property {number|null} [tid] MapEvent tid
         * @property {number|null} [longitude] MapEvent longitude
         * @property {number|null} [latitude] MapEvent latitude
         */

        /**
         * Constructs a new MapEvent.
         * @memberof msg
         * @classdesc Represents a MapEvent.
         * @implements IMapEvent
         * @constructor
         * @param {msg.IMapEvent=} [properties] Properties to set
         */
        function MapEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapEvent id.
         * @member {number|Long} id
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MapEvent tid.
         * @member {number} tid
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.tid = 0;

        /**
         * MapEvent longitude.
         * @member {number} longitude
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.longitude = 0;

        /**
         * MapEvent latitude.
         * @member {number} latitude
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.latitude = 0;

        /**
         * Creates a new MapEvent instance using the specified properties.
         * @function create
         * @memberof msg.MapEvent
         * @static
         * @param {msg.IMapEvent=} [properties] Properties to set
         * @returns {msg.MapEvent} MapEvent instance
         */
        MapEvent.create = function create(properties) {
            return new MapEvent(properties);
        };

        /**
         * Encodes the specified MapEvent message. Does not implicitly {@link msg.MapEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.MapEvent
         * @static
         * @param {msg.IMapEvent} message MapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.tid);
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.longitude);
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.latitude);
            return writer;
        };

        /**
         * Encodes the specified MapEvent message, length delimited. Does not implicitly {@link msg.MapEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MapEvent
         * @static
         * @param {msg.IMapEvent} message MapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MapEvent} MapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MapEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int64();
                    break;
                case 2:
                    message.tid = reader.int32();
                    break;
                case 3:
                    message.longitude = reader.int32();
                    break;
                case 4:
                    message.latitude = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MapEvent} MapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapEvent message.
         * @function verify
         * @memberof msg.MapEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                if (!$util.isInteger(message.longitude))
                    return "longitude: integer expected";
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                if (!$util.isInteger(message.latitude))
                    return "latitude: integer expected";
            return null;
        };

        /**
         * Creates a MapEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MapEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MapEvent} MapEvent
         */
        MapEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MapEvent)
                return object;
            var message = new $root.msg.MapEvent();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
            if (object.tid != null)
                message.tid = object.tid | 0;
            if (object.longitude != null)
                message.longitude = object.longitude | 0;
            if (object.latitude != null)
                message.latitude = object.latitude | 0;
            return message;
        };

        /**
         * Creates a plain object from a MapEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MapEvent
         * @static
         * @param {msg.MapEvent} message MapEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.tid = 0;
                object.longitude = 0;
                object.latitude = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                object.longitude = message.longitude;
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                object.latitude = message.latitude;
            return object;
        };

        /**
         * Converts this MapEvent to JSON.
         * @function toJSON
         * @memberof msg.MapEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapEvent;
    })();

    msg.UserMapEvent = (function() {

        /**
         * Properties of a UserMapEvent.
         * @memberof msg
         * @interface IUserMapEvent
         * @property {Array.<msg.IMapEvent>|null} [events] UserMapEvent events
         * @property {number|Long|null} [tmrefresh] UserMapEvent tmrefresh
         */

        /**
         * Constructs a new UserMapEvent.
         * @memberof msg
         * @classdesc Represents a UserMapEvent.
         * @implements IUserMapEvent
         * @constructor
         * @param {msg.IUserMapEvent=} [properties] Properties to set
         */
        function UserMapEvent(properties) {
            this.events = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserMapEvent events.
         * @member {Array.<msg.IMapEvent>} events
         * @memberof msg.UserMapEvent
         * @instance
         */
        UserMapEvent.prototype.events = $util.emptyArray;

        /**
         * UserMapEvent tmrefresh.
         * @member {number|Long} tmrefresh
         * @memberof msg.UserMapEvent
         * @instance
         */
        UserMapEvent.prototype.tmrefresh = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new UserMapEvent instance using the specified properties.
         * @function create
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.IUserMapEvent=} [properties] Properties to set
         * @returns {msg.UserMapEvent} UserMapEvent instance
         */
        UserMapEvent.create = function create(properties) {
            return new UserMapEvent(properties);
        };

        /**
         * Encodes the specified UserMapEvent message. Does not implicitly {@link msg.UserMapEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.IUserMapEvent} message UserMapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserMapEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.events != null && message.events.length)
                for (var i = 0; i < message.events.length; ++i)
                    $root.msg.MapEvent.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.tmrefresh != null && message.hasOwnProperty("tmrefresh"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tmrefresh);
            return writer;
        };

        /**
         * Encodes the specified UserMapEvent message, length delimited. Does not implicitly {@link msg.UserMapEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.IUserMapEvent} message UserMapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserMapEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserMapEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserMapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserMapEvent} UserMapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserMapEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserMapEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.events && message.events.length))
                        message.events = [];
                    message.events.push($root.msg.MapEvent.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.tmrefresh = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserMapEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserMapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserMapEvent} UserMapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserMapEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserMapEvent message.
         * @function verify
         * @memberof msg.UserMapEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserMapEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.events != null && message.hasOwnProperty("events")) {
                if (!Array.isArray(message.events))
                    return "events: array expected";
                for (var i = 0; i < message.events.length; ++i) {
                    var error = $root.msg.MapEvent.verify(message.events[i]);
                    if (error)
                        return "events." + error;
                }
            }
            if (message.tmrefresh != null && message.hasOwnProperty("tmrefresh"))
                if (!$util.isInteger(message.tmrefresh) && !(message.tmrefresh && $util.isInteger(message.tmrefresh.low) && $util.isInteger(message.tmrefresh.high)))
                    return "tmrefresh: integer|Long expected";
            return null;
        };

        /**
         * Creates a UserMapEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserMapEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserMapEvent} UserMapEvent
         */
        UserMapEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserMapEvent)
                return object;
            var message = new $root.msg.UserMapEvent();
            if (object.events) {
                if (!Array.isArray(object.events))
                    throw TypeError(".msg.UserMapEvent.events: array expected");
                message.events = [];
                for (var i = 0; i < object.events.length; ++i) {
                    if (typeof object.events[i] !== "object")
                        throw TypeError(".msg.UserMapEvent.events: object expected");
                    message.events[i] = $root.msg.MapEvent.fromObject(object.events[i]);
                }
            }
            if (object.tmrefresh != null)
                if ($util.Long)
                    (message.tmrefresh = $util.Long.fromValue(object.tmrefresh)).unsigned = false;
                else if (typeof object.tmrefresh === "string")
                    message.tmrefresh = parseInt(object.tmrefresh, 10);
                else if (typeof object.tmrefresh === "number")
                    message.tmrefresh = object.tmrefresh;
                else if (typeof object.tmrefresh === "object")
                    message.tmrefresh = new $util.LongBits(object.tmrefresh.low >>> 0, object.tmrefresh.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a UserMapEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.UserMapEvent} message UserMapEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserMapEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.events = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmrefresh = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmrefresh = options.longs === String ? "0" : 0;
            if (message.events && message.events.length) {
                object.events = [];
                for (var j = 0; j < message.events.length; ++j)
                    object.events[j] = $root.msg.MapEvent.toObject(message.events[j], options);
            }
            if (message.tmrefresh != null && message.hasOwnProperty("tmrefresh"))
                if (typeof message.tmrefresh === "number")
                    object.tmrefresh = options.longs === String ? String(message.tmrefresh) : message.tmrefresh;
                else
                    object.tmrefresh = options.longs === String ? $util.Long.prototype.toString.call(message.tmrefresh) : options.longs === Number ? new $util.LongBits(message.tmrefresh.low >>> 0, message.tmrefresh.high >>> 0).toNumber() : message.tmrefresh;
            return object;
        };

        /**
         * Converts this UserMapEvent to JSON.
         * @function toJSON
         * @memberof msg.UserMapEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserMapEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserMapEvent;
    })();

    msg.UserBase = (function() {

        /**
         * Properties of a UserBase.
         * @memberof msg
         * @interface IUserBase
         * @property {number|null} [level] UserBase level
         * @property {number|null} [exp] UserBase exp
         * @property {number|null} [gold] UserBase gold
         * @property {number|null} [diamond] UserBase diamond
         * @property {number|null} [yuanbao] UserBase yuanbao
         * @property {number|Long|null} [tmlogin] UserBase tmlogin
         * @property {number|Long|null} [tmlogout] UserBase tmlogout
         * @property {number|null} [continuelogin] UserBase continuelogin
         * @property {number|null} [nocountlogin] UserBase nocountlogin
         * @property {number|null} [signreward] UserBase signreward
         * @property {number|null} [signtime] UserBase signtime
         * @property {Array.<msg.IUserAddress>|null} [addrlist] UserBase addrlist
         * @property {msg.ISimpleCounter|null} [scounter] UserBase scounter
         * @property {msg.IUserWechat|null} [wechat] UserBase wechat
         * @property {string|null} [invitationcode] UserBase invitationcode
         * @property {msg.IUserTask|null} [task] UserBase task
         * @property {msg.ILuckyDrawRecord|null} [luckydraw] UserBase luckydraw
         * @property {number|null} [totalRecharge] UserBase totalRecharge
         * @property {msg.IUserMapEvent|null} [mapevent] UserBase mapevent
         */

        /**
         * Constructs a new UserBase.
         * @memberof msg
         * @classdesc Represents a UserBase.
         * @implements IUserBase
         * @constructor
         * @param {msg.IUserBase=} [properties] Properties to set
         */
        function UserBase(properties) {
            this.addrlist = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserBase level.
         * @member {number} level
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.level = 0;

        /**
         * UserBase exp.
         * @member {number} exp
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.exp = 0;

        /**
         * UserBase gold.
         * @member {number} gold
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.gold = 0;

        /**
         * UserBase diamond.
         * @member {number} diamond
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.diamond = 0;

        /**
         * UserBase yuanbao.
         * @member {number} yuanbao
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.yuanbao = 0;

        /**
         * UserBase tmlogin.
         * @member {number|Long} tmlogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmlogin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase tmlogout.
         * @member {number|Long} tmlogout
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmlogout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase continuelogin.
         * @member {number} continuelogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.continuelogin = 0;

        /**
         * UserBase nocountlogin.
         * @member {number} nocountlogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.nocountlogin = 0;

        /**
         * UserBase signreward.
         * @member {number} signreward
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.signreward = 0;

        /**
         * UserBase signtime.
         * @member {number} signtime
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.signtime = 0;

        /**
         * UserBase addrlist.
         * @member {Array.<msg.IUserAddress>} addrlist
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.addrlist = $util.emptyArray;

        /**
         * UserBase scounter.
         * @member {msg.ISimpleCounter|null|undefined} scounter
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.scounter = null;

        /**
         * UserBase wechat.
         * @member {msg.IUserWechat|null|undefined} wechat
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.wechat = null;

        /**
         * UserBase invitationcode.
         * @member {string} invitationcode
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.invitationcode = "";

        /**
         * UserBase task.
         * @member {msg.IUserTask|null|undefined} task
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.task = null;

        /**
         * UserBase luckydraw.
         * @member {msg.ILuckyDrawRecord|null|undefined} luckydraw
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.luckydraw = null;

        /**
         * UserBase totalRecharge.
         * @member {number} totalRecharge
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.totalRecharge = 0;

        /**
         * UserBase mapevent.
         * @member {msg.IUserMapEvent|null|undefined} mapevent
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.mapevent = null;

        /**
         * Creates a new UserBase instance using the specified properties.
         * @function create
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase=} [properties] Properties to set
         * @returns {msg.UserBase} UserBase instance
         */
        UserBase.create = function create(properties) {
            return new UserBase(properties);
        };

        /**
         * Encodes the specified UserBase message. Does not implicitly {@link msg.UserBase.verify|verify} messages.
         * @function encode
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase} message UserBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
            if (message.exp != null && message.hasOwnProperty("exp"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.exp);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gold);
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.diamond);
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.yuanbao);
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.tmlogin);
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.tmlogout);
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.continuelogin);
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.nocountlogin);
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.signreward);
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.signtime);
            if (message.addrlist != null && message.addrlist.length)
                for (var i = 0; i < message.addrlist.length; ++i)
                    $root.msg.UserAddress.encode(message.addrlist[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.scounter != null && message.hasOwnProperty("scounter"))
                $root.msg.SimpleCounter.encode(message.scounter, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.wechat != null && message.hasOwnProperty("wechat"))
                $root.msg.UserWechat.encode(message.wechat, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.invitationcode);
            if (message.task != null && message.hasOwnProperty("task"))
                $root.msg.UserTask.encode(message.task, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                $root.msg.LuckyDrawRecord.encode(message.luckydraw, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.totalRecharge != null && message.hasOwnProperty("totalRecharge"))
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.totalRecharge);
            if (message.mapevent != null && message.hasOwnProperty("mapevent"))
                $root.msg.UserMapEvent.encode(message.mapevent, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserBase message, length delimited. Does not implicitly {@link msg.UserBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase} message UserBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserBase message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserBase} UserBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.level = reader.int32();
                    break;
                case 2:
                    message.exp = reader.int32();
                    break;
                case 3:
                    message.gold = reader.int32();
                    break;
                case 4:
                    message.diamond = reader.int32();
                    break;
                case 5:
                    message.yuanbao = reader.int32();
                    break;
                case 6:
                    message.tmlogin = reader.int64();
                    break;
                case 7:
                    message.tmlogout = reader.int64();
                    break;
                case 8:
                    message.continuelogin = reader.int32();
                    break;
                case 9:
                    message.nocountlogin = reader.int32();
                    break;
                case 10:
                    message.signreward = reader.int32();
                    break;
                case 11:
                    message.signtime = reader.int32();
                    break;
                case 12:
                    if (!(message.addrlist && message.addrlist.length))
                        message.addrlist = [];
                    message.addrlist.push($root.msg.UserAddress.decode(reader, reader.uint32()));
                    break;
                case 13:
                    message.scounter = $root.msg.SimpleCounter.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.wechat = $root.msg.UserWechat.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.invitationcode = reader.string();
                    break;
                case 17:
                    message.task = $root.msg.UserTask.decode(reader, reader.uint32());
                    break;
                case 18:
                    message.luckydraw = $root.msg.LuckyDrawRecord.decode(reader, reader.uint32());
                    break;
                case 19:
                    message.totalRecharge = reader.int32();
                    break;
                case 27:
                    message.mapevent = $root.msg.UserMapEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserBase} UserBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserBase message.
         * @function verify
         * @memberof msg.UserBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.exp != null && message.hasOwnProperty("exp"))
                if (!$util.isInteger(message.exp))
                    return "exp: integer expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                if (!$util.isInteger(message.diamond))
                    return "diamond: integer expected";
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                if (!$util.isInteger(message.yuanbao))
                    return "yuanbao: integer expected";
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                if (!$util.isInteger(message.tmlogin) && !(message.tmlogin && $util.isInteger(message.tmlogin.low) && $util.isInteger(message.tmlogin.high)))
                    return "tmlogin: integer|Long expected";
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                if (!$util.isInteger(message.tmlogout) && !(message.tmlogout && $util.isInteger(message.tmlogout.low) && $util.isInteger(message.tmlogout.high)))
                    return "tmlogout: integer|Long expected";
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                if (!$util.isInteger(message.continuelogin))
                    return "continuelogin: integer expected";
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                if (!$util.isInteger(message.nocountlogin))
                    return "nocountlogin: integer expected";
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                if (!$util.isInteger(message.signreward))
                    return "signreward: integer expected";
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                if (!$util.isInteger(message.signtime))
                    return "signtime: integer expected";
            if (message.addrlist != null && message.hasOwnProperty("addrlist")) {
                if (!Array.isArray(message.addrlist))
                    return "addrlist: array expected";
                for (var i = 0; i < message.addrlist.length; ++i) {
                    var error = $root.msg.UserAddress.verify(message.addrlist[i]);
                    if (error)
                        return "addrlist." + error;
                }
            }
            if (message.scounter != null && message.hasOwnProperty("scounter")) {
                var error = $root.msg.SimpleCounter.verify(message.scounter);
                if (error)
                    return "scounter." + error;
            }
            if (message.wechat != null && message.hasOwnProperty("wechat")) {
                var error = $root.msg.UserWechat.verify(message.wechat);
                if (error)
                    return "wechat." + error;
            }
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            if (message.task != null && message.hasOwnProperty("task")) {
                var error = $root.msg.UserTask.verify(message.task);
                if (error)
                    return "task." + error;
            }
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw")) {
                var error = $root.msg.LuckyDrawRecord.verify(message.luckydraw);
                if (error)
                    return "luckydraw." + error;
            }
            if (message.totalRecharge != null && message.hasOwnProperty("totalRecharge"))
                if (!$util.isInteger(message.totalRecharge))
                    return "totalRecharge: integer expected";
            if (message.mapevent != null && message.hasOwnProperty("mapevent")) {
                var error = $root.msg.UserMapEvent.verify(message.mapevent);
                if (error)
                    return "mapevent." + error;
            }
            return null;
        };

        /**
         * Creates a UserBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserBase} UserBase
         */
        UserBase.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserBase)
                return object;
            var message = new $root.msg.UserBase();
            if (object.level != null)
                message.level = object.level | 0;
            if (object.exp != null)
                message.exp = object.exp | 0;
            if (object.gold != null)
                message.gold = object.gold | 0;
            if (object.diamond != null)
                message.diamond = object.diamond | 0;
            if (object.yuanbao != null)
                message.yuanbao = object.yuanbao | 0;
            if (object.tmlogin != null)
                if ($util.Long)
                    (message.tmlogin = $util.Long.fromValue(object.tmlogin)).unsigned = false;
                else if (typeof object.tmlogin === "string")
                    message.tmlogin = parseInt(object.tmlogin, 10);
                else if (typeof object.tmlogin === "number")
                    message.tmlogin = object.tmlogin;
                else if (typeof object.tmlogin === "object")
                    message.tmlogin = new $util.LongBits(object.tmlogin.low >>> 0, object.tmlogin.high >>> 0).toNumber();
            if (object.tmlogout != null)
                if ($util.Long)
                    (message.tmlogout = $util.Long.fromValue(object.tmlogout)).unsigned = false;
                else if (typeof object.tmlogout === "string")
                    message.tmlogout = parseInt(object.tmlogout, 10);
                else if (typeof object.tmlogout === "number")
                    message.tmlogout = object.tmlogout;
                else if (typeof object.tmlogout === "object")
                    message.tmlogout = new $util.LongBits(object.tmlogout.low >>> 0, object.tmlogout.high >>> 0).toNumber();
            if (object.continuelogin != null)
                message.continuelogin = object.continuelogin | 0;
            if (object.nocountlogin != null)
                message.nocountlogin = object.nocountlogin | 0;
            if (object.signreward != null)
                message.signreward = object.signreward | 0;
            if (object.signtime != null)
                message.signtime = object.signtime | 0;
            if (object.addrlist) {
                if (!Array.isArray(object.addrlist))
                    throw TypeError(".msg.UserBase.addrlist: array expected");
                message.addrlist = [];
                for (var i = 0; i < object.addrlist.length; ++i) {
                    if (typeof object.addrlist[i] !== "object")
                        throw TypeError(".msg.UserBase.addrlist: object expected");
                    message.addrlist[i] = $root.msg.UserAddress.fromObject(object.addrlist[i]);
                }
            }
            if (object.scounter != null) {
                if (typeof object.scounter !== "object")
                    throw TypeError(".msg.UserBase.scounter: object expected");
                message.scounter = $root.msg.SimpleCounter.fromObject(object.scounter);
            }
            if (object.wechat != null) {
                if (typeof object.wechat !== "object")
                    throw TypeError(".msg.UserBase.wechat: object expected");
                message.wechat = $root.msg.UserWechat.fromObject(object.wechat);
            }
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            if (object.task != null) {
                if (typeof object.task !== "object")
                    throw TypeError(".msg.UserBase.task: object expected");
                message.task = $root.msg.UserTask.fromObject(object.task);
            }
            if (object.luckydraw != null) {
                if (typeof object.luckydraw !== "object")
                    throw TypeError(".msg.UserBase.luckydraw: object expected");
                message.luckydraw = $root.msg.LuckyDrawRecord.fromObject(object.luckydraw);
            }
            if (object.totalRecharge != null)
                message.totalRecharge = object.totalRecharge | 0;
            if (object.mapevent != null) {
                if (typeof object.mapevent !== "object")
                    throw TypeError(".msg.UserBase.mapevent: object expected");
                message.mapevent = $root.msg.UserMapEvent.fromObject(object.mapevent);
            }
            return message;
        };

        /**
         * Creates a plain object from a UserBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserBase
         * @static
         * @param {msg.UserBase} message UserBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.addrlist = [];
            if (options.defaults) {
                object.level = 0;
                object.exp = 0;
                object.gold = 0;
                object.diamond = 0;
                object.yuanbao = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmlogin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmlogin = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmlogout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmlogout = options.longs === String ? "0" : 0;
                object.continuelogin = 0;
                object.nocountlogin = 0;
                object.signreward = 0;
                object.signtime = 0;
                object.scounter = null;
                object.wechat = null;
                object.invitationcode = "";
                object.task = null;
                object.luckydraw = null;
                object.totalRecharge = 0;
                object.mapevent = null;
            }
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.exp != null && message.hasOwnProperty("exp"))
                object.exp = message.exp;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                object.diamond = message.diamond;
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                object.yuanbao = message.yuanbao;
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                if (typeof message.tmlogin === "number")
                    object.tmlogin = options.longs === String ? String(message.tmlogin) : message.tmlogin;
                else
                    object.tmlogin = options.longs === String ? $util.Long.prototype.toString.call(message.tmlogin) : options.longs === Number ? new $util.LongBits(message.tmlogin.low >>> 0, message.tmlogin.high >>> 0).toNumber() : message.tmlogin;
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                if (typeof message.tmlogout === "number")
                    object.tmlogout = options.longs === String ? String(message.tmlogout) : message.tmlogout;
                else
                    object.tmlogout = options.longs === String ? $util.Long.prototype.toString.call(message.tmlogout) : options.longs === Number ? new $util.LongBits(message.tmlogout.low >>> 0, message.tmlogout.high >>> 0).toNumber() : message.tmlogout;
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                object.continuelogin = message.continuelogin;
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                object.nocountlogin = message.nocountlogin;
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                object.signreward = message.signreward;
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                object.signtime = message.signtime;
            if (message.addrlist && message.addrlist.length) {
                object.addrlist = [];
                for (var j = 0; j < message.addrlist.length; ++j)
                    object.addrlist[j] = $root.msg.UserAddress.toObject(message.addrlist[j], options);
            }
            if (message.scounter != null && message.hasOwnProperty("scounter"))
                object.scounter = $root.msg.SimpleCounter.toObject(message.scounter, options);
            if (message.wechat != null && message.hasOwnProperty("wechat"))
                object.wechat = $root.msg.UserWechat.toObject(message.wechat, options);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            if (message.task != null && message.hasOwnProperty("task"))
                object.task = $root.msg.UserTask.toObject(message.task, options);
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                object.luckydraw = $root.msg.LuckyDrawRecord.toObject(message.luckydraw, options);
            if (message.totalRecharge != null && message.hasOwnProperty("totalRecharge"))
                object.totalRecharge = message.totalRecharge;
            if (message.mapevent != null && message.hasOwnProperty("mapevent"))
                object.mapevent = $root.msg.UserMapEvent.toObject(message.mapevent, options);
            return object;
        };

        /**
         * Converts this UserBase to JSON.
         * @function toJSON
         * @memberof msg.UserBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserBase;
    })();

    msg.UserAddress = (function() {

        /**
         * Properties of a UserAddress.
         * @memberof msg
         * @interface IUserAddress
         * @property {string|null} [receiver] UserAddress receiver
         * @property {string|null} [phone] UserAddress phone
         * @property {string|null} [address] UserAddress address
         */

        /**
         * Constructs a new UserAddress.
         * @memberof msg
         * @classdesc Represents a UserAddress.
         * @implements IUserAddress
         * @constructor
         * @param {msg.IUserAddress=} [properties] Properties to set
         */
        function UserAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserAddress receiver.
         * @member {string} receiver
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.receiver = "";

        /**
         * UserAddress phone.
         * @member {string} phone
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.phone = "";

        /**
         * UserAddress address.
         * @member {string} address
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.address = "";

        /**
         * Creates a new UserAddress instance using the specified properties.
         * @function create
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress=} [properties] Properties to set
         * @returns {msg.UserAddress} UserAddress instance
         */
        UserAddress.create = function create(properties) {
            return new UserAddress(properties);
        };

        /**
         * Encodes the specified UserAddress message. Does not implicitly {@link msg.UserAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress} message UserAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.receiver);
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.phone);
            if (message.address != null && message.hasOwnProperty("address"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.address);
            return writer;
        };

        /**
         * Encodes the specified UserAddress message, length delimited. Does not implicitly {@link msg.UserAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress} message UserAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserAddress} UserAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.receiver = reader.string();
                    break;
                case 2:
                    message.phone = reader.string();
                    break;
                case 3:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserAddress} UserAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserAddress message.
         * @function verify
         * @memberof msg.UserAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                if (!$util.isString(message.receiver))
                    return "receiver: string expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            if (message.address != null && message.hasOwnProperty("address"))
                if (!$util.isString(message.address))
                    return "address: string expected";
            return null;
        };

        /**
         * Creates a UserAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserAddress} UserAddress
         */
        UserAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserAddress)
                return object;
            var message = new $root.msg.UserAddress();
            if (object.receiver != null)
                message.receiver = String(object.receiver);
            if (object.phone != null)
                message.phone = String(object.phone);
            if (object.address != null)
                message.address = String(object.address);
            return message;
        };

        /**
         * Creates a plain object from a UserAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserAddress
         * @static
         * @param {msg.UserAddress} message UserAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.receiver = "";
                object.phone = "";
                object.address = "";
            }
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                object.receiver = message.receiver;
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            if (message.address != null && message.hasOwnProperty("address"))
                object.address = message.address;
            return object;
        };

        /**
         * Converts this UserAddress to JSON.
         * @function toJSON
         * @memberof msg.UserAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserAddress;
    })();

    msg.ItemData = (function() {

        /**
         * Properties of an ItemData.
         * @memberof msg
         * @interface IItemData
         * @property {number|null} [id] ItemData id
         * @property {number|null} [num] ItemData num
         * @property {number|null} [pos] ItemData pos
         */

        /**
         * Constructs a new ItemData.
         * @memberof msg
         * @classdesc Represents an ItemData.
         * @implements IItemData
         * @constructor
         * @param {msg.IItemData=} [properties] Properties to set
         */
        function ItemData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemData id.
         * @member {number} id
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.id = 0;

        /**
         * ItemData num.
         * @member {number} num
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.num = 0;

        /**
         * ItemData pos.
         * @member {number} pos
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.pos = 0;

        /**
         * Creates a new ItemData instance using the specified properties.
         * @function create
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData=} [properties] Properties to set
         * @returns {msg.ItemData} ItemData instance
         */
        ItemData.create = function create(properties) {
            return new ItemData(properties);
        };

        /**
         * Encodes the specified ItemData message. Does not implicitly {@link msg.ItemData.verify|verify} messages.
         * @function encode
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData} message ItemData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            if (message.pos != null && message.hasOwnProperty("pos"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
            return writer;
        };

        /**
         * Encodes the specified ItemData message, length delimited. Does not implicitly {@link msg.ItemData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData} message ItemData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ItemData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                case 3:
                    message.pos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemData message.
         * @function verify
         * @memberof msg.ItemData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            return null;
        };

        /**
         * Creates an ItemData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ItemData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ItemData} ItemData
         */
        ItemData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ItemData)
                return object;
            var message = new $root.msg.ItemData();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.num != null)
                message.num = object.num | 0;
            if (object.pos != null)
                message.pos = object.pos | 0;
            return message;
        };

        /**
         * Creates a plain object from an ItemData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ItemData
         * @static
         * @param {msg.ItemData} message ItemData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.num = 0;
                object.pos = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            return object;
        };

        /**
         * Converts this ItemData to JSON.
         * @function toJSON
         * @memberof msg.ItemData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemData;
    })();

    msg.ItemBin = (function() {

        /**
         * Properties of an ItemBin.
         * @memberof msg
         * @interface IItemBin
         * @property {Array.<msg.IItemData>|null} [items] ItemBin items
         */

        /**
         * Constructs a new ItemBin.
         * @memberof msg
         * @classdesc Represents an ItemBin.
         * @implements IItemBin
         * @constructor
         * @param {msg.IItemBin=} [properties] Properties to set
         */
        function ItemBin(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBin items.
         * @member {Array.<msg.IItemData>} items
         * @memberof msg.ItemBin
         * @instance
         */
        ItemBin.prototype.items = $util.emptyArray;

        /**
         * Creates a new ItemBin instance using the specified properties.
         * @function create
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin=} [properties] Properties to set
         * @returns {msg.ItemBin} ItemBin instance
         */
        ItemBin.create = function create(properties) {
            return new ItemBin(properties);
        };

        /**
         * Encodes the specified ItemBin message. Does not implicitly {@link msg.ItemBin.verify|verify} messages.
         * @function encode
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin} message ItemBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.ItemData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ItemBin message, length delimited. Does not implicitly {@link msg.ItemBin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin} message ItemBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ItemBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ItemBin} ItemBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ItemBin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ItemBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ItemBin} ItemBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBin message.
         * @function verify
         * @memberof msg.ItemBin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ItemBin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ItemBin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ItemBin} ItemBin
         */
        ItemBin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ItemBin)
                return object;
            var message = new $root.msg.ItemBin();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.ItemBin.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.ItemBin.items: object expected");
                    message.items[i] = $root.msg.ItemData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ItemBin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ItemBin
         * @static
         * @param {msg.ItemBin} message ItemBin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.ItemData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this ItemBin to JSON.
         * @function toJSON
         * @memberof msg.ItemBin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBin;
    })();

    msg.Serialize = (function() {

        /**
         * Properties of a Serialize.
         * @memberof msg
         * @interface ISerialize
         * @property {msg.IEntityBase|null} [entity] Serialize entity
         * @property {msg.IUserBase|null} [base] Serialize base
         * @property {msg.IItemBin|null} [item] Serialize item
         */

        /**
         * Constructs a new Serialize.
         * @memberof msg
         * @classdesc Represents a Serialize.
         * @implements ISerialize
         * @constructor
         * @param {msg.ISerialize=} [properties] Properties to set
         */
        function Serialize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Serialize entity.
         * @member {msg.IEntityBase|null|undefined} entity
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.entity = null;

        /**
         * Serialize base.
         * @member {msg.IUserBase|null|undefined} base
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.base = null;

        /**
         * Serialize item.
         * @member {msg.IItemBin|null|undefined} item
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.item = null;

        /**
         * Creates a new Serialize instance using the specified properties.
         * @function create
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize=} [properties] Properties to set
         * @returns {msg.Serialize} Serialize instance
         */
        Serialize.create = function create(properties) {
            return new Serialize(properties);
        };

        /**
         * Encodes the specified Serialize message. Does not implicitly {@link msg.Serialize.verify|verify} messages.
         * @function encode
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize} message Serialize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Serialize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && message.hasOwnProperty("entity"))
                $root.msg.EntityBase.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.base != null && message.hasOwnProperty("base"))
                $root.msg.UserBase.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.ItemBin.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Serialize message, length delimited. Does not implicitly {@link msg.Serialize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize} message Serialize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Serialize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Serialize message from the specified reader or buffer.
         * @function decode
         * @memberof msg.Serialize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.Serialize} Serialize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Serialize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.Serialize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.msg.EntityBase.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.base = $root.msg.UserBase.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.item = $root.msg.ItemBin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Serialize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.Serialize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.Serialize} Serialize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Serialize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Serialize message.
         * @function verify
         * @memberof msg.Serialize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Serialize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.msg.EntityBase.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.msg.UserBase.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.ItemBin.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a Serialize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.Serialize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.Serialize} Serialize
         */
        Serialize.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.Serialize)
                return object;
            var message = new $root.msg.Serialize();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".msg.Serialize.entity: object expected");
                message.entity = $root.msg.EntityBase.fromObject(object.entity);
            }
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".msg.Serialize.base: object expected");
                message.base = $root.msg.UserBase.fromObject(object.base);
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.Serialize.item: object expected");
                message.item = $root.msg.ItemBin.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a Serialize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.Serialize
         * @static
         * @param {msg.Serialize} message Serialize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Serialize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entity = null;
                object.base = null;
                object.item = null;
            }
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.msg.EntityBase.toObject(message.entity, options);
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.msg.UserBase.toObject(message.base, options);
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.ItemBin.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this Serialize to JSON.
         * @function toJSON
         * @memberof msg.Serialize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Serialize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Serialize;
    })();

    msg.IpHost = (function() {

        /**
         * Properties of an IpHost.
         * @memberof msg
         * @interface IIpHost
         * @property {string|null} [ip] IpHost ip
         * @property {number|null} [port] IpHost port
         */

        /**
         * Constructs a new IpHost.
         * @memberof msg
         * @classdesc Represents an IpHost.
         * @implements IIpHost
         * @constructor
         * @param {msg.IIpHost=} [properties] Properties to set
         */
        function IpHost(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IpHost ip.
         * @member {string} ip
         * @memberof msg.IpHost
         * @instance
         */
        IpHost.prototype.ip = "";

        /**
         * IpHost port.
         * @member {number} port
         * @memberof msg.IpHost
         * @instance
         */
        IpHost.prototype.port = 0;

        /**
         * Creates a new IpHost instance using the specified properties.
         * @function create
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost=} [properties] Properties to set
         * @returns {msg.IpHost} IpHost instance
         */
        IpHost.create = function create(properties) {
            return new IpHost(properties);
        };

        /**
         * Encodes the specified IpHost message. Does not implicitly {@link msg.IpHost.verify|verify} messages.
         * @function encode
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost} message IpHost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpHost.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            if (message.port != null && message.hasOwnProperty("port"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
            return writer;
        };

        /**
         * Encodes the specified IpHost message, length delimited. Does not implicitly {@link msg.IpHost.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost} message IpHost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpHost.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an IpHost message from the specified reader or buffer.
         * @function decode
         * @memberof msg.IpHost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.IpHost} IpHost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpHost.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.IpHost();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                case 2:
                    message.port = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an IpHost message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.IpHost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.IpHost} IpHost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpHost.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an IpHost message.
         * @function verify
         * @memberof msg.IpHost
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IpHost.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            return null;
        };

        /**
         * Creates an IpHost message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.IpHost
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.IpHost} IpHost
         */
        IpHost.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.IpHost)
                return object;
            var message = new $root.msg.IpHost();
            if (object.ip != null)
                message.ip = String(object.ip);
            if (object.port != null)
                message.port = object.port | 0;
            return message;
        };

        /**
         * Creates a plain object from an IpHost message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.IpHost
         * @static
         * @param {msg.IpHost} message IpHost
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IpHost.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = "";
                object.port = 0;
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            return object;
        };

        /**
         * Converts this IpHost to JSON.
         * @function toJSON
         * @memberof msg.IpHost
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IpHost.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IpHost;
    })();

    /**
     * ItemId enum.
     * @name msg.ItemId
     * @enum {string}
     * @property {number} YuanBao=60001 YuanBao value
     * @property {number} Diamond=60002 Diamond value
     * @property {number} Gold=60003 Gold value
     * @property {number} FreeStep=60005 FreeStep value
     * @property {number} Strength=60006 Strength value
     * @property {number} RedDiamond=100001 RedDiamond value
     * @property {number} RedDiamondParts=100002 RedDiamondParts value
     */
    msg.ItemId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[60001] = "YuanBao"] = 60001;
        values[valuesById[60002] = "Diamond"] = 60002;
        values[valuesById[60003] = "Gold"] = 60003;
        values[valuesById[60005] = "FreeStep"] = 60005;
        values[valuesById[60006] = "Strength"] = 60006;
        values[valuesById[100001] = "RedDiamond"] = 100001;
        values[valuesById[100002] = "RedDiamondParts"] = 100002;
        return values;
    })();

    /**
     * ItemType enum.
     * @name msg.ItemType
     * @enum {string}
     * @property {number} Normal=0 Normal value
     * @property {number} Digital=1 Digital value
     * @property {number} ShoppingCard=2 ShoppingCard value
     * @property {number} DailyUse=3 DailyUse value
     * @property {number} Toy=4 Toy value
     * @property {number} MobileCard=5 MobileCard value
     * @property {number} Currency=6 Currency value
     * @property {number} CarAccessory=7 CarAccessory value
     * @property {number} Advertisement=8 Advertisement value
     * @property {number} Smallware=9 Smallware value
     * @property {number} DiamondItem=10 DiamondItem value
     * @property {number} ClothesParts=11 ClothesParts value
     * @property {number} HouseParts=12 HouseParts value
     * @property {number} CarParts=13 CarParts value
     * @property {number} MaidParts=14 MaidParts value
     * @property {number} ClothesItem=15 ClothesItem value
     */
    msg.ItemType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Normal"] = 0;
        values[valuesById[1] = "Digital"] = 1;
        values[valuesById[2] = "ShoppingCard"] = 2;
        values[valuesById[3] = "DailyUse"] = 3;
        values[valuesById[4] = "Toy"] = 4;
        values[valuesById[5] = "MobileCard"] = 5;
        values[valuesById[6] = "Currency"] = 6;
        values[valuesById[7] = "CarAccessory"] = 7;
        values[valuesById[8] = "Advertisement"] = 8;
        values[valuesById[9] = "Smallware"] = 9;
        values[valuesById[10] = "DiamondItem"] = 10;
        values[valuesById[11] = "ClothesParts"] = 11;
        values[valuesById[12] = "HouseParts"] = 12;
        values[valuesById[13] = "CarParts"] = 13;
        values[valuesById[14] = "MaidParts"] = 14;
        values[valuesById[15] = "ClothesItem"] = 15;
        return values;
    })();

    msg.PairNumItem = (function() {

        /**
         * Properties of a PairNumItem.
         * @memberof msg
         * @interface IPairNumItem
         * @property {number|null} [itemid] PairNumItem itemid
         * @property {number|null} [num] PairNumItem num
         */

        /**
         * Constructs a new PairNumItem.
         * @memberof msg
         * @classdesc Represents a PairNumItem.
         * @implements IPairNumItem
         * @constructor
         * @param {msg.IPairNumItem=} [properties] Properties to set
         */
        function PairNumItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PairNumItem itemid.
         * @member {number} itemid
         * @memberof msg.PairNumItem
         * @instance
         */
        PairNumItem.prototype.itemid = 0;

        /**
         * PairNumItem num.
         * @member {number} num
         * @memberof msg.PairNumItem
         * @instance
         */
        PairNumItem.prototype.num = 0;

        /**
         * Creates a new PairNumItem instance using the specified properties.
         * @function create
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem=} [properties] Properties to set
         * @returns {msg.PairNumItem} PairNumItem instance
         */
        PairNumItem.create = function create(properties) {
            return new PairNumItem(properties);
        };

        /**
         * Encodes the specified PairNumItem message. Does not implicitly {@link msg.PairNumItem.verify|verify} messages.
         * @function encode
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem} message PairNumItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PairNumItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified PairNumItem message, length delimited. Does not implicitly {@link msg.PairNumItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem} message PairNumItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PairNumItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PairNumItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.PairNumItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.PairNumItem} PairNumItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PairNumItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.PairNumItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PairNumItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.PairNumItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.PairNumItem} PairNumItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PairNumItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PairNumItem message.
         * @function verify
         * @memberof msg.PairNumItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PairNumItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a PairNumItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.PairNumItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.PairNumItem} PairNumItem
         */
        PairNumItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.PairNumItem)
                return object;
            var message = new $root.msg.PairNumItem();
            if (object.itemid != null)
                message.itemid = object.itemid | 0;
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a PairNumItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.PairNumItem} message PairNumItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PairNumItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this PairNumItem to JSON.
         * @function toJSON
         * @memberof msg.PairNumItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PairNumItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PairNumItem;
    })();

    /**
     * TaskId enum.
     * @name msg.TaskId
     * @enum {string}
     * @property {number} RegistAccount=1001 RegistAccount value
     * @property {number} RegisterTopScore=1002 RegisterTopScore value
     * @property {number} InviteeTopScore=1003 InviteeTopScore value
     * @property {number} InviteRegist=1004 InviteRegist value
     */
    msg.TaskId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1001] = "RegistAccount"] = 1001;
        values[valuesById[1002] = "RegisterTopScore"] = 1002;
        values[valuesById[1003] = "InviteeTopScore"] = 1003;
        values[valuesById[1004] = "InviteRegist"] = 1004;
        return values;
    })();

    /**
     * ItemPos enum.
     * @name msg.ItemPos
     * @enum {string}
     * @property {number} Bag=0 Bag value
     * @property {number} Helmet=1 Helmet value
     * @property {number} Clothes=2 Clothes value
     * @property {number} Pants=3 Pants value
     * @property {number} Shoe=4 Shoe value
     * @property {number} Hand=5 Hand value
     * @property {number} Wing=6 Wing value
     * @property {number} Suit=7 Suit value
     * @property {number} LongClothes=8 LongClothes value
     */
    msg.ItemPos = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Bag"] = 0;
        values[valuesById[1] = "Helmet"] = 1;
        values[valuesById[2] = "Clothes"] = 2;
        values[valuesById[3] = "Pants"] = 3;
        values[valuesById[4] = "Shoe"] = 4;
        values[valuesById[5] = "Hand"] = 5;
        values[valuesById[6] = "Wing"] = 6;
        values[valuesById[7] = "Suit"] = 7;
        values[valuesById[8] = "LongClothes"] = 8;
        return values;
    })();

    /**
     * MapEventType enum.
     * @name msg.MapEventType
     * @enum {string}
     * @property {number} Game=1 Game value
     * @property {number} Bonus=2 Bonus value
     * @property {number} Building=3 Building value
     */
    msg.MapEventType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Game"] = 1;
        values[valuesById[2] = "Bonus"] = 2;
        values[valuesById[3] = "Building"] = 3;
        return values;
    })();

    /**
     * MapEventId enum.
     * @name msg.MapEventId
     * @enum {string}
     * @property {number} GameTanTanLe=1001 GameTanTanLe value
     * @property {number} GameSuperMarket=1002 GameSuperMarket value
     * @property {number} GameFanFanLe=1003 GameFanFanLe value
     * @property {number} BonusGold=2001 BonusGold value
     * @property {number} BonusStrength=2002 BonusStrength value
     * @property {number} BuildingMaidShop=3001 BuildingMaidShop value
     * @property {number} BuildingCarShop=3002 BuildingCarShop value
     * @property {number} BuildingHouseShop=3003 BuildingHouseShop value
     */
    msg.MapEventId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1001] = "GameTanTanLe"] = 1001;
        values[valuesById[1002] = "GameSuperMarket"] = 1002;
        values[valuesById[1003] = "GameFanFanLe"] = 1003;
        values[valuesById[2001] = "BonusGold"] = 2001;
        values[valuesById[2002] = "BonusStrength"] = 2002;
        values[valuesById[3001] = "BuildingMaidShop"] = 3001;
        values[valuesById[3002] = "BuildingCarShop"] = 3002;
        values[valuesById[3003] = "BuildingHouseShop"] = 3003;
        return values;
    })();

    /**
     * Sex enum.
     * @name msg.Sex
     * @enum {string}
     * @property {number} Female=0 Female value
     * @property {number} Male=1 Male value
     * @property {number} Neutral=2 Neutral value
     */
    msg.Sex = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Female"] = 0;
        values[valuesById[1] = "Male"] = 1;
        values[valuesById[2] = "Neutral"] = 2;
        return values;
    })();

    /**
     * MoneyType enum.
     * @name msg.MoneyType
     * @enum {string}
     * @property {number} _Gold=1 _Gold value
     * @property {number} _Diamond=2 _Diamond value
     * @property {number} _Strength=3 _Strength value
     * @property {number} _Item=4 _Item value
     */
    msg.MoneyType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "_Gold"] = 1;
        values[valuesById[2] = "_Diamond"] = 2;
        values[valuesById[3] = "_Strength"] = 3;
        values[valuesById[4] = "_Item"] = 4;
        return values;
    })();

    /**
     * UserInfoType enum.
     * @name msg.UserInfoType
     * @enum {string}
     * @property {number} Name=1 Name value
     * @property {number} UserSex=2 UserSex value
     * @property {number} Age=3 Age value
     * @property {number} Sign=4 Sign value
     * @property {number} Constellation=5 Constellation value
     * @property {number} Face=6 Face value
     * @property {number} Baseprovince=7 Baseprovince value
     * @property {number} Basecity=8 Basecity value
     * @property {number} Level=9 Level value
     * @property {number} Exp=10 Exp value
     * @property {number} NewPlayerStep=11 NewPlayerStep value
     */
    msg.UserInfoType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Name"] = 1;
        values[valuesById[2] = "UserSex"] = 2;
        values[valuesById[3] = "Age"] = 3;
        values[valuesById[4] = "Sign"] = 4;
        values[valuesById[5] = "Constellation"] = 5;
        values[valuesById[6] = "Face"] = 6;
        values[valuesById[7] = "Baseprovince"] = 7;
        values[valuesById[8] = "Basecity"] = 8;
        values[valuesById[9] = "Level"] = 9;
        values[valuesById[10] = "Exp"] = 10;
        values[valuesById[11] = "NewPlayerStep"] = 11;
        return values;
    })();

    /**
     * RoomKind enum.
     * @name msg.RoomKind
     * @enum {string}
     * @property {number} TanTanLe=1 TanTanLe value
     * @property {number} TexasPoker=2 TexasPoker value
     */
    msg.RoomKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "TanTanLe"] = 1;
        values[valuesById[2] = "TexasPoker"] = 2;
        return values;
    })();

    msg.C2GW_AddDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_AddDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_AddDeliveryAddress
         * @property {msg.IUserAddress|null} [info] C2GW_AddDeliveryAddress info
         */

        /**
         * Constructs a new C2GW_AddDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_AddDeliveryAddress.
         * @implements IC2GW_AddDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_AddDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_AddDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_AddDeliveryAddress info.
         * @member {msg.IUserAddress|null|undefined} info
         * @memberof msg.C2GW_AddDeliveryAddress
         * @instance
         */
        C2GW_AddDeliveryAddress.prototype.info = null;

        /**
         * Creates a new C2GW_AddDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress instance
         */
        C2GW_AddDeliveryAddress.create = function create(properties) {
            return new C2GW_AddDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_AddDeliveryAddress message. Does not implicitly {@link msg.C2GW_AddDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_AddDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.UserAddress.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_AddDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_AddDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_AddDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_AddDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_AddDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_AddDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.info = $root.msg.UserAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_AddDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_AddDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_AddDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_AddDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.UserAddress.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_AddDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         */
        C2GW_AddDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_AddDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_AddDeliveryAddress();
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.C2GW_AddDeliveryAddress.info: object expected");
                message.info = $root.msg.UserAddress.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_AddDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.C2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_AddDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.info = null;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.UserAddress.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this C2GW_AddDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_AddDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_AddDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_AddDeliveryAddress;
    })();

    msg.C2GW_DelDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_DelDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_DelDeliveryAddress
         * @property {number|null} [index] C2GW_DelDeliveryAddress index
         */

        /**
         * Constructs a new C2GW_DelDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_DelDeliveryAddress.
         * @implements IC2GW_DelDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_DelDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_DelDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_DelDeliveryAddress index.
         * @member {number} index
         * @memberof msg.C2GW_DelDeliveryAddress
         * @instance
         */
        C2GW_DelDeliveryAddress.prototype.index = 0;

        /**
         * Creates a new C2GW_DelDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress instance
         */
        C2GW_DelDeliveryAddress.create = function create(properties) {
            return new C2GW_DelDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_DelDeliveryAddress message. Does not implicitly {@link msg.C2GW_DelDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DelDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_DelDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_DelDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DelDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_DelDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DelDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_DelDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_DelDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DelDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_DelDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_DelDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_DelDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         */
        C2GW_DelDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_DelDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_DelDeliveryAddress();
            if (object.index != null)
                message.index = object.index | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_DelDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.C2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_DelDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.index = 0;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_DelDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_DelDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_DelDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_DelDeliveryAddress;
    })();

    msg.C2GW_ChangeDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_ChangeDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_ChangeDeliveryAddress
         * @property {number|null} [index] C2GW_ChangeDeliveryAddress index
         * @property {msg.IUserAddress|null} [info] C2GW_ChangeDeliveryAddress info
         */

        /**
         * Constructs a new C2GW_ChangeDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_ChangeDeliveryAddress.
         * @implements IC2GW_ChangeDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_ChangeDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_ChangeDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ChangeDeliveryAddress index.
         * @member {number} index
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         */
        C2GW_ChangeDeliveryAddress.prototype.index = 0;

        /**
         * C2GW_ChangeDeliveryAddress info.
         * @member {msg.IUserAddress|null|undefined} info
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         */
        C2GW_ChangeDeliveryAddress.prototype.info = null;

        /**
         * Creates a new C2GW_ChangeDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress instance
         */
        C2GW_ChangeDeliveryAddress.create = function create(properties) {
            return new C2GW_ChangeDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_ChangeDeliveryAddress message. Does not implicitly {@link msg.C2GW_ChangeDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ChangeDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.UserAddress.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ChangeDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_ChangeDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ChangeDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ChangeDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ChangeDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ChangeDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.int32();
                    break;
                case 2:
                    message.info = $root.msg.UserAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ChangeDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ChangeDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ChangeDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ChangeDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.UserAddress.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_ChangeDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         */
        C2GW_ChangeDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ChangeDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_ChangeDeliveryAddress();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.C2GW_ChangeDeliveryAddress.info: object expected");
                message.info = $root.msg.UserAddress.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ChangeDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.C2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ChangeDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.info = null;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.UserAddress.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this C2GW_ChangeDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ChangeDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ChangeDeliveryAddress;
    })();

    msg.GW2C_SendDeliveryAddressList = (function() {

        /**
         * Properties of a GW2C_SendDeliveryAddressList.
         * @memberof msg
         * @interface IGW2C_SendDeliveryAddressList
         * @property {Array.<msg.IUserAddress>|null} [list] GW2C_SendDeliveryAddressList list
         */

        /**
         * Constructs a new GW2C_SendDeliveryAddressList.
         * @memberof msg
         * @classdesc Represents a GW2C_SendDeliveryAddressList.
         * @implements IGW2C_SendDeliveryAddressList
         * @constructor
         * @param {msg.IGW2C_SendDeliveryAddressList=} [properties] Properties to set
         */
        function GW2C_SendDeliveryAddressList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendDeliveryAddressList list.
         * @member {Array.<msg.IUserAddress>} list
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @instance
         */
        GW2C_SendDeliveryAddressList.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_SendDeliveryAddressList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList=} [properties] Properties to set
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList instance
         */
        GW2C_SendDeliveryAddressList.create = function create(properties) {
            return new GW2C_SendDeliveryAddressList(properties);
        };

        /**
         * Encodes the specified GW2C_SendDeliveryAddressList message. Does not implicitly {@link msg.GW2C_SendDeliveryAddressList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendDeliveryAddressList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.UserAddress.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendDeliveryAddressList message, length delimited. Does not implicitly {@link msg.GW2C_SendDeliveryAddressList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendDeliveryAddressList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendDeliveryAddressList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendDeliveryAddressList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendDeliveryAddressList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.UserAddress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendDeliveryAddressList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendDeliveryAddressList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendDeliveryAddressList message.
         * @function verify
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendDeliveryAddressList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.UserAddress.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendDeliveryAddressList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         */
        GW2C_SendDeliveryAddressList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendDeliveryAddressList)
                return object;
            var message = new $root.msg.GW2C_SendDeliveryAddressList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_SendDeliveryAddressList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_SendDeliveryAddressList.list: object expected");
                    message.list[i] = $root.msg.UserAddress.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendDeliveryAddressList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.GW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendDeliveryAddressList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.UserAddress.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendDeliveryAddressList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendDeliveryAddressList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendDeliveryAddressList;
    })();

    msg.DeliveryGoods = (function() {

        /**
         * Properties of a DeliveryGoods.
         * @memberof msg
         * @interface IDeliveryGoods
         * @property {number|null} [itemid] DeliveryGoods itemid
         * @property {number|null} [num] DeliveryGoods num
         */

        /**
         * Constructs a new DeliveryGoods.
         * @memberof msg
         * @classdesc Represents a DeliveryGoods.
         * @implements IDeliveryGoods
         * @constructor
         * @param {msg.IDeliveryGoods=} [properties] Properties to set
         */
        function DeliveryGoods(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeliveryGoods itemid.
         * @member {number} itemid
         * @memberof msg.DeliveryGoods
         * @instance
         */
        DeliveryGoods.prototype.itemid = 0;

        /**
         * DeliveryGoods num.
         * @member {number} num
         * @memberof msg.DeliveryGoods
         * @instance
         */
        DeliveryGoods.prototype.num = 0;

        /**
         * Creates a new DeliveryGoods instance using the specified properties.
         * @function create
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods=} [properties] Properties to set
         * @returns {msg.DeliveryGoods} DeliveryGoods instance
         */
        DeliveryGoods.create = function create(properties) {
            return new DeliveryGoods(properties);
        };

        /**
         * Encodes the specified DeliveryGoods message. Does not implicitly {@link msg.DeliveryGoods.verify|verify} messages.
         * @function encode
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods} message DeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeliveryGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified DeliveryGoods message, length delimited. Does not implicitly {@link msg.DeliveryGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods} message DeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeliveryGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeliveryGoods message from the specified reader or buffer.
         * @function decode
         * @memberof msg.DeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.DeliveryGoods} DeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeliveryGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.DeliveryGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeliveryGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.DeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.DeliveryGoods} DeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeliveryGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeliveryGoods message.
         * @function verify
         * @memberof msg.DeliveryGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeliveryGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a DeliveryGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.DeliveryGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.DeliveryGoods} DeliveryGoods
         */
        DeliveryGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.DeliveryGoods)
                return object;
            var message = new $root.msg.DeliveryGoods();
            if (object.itemid != null)
                message.itemid = object.itemid | 0;
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a DeliveryGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.DeliveryGoods} message DeliveryGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeliveryGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this DeliveryGoods to JSON.
         * @function toJSON
         * @memberof msg.DeliveryGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeliveryGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeliveryGoods;
    })();

    msg.C2GW_ReqDeliveryGoods = (function() {

        /**
         * Properties of a C2GW_ReqDeliveryGoods.
         * @memberof msg
         * @interface IC2GW_ReqDeliveryGoods
         * @property {Array.<msg.IDeliveryGoods>|null} [list] C2GW_ReqDeliveryGoods list
         * @property {string|null} [token] C2GW_ReqDeliveryGoods token
         */

        /**
         * Constructs a new C2GW_ReqDeliveryGoods.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqDeliveryGoods.
         * @implements IC2GW_ReqDeliveryGoods
         * @constructor
         * @param {msg.IC2GW_ReqDeliveryGoods=} [properties] Properties to set
         */
        function C2GW_ReqDeliveryGoods(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqDeliveryGoods list.
         * @member {Array.<msg.IDeliveryGoods>} list
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         */
        C2GW_ReqDeliveryGoods.prototype.list = $util.emptyArray;

        /**
         * C2GW_ReqDeliveryGoods token.
         * @member {string} token
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         */
        C2GW_ReqDeliveryGoods.prototype.token = "";

        /**
         * Creates a new C2GW_ReqDeliveryGoods instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods=} [properties] Properties to set
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods instance
         */
        C2GW_ReqDeliveryGoods.create = function create(properties) {
            return new C2GW_ReqDeliveryGoods(properties);
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryGoods message. Does not implicitly {@link msg.C2GW_ReqDeliveryGoods.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.DeliveryGoods.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryGoods message, length delimited. Does not implicitly {@link msg.C2GW_ReqDeliveryGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqDeliveryGoods message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqDeliveryGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.DeliveryGoods.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqDeliveryGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqDeliveryGoods message.
         * @function verify
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqDeliveryGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.DeliveryGoods.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqDeliveryGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         */
        C2GW_ReqDeliveryGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqDeliveryGoods)
                return object;
            var message = new $root.msg.C2GW_ReqDeliveryGoods();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.C2GW_ReqDeliveryGoods.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.C2GW_ReqDeliveryGoods.list: object expected");
                    message.list[i] = $root.msg.DeliveryGoods.fromObject(object.list[i]);
                }
            }
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqDeliveryGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.C2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqDeliveryGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (options.defaults)
                object.token = "";
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.DeliveryGoods.toObject(message.list[j], options);
            }
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this C2GW_ReqDeliveryGoods to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqDeliveryGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqDeliveryGoods;
    })();

    msg.GW2C_SendUserEvents = (function() {

        /**
         * Properties of a GW2C_SendUserEvents.
         * @memberof msg
         * @interface IGW2C_SendUserEvents
         * @property {msg.IUserMapEvent|null} [event] GW2C_SendUserEvents event
         */

        /**
         * Constructs a new GW2C_SendUserEvents.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserEvents.
         * @implements IGW2C_SendUserEvents
         * @constructor
         * @param {msg.IGW2C_SendUserEvents=} [properties] Properties to set
         */
        function GW2C_SendUserEvents(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserEvents event.
         * @member {msg.IUserMapEvent|null|undefined} event
         * @memberof msg.GW2C_SendUserEvents
         * @instance
         */
        GW2C_SendUserEvents.prototype.event = null;

        /**
         * Creates a new GW2C_SendUserEvents instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.IGW2C_SendUserEvents=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents instance
         */
        GW2C_SendUserEvents.create = function create(properties) {
            return new GW2C_SendUserEvents(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserEvents message. Does not implicitly {@link msg.GW2C_SendUserEvents.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.IGW2C_SendUserEvents} message GW2C_SendUserEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserEvents.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event != null && message.hasOwnProperty("event"))
                $root.msg.UserMapEvent.encode(message.event, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserEvents message, length delimited. Does not implicitly {@link msg.GW2C_SendUserEvents.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.IGW2C_SendUserEvents} message GW2C_SendUserEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserEvents.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserEvents message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserEvents.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserEvents();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event = $root.msg.UserMapEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserEvents message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserEvents.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserEvents message.
         * @function verify
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserEvents.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event != null && message.hasOwnProperty("event")) {
                var error = $root.msg.UserMapEvent.verify(message.event);
                if (error)
                    return "event." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendUserEvents message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents
         */
        GW2C_SendUserEvents.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserEvents)
                return object;
            var message = new $root.msg.GW2C_SendUserEvents();
            if (object.event != null) {
                if (typeof object.event !== "object")
                    throw TypeError(".msg.GW2C_SendUserEvents.event: object expected");
                message.event = $root.msg.UserMapEvent.fromObject(object.event);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserEvents message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.GW2C_SendUserEvents} message GW2C_SendUserEvents
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserEvents.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.event = null;
            if (message.event != null && message.hasOwnProperty("event"))
                object.event = $root.msg.UserMapEvent.toObject(message.event, options);
            return object;
        };

        /**
         * Converts this GW2C_SendUserEvents to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserEvents
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserEvents.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserEvents;
    })();

    msg.C2GW_ReqEnterEvents = (function() {

        /**
         * Properties of a C2GW_ReqEnterEvents.
         * @memberof msg
         * @interface IC2GW_ReqEnterEvents
         * @property {number|Long|null} [uid] C2GW_ReqEnterEvents uid
         */

        /**
         * Constructs a new C2GW_ReqEnterEvents.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqEnterEvents.
         * @implements IC2GW_ReqEnterEvents
         * @constructor
         * @param {msg.IC2GW_ReqEnterEvents=} [properties] Properties to set
         */
        function C2GW_ReqEnterEvents(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqEnterEvents uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_ReqEnterEvents
         * @instance
         */
        C2GW_ReqEnterEvents.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new C2GW_ReqEnterEvents instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.IC2GW_ReqEnterEvents=} [properties] Properties to set
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents instance
         */
        C2GW_ReqEnterEvents.create = function create(properties) {
            return new C2GW_ReqEnterEvents(properties);
        };

        /**
         * Encodes the specified C2GW_ReqEnterEvents message. Does not implicitly {@link msg.C2GW_ReqEnterEvents.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.IC2GW_ReqEnterEvents} message C2GW_ReqEnterEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqEnterEvents.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqEnterEvents message, length delimited. Does not implicitly {@link msg.C2GW_ReqEnterEvents.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.IC2GW_ReqEnterEvents} message C2GW_ReqEnterEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqEnterEvents.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqEnterEvents message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqEnterEvents.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqEnterEvents();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqEnterEvents message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqEnterEvents.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqEnterEvents message.
         * @function verify
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqEnterEvents.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqEnterEvents message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents
         */
        C2GW_ReqEnterEvents.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqEnterEvents)
                return object;
            var message = new $root.msg.C2GW_ReqEnterEvents();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqEnterEvents message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.C2GW_ReqEnterEvents} message C2GW_ReqEnterEvents
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqEnterEvents.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            return object;
        };

        /**
         * Converts this C2GW_ReqEnterEvents to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqEnterEvents
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqEnterEvents.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqEnterEvents;
    })();

    msg.GW2C_RemoveEvent = (function() {

        /**
         * Properties of a GW2C_RemoveEvent.
         * @memberof msg
         * @interface IGW2C_RemoveEvent
         * @property {number|Long|null} [uid] GW2C_RemoveEvent uid
         */

        /**
         * Constructs a new GW2C_RemoveEvent.
         * @memberof msg
         * @classdesc Represents a GW2C_RemoveEvent.
         * @implements IGW2C_RemoveEvent
         * @constructor
         * @param {msg.IGW2C_RemoveEvent=} [properties] Properties to set
         */
        function GW2C_RemoveEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RemoveEvent uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_RemoveEvent
         * @instance
         */
        GW2C_RemoveEvent.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GW2C_RemoveEvent instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.IGW2C_RemoveEvent=} [properties] Properties to set
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent instance
         */
        GW2C_RemoveEvent.create = function create(properties) {
            return new GW2C_RemoveEvent(properties);
        };

        /**
         * Encodes the specified GW2C_RemoveEvent message. Does not implicitly {@link msg.GW2C_RemoveEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.IGW2C_RemoveEvent} message GW2C_RemoveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemoveEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RemoveEvent message, length delimited. Does not implicitly {@link msg.GW2C_RemoveEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.IGW2C_RemoveEvent} message GW2C_RemoveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemoveEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RemoveEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemoveEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RemoveEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RemoveEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemoveEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RemoveEvent message.
         * @function verify
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RemoveEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RemoveEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent
         */
        GW2C_RemoveEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RemoveEvent)
                return object;
            var message = new $root.msg.GW2C_RemoveEvent();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RemoveEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.GW2C_RemoveEvent} message GW2C_RemoveEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RemoveEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            return object;
        };

        /**
         * Converts this GW2C_RemoveEvent to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RemoveEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RemoveEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RemoveEvent;
    })();

    msg.C2GW_LeaveEvent = (function() {

        /**
         * Properties of a C2GW_LeaveEvent.
         * @memberof msg
         * @interface IC2GW_LeaveEvent
         * @property {number|Long|null} [uid] C2GW_LeaveEvent uid
         */

        /**
         * Constructs a new C2GW_LeaveEvent.
         * @memberof msg
         * @classdesc Represents a C2GW_LeaveEvent.
         * @implements IC2GW_LeaveEvent
         * @constructor
         * @param {msg.IC2GW_LeaveEvent=} [properties] Properties to set
         */
        function C2GW_LeaveEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_LeaveEvent uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_LeaveEvent
         * @instance
         */
        C2GW_LeaveEvent.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new C2GW_LeaveEvent instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.IC2GW_LeaveEvent=} [properties] Properties to set
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent instance
         */
        C2GW_LeaveEvent.create = function create(properties) {
            return new C2GW_LeaveEvent(properties);
        };

        /**
         * Encodes the specified C2GW_LeaveEvent message. Does not implicitly {@link msg.C2GW_LeaveEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.IC2GW_LeaveEvent} message C2GW_LeaveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_LeaveEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_LeaveEvent message, length delimited. Does not implicitly {@link msg.C2GW_LeaveEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.IC2GW_LeaveEvent} message C2GW_LeaveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_LeaveEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_LeaveEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_LeaveEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_LeaveEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_LeaveEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_LeaveEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_LeaveEvent message.
         * @function verify
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_LeaveEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_LeaveEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent
         */
        C2GW_LeaveEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_LeaveEvent)
                return object;
            var message = new $root.msg.C2GW_LeaveEvent();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a C2GW_LeaveEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.C2GW_LeaveEvent} message C2GW_LeaveEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_LeaveEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            return object;
        };

        /**
         * Converts this C2GW_LeaveEvent to JSON.
         * @function toJSON
         * @memberof msg.C2GW_LeaveEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_LeaveEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_LeaveEvent;
    })();

    msg.GW2C_EnterGameEvent = (function() {

        /**
         * Properties of a GW2C_EnterGameEvent.
         * @memberof msg
         * @interface IGW2C_EnterGameEvent
         * @property {number|Long|null} [uid] GW2C_EnterGameEvent uid
         */

        /**
         * Constructs a new GW2C_EnterGameEvent.
         * @memberof msg
         * @classdesc Represents a GW2C_EnterGameEvent.
         * @implements IGW2C_EnterGameEvent
         * @constructor
         * @param {msg.IGW2C_EnterGameEvent=} [properties] Properties to set
         */
        function GW2C_EnterGameEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_EnterGameEvent uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_EnterGameEvent
         * @instance
         */
        GW2C_EnterGameEvent.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GW2C_EnterGameEvent instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.IGW2C_EnterGameEvent=} [properties] Properties to set
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent instance
         */
        GW2C_EnterGameEvent.create = function create(properties) {
            return new GW2C_EnterGameEvent(properties);
        };

        /**
         * Encodes the specified GW2C_EnterGameEvent message. Does not implicitly {@link msg.GW2C_EnterGameEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.IGW2C_EnterGameEvent} message GW2C_EnterGameEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_EnterGameEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_EnterGameEvent message, length delimited. Does not implicitly {@link msg.GW2C_EnterGameEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.IGW2C_EnterGameEvent} message GW2C_EnterGameEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_EnterGameEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_EnterGameEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_EnterGameEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_EnterGameEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_EnterGameEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_EnterGameEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_EnterGameEvent message.
         * @function verify
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_EnterGameEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_EnterGameEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent
         */
        GW2C_EnterGameEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_EnterGameEvent)
                return object;
            var message = new $root.msg.GW2C_EnterGameEvent();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GW2C_EnterGameEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.GW2C_EnterGameEvent} message GW2C_EnterGameEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_EnterGameEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            return object;
        };

        /**
         * Converts this GW2C_EnterGameEvent to JSON.
         * @function toJSON
         * @memberof msg.GW2C_EnterGameEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_EnterGameEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_EnterGameEvent;
    })();

    msg.InthourAutoResetValue = (function() {

        /**
         * Properties of an InthourAutoResetValue.
         * @memberof msg
         * @interface IInthourAutoResetValue
         * @property {number|null} [id] InthourAutoResetValue id
         * @property {number|null} [hours] InthourAutoResetValue hours
         * @property {number|Long|null} [value] InthourAutoResetValue value
         * @property {number|Long|null} [lastreset] InthourAutoResetValue lastreset
         */

        /**
         * Constructs a new InthourAutoResetValue.
         * @memberof msg
         * @classdesc Represents an InthourAutoResetValue.
         * @implements IInthourAutoResetValue
         * @constructor
         * @param {msg.IInthourAutoResetValue=} [properties] Properties to set
         */
        function InthourAutoResetValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InthourAutoResetValue id.
         * @member {number} id
         * @memberof msg.InthourAutoResetValue
         * @instance
         */
        InthourAutoResetValue.prototype.id = 0;

        /**
         * InthourAutoResetValue hours.
         * @member {number} hours
         * @memberof msg.InthourAutoResetValue
         * @instance
         */
        InthourAutoResetValue.prototype.hours = 0;

        /**
         * InthourAutoResetValue value.
         * @member {number|Long} value
         * @memberof msg.InthourAutoResetValue
         * @instance
         */
        InthourAutoResetValue.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * InthourAutoResetValue lastreset.
         * @member {number|Long} lastreset
         * @memberof msg.InthourAutoResetValue
         * @instance
         */
        InthourAutoResetValue.prototype.lastreset = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new InthourAutoResetValue instance using the specified properties.
         * @function create
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {msg.IInthourAutoResetValue=} [properties] Properties to set
         * @returns {msg.InthourAutoResetValue} InthourAutoResetValue instance
         */
        InthourAutoResetValue.create = function create(properties) {
            return new InthourAutoResetValue(properties);
        };

        /**
         * Encodes the specified InthourAutoResetValue message. Does not implicitly {@link msg.InthourAutoResetValue.verify|verify} messages.
         * @function encode
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {msg.IInthourAutoResetValue} message InthourAutoResetValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InthourAutoResetValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.hours != null && message.hasOwnProperty("hours"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.hours);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.value);
            if (message.lastreset != null && message.hasOwnProperty("lastreset"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.lastreset);
            return writer;
        };

        /**
         * Encodes the specified InthourAutoResetValue message, length delimited. Does not implicitly {@link msg.InthourAutoResetValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {msg.IInthourAutoResetValue} message InthourAutoResetValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InthourAutoResetValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InthourAutoResetValue message from the specified reader or buffer.
         * @function decode
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.InthourAutoResetValue} InthourAutoResetValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InthourAutoResetValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.InthourAutoResetValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.hours = reader.int32();
                    break;
                case 3:
                    message.value = reader.int64();
                    break;
                case 4:
                    message.lastreset = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InthourAutoResetValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.InthourAutoResetValue} InthourAutoResetValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InthourAutoResetValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InthourAutoResetValue message.
         * @function verify
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InthourAutoResetValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.hours != null && message.hasOwnProperty("hours"))
                if (!$util.isInteger(message.hours))
                    return "hours: integer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                    return "value: integer|Long expected";
            if (message.lastreset != null && message.hasOwnProperty("lastreset"))
                if (!$util.isInteger(message.lastreset) && !(message.lastreset && $util.isInteger(message.lastreset.low) && $util.isInteger(message.lastreset.high)))
                    return "lastreset: integer|Long expected";
            return null;
        };

        /**
         * Creates an InthourAutoResetValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.InthourAutoResetValue} InthourAutoResetValue
         */
        InthourAutoResetValue.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.InthourAutoResetValue)
                return object;
            var message = new $root.msg.InthourAutoResetValue();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.hours != null)
                message.hours = object.hours | 0;
            if (object.value != null)
                if ($util.Long)
                    (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                else if (typeof object.value === "string")
                    message.value = parseInt(object.value, 10);
                else if (typeof object.value === "number")
                    message.value = object.value;
                else if (typeof object.value === "object")
                    message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
            if (object.lastreset != null)
                if ($util.Long)
                    (message.lastreset = $util.Long.fromValue(object.lastreset)).unsigned = false;
                else if (typeof object.lastreset === "string")
                    message.lastreset = parseInt(object.lastreset, 10);
                else if (typeof object.lastreset === "number")
                    message.lastreset = object.lastreset;
                else if (typeof object.lastreset === "object")
                    message.lastreset = new $util.LongBits(object.lastreset.low >>> 0, object.lastreset.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from an InthourAutoResetValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.InthourAutoResetValue
         * @static
         * @param {msg.InthourAutoResetValue} message InthourAutoResetValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InthourAutoResetValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.hours = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.value = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lastreset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lastreset = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.hours != null && message.hasOwnProperty("hours"))
                object.hours = message.hours;
            if (message.value != null && message.hasOwnProperty("value"))
                if (typeof message.value === "number")
                    object.value = options.longs === String ? String(message.value) : message.value;
                else
                    object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
            if (message.lastreset != null && message.hasOwnProperty("lastreset"))
                if (typeof message.lastreset === "number")
                    object.lastreset = options.longs === String ? String(message.lastreset) : message.lastreset;
                else
                    object.lastreset = options.longs === String ? $util.Long.prototype.toString.call(message.lastreset) : options.longs === Number ? new $util.LongBits(message.lastreset.low >>> 0, message.lastreset.high >>> 0).toNumber() : message.lastreset;
            return object;
        };

        /**
         * Converts this InthourAutoResetValue to JSON.
         * @function toJSON
         * @memberof msg.InthourAutoResetValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InthourAutoResetValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InthourAutoResetValue;
    })();

    msg.InthourAutoResetManager = (function() {

        /**
         * Properties of an InthourAutoResetManager.
         * @memberof msg
         * @interface IInthourAutoResetManager
         * @property {Array.<msg.IInthourAutoResetValue>|null} [values] InthourAutoResetManager values
         */

        /**
         * Constructs a new InthourAutoResetManager.
         * @memberof msg
         * @classdesc Represents an InthourAutoResetManager.
         * @implements IInthourAutoResetManager
         * @constructor
         * @param {msg.IInthourAutoResetManager=} [properties] Properties to set
         */
        function InthourAutoResetManager(properties) {
            this.values = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InthourAutoResetManager values.
         * @member {Array.<msg.IInthourAutoResetValue>} values
         * @memberof msg.InthourAutoResetManager
         * @instance
         */
        InthourAutoResetManager.prototype.values = $util.emptyArray;

        /**
         * Creates a new InthourAutoResetManager instance using the specified properties.
         * @function create
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {msg.IInthourAutoResetManager=} [properties] Properties to set
         * @returns {msg.InthourAutoResetManager} InthourAutoResetManager instance
         */
        InthourAutoResetManager.create = function create(properties) {
            return new InthourAutoResetManager(properties);
        };

        /**
         * Encodes the specified InthourAutoResetManager message. Does not implicitly {@link msg.InthourAutoResetManager.verify|verify} messages.
         * @function encode
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {msg.IInthourAutoResetManager} message InthourAutoResetManager message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InthourAutoResetManager.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.values != null && message.values.length)
                for (var i = 0; i < message.values.length; ++i)
                    $root.msg.InthourAutoResetValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified InthourAutoResetManager message, length delimited. Does not implicitly {@link msg.InthourAutoResetManager.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {msg.IInthourAutoResetManager} message InthourAutoResetManager message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InthourAutoResetManager.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InthourAutoResetManager message from the specified reader or buffer.
         * @function decode
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.InthourAutoResetManager} InthourAutoResetManager
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InthourAutoResetManager.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.InthourAutoResetManager();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.values && message.values.length))
                        message.values = [];
                    message.values.push($root.msg.InthourAutoResetValue.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InthourAutoResetManager message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.InthourAutoResetManager} InthourAutoResetManager
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InthourAutoResetManager.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InthourAutoResetManager message.
         * @function verify
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InthourAutoResetManager.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.values != null && message.hasOwnProperty("values")) {
                if (!Array.isArray(message.values))
                    return "values: array expected";
                for (var i = 0; i < message.values.length; ++i) {
                    var error = $root.msg.InthourAutoResetValue.verify(message.values[i]);
                    if (error)
                        return "values." + error;
                }
            }
            return null;
        };

        /**
         * Creates an InthourAutoResetManager message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.InthourAutoResetManager} InthourAutoResetManager
         */
        InthourAutoResetManager.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.InthourAutoResetManager)
                return object;
            var message = new $root.msg.InthourAutoResetManager();
            if (object.values) {
                if (!Array.isArray(object.values))
                    throw TypeError(".msg.InthourAutoResetManager.values: array expected");
                message.values = [];
                for (var i = 0; i < object.values.length; ++i) {
                    if (typeof object.values[i] !== "object")
                        throw TypeError(".msg.InthourAutoResetManager.values: object expected");
                    message.values[i] = $root.msg.InthourAutoResetValue.fromObject(object.values[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an InthourAutoResetManager message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.InthourAutoResetManager
         * @static
         * @param {msg.InthourAutoResetManager} message InthourAutoResetManager
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InthourAutoResetManager.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.values = [];
            if (message.values && message.values.length) {
                object.values = [];
                for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = $root.msg.InthourAutoResetValue.toObject(message.values[j], options);
            }
            return object;
        };

        /**
         * Converts this InthourAutoResetManager to JSON.
         * @function toJSON
         * @memberof msg.InthourAutoResetManager
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InthourAutoResetManager.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InthourAutoResetManager;
    })();

    msg.C2GW_BuyItem = (function() {

        /**
         * Properties of a C2GW_BuyItem.
         * @memberof msg
         * @interface IC2GW_BuyItem
         * @property {number|null} [productid] C2GW_BuyItem productid
         * @property {number|null} [num] C2GW_BuyItem num
         */

        /**
         * Constructs a new C2GW_BuyItem.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyItem.
         * @implements IC2GW_BuyItem
         * @constructor
         * @param {msg.IC2GW_BuyItem=} [properties] Properties to set
         */
        function C2GW_BuyItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyItem productid.
         * @member {number} productid
         * @memberof msg.C2GW_BuyItem
         * @instance
         */
        C2GW_BuyItem.prototype.productid = 0;

        /**
         * C2GW_BuyItem num.
         * @member {number} num
         * @memberof msg.C2GW_BuyItem
         * @instance
         */
        C2GW_BuyItem.prototype.num = 0;

        /**
         * Creates a new C2GW_BuyItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem=} [properties] Properties to set
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem instance
         */
        C2GW_BuyItem.create = function create(properties) {
            return new C2GW_BuyItem(properties);
        };

        /**
         * Encodes the specified C2GW_BuyItem message. Does not implicitly {@link msg.C2GW_BuyItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem} message C2GW_BuyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.productid != null && message.hasOwnProperty("productid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.productid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyItem message, length delimited. Does not implicitly {@link msg.C2GW_BuyItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem} message C2GW_BuyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.productid = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyItem message.
         * @function verify
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.productid != null && message.hasOwnProperty("productid"))
                if (!$util.isInteger(message.productid))
                    return "productid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         */
        C2GW_BuyItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyItem)
                return object;
            var message = new $root.msg.C2GW_BuyItem();
            if (object.productid != null)
                message.productid = object.productid | 0;
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.C2GW_BuyItem} message C2GW_BuyItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.productid = 0;
                object.num = 0;
            }
            if (message.productid != null && message.hasOwnProperty("productid"))
                object.productid = message.productid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_BuyItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyItem;
    })();

    msg.GW2C_AddPackageItem = (function() {

        /**
         * Properties of a GW2C_AddPackageItem.
         * @memberof msg
         * @interface IGW2C_AddPackageItem
         * @property {number|null} [itemid] GW2C_AddPackageItem itemid
         * @property {number|null} [num] GW2C_AddPackageItem num
         */

        /**
         * Constructs a new GW2C_AddPackageItem.
         * @memberof msg
         * @classdesc Represents a GW2C_AddPackageItem.
         * @implements IGW2C_AddPackageItem
         * @constructor
         * @param {msg.IGW2C_AddPackageItem=} [properties] Properties to set
         */
        function GW2C_AddPackageItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AddPackageItem itemid.
         * @member {number} itemid
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         */
        GW2C_AddPackageItem.prototype.itemid = 0;

        /**
         * GW2C_AddPackageItem num.
         * @member {number} num
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         */
        GW2C_AddPackageItem.prototype.num = 0;

        /**
         * Creates a new GW2C_AddPackageItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem=} [properties] Properties to set
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem instance
         */
        GW2C_AddPackageItem.create = function create(properties) {
            return new GW2C_AddPackageItem(properties);
        };

        /**
         * Encodes the specified GW2C_AddPackageItem message. Does not implicitly {@link msg.GW2C_AddPackageItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem} message GW2C_AddPackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddPackageItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AddPackageItem message, length delimited. Does not implicitly {@link msg.GW2C_AddPackageItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem} message GW2C_AddPackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddPackageItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AddPackageItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddPackageItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AddPackageItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AddPackageItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddPackageItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AddPackageItem message.
         * @function verify
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AddPackageItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_AddPackageItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         */
        GW2C_AddPackageItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AddPackageItem)
                return object;
            var message = new $root.msg.GW2C_AddPackageItem();
            if (object.itemid != null)
                message.itemid = object.itemid | 0;
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AddPackageItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.GW2C_AddPackageItem} message GW2C_AddPackageItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AddPackageItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_AddPackageItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AddPackageItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AddPackageItem;
    })();

    msg.GW2C_RemovePackageItem = (function() {

        /**
         * Properties of a GW2C_RemovePackageItem.
         * @memberof msg
         * @interface IGW2C_RemovePackageItem
         * @property {number|null} [itemid] GW2C_RemovePackageItem itemid
         * @property {number|null} [num] GW2C_RemovePackageItem num
         */

        /**
         * Constructs a new GW2C_RemovePackageItem.
         * @memberof msg
         * @classdesc Represents a GW2C_RemovePackageItem.
         * @implements IGW2C_RemovePackageItem
         * @constructor
         * @param {msg.IGW2C_RemovePackageItem=} [properties] Properties to set
         */
        function GW2C_RemovePackageItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RemovePackageItem itemid.
         * @member {number} itemid
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         */
        GW2C_RemovePackageItem.prototype.itemid = 0;

        /**
         * GW2C_RemovePackageItem num.
         * @member {number} num
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         */
        GW2C_RemovePackageItem.prototype.num = 0;

        /**
         * Creates a new GW2C_RemovePackageItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem=} [properties] Properties to set
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem instance
         */
        GW2C_RemovePackageItem.create = function create(properties) {
            return new GW2C_RemovePackageItem(properties);
        };

        /**
         * Encodes the specified GW2C_RemovePackageItem message. Does not implicitly {@link msg.GW2C_RemovePackageItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem} message GW2C_RemovePackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemovePackageItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RemovePackageItem message, length delimited. Does not implicitly {@link msg.GW2C_RemovePackageItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem} message GW2C_RemovePackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemovePackageItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RemovePackageItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemovePackageItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RemovePackageItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RemovePackageItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemovePackageItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RemovePackageItem message.
         * @function verify
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RemovePackageItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RemovePackageItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         */
        GW2C_RemovePackageItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RemovePackageItem)
                return object;
            var message = new $root.msg.GW2C_RemovePackageItem();
            if (object.itemid != null)
                message.itemid = object.itemid | 0;
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RemovePackageItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.GW2C_RemovePackageItem} message GW2C_RemovePackageItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RemovePackageItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_RemovePackageItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RemovePackageItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RemovePackageItem;
    })();

    msg.GW2C_UpdateGold = (function() {

        /**
         * Properties of a GW2C_UpdateGold.
         * @memberof msg
         * @interface IGW2C_UpdateGold
         * @property {number|null} [num] GW2C_UpdateGold num
         */

        /**
         * Constructs a new GW2C_UpdateGold.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateGold.
         * @implements IGW2C_UpdateGold
         * @constructor
         * @param {msg.IGW2C_UpdateGold=} [properties] Properties to set
         */
        function GW2C_UpdateGold(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateGold num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateGold
         * @instance
         */
        GW2C_UpdateGold.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateGold instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold instance
         */
        GW2C_UpdateGold.create = function create(properties) {
            return new GW2C_UpdateGold(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateGold message. Does not implicitly {@link msg.GW2C_UpdateGold.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold} message GW2C_UpdateGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateGold.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateGold message, length delimited. Does not implicitly {@link msg.GW2C_UpdateGold.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold} message GW2C_UpdateGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateGold.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateGold message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateGold.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateGold();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateGold message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateGold.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateGold message.
         * @function verify
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateGold.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateGold message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         */
        GW2C_UpdateGold.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateGold)
                return object;
            var message = new $root.msg.GW2C_UpdateGold();
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateGold message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.GW2C_UpdateGold} message GW2C_UpdateGold
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateGold.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateGold to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateGold
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateGold.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateGold;
    })();

    msg.GW2C_UpdateYuanbao = (function() {

        /**
         * Properties of a GW2C_UpdateYuanbao.
         * @memberof msg
         * @interface IGW2C_UpdateYuanbao
         * @property {number|null} [num] GW2C_UpdateYuanbao num
         */

        /**
         * Constructs a new GW2C_UpdateYuanbao.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateYuanbao.
         * @implements IGW2C_UpdateYuanbao
         * @constructor
         * @param {msg.IGW2C_UpdateYuanbao=} [properties] Properties to set
         */
        function GW2C_UpdateYuanbao(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateYuanbao num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateYuanbao
         * @instance
         */
        GW2C_UpdateYuanbao.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateYuanbao instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao instance
         */
        GW2C_UpdateYuanbao.create = function create(properties) {
            return new GW2C_UpdateYuanbao(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateYuanbao message. Does not implicitly {@link msg.GW2C_UpdateYuanbao.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao} message GW2C_UpdateYuanbao message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateYuanbao.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateYuanbao message, length delimited. Does not implicitly {@link msg.GW2C_UpdateYuanbao.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao} message GW2C_UpdateYuanbao message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateYuanbao.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateYuanbao message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateYuanbao.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateYuanbao();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateYuanbao message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateYuanbao.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateYuanbao message.
         * @function verify
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateYuanbao.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateYuanbao message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         */
        GW2C_UpdateYuanbao.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateYuanbao)
                return object;
            var message = new $root.msg.GW2C_UpdateYuanbao();
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateYuanbao message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.GW2C_UpdateYuanbao} message GW2C_UpdateYuanbao
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateYuanbao.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateYuanbao to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateYuanbao
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateYuanbao.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateYuanbao;
    })();

    msg.GW2C_UpdateDiamond = (function() {

        /**
         * Properties of a GW2C_UpdateDiamond.
         * @memberof msg
         * @interface IGW2C_UpdateDiamond
         * @property {number|null} [num] GW2C_UpdateDiamond num
         */

        /**
         * Constructs a new GW2C_UpdateDiamond.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateDiamond.
         * @implements IGW2C_UpdateDiamond
         * @constructor
         * @param {msg.IGW2C_UpdateDiamond=} [properties] Properties to set
         */
        function GW2C_UpdateDiamond(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateDiamond num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateDiamond
         * @instance
         */
        GW2C_UpdateDiamond.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateDiamond instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.IGW2C_UpdateDiamond=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond instance
         */
        GW2C_UpdateDiamond.create = function create(properties) {
            return new GW2C_UpdateDiamond(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateDiamond message. Does not implicitly {@link msg.GW2C_UpdateDiamond.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.IGW2C_UpdateDiamond} message GW2C_UpdateDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateDiamond.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateDiamond message, length delimited. Does not implicitly {@link msg.GW2C_UpdateDiamond.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.IGW2C_UpdateDiamond} message GW2C_UpdateDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateDiamond.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateDiamond message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateDiamond.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateDiamond();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateDiamond message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateDiamond.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateDiamond message.
         * @function verify
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateDiamond.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateDiamond message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond
         */
        GW2C_UpdateDiamond.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateDiamond)
                return object;
            var message = new $root.msg.GW2C_UpdateDiamond();
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateDiamond message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.GW2C_UpdateDiamond} message GW2C_UpdateDiamond
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateDiamond.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateDiamond to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateDiamond
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateDiamond.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateDiamond;
    })();

    msg.C2GW_UseBagItem = (function() {

        /**
         * Properties of a C2GW_UseBagItem.
         * @memberof msg
         * @interface IC2GW_UseBagItem
         * @property {number|null} [itemid] C2GW_UseBagItem itemid
         * @property {number|null} [num] C2GW_UseBagItem num
         */

        /**
         * Constructs a new C2GW_UseBagItem.
         * @memberof msg
         * @classdesc Represents a C2GW_UseBagItem.
         * @implements IC2GW_UseBagItem
         * @constructor
         * @param {msg.IC2GW_UseBagItem=} [properties] Properties to set
         */
        function C2GW_UseBagItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_UseBagItem itemid.
         * @member {number} itemid
         * @memberof msg.C2GW_UseBagItem
         * @instance
         */
        C2GW_UseBagItem.prototype.itemid = 0;

        /**
         * C2GW_UseBagItem num.
         * @member {number} num
         * @memberof msg.C2GW_UseBagItem
         * @instance
         */
        C2GW_UseBagItem.prototype.num = 0;

        /**
         * Creates a new C2GW_UseBagItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem=} [properties] Properties to set
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem instance
         */
        C2GW_UseBagItem.create = function create(properties) {
            return new C2GW_UseBagItem(properties);
        };

        /**
         * Encodes the specified C2GW_UseBagItem message. Does not implicitly {@link msg.C2GW_UseBagItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem} message C2GW_UseBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UseBagItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_UseBagItem message, length delimited. Does not implicitly {@link msg.C2GW_UseBagItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem} message C2GW_UseBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UseBagItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_UseBagItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UseBagItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_UseBagItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.int32();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_UseBagItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UseBagItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_UseBagItem message.
         * @function verify
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_UseBagItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_UseBagItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         */
        C2GW_UseBagItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_UseBagItem)
                return object;
            var message = new $root.msg.C2GW_UseBagItem();
            if (object.itemid != null)
                message.itemid = object.itemid | 0;
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_UseBagItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.C2GW_UseBagItem} message C2GW_UseBagItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_UseBagItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_UseBagItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_UseBagItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_UseBagItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_UseBagItem;
    })();

    msg.GW2C_UpdateItemPos = (function() {

        /**
         * Properties of a GW2C_UpdateItemPos.
         * @memberof msg
         * @interface IGW2C_UpdateItemPos
         * @property {Array.<msg.IItemData>|null} [items] GW2C_UpdateItemPos items
         */

        /**
         * Constructs a new GW2C_UpdateItemPos.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateItemPos.
         * @implements IGW2C_UpdateItemPos
         * @constructor
         * @param {msg.IGW2C_UpdateItemPos=} [properties] Properties to set
         */
        function GW2C_UpdateItemPos(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateItemPos items.
         * @member {Array.<msg.IItemData>} items
         * @memberof msg.GW2C_UpdateItemPos
         * @instance
         */
        GW2C_UpdateItemPos.prototype.items = $util.emptyArray;

        /**
         * Creates a new GW2C_UpdateItemPos instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.IGW2C_UpdateItemPos=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos instance
         */
        GW2C_UpdateItemPos.create = function create(properties) {
            return new GW2C_UpdateItemPos(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateItemPos message. Does not implicitly {@link msg.GW2C_UpdateItemPos.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.IGW2C_UpdateItemPos} message GW2C_UpdateItemPos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateItemPos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.ItemData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateItemPos message, length delimited. Does not implicitly {@link msg.GW2C_UpdateItemPos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.IGW2C_UpdateItemPos} message GW2C_UpdateItemPos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateItemPos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateItemPos message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateItemPos.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateItemPos();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateItemPos message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateItemPos.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateItemPos message.
         * @function verify
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateItemPos.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_UpdateItemPos message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos
         */
        GW2C_UpdateItemPos.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateItemPos)
                return object;
            var message = new $root.msg.GW2C_UpdateItemPos();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.GW2C_UpdateItemPos.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.GW2C_UpdateItemPos.items: object expected");
                    message.items[i] = $root.msg.ItemData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateItemPos message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.GW2C_UpdateItemPos} message GW2C_UpdateItemPos
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateItemPos.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.ItemData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_UpdateItemPos to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateItemPos
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateItemPos.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateItemPos;
    })();

    msg.C2GW_GoldExchange = (function() {

        /**
         * Properties of a C2GW_GoldExchange.
         * @memberof msg
         * @interface IC2GW_GoldExchange
         * @property {number|Long|null} [userid] C2GW_GoldExchange userid
         * @property {number|null} [diamonds] C2GW_GoldExchange diamonds
         */

        /**
         * Constructs a new C2GW_GoldExchange.
         * @memberof msg
         * @classdesc Represents a C2GW_GoldExchange.
         * @implements IC2GW_GoldExchange
         * @constructor
         * @param {msg.IC2GW_GoldExchange=} [properties] Properties to set
         */
        function C2GW_GoldExchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_GoldExchange userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_GoldExchange
         * @instance
         */
        C2GW_GoldExchange.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_GoldExchange diamonds.
         * @member {number} diamonds
         * @memberof msg.C2GW_GoldExchange
         * @instance
         */
        C2GW_GoldExchange.prototype.diamonds = 0;

        /**
         * Creates a new C2GW_GoldExchange instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.IC2GW_GoldExchange=} [properties] Properties to set
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange instance
         */
        C2GW_GoldExchange.create = function create(properties) {
            return new C2GW_GoldExchange(properties);
        };

        /**
         * Encodes the specified C2GW_GoldExchange message. Does not implicitly {@link msg.C2GW_GoldExchange.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.IC2GW_GoldExchange} message C2GW_GoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GoldExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            if (message.diamonds != null && message.hasOwnProperty("diamonds"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.diamonds);
            return writer;
        };

        /**
         * Encodes the specified C2GW_GoldExchange message, length delimited. Does not implicitly {@link msg.C2GW_GoldExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.IC2GW_GoldExchange} message C2GW_GoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GoldExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_GoldExchange message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GoldExchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_GoldExchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                case 2:
                    message.diamonds = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_GoldExchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GoldExchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_GoldExchange message.
         * @function verify
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_GoldExchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.diamonds != null && message.hasOwnProperty("diamonds"))
                if (!$util.isInteger(message.diamonds))
                    return "diamonds: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_GoldExchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange
         */
        C2GW_GoldExchange.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_GoldExchange)
                return object;
            var message = new $root.msg.C2GW_GoldExchange();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.diamonds != null)
                message.diamonds = object.diamonds | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_GoldExchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.C2GW_GoldExchange} message C2GW_GoldExchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_GoldExchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.diamonds = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.diamonds != null && message.hasOwnProperty("diamonds"))
                object.diamonds = message.diamonds;
            return object;
        };

        /**
         * Converts this C2GW_GoldExchange to JSON.
         * @function toJSON
         * @memberof msg.C2GW_GoldExchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_GoldExchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_GoldExchange;
    })();

    msg.GW2C_RetGoldExchange = (function() {

        /**
         * Properties of a GW2C_RetGoldExchange.
         * @memberof msg
         * @interface IGW2C_RetGoldExchange
         * @property {number|null} [gold] GW2C_RetGoldExchange gold
         */

        /**
         * Constructs a new GW2C_RetGoldExchange.
         * @memberof msg
         * @classdesc Represents a GW2C_RetGoldExchange.
         * @implements IGW2C_RetGoldExchange
         * @constructor
         * @param {msg.IGW2C_RetGoldExchange=} [properties] Properties to set
         */
        function GW2C_RetGoldExchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetGoldExchange gold.
         * @member {number} gold
         * @memberof msg.GW2C_RetGoldExchange
         * @instance
         */
        GW2C_RetGoldExchange.prototype.gold = 0;

        /**
         * Creates a new GW2C_RetGoldExchange instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.IGW2C_RetGoldExchange=} [properties] Properties to set
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange instance
         */
        GW2C_RetGoldExchange.create = function create(properties) {
            return new GW2C_RetGoldExchange(properties);
        };

        /**
         * Encodes the specified GW2C_RetGoldExchange message. Does not implicitly {@link msg.GW2C_RetGoldExchange.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.IGW2C_RetGoldExchange} message GW2C_RetGoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGoldExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetGoldExchange message, length delimited. Does not implicitly {@link msg.GW2C_RetGoldExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.IGW2C_RetGoldExchange} message GW2C_RetGoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGoldExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetGoldExchange message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGoldExchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetGoldExchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gold = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetGoldExchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGoldExchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetGoldExchange message.
         * @function verify
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetGoldExchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RetGoldExchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange
         */
        GW2C_RetGoldExchange.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetGoldExchange)
                return object;
            var message = new $root.msg.GW2C_RetGoldExchange();
            if (object.gold != null)
                message.gold = object.gold | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetGoldExchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.GW2C_RetGoldExchange} message GW2C_RetGoldExchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetGoldExchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gold = 0;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this GW2C_RetGoldExchange to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetGoldExchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetGoldExchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetGoldExchange;
    })();

    msg.C2L_ReqLogin = (function() {

        /**
         * Properties of a C2L_ReqLogin.
         * @memberof msg
         * @interface IC2L_ReqLogin
         * @property {string|null} [account] C2L_ReqLogin account
         * @property {string|null} [passwd] C2L_ReqLogin passwd
         */

        /**
         * Constructs a new C2L_ReqLogin.
         * @memberof msg
         * @classdesc Represents a C2L_ReqLogin.
         * @implements IC2L_ReqLogin
         * @constructor
         * @param {msg.IC2L_ReqLogin=} [properties] Properties to set
         */
        function C2L_ReqLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqLogin account.
         * @member {string} account
         * @memberof msg.C2L_ReqLogin
         * @instance
         */
        C2L_ReqLogin.prototype.account = "";

        /**
         * C2L_ReqLogin passwd.
         * @member {string} passwd
         * @memberof msg.C2L_ReqLogin
         * @instance
         */
        C2L_ReqLogin.prototype.passwd = "";

        /**
         * Creates a new C2L_ReqLogin instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin=} [properties] Properties to set
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin instance
         */
        C2L_ReqLogin.create = function create(properties) {
            return new C2L_ReqLogin(properties);
        };

        /**
         * Encodes the specified C2L_ReqLogin message. Does not implicitly {@link msg.C2L_ReqLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin} message C2L_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqLogin message, length delimited. Does not implicitly {@link msg.C2L_ReqLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin} message C2L_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqLogin message.
         * @function verify
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         */
        C2L_ReqLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqLogin)
                return object;
            var message = new $root.msg.C2L_ReqLogin();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.C2L_ReqLogin} message C2L_ReqLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            return object;
        };

        /**
         * Converts this C2L_ReqLogin to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqLogin;
    })();

    msg.C2L_ReqLoginWechat = (function() {

        /**
         * Properties of a C2L_ReqLoginWechat.
         * @memberof msg
         * @interface IC2L_ReqLoginWechat
         * @property {string|null} [openid] C2L_ReqLoginWechat openid
         * @property {string|null} [face] C2L_ReqLoginWechat face
         * @property {string|null} [nickname] C2L_ReqLoginWechat nickname
         * @property {string|null} [invitationcode] C2L_ReqLoginWechat invitationcode
         */

        /**
         * Constructs a new C2L_ReqLoginWechat.
         * @memberof msg
         * @classdesc Represents a C2L_ReqLoginWechat.
         * @implements IC2L_ReqLoginWechat
         * @constructor
         * @param {msg.IC2L_ReqLoginWechat=} [properties] Properties to set
         */
        function C2L_ReqLoginWechat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqLoginWechat openid.
         * @member {string} openid
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.openid = "";

        /**
         * C2L_ReqLoginWechat face.
         * @member {string} face
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.face = "";

        /**
         * C2L_ReqLoginWechat nickname.
         * @member {string} nickname
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.nickname = "";

        /**
         * C2L_ReqLoginWechat invitationcode.
         * @member {string} invitationcode
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.invitationcode = "";

        /**
         * Creates a new C2L_ReqLoginWechat instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.IC2L_ReqLoginWechat=} [properties] Properties to set
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat instance
         */
        C2L_ReqLoginWechat.create = function create(properties) {
            return new C2L_ReqLoginWechat(properties);
        };

        /**
         * Encodes the specified C2L_ReqLoginWechat message. Does not implicitly {@link msg.C2L_ReqLoginWechat.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.IC2L_ReqLoginWechat} message C2L_ReqLoginWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLoginWechat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.face);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.invitationcode);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqLoginWechat message, length delimited. Does not implicitly {@link msg.C2L_ReqLoginWechat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.IC2L_ReqLoginWechat} message C2L_ReqLoginWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLoginWechat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqLoginWechat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLoginWechat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqLoginWechat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                case 2:
                    message.face = reader.string();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.invitationcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqLoginWechat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLoginWechat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqLoginWechat message.
         * @function verify
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqLoginWechat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqLoginWechat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat
         */
        C2L_ReqLoginWechat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqLoginWechat)
                return object;
            var message = new $root.msg.C2L_ReqLoginWechat();
            if (object.openid != null)
                message.openid = String(object.openid);
            if (object.face != null)
                message.face = String(object.face);
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqLoginWechat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.C2L_ReqLoginWechat} message C2L_ReqLoginWechat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqLoginWechat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.openid = "";
                object.face = "";
                object.nickname = "";
                object.invitationcode = "";
            }
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            return object;
        };

        /**
         * Converts this C2L_ReqLoginWechat to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqLoginWechat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqLoginWechat;
    })();

    msg.L2C_RetLogin = (function() {

        /**
         * Properties of a L2C_RetLogin.
         * @memberof msg
         * @interface IL2C_RetLogin
         * @property {number|null} [result] L2C_RetLogin result
         * @property {string|null} [reason] L2C_RetLogin reason
         * @property {msg.IIpHost|null} [gatehost] L2C_RetLogin gatehost
         * @property {string|null} [verifykey] L2C_RetLogin verifykey
         */

        /**
         * Constructs a new L2C_RetLogin.
         * @memberof msg
         * @classdesc Represents a L2C_RetLogin.
         * @implements IL2C_RetLogin
         * @constructor
         * @param {msg.IL2C_RetLogin=} [properties] Properties to set
         */
        function L2C_RetLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2C_RetLogin result.
         * @member {number} result
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.result = 0;

        /**
         * L2C_RetLogin reason.
         * @member {string} reason
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.reason = "";

        /**
         * L2C_RetLogin gatehost.
         * @member {msg.IIpHost|null|undefined} gatehost
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.gatehost = null;

        /**
         * L2C_RetLogin verifykey.
         * @member {string} verifykey
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.verifykey = "";

        /**
         * Creates a new L2C_RetLogin instance using the specified properties.
         * @function create
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin=} [properties] Properties to set
         * @returns {msg.L2C_RetLogin} L2C_RetLogin instance
         */
        L2C_RetLogin.create = function create(properties) {
            return new L2C_RetLogin(properties);
        };

        /**
         * Encodes the specified L2C_RetLogin message. Does not implicitly {@link msg.L2C_RetLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin} message L2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                $root.msg.IpHost.encode(message.gatehost, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified L2C_RetLogin message, length delimited. Does not implicitly {@link msg.L2C_RetLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin} message L2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2C_RetLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2C_RetLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.gatehost = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2C_RetLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2C_RetLogin message.
         * @function verify
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2C_RetLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost")) {
                var error = $root.msg.IpHost.verify(message.gatehost);
                if (error)
                    return "gatehost." + error;
            }
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a L2C_RetLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         */
        L2C_RetLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2C_RetLogin)
                return object;
            var message = new $root.msg.L2C_RetLogin();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.gatehost != null) {
                if (typeof object.gatehost !== "object")
                    throw TypeError(".msg.L2C_RetLogin.gatehost: object expected");
                message.gatehost = $root.msg.IpHost.fromObject(object.gatehost);
            }
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a L2C_RetLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.L2C_RetLogin} message L2C_RetLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2C_RetLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.reason = "";
                object.gatehost = null;
                object.verifykey = "";
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = $root.msg.IpHost.toObject(message.gatehost, options);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this L2C_RetLogin to JSON.
         * @function toJSON
         * @memberof msg.L2C_RetLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2C_RetLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2C_RetLogin;
    })();

    msg.C2L_ReqRegistAuthCode = (function() {

        /**
         * Properties of a C2L_ReqRegistAuthCode.
         * @memberof msg
         * @interface IC2L_ReqRegistAuthCode
         * @property {string|null} [phone] C2L_ReqRegistAuthCode phone
         */

        /**
         * Constructs a new C2L_ReqRegistAuthCode.
         * @memberof msg
         * @classdesc Represents a C2L_ReqRegistAuthCode.
         * @implements IC2L_ReqRegistAuthCode
         * @constructor
         * @param {msg.IC2L_ReqRegistAuthCode=} [properties] Properties to set
         */
        function C2L_ReqRegistAuthCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqRegistAuthCode phone.
         * @member {string} phone
         * @memberof msg.C2L_ReqRegistAuthCode
         * @instance
         */
        C2L_ReqRegistAuthCode.prototype.phone = "";

        /**
         * Creates a new C2L_ReqRegistAuthCode instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode=} [properties] Properties to set
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode instance
         */
        C2L_ReqRegistAuthCode.create = function create(properties) {
            return new C2L_ReqRegistAuthCode(properties);
        };

        /**
         * Encodes the specified C2L_ReqRegistAuthCode message. Does not implicitly {@link msg.C2L_ReqRegistAuthCode.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAuthCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.phone);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqRegistAuthCode message, length delimited. Does not implicitly {@link msg.C2L_ReqRegistAuthCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAuthCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqRegistAuthCode message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAuthCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqRegistAuthCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phone = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqRegistAuthCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAuthCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqRegistAuthCode message.
         * @function verify
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqRegistAuthCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqRegistAuthCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         */
        C2L_ReqRegistAuthCode.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqRegistAuthCode)
                return object;
            var message = new $root.msg.C2L_ReqRegistAuthCode();
            if (object.phone != null)
                message.phone = String(object.phone);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqRegistAuthCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.C2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqRegistAuthCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.phone = "";
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            return object;
        };

        /**
         * Converts this C2L_ReqRegistAuthCode to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqRegistAuthCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqRegistAuthCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqRegistAuthCode;
    })();

    msg.C2L_ReqRegistAccount = (function() {

        /**
         * Properties of a C2L_ReqRegistAccount.
         * @memberof msg
         * @interface IC2L_ReqRegistAccount
         * @property {string|null} [phone] C2L_ReqRegistAccount phone
         * @property {string|null} [passwd] C2L_ReqRegistAccount passwd
         * @property {string|null} [authcode] C2L_ReqRegistAccount authcode
         * @property {string|null} [invitationcode] C2L_ReqRegistAccount invitationcode
         * @property {string|null} [nickname] C2L_ReqRegistAccount nickname
         */

        /**
         * Constructs a new C2L_ReqRegistAccount.
         * @memberof msg
         * @classdesc Represents a C2L_ReqRegistAccount.
         * @implements IC2L_ReqRegistAccount
         * @constructor
         * @param {msg.IC2L_ReqRegistAccount=} [properties] Properties to set
         */
        function C2L_ReqRegistAccount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqRegistAccount phone.
         * @member {string} phone
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.phone = "";

        /**
         * C2L_ReqRegistAccount passwd.
         * @member {string} passwd
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.passwd = "";

        /**
         * C2L_ReqRegistAccount authcode.
         * @member {string} authcode
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.authcode = "";

        /**
         * C2L_ReqRegistAccount invitationcode.
         * @member {string} invitationcode
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.invitationcode = "";

        /**
         * C2L_ReqRegistAccount nickname.
         * @member {string} nickname
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.nickname = "";

        /**
         * Creates a new C2L_ReqRegistAccount instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount=} [properties] Properties to set
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount instance
         */
        C2L_ReqRegistAccount.create = function create(properties) {
            return new C2L_ReqRegistAccount(properties);
        };

        /**
         * Encodes the specified C2L_ReqRegistAccount message. Does not implicitly {@link msg.C2L_ReqRegistAccount.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount} message C2L_ReqRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAccount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.phone);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.authcode);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.invitationcode);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.nickname);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqRegistAccount message, length delimited. Does not implicitly {@link msg.C2L_ReqRegistAccount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount} message C2L_ReqRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAccount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqRegistAccount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAccount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqRegistAccount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phone = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.authcode = reader.string();
                    break;
                case 4:
                    message.invitationcode = reader.string();
                    break;
                case 5:
                    message.nickname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqRegistAccount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAccount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqRegistAccount message.
         * @function verify
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqRegistAccount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                if (!$util.isString(message.authcode))
                    return "authcode: string expected";
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqRegistAccount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         */
        C2L_ReqRegistAccount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqRegistAccount)
                return object;
            var message = new $root.msg.C2L_ReqRegistAccount();
            if (object.phone != null)
                message.phone = String(object.phone);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.authcode != null)
                message.authcode = String(object.authcode);
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqRegistAccount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.C2L_ReqRegistAccount} message C2L_ReqRegistAccount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqRegistAccount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.phone = "";
                object.passwd = "";
                object.authcode = "";
                object.invitationcode = "";
                object.nickname = "";
            }
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                object.authcode = message.authcode;
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            return object;
        };

        /**
         * Converts this C2L_ReqRegistAccount to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqRegistAccount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqRegistAccount;
    })();

    msg.L2C_RetRegistAccount = (function() {

        /**
         * Properties of a L2C_RetRegistAccount.
         * @memberof msg
         * @interface IL2C_RetRegistAccount
         * @property {string|null} [errcode] L2C_RetRegistAccount errcode
         */

        /**
         * Constructs a new L2C_RetRegistAccount.
         * @memberof msg
         * @classdesc Represents a L2C_RetRegistAccount.
         * @implements IL2C_RetRegistAccount
         * @constructor
         * @param {msg.IL2C_RetRegistAccount=} [properties] Properties to set
         */
        function L2C_RetRegistAccount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2C_RetRegistAccount errcode.
         * @member {string} errcode
         * @memberof msg.L2C_RetRegistAccount
         * @instance
         */
        L2C_RetRegistAccount.prototype.errcode = "";

        /**
         * Creates a new L2C_RetRegistAccount instance using the specified properties.
         * @function create
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount=} [properties] Properties to set
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount instance
         */
        L2C_RetRegistAccount.create = function create(properties) {
            return new L2C_RetRegistAccount(properties);
        };

        /**
         * Encodes the specified L2C_RetRegistAccount message. Does not implicitly {@link msg.L2C_RetRegistAccount.verify|verify} messages.
         * @function encode
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount} message L2C_RetRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetRegistAccount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified L2C_RetRegistAccount message, length delimited. Does not implicitly {@link msg.L2C_RetRegistAccount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount} message L2C_RetRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetRegistAccount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2C_RetRegistAccount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetRegistAccount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2C_RetRegistAccount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2C_RetRegistAccount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetRegistAccount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2C_RetRegistAccount message.
         * @function verify
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2C_RetRegistAccount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a L2C_RetRegistAccount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         */
        L2C_RetRegistAccount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2C_RetRegistAccount)
                return object;
            var message = new $root.msg.L2C_RetRegistAccount();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a L2C_RetRegistAccount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.L2C_RetRegistAccount} message L2C_RetRegistAccount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2C_RetRegistAccount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this L2C_RetRegistAccount to JSON.
         * @function toJSON
         * @memberof msg.L2C_RetRegistAccount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2C_RetRegistAccount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2C_RetRegistAccount;
    })();

    msg.C2GW_ReqLogin = (function() {

        /**
         * Properties of a C2GW_ReqLogin.
         * @memberof msg
         * @interface IC2GW_ReqLogin
         * @property {string|null} [account] C2GW_ReqLogin account
         * @property {string|null} [verifykey] C2GW_ReqLogin verifykey
         * @property {string|null} [token] C2GW_ReqLogin token
         * @property {string|null} [face] C2GW_ReqLogin face
         */

        /**
         * Constructs a new C2GW_ReqLogin.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqLogin.
         * @implements IC2GW_ReqLogin
         * @constructor
         * @param {msg.IC2GW_ReqLogin=} [properties] Properties to set
         */
        function C2GW_ReqLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqLogin account.
         * @member {string} account
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.account = "";

        /**
         * C2GW_ReqLogin verifykey.
         * @member {string} verifykey
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.verifykey = "";

        /**
         * C2GW_ReqLogin token.
         * @member {string} token
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.token = "";

        /**
         * C2GW_ReqLogin face.
         * @member {string} face
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.face = "";

        /**
         * Creates a new C2GW_ReqLogin instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin=} [properties] Properties to set
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin instance
         */
        C2GW_ReqLogin.create = function create(properties) {
            return new C2GW_ReqLogin(properties);
        };

        /**
         * Encodes the specified C2GW_ReqLogin message. Does not implicitly {@link msg.C2GW_ReqLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin} message C2GW_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.verifykey);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.face);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqLogin message, length delimited. Does not implicitly {@link msg.C2GW_ReqLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin} message C2GW_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.verifykey = reader.string();
                    break;
                case 3:
                    message.token = reader.string();
                    break;
                case 4:
                    message.face = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqLogin message.
         * @function verify
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         */
        C2GW_ReqLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqLogin)
                return object;
            var message = new $root.msg.C2GW_ReqLogin();
            if (object.account != null)
                message.account = String(object.account);
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            if (object.token != null)
                message.token = String(object.token);
            if (object.face != null)
                message.face = String(object.face);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.C2GW_ReqLogin} message C2GW_ReqLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.verifykey = "";
                object.token = "";
                object.face = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            return object;
        };

        /**
         * Converts this C2GW_ReqLogin to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqLogin;
    })();

    msg.GW2C_RetLogin = (function() {

        /**
         * Properties of a GW2C_RetLogin.
         * @memberof msg
         * @interface IGW2C_RetLogin
         * @property {string|null} [errcode] GW2C_RetLogin errcode
         */

        /**
         * Constructs a new GW2C_RetLogin.
         * @memberof msg
         * @classdesc Represents a GW2C_RetLogin.
         * @implements IGW2C_RetLogin
         * @constructor
         * @param {msg.IGW2C_RetLogin=} [properties] Properties to set
         */
        function GW2C_RetLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetLogin errcode.
         * @member {string} errcode
         * @memberof msg.GW2C_RetLogin
         * @instance
         */
        GW2C_RetLogin.prototype.errcode = "";

        /**
         * Creates a new GW2C_RetLogin instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin=} [properties] Properties to set
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin instance
         */
        GW2C_RetLogin.create = function create(properties) {
            return new GW2C_RetLogin(properties);
        };

        /**
         * Encodes the specified GW2C_RetLogin message. Does not implicitly {@link msg.GW2C_RetLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin} message GW2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetLogin message, length delimited. Does not implicitly {@link msg.GW2C_RetLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin} message GW2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetLogin message.
         * @function verify
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         */
        GW2C_RetLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetLogin)
                return object;
            var message = new $root.msg.GW2C_RetLogin();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.GW2C_RetLogin} message GW2C_RetLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this GW2C_RetLogin to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetLogin;
    })();

    msg.GW2C_SendUserInfo = (function() {

        /**
         * Properties of a GW2C_SendUserInfo.
         * @memberof msg
         * @interface IGW2C_SendUserInfo
         * @property {msg.IEntityBase|null} [entity] GW2C_SendUserInfo entity
         * @property {msg.IUserBase|null} [base] GW2C_SendUserInfo base
         * @property {msg.IItemBin|null} [item] GW2C_SendUserInfo item
         */

        /**
         * Constructs a new GW2C_SendUserInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserInfo.
         * @implements IGW2C_SendUserInfo
         * @constructor
         * @param {msg.IGW2C_SendUserInfo=} [properties] Properties to set
         */
        function GW2C_SendUserInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserInfo entity.
         * @member {msg.IEntityBase|null|undefined} entity
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.entity = null;

        /**
         * GW2C_SendUserInfo base.
         * @member {msg.IUserBase|null|undefined} base
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.base = null;

        /**
         * GW2C_SendUserInfo item.
         * @member {msg.IItemBin|null|undefined} item
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.item = null;

        /**
         * Creates a new GW2C_SendUserInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo instance
         */
        GW2C_SendUserInfo.create = function create(properties) {
            return new GW2C_SendUserInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserInfo message. Does not implicitly {@link msg.GW2C_SendUserInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo} message GW2C_SendUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && message.hasOwnProperty("entity"))
                $root.msg.EntityBase.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.base != null && message.hasOwnProperty("base"))
                $root.msg.UserBase.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.ItemBin.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendUserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo} message GW2C_SendUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.msg.EntityBase.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.base = $root.msg.UserBase.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.item = $root.msg.ItemBin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserInfo message.
         * @function verify
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.msg.EntityBase.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.msg.UserBase.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.ItemBin.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendUserInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         */
        GW2C_SendUserInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserInfo)
                return object;
            var message = new $root.msg.GW2C_SendUserInfo();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.entity: object expected");
                message.entity = $root.msg.EntityBase.fromObject(object.entity);
            }
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.base: object expected");
                message.base = $root.msg.UserBase.fromObject(object.base);
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.item: object expected");
                message.item = $root.msg.ItemBin.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.GW2C_SendUserInfo} message GW2C_SendUserInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entity = null;
                object.base = null;
                object.item = null;
            }
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.msg.EntityBase.toObject(message.entity, options);
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.msg.UserBase.toObject(message.base, options);
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.ItemBin.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this GW2C_SendUserInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserInfo;
    })();

    msg.GW2C_SendUserPlatformMoney = (function() {

        /**
         * Properties of a GW2C_SendUserPlatformMoney.
         * @memberof msg
         * @interface IGW2C_SendUserPlatformMoney
         * @property {number|null} [coins] GW2C_SendUserPlatformMoney coins
         */

        /**
         * Constructs a new GW2C_SendUserPlatformMoney.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserPlatformMoney.
         * @implements IGW2C_SendUserPlatformMoney
         * @constructor
         * @param {msg.IGW2C_SendUserPlatformMoney=} [properties] Properties to set
         */
        function GW2C_SendUserPlatformMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserPlatformMoney coins.
         * @member {number} coins
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @instance
         */
        GW2C_SendUserPlatformMoney.prototype.coins = 0;

        /**
         * Creates a new GW2C_SendUserPlatformMoney instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney instance
         */
        GW2C_SendUserPlatformMoney.create = function create(properties) {
            return new GW2C_SendUserPlatformMoney(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserPlatformMoney message. Does not implicitly {@link msg.GW2C_SendUserPlatformMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserPlatformMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.coins);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserPlatformMoney message, length delimited. Does not implicitly {@link msg.GW2C_SendUserPlatformMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserPlatformMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserPlatformMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserPlatformMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserPlatformMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserPlatformMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserPlatformMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserPlatformMoney message.
         * @function verify
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserPlatformMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (!$util.isInteger(message.coins))
                    return "coins: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_SendUserPlatformMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         */
        GW2C_SendUserPlatformMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserPlatformMoney)
                return object;
            var message = new $root.msg.GW2C_SendUserPlatformMoney();
            if (object.coins != null)
                message.coins = object.coins | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserPlatformMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.GW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserPlatformMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.coins = 0;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = message.coins;
            return object;
        };

        /**
         * Converts this GW2C_SendUserPlatformMoney to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserPlatformMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserPlatformMoney;
    })();

    msg.C2GW_HeartBeat = (function() {

        /**
         * Properties of a C2GW_HeartBeat.
         * @memberof msg
         * @interface IC2GW_HeartBeat
         * @property {number|Long|null} [uid] C2GW_HeartBeat uid
         * @property {number|Long|null} [time] C2GW_HeartBeat time
         * @property {Array.<string>|null} [test] C2GW_HeartBeat test
         */

        /**
         * Constructs a new C2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a C2GW_HeartBeat.
         * @implements IC2GW_HeartBeat
         * @constructor
         * @param {msg.IC2GW_HeartBeat=} [properties] Properties to set
         */
        function C2GW_HeartBeat(properties) {
            this.test = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_HeartBeat uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_HeartBeat time.
         * @member {number|Long} time
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_HeartBeat test.
         * @member {Array.<string>} test
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.test = $util.emptyArray;

        /**
         * Creates a new C2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat instance
         */
        C2GW_HeartBeat.create = function create(properties) {
            return new C2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified C2GW_HeartBeat message. Does not implicitly {@link msg.C2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat} message C2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
            if (message.test != null && message.test.length)
                for (var i = 0; i < message.test.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.test[i]);
            return writer;
        };

        /**
         * Encodes the specified C2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.C2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat} message C2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.time = reader.int64();
                    break;
                case 3:
                    if (!(message.test && message.test.length))
                        message.test = [];
                    message.test.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_HeartBeat message.
         * @function verify
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.test != null && message.hasOwnProperty("test")) {
                if (!Array.isArray(message.test))
                    return "test: array expected";
                for (var i = 0; i < message.test.length; ++i)
                    if (!$util.isString(message.test[i]))
                        return "test: string[] expected";
            }
            return null;
        };

        /**
         * Creates a C2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         */
        C2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_HeartBeat)
                return object;
            var message = new $root.msg.C2GW_HeartBeat();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.test) {
                if (!Array.isArray(object.test))
                    throw TypeError(".msg.C2GW_HeartBeat.test: array expected");
                message.test = [];
                for (var i = 0; i < object.test.length; ++i)
                    message.test[i] = String(object.test[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.C2GW_HeartBeat} message C2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_HeartBeat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.test = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.test && message.test.length) {
                object.test = [];
                for (var j = 0; j < message.test.length; ++j)
                    object.test[j] = message.test[j];
            }
            return object;
        };

        /**
         * Converts this C2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.C2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_HeartBeat;
    })();

    msg.GW2C_HeartBeat = (function() {

        /**
         * Properties of a GW2C_HeartBeat.
         * @memberof msg
         * @interface IGW2C_HeartBeat
         * @property {number|Long|null} [uid] GW2C_HeartBeat uid
         * @property {number|Long|null} [time] GW2C_HeartBeat time
         * @property {Array.<string>|null} [test] GW2C_HeartBeat test
         */

        /**
         * Constructs a new GW2C_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2C_HeartBeat.
         * @implements IGW2C_HeartBeat
         * @constructor
         * @param {msg.IGW2C_HeartBeat=} [properties] Properties to set
         */
        function GW2C_HeartBeat(properties) {
            this.test = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_HeartBeat uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_HeartBeat time.
         * @member {number|Long} time
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_HeartBeat test.
         * @member {Array.<string>} test
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.test = $util.emptyArray;

        /**
         * Creates a new GW2C_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat instance
         */
        GW2C_HeartBeat.create = function create(properties) {
            return new GW2C_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2C_HeartBeat message. Does not implicitly {@link msg.GW2C_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat} message GW2C_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
            if (message.test != null && message.test.length)
                for (var i = 0; i < message.test.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.test[i]);
            return writer;
        };

        /**
         * Encodes the specified GW2C_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2C_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat} message GW2C_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.time = reader.int64();
                    break;
                case 3:
                    if (!(message.test && message.test.length))
                        message.test = [];
                    message.test.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_HeartBeat message.
         * @function verify
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.test != null && message.hasOwnProperty("test")) {
                if (!Array.isArray(message.test))
                    return "test: array expected";
                for (var i = 0; i < message.test.length; ++i)
                    if (!$util.isString(message.test[i]))
                        return "test: string[] expected";
            }
            return null;
        };

        /**
         * Creates a GW2C_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         */
        GW2C_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_HeartBeat)
                return object;
            var message = new $root.msg.GW2C_HeartBeat();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.test) {
                if (!Array.isArray(object.test))
                    throw TypeError(".msg.GW2C_HeartBeat.test: array expected");
                message.test = [];
                for (var i = 0; i < object.test.length; ++i)
                    message.test[i] = String(object.test[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.GW2C_HeartBeat} message GW2C_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_HeartBeat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.test = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.test && message.test.length) {
                object.test = [];
                for (var j = 0; j < message.test.length; ++j)
                    object.test[j] = message.test[j];
            }
            return object;
        };

        /**
         * Converts this GW2C_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2C_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_HeartBeat;
    })();

    msg.C2GW_ReqRechargeMoney = (function() {

        /**
         * Properties of a C2GW_ReqRechargeMoney.
         * @memberof msg
         * @interface IC2GW_ReqRechargeMoney
         * @property {number|null} [amount] C2GW_ReqRechargeMoney amount
         * @property {string|null} [token] C2GW_ReqRechargeMoney token
         * @property {number|null} [type] C2GW_ReqRechargeMoney type
         */

        /**
         * Constructs a new C2GW_ReqRechargeMoney.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqRechargeMoney.
         * @implements IC2GW_ReqRechargeMoney
         * @constructor
         * @param {msg.IC2GW_ReqRechargeMoney=} [properties] Properties to set
         */
        function C2GW_ReqRechargeMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqRechargeMoney amount.
         * @member {number} amount
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.amount = 0;

        /**
         * C2GW_ReqRechargeMoney token.
         * @member {string} token
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.token = "";

        /**
         * C2GW_ReqRechargeMoney type.
         * @member {number} type
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.type = 0;

        /**
         * Creates a new C2GW_ReqRechargeMoney instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney=} [properties] Properties to set
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney instance
         */
        C2GW_ReqRechargeMoney.create = function create(properties) {
            return new C2GW_ReqRechargeMoney(properties);
        };

        /**
         * Encodes the specified C2GW_ReqRechargeMoney message. Does not implicitly {@link msg.C2GW_ReqRechargeMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRechargeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.amount != null && message.hasOwnProperty("amount"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.amount);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqRechargeMoney message, length delimited. Does not implicitly {@link msg.C2GW_ReqRechargeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRechargeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqRechargeMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRechargeMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqRechargeMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.amount = reader.int32();
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                case 3:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqRechargeMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRechargeMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqRechargeMoney message.
         * @function verify
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqRechargeMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqRechargeMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         */
        C2GW_ReqRechargeMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqRechargeMoney)
                return object;
            var message = new $root.msg.C2GW_ReqRechargeMoney();
            if (object.amount != null)
                message.amount = object.amount | 0;
            if (object.token != null)
                message.token = String(object.token);
            if (object.type != null)
                message.type = object.type | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqRechargeMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.C2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqRechargeMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.amount = 0;
                object.token = "";
                object.type = 0;
            }
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this C2GW_ReqRechargeMoney to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqRechargeMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqRechargeMoney;
    })();

    msg.GW2C_RetRechargeMoney = (function() {

        /**
         * Properties of a GW2C_RetRechargeMoney.
         * @memberof msg
         * @interface IGW2C_RetRechargeMoney
         * @property {string|null} [urlcheckout] GW2C_RetRechargeMoney urlcheckout
         */

        /**
         * Constructs a new GW2C_RetRechargeMoney.
         * @memberof msg
         * @classdesc Represents a GW2C_RetRechargeMoney.
         * @implements IGW2C_RetRechargeMoney
         * @constructor
         * @param {msg.IGW2C_RetRechargeMoney=} [properties] Properties to set
         */
        function GW2C_RetRechargeMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetRechargeMoney urlcheckout.
         * @member {string} urlcheckout
         * @memberof msg.GW2C_RetRechargeMoney
         * @instance
         */
        GW2C_RetRechargeMoney.prototype.urlcheckout = "";

        /**
         * Creates a new GW2C_RetRechargeMoney instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney=} [properties] Properties to set
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney instance
         */
        GW2C_RetRechargeMoney.create = function create(properties) {
            return new GW2C_RetRechargeMoney(properties);
        };

        /**
         * Encodes the specified GW2C_RetRechargeMoney message. Does not implicitly {@link msg.GW2C_RetRechargeMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney} message GW2C_RetRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetRechargeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.urlcheckout);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetRechargeMoney message, length delimited. Does not implicitly {@link msg.GW2C_RetRechargeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney} message GW2C_RetRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetRechargeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetRechargeMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetRechargeMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetRechargeMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.urlcheckout = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetRechargeMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetRechargeMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetRechargeMoney message.
         * @function verify
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetRechargeMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                if (!$util.isString(message.urlcheckout))
                    return "urlcheckout: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetRechargeMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         */
        GW2C_RetRechargeMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetRechargeMoney)
                return object;
            var message = new $root.msg.GW2C_RetRechargeMoney();
            if (object.urlcheckout != null)
                message.urlcheckout = String(object.urlcheckout);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetRechargeMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.GW2C_RetRechargeMoney} message GW2C_RetRechargeMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetRechargeMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.urlcheckout = "";
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                object.urlcheckout = message.urlcheckout;
            return object;
        };

        /**
         * Converts this GW2C_RetRechargeMoney to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetRechargeMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetRechargeMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetRechargeMoney;
    })();

    msg.C2GW_PlatformRechargeDone = (function() {

        /**
         * Properties of a C2GW_PlatformRechargeDone.
         * @memberof msg
         * @interface IC2GW_PlatformRechargeDone
         * @property {number|Long|null} [userid] C2GW_PlatformRechargeDone userid
         */

        /**
         * Constructs a new C2GW_PlatformRechargeDone.
         * @memberof msg
         * @classdesc Represents a C2GW_PlatformRechargeDone.
         * @implements IC2GW_PlatformRechargeDone
         * @constructor
         * @param {msg.IC2GW_PlatformRechargeDone=} [properties] Properties to set
         */
        function C2GW_PlatformRechargeDone(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_PlatformRechargeDone userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_PlatformRechargeDone
         * @instance
         */
        C2GW_PlatformRechargeDone.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new C2GW_PlatformRechargeDone instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone=} [properties] Properties to set
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone instance
         */
        C2GW_PlatformRechargeDone.create = function create(properties) {
            return new C2GW_PlatformRechargeDone(properties);
        };

        /**
         * Encodes the specified C2GW_PlatformRechargeDone message. Does not implicitly {@link msg.C2GW_PlatformRechargeDone.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_PlatformRechargeDone.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_PlatformRechargeDone message, length delimited. Does not implicitly {@link msg.C2GW_PlatformRechargeDone.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_PlatformRechargeDone.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_PlatformRechargeDone message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_PlatformRechargeDone.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_PlatformRechargeDone();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_PlatformRechargeDone message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_PlatformRechargeDone.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_PlatformRechargeDone message.
         * @function verify
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_PlatformRechargeDone.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_PlatformRechargeDone message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         */
        C2GW_PlatformRechargeDone.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_PlatformRechargeDone)
                return object;
            var message = new $root.msg.C2GW_PlatformRechargeDone();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a C2GW_PlatformRechargeDone message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.C2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_PlatformRechargeDone.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_PlatformRechargeDone to JSON.
         * @function toJSON
         * @memberof msg.C2GW_PlatformRechargeDone
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_PlatformRechargeDone.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_PlatformRechargeDone;
    })();

    msg.GW2C_SendWechatInfo = (function() {

        /**
         * Properties of a GW2C_SendWechatInfo.
         * @memberof msg
         * @interface IGW2C_SendWechatInfo
         * @property {string|null} [openid] GW2C_SendWechatInfo openid
         */

        /**
         * Constructs a new GW2C_SendWechatInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendWechatInfo.
         * @implements IGW2C_SendWechatInfo
         * @constructor
         * @param {msg.IGW2C_SendWechatInfo=} [properties] Properties to set
         */
        function GW2C_SendWechatInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendWechatInfo openid.
         * @member {string} openid
         * @memberof msg.GW2C_SendWechatInfo
         * @instance
         */
        GW2C_SendWechatInfo.prototype.openid = "";

        /**
         * Creates a new GW2C_SendWechatInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo instance
         */
        GW2C_SendWechatInfo.create = function create(properties) {
            return new GW2C_SendWechatInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendWechatInfo message. Does not implicitly {@link msg.GW2C_SendWechatInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo} message GW2C_SendWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendWechatInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendWechatInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendWechatInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo} message GW2C_SendWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendWechatInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendWechatInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendWechatInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendWechatInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendWechatInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendWechatInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendWechatInfo message.
         * @function verify
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendWechatInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            return null;
        };

        /**
         * Creates a GW2C_SendWechatInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         */
        GW2C_SendWechatInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendWechatInfo)
                return object;
            var message = new $root.msg.GW2C_SendWechatInfo();
            if (object.openid != null)
                message.openid = String(object.openid);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendWechatInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.GW2C_SendWechatInfo} message GW2C_SendWechatInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendWechatInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.openid = "";
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            return object;
        };

        /**
         * Converts this GW2C_SendWechatInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendWechatInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendWechatInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendWechatInfo;
    })();

    msg.C2GW_StartLuckyDraw = (function() {

        /**
         * Properties of a C2GW_StartLuckyDraw.
         * @memberof msg
         * @interface IC2GW_StartLuckyDraw
         * @property {number|Long|null} [userid] C2GW_StartLuckyDraw userid
         */

        /**
         * Constructs a new C2GW_StartLuckyDraw.
         * @memberof msg
         * @classdesc Represents a C2GW_StartLuckyDraw.
         * @implements IC2GW_StartLuckyDraw
         * @constructor
         * @param {msg.IC2GW_StartLuckyDraw=} [properties] Properties to set
         */
        function C2GW_StartLuckyDraw(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_StartLuckyDraw userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_StartLuckyDraw
         * @instance
         */
        C2GW_StartLuckyDraw.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new C2GW_StartLuckyDraw instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw=} [properties] Properties to set
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw instance
         */
        C2GW_StartLuckyDraw.create = function create(properties) {
            return new C2GW_StartLuckyDraw(properties);
        };

        /**
         * Encodes the specified C2GW_StartLuckyDraw message. Does not implicitly {@link msg.C2GW_StartLuckyDraw.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw} message C2GW_StartLuckyDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartLuckyDraw.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_StartLuckyDraw message, length delimited. Does not implicitly {@link msg.C2GW_StartLuckyDraw.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw} message C2GW_StartLuckyDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartLuckyDraw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_StartLuckyDraw message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartLuckyDraw.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_StartLuckyDraw();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_StartLuckyDraw message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartLuckyDraw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_StartLuckyDraw message.
         * @function verify
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_StartLuckyDraw.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_StartLuckyDraw message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         */
        C2GW_StartLuckyDraw.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_StartLuckyDraw)
                return object;
            var message = new $root.msg.C2GW_StartLuckyDraw();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a C2GW_StartLuckyDraw message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.C2GW_StartLuckyDraw} message C2GW_StartLuckyDraw
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_StartLuckyDraw.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_StartLuckyDraw to JSON.
         * @function toJSON
         * @memberof msg.C2GW_StartLuckyDraw
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_StartLuckyDraw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_StartLuckyDraw;
    })();

    msg.GW2C_LuckyDrawHit = (function() {

        /**
         * Properties of a GW2C_LuckyDrawHit.
         * @memberof msg
         * @interface IGW2C_LuckyDrawHit
         * @property {number|null} [id] GW2C_LuckyDrawHit id
         */

        /**
         * Constructs a new GW2C_LuckyDrawHit.
         * @memberof msg
         * @classdesc Represents a GW2C_LuckyDrawHit.
         * @implements IGW2C_LuckyDrawHit
         * @constructor
         * @param {msg.IGW2C_LuckyDrawHit=} [properties] Properties to set
         */
        function GW2C_LuckyDrawHit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_LuckyDrawHit id.
         * @member {number} id
         * @memberof msg.GW2C_LuckyDrawHit
         * @instance
         */
        GW2C_LuckyDrawHit.prototype.id = 0;

        /**
         * Creates a new GW2C_LuckyDrawHit instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit=} [properties] Properties to set
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit instance
         */
        GW2C_LuckyDrawHit.create = function create(properties) {
            return new GW2C_LuckyDrawHit(properties);
        };

        /**
         * Encodes the specified GW2C_LuckyDrawHit message. Does not implicitly {@link msg.GW2C_LuckyDrawHit.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit} message GW2C_LuckyDrawHit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_LuckyDrawHit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified GW2C_LuckyDrawHit message, length delimited. Does not implicitly {@link msg.GW2C_LuckyDrawHit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit} message GW2C_LuckyDrawHit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_LuckyDrawHit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_LuckyDrawHit message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_LuckyDrawHit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_LuckyDrawHit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_LuckyDrawHit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_LuckyDrawHit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_LuckyDrawHit message.
         * @function verify
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_LuckyDrawHit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_LuckyDrawHit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         */
        GW2C_LuckyDrawHit.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_LuckyDrawHit)
                return object;
            var message = new $root.msg.GW2C_LuckyDrawHit();
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_LuckyDrawHit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.GW2C_LuckyDrawHit} message GW2C_LuckyDrawHit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_LuckyDrawHit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this GW2C_LuckyDrawHit to JSON.
         * @function toJSON
         * @memberof msg.GW2C_LuckyDrawHit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_LuckyDrawHit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_LuckyDrawHit;
    })();

    msg.GW2C_SendTaskList = (function() {

        /**
         * Properties of a GW2C_SendTaskList.
         * @memberof msg
         * @interface IGW2C_SendTaskList
         * @property {Array.<msg.ITaskData>|null} [tasks] GW2C_SendTaskList tasks
         */

        /**
         * Constructs a new GW2C_SendTaskList.
         * @memberof msg
         * @classdesc Represents a GW2C_SendTaskList.
         * @implements IGW2C_SendTaskList
         * @constructor
         * @param {msg.IGW2C_SendTaskList=} [properties] Properties to set
         */
        function GW2C_SendTaskList(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendTaskList tasks.
         * @member {Array.<msg.ITaskData>} tasks
         * @memberof msg.GW2C_SendTaskList
         * @instance
         */
        GW2C_SendTaskList.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new GW2C_SendTaskList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList=} [properties] Properties to set
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList instance
         */
        GW2C_SendTaskList.create = function create(properties) {
            return new GW2C_SendTaskList(properties);
        };

        /**
         * Encodes the specified GW2C_SendTaskList message. Does not implicitly {@link msg.GW2C_SendTaskList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList} message GW2C_SendTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendTaskList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.msg.TaskData.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendTaskList message, length delimited. Does not implicitly {@link msg.GW2C_SendTaskList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList} message GW2C_SendTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendTaskList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendTaskList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendTaskList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendTaskList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.msg.TaskData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendTaskList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendTaskList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendTaskList message.
         * @function verify
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendTaskList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.msg.TaskData.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendTaskList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         */
        GW2C_SendTaskList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendTaskList)
                return object;
            var message = new $root.msg.GW2C_SendTaskList();
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".msg.GW2C_SendTaskList.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".msg.GW2C_SendTaskList.tasks: object expected");
                    message.tasks[i] = $root.msg.TaskData.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendTaskList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.GW2C_SendTaskList} message GW2C_SendTaskList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendTaskList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.msg.TaskData.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendTaskList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendTaskList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendTaskList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendTaskList;
    })();

    msg.GW2C_SendLuckyDrawRecord = (function() {

        /**
         * Properties of a GW2C_SendLuckyDrawRecord.
         * @memberof msg
         * @interface IGW2C_SendLuckyDrawRecord
         * @property {msg.ILuckyDrawRecord|null} [luckydraw] GW2C_SendLuckyDrawRecord luckydraw
         */

        /**
         * Constructs a new GW2C_SendLuckyDrawRecord.
         * @memberof msg
         * @classdesc Represents a GW2C_SendLuckyDrawRecord.
         * @implements IGW2C_SendLuckyDrawRecord
         * @constructor
         * @param {msg.IGW2C_SendLuckyDrawRecord=} [properties] Properties to set
         */
        function GW2C_SendLuckyDrawRecord(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendLuckyDrawRecord luckydraw.
         * @member {msg.ILuckyDrawRecord|null|undefined} luckydraw
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @instance
         */
        GW2C_SendLuckyDrawRecord.prototype.luckydraw = null;

        /**
         * Creates a new GW2C_SendLuckyDrawRecord instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.IGW2C_SendLuckyDrawRecord=} [properties] Properties to set
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord instance
         */
        GW2C_SendLuckyDrawRecord.create = function create(properties) {
            return new GW2C_SendLuckyDrawRecord(properties);
        };

        /**
         * Encodes the specified GW2C_SendLuckyDrawRecord message. Does not implicitly {@link msg.GW2C_SendLuckyDrawRecord.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.IGW2C_SendLuckyDrawRecord} message GW2C_SendLuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendLuckyDrawRecord.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                $root.msg.LuckyDrawRecord.encode(message.luckydraw, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendLuckyDrawRecord message, length delimited. Does not implicitly {@link msg.GW2C_SendLuckyDrawRecord.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.IGW2C_SendLuckyDrawRecord} message GW2C_SendLuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendLuckyDrawRecord.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendLuckyDrawRecord message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendLuckyDrawRecord.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendLuckyDrawRecord();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.luckydraw = $root.msg.LuckyDrawRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendLuckyDrawRecord message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendLuckyDrawRecord.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendLuckyDrawRecord message.
         * @function verify
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendLuckyDrawRecord.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw")) {
                var error = $root.msg.LuckyDrawRecord.verify(message.luckydraw);
                if (error)
                    return "luckydraw." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendLuckyDrawRecord message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord
         */
        GW2C_SendLuckyDrawRecord.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendLuckyDrawRecord)
                return object;
            var message = new $root.msg.GW2C_SendLuckyDrawRecord();
            if (object.luckydraw != null) {
                if (typeof object.luckydraw !== "object")
                    throw TypeError(".msg.GW2C_SendLuckyDrawRecord.luckydraw: object expected");
                message.luckydraw = $root.msg.LuckyDrawRecord.fromObject(object.luckydraw);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendLuckyDrawRecord message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.GW2C_SendLuckyDrawRecord} message GW2C_SendLuckyDrawRecord
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendLuckyDrawRecord.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.luckydraw = null;
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                object.luckydraw = $root.msg.LuckyDrawRecord.toObject(message.luckydraw, options);
            return object;
        };

        /**
         * Converts this GW2C_SendLuckyDrawRecord to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendLuckyDrawRecord.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendLuckyDrawRecord;
    })();

    msg.C2GW_ReqTaskList = (function() {

        /**
         * Properties of a C2GW_ReqTaskList.
         * @memberof msg
         * @interface IC2GW_ReqTaskList
         */

        /**
         * Constructs a new C2GW_ReqTaskList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTaskList.
         * @implements IC2GW_ReqTaskList
         * @constructor
         * @param {msg.IC2GW_ReqTaskList=} [properties] Properties to set
         */
        function C2GW_ReqTaskList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqTaskList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.IC2GW_ReqTaskList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList instance
         */
        C2GW_ReqTaskList.create = function create(properties) {
            return new C2GW_ReqTaskList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTaskList message. Does not implicitly {@link msg.C2GW_ReqTaskList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.IC2GW_ReqTaskList} message C2GW_ReqTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTaskList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTaskList message, length delimited. Does not implicitly {@link msg.C2GW_ReqTaskList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.IC2GW_ReqTaskList} message C2GW_ReqTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTaskList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTaskList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTaskList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTaskList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTaskList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTaskList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTaskList message.
         * @function verify
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTaskList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTaskList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList
         */
        C2GW_ReqTaskList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTaskList)
                return object;
            return new $root.msg.C2GW_ReqTaskList();
        };

        /**
         * Creates a plain object from a C2GW_ReqTaskList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.C2GW_ReqTaskList} message C2GW_ReqTaskList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTaskList.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqTaskList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTaskList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTaskList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTaskList;
    })();

    msg.GW2C_Ret7DayReward = (function() {

        /**
         * Properties of a GW2C_Ret7DayReward.
         * @memberof msg
         * @interface IGW2C_Ret7DayReward
         * @property {number|null} [day] GW2C_Ret7DayReward day
         */

        /**
         * Constructs a new GW2C_Ret7DayReward.
         * @memberof msg
         * @classdesc Represents a GW2C_Ret7DayReward.
         * @implements IGW2C_Ret7DayReward
         * @constructor
         * @param {msg.IGW2C_Ret7DayReward=} [properties] Properties to set
         */
        function GW2C_Ret7DayReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_Ret7DayReward day.
         * @member {number} day
         * @memberof msg.GW2C_Ret7DayReward
         * @instance
         */
        GW2C_Ret7DayReward.prototype.day = 0;

        /**
         * Creates a new GW2C_Ret7DayReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward=} [properties] Properties to set
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward instance
         */
        GW2C_Ret7DayReward.create = function create(properties) {
            return new GW2C_Ret7DayReward(properties);
        };

        /**
         * Encodes the specified GW2C_Ret7DayReward message. Does not implicitly {@link msg.GW2C_Ret7DayReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward} message GW2C_Ret7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_Ret7DayReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.day != null && message.hasOwnProperty("day"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.day);
            return writer;
        };

        /**
         * Encodes the specified GW2C_Ret7DayReward message, length delimited. Does not implicitly {@link msg.GW2C_Ret7DayReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward} message GW2C_Ret7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_Ret7DayReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_Ret7DayReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_Ret7DayReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_Ret7DayReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.day = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_Ret7DayReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_Ret7DayReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_Ret7DayReward message.
         * @function verify
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_Ret7DayReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.day != null && message.hasOwnProperty("day"))
                if (!$util.isInteger(message.day))
                    return "day: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_Ret7DayReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         */
        GW2C_Ret7DayReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_Ret7DayReward)
                return object;
            var message = new $root.msg.GW2C_Ret7DayReward();
            if (object.day != null)
                message.day = object.day | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_Ret7DayReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.GW2C_Ret7DayReward} message GW2C_Ret7DayReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_Ret7DayReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.day = 0;
            if (message.day != null && message.hasOwnProperty("day"))
                object.day = message.day;
            return object;
        };

        /**
         * Converts this GW2C_Ret7DayReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_Ret7DayReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_Ret7DayReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_Ret7DayReward;
    })();

    msg.C2GW_Get7DayReward = (function() {

        /**
         * Properties of a C2GW_Get7DayReward.
         * @memberof msg
         * @interface IC2GW_Get7DayReward
         */

        /**
         * Constructs a new C2GW_Get7DayReward.
         * @memberof msg
         * @classdesc Represents a C2GW_Get7DayReward.
         * @implements IC2GW_Get7DayReward
         * @constructor
         * @param {msg.IC2GW_Get7DayReward=} [properties] Properties to set
         */
        function C2GW_Get7DayReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_Get7DayReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward=} [properties] Properties to set
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward instance
         */
        C2GW_Get7DayReward.create = function create(properties) {
            return new C2GW_Get7DayReward(properties);
        };

        /**
         * Encodes the specified C2GW_Get7DayReward message. Does not implicitly {@link msg.C2GW_Get7DayReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward} message C2GW_Get7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_Get7DayReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_Get7DayReward message, length delimited. Does not implicitly {@link msg.C2GW_Get7DayReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward} message C2GW_Get7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_Get7DayReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_Get7DayReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_Get7DayReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_Get7DayReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_Get7DayReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_Get7DayReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_Get7DayReward message.
         * @function verify
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_Get7DayReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_Get7DayReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         */
        C2GW_Get7DayReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_Get7DayReward)
                return object;
            return new $root.msg.C2GW_Get7DayReward();
        };

        /**
         * Creates a plain object from a C2GW_Get7DayReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.C2GW_Get7DayReward} message C2GW_Get7DayReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_Get7DayReward.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_Get7DayReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_Get7DayReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_Get7DayReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_Get7DayReward;
    })();

    msg.C2GW_SendWechatAuthCode = (function() {

        /**
         * Properties of a C2GW_SendWechatAuthCode.
         * @memberof msg
         * @interface IC2GW_SendWechatAuthCode
         * @property {string|null} [code] C2GW_SendWechatAuthCode code
         */

        /**
         * Constructs a new C2GW_SendWechatAuthCode.
         * @memberof msg
         * @classdesc Represents a C2GW_SendWechatAuthCode.
         * @implements IC2GW_SendWechatAuthCode
         * @constructor
         * @param {msg.IC2GW_SendWechatAuthCode=} [properties] Properties to set
         */
        function C2GW_SendWechatAuthCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_SendWechatAuthCode code.
         * @member {string} code
         * @memberof msg.C2GW_SendWechatAuthCode
         * @instance
         */
        C2GW_SendWechatAuthCode.prototype.code = "";

        /**
         * Creates a new C2GW_SendWechatAuthCode instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode=} [properties] Properties to set
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode instance
         */
        C2GW_SendWechatAuthCode.create = function create(properties) {
            return new C2GW_SendWechatAuthCode(properties);
        };

        /**
         * Encodes the specified C2GW_SendWechatAuthCode message. Does not implicitly {@link msg.C2GW_SendWechatAuthCode.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendWechatAuthCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified C2GW_SendWechatAuthCode message, length delimited. Does not implicitly {@link msg.C2GW_SendWechatAuthCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendWechatAuthCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_SendWechatAuthCode message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendWechatAuthCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_SendWechatAuthCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_SendWechatAuthCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendWechatAuthCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_SendWechatAuthCode message.
         * @function verify
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_SendWechatAuthCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            return null;
        };

        /**
         * Creates a C2GW_SendWechatAuthCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         */
        C2GW_SendWechatAuthCode.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_SendWechatAuthCode)
                return object;
            var message = new $root.msg.C2GW_SendWechatAuthCode();
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_SendWechatAuthCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.C2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_SendWechatAuthCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.code = "";
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this C2GW_SendWechatAuthCode to JSON.
         * @function toJSON
         * @memberof msg.C2GW_SendWechatAuthCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_SendWechatAuthCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_SendWechatAuthCode;
    })();

    msg.GW2C_MsgNotify = (function() {

        /**
         * Properties of a GW2C_MsgNotify.
         * @memberof msg
         * @interface IGW2C_MsgNotify
         * @property {number|Long|null} [userid] GW2C_MsgNotify userid
         * @property {string|null} [text] GW2C_MsgNotify text
         */

        /**
         * Constructs a new GW2C_MsgNotify.
         * @memberof msg
         * @classdesc Represents a GW2C_MsgNotify.
         * @implements IGW2C_MsgNotify
         * @constructor
         * @param {msg.IGW2C_MsgNotify=} [properties] Properties to set
         */
        function GW2C_MsgNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_MsgNotify userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_MsgNotify
         * @instance
         */
        GW2C_MsgNotify.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_MsgNotify text.
         * @member {string} text
         * @memberof msg.GW2C_MsgNotify
         * @instance
         */
        GW2C_MsgNotify.prototype.text = "";

        /**
         * Creates a new GW2C_MsgNotify instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify=} [properties] Properties to set
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify instance
         */
        GW2C_MsgNotify.create = function create(properties) {
            return new GW2C_MsgNotify(properties);
        };

        /**
         * Encodes the specified GW2C_MsgNotify message. Does not implicitly {@link msg.GW2C_MsgNotify.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify} message GW2C_MsgNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified GW2C_MsgNotify message, length delimited. Does not implicitly {@link msg.GW2C_MsgNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify} message GW2C_MsgNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_MsgNotify message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_MsgNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_MsgNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_MsgNotify message.
         * @function verify
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_MsgNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };

        /**
         * Creates a GW2C_MsgNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         */
        GW2C_MsgNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_MsgNotify)
                return object;
            var message = new $root.msg.GW2C_MsgNotify();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_MsgNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.GW2C_MsgNotify} message GW2C_MsgNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_MsgNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.text = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this GW2C_MsgNotify to JSON.
         * @function toJSON
         * @memberof msg.GW2C_MsgNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_MsgNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_MsgNotify;
    })();

    /**
     * NoticeType enum.
     * @name msg.NoticeType
     * @enum {string}
     * @property {number} Suspension=1 Suspension value
     * @property {number} Marquee=2 Marquee value
     */
    msg.NoticeType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Suspension"] = 1;
        values[valuesById[2] = "Marquee"] = 2;
        return values;
    })();

    msg.GW2C_MsgNotice = (function() {

        /**
         * Properties of a GW2C_MsgNotice.
         * @memberof msg
         * @interface IGW2C_MsgNotice
         * @property {number|Long|null} [userid] GW2C_MsgNotice userid
         * @property {string|null} [face] GW2C_MsgNotice face
         * @property {string|null} [name] GW2C_MsgNotice name
         * @property {number|null} [type] GW2C_MsgNotice type
         * @property {string|null} [text] GW2C_MsgNotice text
         */

        /**
         * Constructs a new GW2C_MsgNotice.
         * @memberof msg
         * @classdesc Represents a GW2C_MsgNotice.
         * @implements IGW2C_MsgNotice
         * @constructor
         * @param {msg.IGW2C_MsgNotice=} [properties] Properties to set
         */
        function GW2C_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_MsgNotice userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_MsgNotice face.
         * @member {string} face
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.face = "";

        /**
         * GW2C_MsgNotice name.
         * @member {string} name
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.name = "";

        /**
         * GW2C_MsgNotice type.
         * @member {number} type
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.type = 0;

        /**
         * GW2C_MsgNotice text.
         * @member {string} text
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.text = "";

        /**
         * Creates a new GW2C_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice=} [properties] Properties to set
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice instance
         */
        GW2C_MsgNotice.create = function create(properties) {
            return new GW2C_MsgNotice(properties);
        };

        /**
         * Encodes the specified GW2C_MsgNotice message. Does not implicitly {@link msg.GW2C_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice} message GW2C_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.face);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified GW2C_MsgNotice message, length delimited. Does not implicitly {@link msg.GW2C_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice} message GW2C_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                case 2:
                    message.face = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                case 5:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_MsgNotice message.
         * @function verify
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };

        /**
         * Creates a GW2C_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         */
        GW2C_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_MsgNotice)
                return object;
            var message = new $root.msg.GW2C_MsgNotice();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.face != null)
                message.face = String(object.face);
            if (object.name != null)
                message.name = String(object.name);
            if (object.type != null)
                message.type = object.type | 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.GW2C_MsgNotice} message GW2C_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.face = "";
                object.name = "";
                object.type = 0;
                object.text = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this GW2C_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.GW2C_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_MsgNotice;
    })();

    msg.GW2MS_MsgNotice = (function() {

        /**
         * Properties of a GW2MS_MsgNotice.
         * @memberof msg
         * @interface IGW2MS_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] GW2MS_MsgNotice notice
         */

        /**
         * Constructs a new GW2MS_MsgNotice.
         * @memberof msg
         * @classdesc Represents a GW2MS_MsgNotice.
         * @implements IGW2MS_MsgNotice
         * @constructor
         * @param {msg.IGW2MS_MsgNotice=} [properties] Properties to set
         */
        function GW2MS_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.GW2MS_MsgNotice
         * @instance
         */
        GW2MS_MsgNotice.prototype.notice = null;

        /**
         * Creates a new GW2MS_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice=} [properties] Properties to set
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice instance
         */
        GW2MS_MsgNotice.create = function create(properties) {
            return new GW2MS_MsgNotice(properties);
        };

        /**
         * Encodes the specified GW2MS_MsgNotice message. Does not implicitly {@link msg.GW2MS_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice} message GW2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_MsgNotice message, length delimited. Does not implicitly {@link msg.GW2MS_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice} message GW2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_MsgNotice message.
         * @function verify
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         */
        GW2MS_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_MsgNotice)
                return object;
            var message = new $root.msg.GW2MS_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.GW2MS_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.GW2MS_MsgNotice} message GW2MS_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this GW2MS_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_MsgNotice;
    })();

    msg.RS2MS_MsgNotice = (function() {

        /**
         * Properties of a RS2MS_MsgNotice.
         * @memberof msg
         * @interface IRS2MS_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] RS2MS_MsgNotice notice
         */

        /**
         * Constructs a new RS2MS_MsgNotice.
         * @memberof msg
         * @classdesc Represents a RS2MS_MsgNotice.
         * @implements IRS2MS_MsgNotice
         * @constructor
         * @param {msg.IRS2MS_MsgNotice=} [properties] Properties to set
         */
        function RS2MS_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.RS2MS_MsgNotice
         * @instance
         */
        RS2MS_MsgNotice.prototype.notice = null;

        /**
         * Creates a new RS2MS_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice=} [properties] Properties to set
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice instance
         */
        RS2MS_MsgNotice.create = function create(properties) {
            return new RS2MS_MsgNotice(properties);
        };

        /**
         * Encodes the specified RS2MS_MsgNotice message. Does not implicitly {@link msg.RS2MS_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice} message RS2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RS2MS_MsgNotice message, length delimited. Does not implicitly {@link msg.RS2MS_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice} message RS2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_MsgNotice message.
         * @function verify
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a RS2MS_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         */
        RS2MS_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_MsgNotice)
                return object;
            var message = new $root.msg.RS2MS_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.RS2MS_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.RS2MS_MsgNotice} message RS2MS_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this RS2MS_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_MsgNotice;
    })();

    msg.MS2GW_MsgNotice = (function() {

        /**
         * Properties of a MS2GW_MsgNotice.
         * @memberof msg
         * @interface IMS2GW_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] MS2GW_MsgNotice notice
         */

        /**
         * Constructs a new MS2GW_MsgNotice.
         * @memberof msg
         * @classdesc Represents a MS2GW_MsgNotice.
         * @implements IMS2GW_MsgNotice
         * @constructor
         * @param {msg.IMS2GW_MsgNotice=} [properties] Properties to set
         */
        function MS2GW_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.MS2GW_MsgNotice
         * @instance
         */
        MS2GW_MsgNotice.prototype.notice = null;

        /**
         * Creates a new MS2GW_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice=} [properties] Properties to set
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice instance
         */
        MS2GW_MsgNotice.create = function create(properties) {
            return new MS2GW_MsgNotice(properties);
        };

        /**
         * Encodes the specified MS2GW_MsgNotice message. Does not implicitly {@link msg.MS2GW_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice} message MS2GW_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_MsgNotice message, length delimited. Does not implicitly {@link msg.MS2GW_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice} message MS2GW_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_MsgNotice message.
         * @function verify
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a MS2GW_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         */
        MS2GW_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_MsgNotice)
                return object;
            var message = new $root.msg.MS2GW_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.MS2GW_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.MS2GW_MsgNotice} message MS2GW_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this MS2GW_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_MsgNotice;
    })();

    msg.TanTanLeRoom = (function() {

        /**
         * Properties of a TanTanLeRoom.
         * @memberof msg
         * @interface ITanTanLeRoom
         * @property {number|null} [tid] TanTanLeRoom tid
         */

        /**
         * Constructs a new TanTanLeRoom.
         * @memberof msg
         * @classdesc Represents a TanTanLeRoom.
         * @implements ITanTanLeRoom
         * @constructor
         * @param {msg.ITanTanLeRoom=} [properties] Properties to set
         */
        function TanTanLeRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TanTanLeRoom tid.
         * @member {number} tid
         * @memberof msg.TanTanLeRoom
         * @instance
         */
        TanTanLeRoom.prototype.tid = 0;

        /**
         * Creates a new TanTanLeRoom instance using the specified properties.
         * @function create
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {msg.ITanTanLeRoom=} [properties] Properties to set
         * @returns {msg.TanTanLeRoom} TanTanLeRoom instance
         */
        TanTanLeRoom.create = function create(properties) {
            return new TanTanLeRoom(properties);
        };

        /**
         * Encodes the specified TanTanLeRoom message. Does not implicitly {@link msg.TanTanLeRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {msg.ITanTanLeRoom} message TanTanLeRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TanTanLeRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tid);
            return writer;
        };

        /**
         * Encodes the specified TanTanLeRoom message, length delimited. Does not implicitly {@link msg.TanTanLeRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {msg.ITanTanLeRoom} message TanTanLeRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TanTanLeRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TanTanLeRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TanTanLeRoom} TanTanLeRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TanTanLeRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TanTanLeRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tid = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TanTanLeRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TanTanLeRoom} TanTanLeRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TanTanLeRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TanTanLeRoom message.
         * @function verify
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TanTanLeRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            return null;
        };

        /**
         * Creates a TanTanLeRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TanTanLeRoom} TanTanLeRoom
         */
        TanTanLeRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TanTanLeRoom)
                return object;
            var message = new $root.msg.TanTanLeRoom();
            if (object.tid != null)
                message.tid = object.tid | 0;
            return message;
        };

        /**
         * Creates a plain object from a TanTanLeRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TanTanLeRoom
         * @static
         * @param {msg.TanTanLeRoom} message TanTanLeRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TanTanLeRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.tid = 0;
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            return object;
        };

        /**
         * Converts this TanTanLeRoom to JSON.
         * @function toJSON
         * @memberof msg.TanTanLeRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TanTanLeRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TanTanLeRoom;
    })();

    msg.C2GW_ReqCreateRoom = (function() {

        /**
         * Properties of a C2GW_ReqCreateRoom.
         * @memberof msg
         * @interface IC2GW_ReqCreateRoom
         * @property {number|null} [gamekind] C2GW_ReqCreateRoom gamekind
         * @property {msg.ITanTanLeRoom|null} [tantanle] C2GW_ReqCreateRoom tantanle
         * @property {msg.ITexasPersonalRoom|null} [texas] C2GW_ReqCreateRoom texas
         */

        /**
         * Constructs a new C2GW_ReqCreateRoom.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqCreateRoom.
         * @implements IC2GW_ReqCreateRoom
         * @constructor
         * @param {msg.IC2GW_ReqCreateRoom=} [properties] Properties to set
         */
        function C2GW_ReqCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqCreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.C2GW_ReqCreateRoom
         * @instance
         */
        C2GW_ReqCreateRoom.prototype.gamekind = 0;

        /**
         * C2GW_ReqCreateRoom tantanle.
         * @member {msg.ITanTanLeRoom|null|undefined} tantanle
         * @memberof msg.C2GW_ReqCreateRoom
         * @instance
         */
        C2GW_ReqCreateRoom.prototype.tantanle = null;

        /**
         * C2GW_ReqCreateRoom texas.
         * @member {msg.ITexasPersonalRoom|null|undefined} texas
         * @memberof msg.C2GW_ReqCreateRoom
         * @instance
         */
        C2GW_ReqCreateRoom.prototype.texas = null;

        /**
         * Creates a new C2GW_ReqCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {msg.IC2GW_ReqCreateRoom=} [properties] Properties to set
         * @returns {msg.C2GW_ReqCreateRoom} C2GW_ReqCreateRoom instance
         */
        C2GW_ReqCreateRoom.create = function create(properties) {
            return new C2GW_ReqCreateRoom(properties);
        };

        /**
         * Encodes the specified C2GW_ReqCreateRoom message. Does not implicitly {@link msg.C2GW_ReqCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {msg.IC2GW_ReqCreateRoom} message C2GW_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gamekind);
            if (message.tantanle != null && message.hasOwnProperty("tantanle"))
                $root.msg.TanTanLeRoom.encode(message.tantanle, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.texas != null && message.hasOwnProperty("texas"))
                $root.msg.TexasPersonalRoom.encode(message.texas, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqCreateRoom message, length delimited. Does not implicitly {@link msg.C2GW_ReqCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {msg.IC2GW_ReqCreateRoom} message C2GW_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqCreateRoom} C2GW_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gamekind = reader.int32();
                    break;
                case 2:
                    message.tantanle = $root.msg.TanTanLeRoom.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.texas = $root.msg.TexasPersonalRoom.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqCreateRoom} C2GW_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqCreateRoom message.
         * @function verify
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            if (message.tantanle != null && message.hasOwnProperty("tantanle")) {
                var error = $root.msg.TanTanLeRoom.verify(message.tantanle);
                if (error)
                    return "tantanle." + error;
            }
            if (message.texas != null && message.hasOwnProperty("texas")) {
                var error = $root.msg.TexasPersonalRoom.verify(message.texas);
                if (error)
                    return "texas." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_ReqCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqCreateRoom} C2GW_ReqCreateRoom
         */
        C2GW_ReqCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqCreateRoom)
                return object;
            var message = new $root.msg.C2GW_ReqCreateRoom();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            if (object.tantanle != null) {
                if (typeof object.tantanle !== "object")
                    throw TypeError(".msg.C2GW_ReqCreateRoom.tantanle: object expected");
                message.tantanle = $root.msg.TanTanLeRoom.fromObject(object.tantanle);
            }
            if (object.texas != null) {
                if (typeof object.texas !== "object")
                    throw TypeError(".msg.C2GW_ReqCreateRoom.texas: object expected");
                message.texas = $root.msg.TexasPersonalRoom.fromObject(object.texas);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqCreateRoom
         * @static
         * @param {msg.C2GW_ReqCreateRoom} message C2GW_ReqCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gamekind = 0;
                object.tantanle = null;
                object.texas = null;
            }
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            if (message.tantanle != null && message.hasOwnProperty("tantanle"))
                object.tantanle = $root.msg.TanTanLeRoom.toObject(message.tantanle, options);
            if (message.texas != null && message.hasOwnProperty("texas"))
                object.texas = $root.msg.TexasPersonalRoom.toObject(message.texas, options);
            return object;
        };

        /**
         * Converts this C2GW_ReqCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqCreateRoom;
    })();

    msg.GW2C_RetCreateRoom = (function() {

        /**
         * Properties of a GW2C_RetCreateRoom.
         * @memberof msg
         * @interface IGW2C_RetCreateRoom
         * @property {string|null} [errcode] GW2C_RetCreateRoom errcode
         * @property {number|Long|null} [roomid] GW2C_RetCreateRoom roomid
         * @property {string|null} [passwd] GW2C_RetCreateRoom passwd
         */

        /**
         * Constructs a new GW2C_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a GW2C_RetCreateRoom.
         * @implements IGW2C_RetCreateRoom
         * @constructor
         * @param {msg.IGW2C_RetCreateRoom=} [properties] Properties to set
         */
        function GW2C_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.GW2C_RetCreateRoom
         * @instance
         */
        GW2C_RetCreateRoom.prototype.errcode = "";

        /**
         * GW2C_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2C_RetCreateRoom
         * @instance
         */
        GW2C_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_RetCreateRoom passwd.
         * @member {string} passwd
         * @memberof msg.GW2C_RetCreateRoom
         * @instance
         */
        GW2C_RetCreateRoom.prototype.passwd = "";

        /**
         * Creates a new GW2C_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {msg.IGW2C_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.GW2C_RetCreateRoom} GW2C_RetCreateRoom instance
         */
        GW2C_RetCreateRoom.create = function create(properties) {
            return new GW2C_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified GW2C_RetCreateRoom message. Does not implicitly {@link msg.GW2C_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {msg.IGW2C_RetCreateRoom} message GW2C_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.passwd);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetCreateRoom message, length delimited. Does not implicitly {@link msg.GW2C_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {msg.IGW2C_RetCreateRoom} message GW2C_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetCreateRoom} GW2C_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.passwd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetCreateRoom} GW2C_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetCreateRoom message.
         * @function verify
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetCreateRoom} GW2C_RetCreateRoom
         */
        GW2C_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetCreateRoom)
                return object;
            var message = new $root.msg.GW2C_RetCreateRoom();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetCreateRoom
         * @static
         * @param {msg.GW2C_RetCreateRoom} message GW2C_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.passwd = "";
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            return object;
        };

        /**
         * Converts this GW2C_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetCreateRoom;
    })();

    msg.GW2MS_ReqCreateRoom = (function() {

        /**
         * Properties of a GW2MS_ReqCreateRoom.
         * @memberof msg
         * @interface IGW2MS_ReqCreateRoom
         * @property {number|Long|null} [userid] GW2MS_ReqCreateRoom userid
         * @property {number|null} [gamekind] GW2MS_ReqCreateRoom gamekind
         * @property {msg.ITexasPersonalRoom|null} [texas] GW2MS_ReqCreateRoom texas
         */

        /**
         * Constructs a new GW2MS_ReqCreateRoom.
         * @memberof msg
         * @classdesc Represents a GW2MS_ReqCreateRoom.
         * @implements IGW2MS_ReqCreateRoom
         * @constructor
         * @param {msg.IGW2MS_ReqCreateRoom=} [properties] Properties to set
         */
        function GW2MS_ReqCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_ReqCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2MS_ReqCreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.gamekind = 0;

        /**
         * GW2MS_ReqCreateRoom texas.
         * @member {msg.ITexasPersonalRoom|null|undefined} texas
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.texas = null;

        /**
         * Creates a new GW2MS_ReqCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom=} [properties] Properties to set
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom instance
         */
        GW2MS_ReqCreateRoom.create = function create(properties) {
            return new GW2MS_ReqCreateRoom(properties);
        };

        /**
         * Encodes the specified GW2MS_ReqCreateRoom message. Does not implicitly {@link msg.GW2MS_ReqCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gamekind);
            if (message.texas != null && message.hasOwnProperty("texas"))
                $root.msg.TexasPersonalRoom.encode(message.texas, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_ReqCreateRoom message, length delimited. Does not implicitly {@link msg.GW2MS_ReqCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_ReqCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_ReqCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                case 2:
                    message.gamekind = reader.int32();
                    break;
                case 3:
                    message.texas = $root.msg.TexasPersonalRoom.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_ReqCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_ReqCreateRoom message.
         * @function verify
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_ReqCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            if (message.texas != null && message.hasOwnProperty("texas")) {
                var error = $root.msg.TexasPersonalRoom.verify(message.texas);
                if (error)
                    return "texas." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_ReqCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         */
        GW2MS_ReqCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_ReqCreateRoom)
                return object;
            var message = new $root.msg.GW2MS_ReqCreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            if (object.texas != null) {
                if (typeof object.texas !== "object")
                    throw TypeError(".msg.GW2MS_ReqCreateRoom.texas: object expected");
                message.texas = $root.msg.TexasPersonalRoom.fromObject(object.texas);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_ReqCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.GW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_ReqCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
                object.texas = null;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            if (message.texas != null && message.hasOwnProperty("texas"))
                object.texas = $root.msg.TexasPersonalRoom.toObject(message.texas, options);
            return object;
        };

        /**
         * Converts this GW2MS_ReqCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_ReqCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_ReqCreateRoom;
    })();

    msg.MS2GW_RetCreateRoom = (function() {

        /**
         * Properties of a MS2GW_RetCreateRoom.
         * @memberof msg
         * @interface IMS2GW_RetCreateRoom
         * @property {number|Long|null} [userid] MS2GW_RetCreateRoom userid
         * @property {number|Long|null} [roomid] MS2GW_RetCreateRoom roomid
         * @property {string|null} [errcode] MS2GW_RetCreateRoom errcode
         * @property {string|null} [roomagent] MS2GW_RetCreateRoom roomagent
         */

        /**
         * Constructs a new MS2GW_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a MS2GW_RetCreateRoom.
         * @implements IMS2GW_RetCreateRoom
         * @constructor
         * @param {msg.IMS2GW_RetCreateRoom=} [properties] Properties to set
         */
        function MS2GW_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_RetCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2GW_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2GW_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.errcode = "";

        /**
         * MS2GW_RetCreateRoom roomagent.
         * @member {string} roomagent
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.roomagent = "";

        /**
         * Creates a new MS2GW_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom instance
         */
        MS2GW_RetCreateRoom.create = function create(properties) {
            return new MS2GW_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified MS2GW_RetCreateRoom message. Does not implicitly {@link msg.MS2GW_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom} message MS2GW_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomagent);
            return writer;
        };

        /**
         * Encodes the specified MS2GW_RetCreateRoom message, length delimited. Does not implicitly {@link msg.MS2GW_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom} message MS2GW_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                case 4:
                    message.roomagent = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_RetCreateRoom message.
         * @function verify
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                if (!$util.isString(message.roomagent))
                    return "roomagent: string expected";
            return null;
        };

        /**
         * Creates a MS2GW_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         */
        MS2GW_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_RetCreateRoom)
                return object;
            var message = new $root.msg.MS2GW_RetCreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.roomagent != null)
                message.roomagent = String(object.roomagent);
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.MS2GW_RetCreateRoom} message MS2GW_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.errcode = "";
                object.roomagent = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                object.roomagent = message.roomagent;
            return object;
        };

        /**
         * Converts this MS2GW_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_RetCreateRoom;
    })();

    msg.MS2RS_CreateRoom = (function() {

        /**
         * Properties of a MS2RS_CreateRoom.
         * @memberof msg
         * @interface IMS2RS_CreateRoom
         * @property {number|Long|null} [userid] MS2RS_CreateRoom userid
         * @property {number|Long|null} [roomid] MS2RS_CreateRoom roomid
         * @property {number|null} [gamekind] MS2RS_CreateRoom gamekind
         * @property {number|null} [sidgate] MS2RS_CreateRoom sidgate
         * @property {msg.ITexasPersonalRoom|null} [texas] MS2RS_CreateRoom texas
         */

        /**
         * Constructs a new MS2RS_CreateRoom.
         * @memberof msg
         * @classdesc Represents a MS2RS_CreateRoom.
         * @implements IMS2RS_CreateRoom
         * @constructor
         * @param {msg.IMS2RS_CreateRoom=} [properties] Properties to set
         */
        function MS2RS_CreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_CreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2RS_CreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2RS_CreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.gamekind = 0;

        /**
         * MS2RS_CreateRoom sidgate.
         * @member {number} sidgate
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.sidgate = 0;

        /**
         * MS2RS_CreateRoom texas.
         * @member {msg.ITexasPersonalRoom|null|undefined} texas
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.texas = null;

        /**
         * Creates a new MS2RS_CreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom=} [properties] Properties to set
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom instance
         */
        MS2RS_CreateRoom.create = function create(properties) {
            return new MS2RS_CreateRoom(properties);
        };

        /**
         * Encodes the specified MS2RS_CreateRoom message. Does not implicitly {@link msg.MS2RS_CreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom} message MS2RS_CreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_CreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamekind);
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sidgate);
            if (message.texas != null && message.hasOwnProperty("texas"))
                $root.msg.TexasPersonalRoom.encode(message.texas, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_CreateRoom message, length delimited. Does not implicitly {@link msg.MS2RS_CreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom} message MS2RS_CreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_CreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_CreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_CreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_CreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.int64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.gamekind = reader.int32();
                    break;
                case 4:
                    message.sidgate = reader.int32();
                    break;
                case 5:
                    message.texas = $root.msg.TexasPersonalRoom.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_CreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_CreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_CreateRoom message.
         * @function verify
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_CreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                if (!$util.isInteger(message.sidgate))
                    return "sidgate: integer expected";
            if (message.texas != null && message.hasOwnProperty("texas")) {
                var error = $root.msg.TexasPersonalRoom.verify(message.texas);
                if (error)
                    return "texas." + error;
            }
            return null;
        };

        /**
         * Creates a MS2RS_CreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         */
        MS2RS_CreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_CreateRoom)
                return object;
            var message = new $root.msg.MS2RS_CreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            if (object.sidgate != null)
                message.sidgate = object.sidgate | 0;
            if (object.texas != null) {
                if (typeof object.texas !== "object")
                    throw TypeError(".msg.MS2RS_CreateRoom.texas: object expected");
                message.texas = $root.msg.TexasPersonalRoom.fromObject(object.texas);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_CreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.MS2RS_CreateRoom} message MS2RS_CreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_CreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
                object.sidgate = 0;
                object.texas = null;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                object.sidgate = message.sidgate;
            if (message.texas != null && message.hasOwnProperty("texas"))
                object.texas = $root.msg.TexasPersonalRoom.toObject(message.texas, options);
            return object;
        };

        /**
         * Converts this MS2RS_CreateRoom to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_CreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_CreateRoom;
    })();

    msg.RS2MS_RetCreateRoom = (function() {

        /**
         * Properties of a RS2MS_RetCreateRoom.
         * @memberof msg
         * @interface IRS2MS_RetCreateRoom
         * @property {number|Long|null} [roomid] RS2MS_RetCreateRoom roomid
         * @property {number|Long|null} [userid] RS2MS_RetCreateRoom userid
         * @property {number|null} [sidgate] RS2MS_RetCreateRoom sidgate
         * @property {string|null} [errcode] RS2MS_RetCreateRoom errcode
         */

        /**
         * Constructs a new RS2MS_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a RS2MS_RetCreateRoom.
         * @implements IRS2MS_RetCreateRoom
         * @constructor
         * @param {msg.IRS2MS_RetCreateRoom=} [properties] Properties to set
         */
        function RS2MS_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2MS_RetCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2MS_RetCreateRoom sidgate.
         * @member {number} sidgate
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.sidgate = 0;

        /**
         * RS2MS_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.errcode = "";

        /**
         * Creates a new RS2MS_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom instance
         */
        RS2MS_RetCreateRoom.create = function create(properties) {
            return new RS2MS_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified RS2MS_RetCreateRoom message. Does not implicitly {@link msg.RS2MS_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom} message RS2MS_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userid);
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sidgate);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_RetCreateRoom message, length delimited. Does not implicitly {@link msg.RS2MS_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom} message RS2MS_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.int64();
                    break;
                case 3:
                    message.sidgate = reader.int32();
                    break;
                case 4:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_RetCreateRoom message.
         * @function verify
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                if (!$util.isInteger(message.sidgate))
                    return "sidgate: integer expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a RS2MS_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         */
        RS2MS_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_RetCreateRoom)
                return object;
            var message = new $root.msg.RS2MS_RetCreateRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.sidgate != null)
                message.sidgate = object.sidgate | 0;
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.RS2MS_RetCreateRoom} message RS2MS_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.sidgate = 0;
                object.errcode = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                object.sidgate = message.sidgate;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this RS2MS_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_RetCreateRoom;
    })();

    msg.RS2MS_DeleteRoom = (function() {

        /**
         * Properties of a RS2MS_DeleteRoom.
         * @memberof msg
         * @interface IRS2MS_DeleteRoom
         * @property {number|Long|null} [roomid] RS2MS_DeleteRoom roomid
         */

        /**
         * Constructs a new RS2MS_DeleteRoom.
         * @memberof msg
         * @classdesc Represents a RS2MS_DeleteRoom.
         * @implements IRS2MS_DeleteRoom
         * @constructor
         * @param {msg.IRS2MS_DeleteRoom=} [properties] Properties to set
         */
        function RS2MS_DeleteRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_DeleteRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2MS_DeleteRoom
         * @instance
         */
        RS2MS_DeleteRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new RS2MS_DeleteRoom instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom=} [properties] Properties to set
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom instance
         */
        RS2MS_DeleteRoom.create = function create(properties) {
            return new RS2MS_DeleteRoom(properties);
        };

        /**
         * Encodes the specified RS2MS_DeleteRoom message. Does not implicitly {@link msg.RS2MS_DeleteRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom} message RS2MS_DeleteRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_DeleteRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_DeleteRoom message, length delimited. Does not implicitly {@link msg.RS2MS_DeleteRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom} message RS2MS_DeleteRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_DeleteRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_DeleteRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_DeleteRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_DeleteRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_DeleteRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_DeleteRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_DeleteRoom message.
         * @function verify
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_DeleteRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a RS2MS_DeleteRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         */
        RS2MS_DeleteRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_DeleteRoom)
                return object;
            var message = new $root.msg.RS2MS_DeleteRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_DeleteRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.RS2MS_DeleteRoom} message RS2MS_DeleteRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_DeleteRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this RS2MS_DeleteRoom to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_DeleteRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_DeleteRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_DeleteRoom;
    })();

    msg.GW2RS_UploadUserBin = (function() {

        /**
         * Properties of a GW2RS_UploadUserBin.
         * @memberof msg
         * @interface IGW2RS_UploadUserBin
         * @property {number|Long|null} [roomid] GW2RS_UploadUserBin roomid
         * @property {msg.ISerialize|null} [bin] GW2RS_UploadUserBin bin
         */

        /**
         * Constructs a new GW2RS_UploadUserBin.
         * @memberof msg
         * @classdesc Represents a GW2RS_UploadUserBin.
         * @implements IGW2RS_UploadUserBin
         * @constructor
         * @param {msg.IGW2RS_UploadUserBin=} [properties] Properties to set
         */
        function GW2RS_UploadUserBin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_UploadUserBin roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2RS_UploadUserBin
         * @instance
         */
        GW2RS_UploadUserBin.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2RS_UploadUserBin bin.
         * @member {msg.ISerialize|null|undefined} bin
         * @memberof msg.GW2RS_UploadUserBin
         * @instance
         */
        GW2RS_UploadUserBin.prototype.bin = null;

        /**
         * Creates a new GW2RS_UploadUserBin instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {msg.IGW2RS_UploadUserBin=} [properties] Properties to set
         * @returns {msg.GW2RS_UploadUserBin} GW2RS_UploadUserBin instance
         */
        GW2RS_UploadUserBin.create = function create(properties) {
            return new GW2RS_UploadUserBin(properties);
        };

        /**
         * Encodes the specified GW2RS_UploadUserBin message. Does not implicitly {@link msg.GW2RS_UploadUserBin.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {msg.IGW2RS_UploadUserBin} message GW2RS_UploadUserBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UploadUserBin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.bin != null && message.hasOwnProperty("bin"))
                $root.msg.Serialize.encode(message.bin, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2RS_UploadUserBin message, length delimited. Does not implicitly {@link msg.GW2RS_UploadUserBin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {msg.IGW2RS_UploadUserBin} message GW2RS_UploadUserBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UploadUserBin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_UploadUserBin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_UploadUserBin} GW2RS_UploadUserBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UploadUserBin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_UploadUserBin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.bin = $root.msg.Serialize.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_UploadUserBin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_UploadUserBin} GW2RS_UploadUserBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UploadUserBin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_UploadUserBin message.
         * @function verify
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_UploadUserBin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.bin != null && message.hasOwnProperty("bin")) {
                var error = $root.msg.Serialize.verify(message.bin);
                if (error)
                    return "bin." + error;
            }
            return null;
        };

        /**
         * Creates a GW2RS_UploadUserBin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_UploadUserBin} GW2RS_UploadUserBin
         */
        GW2RS_UploadUserBin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_UploadUserBin)
                return object;
            var message = new $root.msg.GW2RS_UploadUserBin();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.bin != null) {
                if (typeof object.bin !== "object")
                    throw TypeError(".msg.GW2RS_UploadUserBin.bin: object expected");
                message.bin = $root.msg.Serialize.fromObject(object.bin);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_UploadUserBin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_UploadUserBin
         * @static
         * @param {msg.GW2RS_UploadUserBin} message GW2RS_UploadUserBin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_UploadUserBin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.bin = null;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.bin != null && message.hasOwnProperty("bin"))
                object.bin = $root.msg.Serialize.toObject(message.bin, options);
            return object;
        };

        /**
         * Converts this GW2RS_UploadUserBin to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_UploadUserBin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_UploadUserBin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_UploadUserBin;
    })();

    msg.GW2C_SendUserRoomInfo = (function() {

        /**
         * Properties of a GW2C_SendUserRoomInfo.
         * @memberof msg
         * @interface IGW2C_SendUserRoomInfo
         * @property {number|Long|null} [roomid] GW2C_SendUserRoomInfo roomid
         * @property {string|null} [passwd] GW2C_SendUserRoomInfo passwd
         */

        /**
         * Constructs a new GW2C_SendUserRoomInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserRoomInfo.
         * @implements IGW2C_SendUserRoomInfo
         * @constructor
         * @param {msg.IGW2C_SendUserRoomInfo=} [properties] Properties to set
         */
        function GW2C_SendUserRoomInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserRoomInfo roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2C_SendUserRoomInfo
         * @instance
         */
        GW2C_SendUserRoomInfo.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_SendUserRoomInfo passwd.
         * @member {string} passwd
         * @memberof msg.GW2C_SendUserRoomInfo
         * @instance
         */
        GW2C_SendUserRoomInfo.prototype.passwd = "";

        /**
         * Creates a new GW2C_SendUserRoomInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {msg.IGW2C_SendUserRoomInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserRoomInfo} GW2C_SendUserRoomInfo instance
         */
        GW2C_SendUserRoomInfo.create = function create(properties) {
            return new GW2C_SendUserRoomInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserRoomInfo message. Does not implicitly {@link msg.GW2C_SendUserRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {msg.IGW2C_SendUserRoomInfo} message GW2C_SendUserRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserRoomInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserRoomInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendUserRoomInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {msg.IGW2C_SendUserRoomInfo} message GW2C_SendUserRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserRoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserRoomInfo} GW2C_SendUserRoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserRoomInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserRoomInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserRoomInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserRoomInfo} GW2C_SendUserRoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserRoomInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserRoomInfo message.
         * @function verify
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserRoomInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            return null;
        };

        /**
         * Creates a GW2C_SendUserRoomInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserRoomInfo} GW2C_SendUserRoomInfo
         */
        GW2C_SendUserRoomInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserRoomInfo)
                return object;
            var message = new $root.msg.GW2C_SendUserRoomInfo();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserRoomInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserRoomInfo
         * @static
         * @param {msg.GW2C_SendUserRoomInfo} message GW2C_SendUserRoomInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserRoomInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.passwd = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            return object;
        };

        /**
         * Converts this GW2C_SendUserRoomInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserRoomInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserRoomInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserRoomInfo;
    })();

    msg.C2GW_ReqTexasRoomList = (function() {

        /**
         * Properties of a C2GW_ReqTexasRoomList.
         * @memberof msg
         * @interface IC2GW_ReqTexasRoomList
         * @property {number|null} [type] C2GW_ReqTexasRoomList type
         */

        /**
         * Constructs a new C2GW_ReqTexasRoomList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTexasRoomList.
         * @implements IC2GW_ReqTexasRoomList
         * @constructor
         * @param {msg.IC2GW_ReqTexasRoomList=} [properties] Properties to set
         */
        function C2GW_ReqTexasRoomList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqTexasRoomList type.
         * @member {number} type
         * @memberof msg.C2GW_ReqTexasRoomList
         * @instance
         */
        C2GW_ReqTexasRoomList.prototype.type = 0;

        /**
         * Creates a new C2GW_ReqTexasRoomList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {msg.IC2GW_ReqTexasRoomList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTexasRoomList} C2GW_ReqTexasRoomList instance
         */
        C2GW_ReqTexasRoomList.create = function create(properties) {
            return new C2GW_ReqTexasRoomList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTexasRoomList message. Does not implicitly {@link msg.C2GW_ReqTexasRoomList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {msg.IC2GW_ReqTexasRoomList} message C2GW_ReqTexasRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTexasRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTexasRoomList message, length delimited. Does not implicitly {@link msg.C2GW_ReqTexasRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {msg.IC2GW_ReqTexasRoomList} message C2GW_ReqTexasRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTexasRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTexasRoomList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTexasRoomList} C2GW_ReqTexasRoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTexasRoomList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTexasRoomList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTexasRoomList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTexasRoomList} C2GW_ReqTexasRoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTexasRoomList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTexasRoomList message.
         * @function verify
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTexasRoomList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTexasRoomList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTexasRoomList} C2GW_ReqTexasRoomList
         */
        C2GW_ReqTexasRoomList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTexasRoomList)
                return object;
            var message = new $root.msg.C2GW_ReqTexasRoomList();
            if (object.type != null)
                message.type = object.type | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqTexasRoomList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTexasRoomList
         * @static
         * @param {msg.C2GW_ReqTexasRoomList} message C2GW_ReqTexasRoomList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTexasRoomList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.type = 0;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this C2GW_ReqTexasRoomList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTexasRoomList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTexasRoomList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTexasRoomList;
    })();

    msg.TexasRoomSimpleInfo = (function() {

        /**
         * Properties of a TexasRoomSimpleInfo.
         * @memberof msg
         * @interface ITexasRoomSimpleInfo
         * @property {number|Long|null} [id] TexasRoomSimpleInfo id
         * @property {number|null} [player] TexasRoomSimpleInfo player
         * @property {number|null} [roomId] TexasRoomSimpleInfo roomId
         * @property {boolean|null} [hasPwd] TexasRoomSimpleInfo hasPwd
         */

        /**
         * Constructs a new TexasRoomSimpleInfo.
         * @memberof msg
         * @classdesc Represents a TexasRoomSimpleInfo.
         * @implements ITexasRoomSimpleInfo
         * @constructor
         * @param {msg.ITexasRoomSimpleInfo=} [properties] Properties to set
         */
        function TexasRoomSimpleInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TexasRoomSimpleInfo id.
         * @member {number|Long} id
         * @memberof msg.TexasRoomSimpleInfo
         * @instance
         */
        TexasRoomSimpleInfo.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * TexasRoomSimpleInfo player.
         * @member {number} player
         * @memberof msg.TexasRoomSimpleInfo
         * @instance
         */
        TexasRoomSimpleInfo.prototype.player = 0;

        /**
         * TexasRoomSimpleInfo roomId.
         * @member {number} roomId
         * @memberof msg.TexasRoomSimpleInfo
         * @instance
         */
        TexasRoomSimpleInfo.prototype.roomId = 0;

        /**
         * TexasRoomSimpleInfo hasPwd.
         * @member {boolean} hasPwd
         * @memberof msg.TexasRoomSimpleInfo
         * @instance
         */
        TexasRoomSimpleInfo.prototype.hasPwd = false;

        /**
         * Creates a new TexasRoomSimpleInfo instance using the specified properties.
         * @function create
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {msg.ITexasRoomSimpleInfo=} [properties] Properties to set
         * @returns {msg.TexasRoomSimpleInfo} TexasRoomSimpleInfo instance
         */
        TexasRoomSimpleInfo.create = function create(properties) {
            return new TexasRoomSimpleInfo(properties);
        };

        /**
         * Encodes the specified TexasRoomSimpleInfo message. Does not implicitly {@link msg.TexasRoomSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {msg.ITexasRoomSimpleInfo} message TexasRoomSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasRoomSimpleInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
            if (message.player != null && message.hasOwnProperty("player"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.player);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomId);
            if (message.hasPwd != null && message.hasOwnProperty("hasPwd"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.hasPwd);
            return writer;
        };

        /**
         * Encodes the specified TexasRoomSimpleInfo message, length delimited. Does not implicitly {@link msg.TexasRoomSimpleInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {msg.ITexasRoomSimpleInfo} message TexasRoomSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasRoomSimpleInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TexasRoomSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TexasRoomSimpleInfo} TexasRoomSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasRoomSimpleInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TexasRoomSimpleInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int64();
                    break;
                case 2:
                    message.player = reader.int32();
                    break;
                case 3:
                    message.roomId = reader.int32();
                    break;
                case 4:
                    message.hasPwd = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TexasRoomSimpleInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TexasRoomSimpleInfo} TexasRoomSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasRoomSimpleInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TexasRoomSimpleInfo message.
         * @function verify
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TexasRoomSimpleInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.player != null && message.hasOwnProperty("player"))
                if (!$util.isInteger(message.player))
                    return "player: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.hasPwd != null && message.hasOwnProperty("hasPwd"))
                if (typeof message.hasPwd !== "boolean")
                    return "hasPwd: boolean expected";
            return null;
        };

        /**
         * Creates a TexasRoomSimpleInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TexasRoomSimpleInfo} TexasRoomSimpleInfo
         */
        TexasRoomSimpleInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TexasRoomSimpleInfo)
                return object;
            var message = new $root.msg.TexasRoomSimpleInfo();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
            if (object.player != null)
                message.player = object.player | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.hasPwd != null)
                message.hasPwd = Boolean(object.hasPwd);
            return message;
        };

        /**
         * Creates a plain object from a TexasRoomSimpleInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TexasRoomSimpleInfo
         * @static
         * @param {msg.TexasRoomSimpleInfo} message TexasRoomSimpleInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TexasRoomSimpleInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.player = 0;
                object.roomId = 0;
                object.hasPwd = false;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
            if (message.player != null && message.hasOwnProperty("player"))
                object.player = message.player;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.hasPwd != null && message.hasOwnProperty("hasPwd"))
                object.hasPwd = message.hasPwd;
            return object;
        };

        /**
         * Converts this TexasRoomSimpleInfo to JSON.
         * @function toJSON
         * @memberof msg.TexasRoomSimpleInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TexasRoomSimpleInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TexasRoomSimpleInfo;
    })();

    msg.GW2C_RetTexasRoomList = (function() {

        /**
         * Properties of a GW2C_RetTexasRoomList.
         * @memberof msg
         * @interface IGW2C_RetTexasRoomList
         * @property {Array.<msg.ITexasRoomSimpleInfo>|null} [list] GW2C_RetTexasRoomList list
         */

        /**
         * Constructs a new GW2C_RetTexasRoomList.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTexasRoomList.
         * @implements IGW2C_RetTexasRoomList
         * @constructor
         * @param {msg.IGW2C_RetTexasRoomList=} [properties] Properties to set
         */
        function GW2C_RetTexasRoomList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTexasRoomList list.
         * @member {Array.<msg.ITexasRoomSimpleInfo>} list
         * @memberof msg.GW2C_RetTexasRoomList
         * @instance
         */
        GW2C_RetTexasRoomList.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_RetTexasRoomList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {msg.IGW2C_RetTexasRoomList=} [properties] Properties to set
         * @returns {msg.GW2C_RetTexasRoomList} GW2C_RetTexasRoomList instance
         */
        GW2C_RetTexasRoomList.create = function create(properties) {
            return new GW2C_RetTexasRoomList(properties);
        };

        /**
         * Encodes the specified GW2C_RetTexasRoomList message. Does not implicitly {@link msg.GW2C_RetTexasRoomList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {msg.IGW2C_RetTexasRoomList} message GW2C_RetTexasRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTexasRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.TexasRoomSimpleInfo.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTexasRoomList message, length delimited. Does not implicitly {@link msg.GW2C_RetTexasRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {msg.IGW2C_RetTexasRoomList} message GW2C_RetTexasRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTexasRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTexasRoomList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTexasRoomList} GW2C_RetTexasRoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTexasRoomList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTexasRoomList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.TexasRoomSimpleInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTexasRoomList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTexasRoomList} GW2C_RetTexasRoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTexasRoomList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTexasRoomList message.
         * @function verify
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTexasRoomList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.TexasRoomSimpleInfo.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_RetTexasRoomList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTexasRoomList} GW2C_RetTexasRoomList
         */
        GW2C_RetTexasRoomList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTexasRoomList)
                return object;
            var message = new $root.msg.GW2C_RetTexasRoomList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetTexasRoomList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetTexasRoomList.list: object expected");
                    message.list[i] = $root.msg.TexasRoomSimpleInfo.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTexasRoomList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTexasRoomList
         * @static
         * @param {msg.GW2C_RetTexasRoomList} message GW2C_RetTexasRoomList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTexasRoomList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.TexasRoomSimpleInfo.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_RetTexasRoomList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTexasRoomList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTexasRoomList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTexasRoomList;
    })();

    msg.TexasPersonalRoom = (function() {

        /**
         * Properties of a TexasPersonalRoom.
         * @memberof msg
         * @interface ITexasPersonalRoom
         * @property {number|null} [roomId] TexasPersonalRoom roomId
         * @property {number|null} [ante] TexasPersonalRoom ante
         * @property {string|null} [pwd] TexasPersonalRoom pwd
         */

        /**
         * Constructs a new TexasPersonalRoom.
         * @memberof msg
         * @classdesc Represents a TexasPersonalRoom.
         * @implements ITexasPersonalRoom
         * @constructor
         * @param {msg.ITexasPersonalRoom=} [properties] Properties to set
         */
        function TexasPersonalRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TexasPersonalRoom roomId.
         * @member {number} roomId
         * @memberof msg.TexasPersonalRoom
         * @instance
         */
        TexasPersonalRoom.prototype.roomId = 0;

        /**
         * TexasPersonalRoom ante.
         * @member {number} ante
         * @memberof msg.TexasPersonalRoom
         * @instance
         */
        TexasPersonalRoom.prototype.ante = 0;

        /**
         * TexasPersonalRoom pwd.
         * @member {string} pwd
         * @memberof msg.TexasPersonalRoom
         * @instance
         */
        TexasPersonalRoom.prototype.pwd = "";

        /**
         * Creates a new TexasPersonalRoom instance using the specified properties.
         * @function create
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {msg.ITexasPersonalRoom=} [properties] Properties to set
         * @returns {msg.TexasPersonalRoom} TexasPersonalRoom instance
         */
        TexasPersonalRoom.create = function create(properties) {
            return new TexasPersonalRoom(properties);
        };

        /**
         * Encodes the specified TexasPersonalRoom message. Does not implicitly {@link msg.TexasPersonalRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {msg.ITexasPersonalRoom} message TexasPersonalRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasPersonalRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roomId);
            if (message.ante != null && message.hasOwnProperty("ante"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ante);
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pwd);
            return writer;
        };

        /**
         * Encodes the specified TexasPersonalRoom message, length delimited. Does not implicitly {@link msg.TexasPersonalRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {msg.ITexasPersonalRoom} message TexasPersonalRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasPersonalRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TexasPersonalRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TexasPersonalRoom} TexasPersonalRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasPersonalRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TexasPersonalRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomId = reader.int32();
                    break;
                case 2:
                    message.ante = reader.int32();
                    break;
                case 3:
                    message.pwd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TexasPersonalRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TexasPersonalRoom} TexasPersonalRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasPersonalRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TexasPersonalRoom message.
         * @function verify
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TexasPersonalRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.ante != null && message.hasOwnProperty("ante"))
                if (!$util.isInteger(message.ante))
                    return "ante: integer expected";
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                if (!$util.isString(message.pwd))
                    return "pwd: string expected";
            return null;
        };

        /**
         * Creates a TexasPersonalRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TexasPersonalRoom} TexasPersonalRoom
         */
        TexasPersonalRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TexasPersonalRoom)
                return object;
            var message = new $root.msg.TexasPersonalRoom();
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.ante != null)
                message.ante = object.ante | 0;
            if (object.pwd != null)
                message.pwd = String(object.pwd);
            return message;
        };

        /**
         * Creates a plain object from a TexasPersonalRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TexasPersonalRoom
         * @static
         * @param {msg.TexasPersonalRoom} message TexasPersonalRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TexasPersonalRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomId = 0;
                object.ante = 0;
                object.pwd = "";
            }
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.ante != null && message.hasOwnProperty("ante"))
                object.ante = message.ante;
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                object.pwd = message.pwd;
            return object;
        };

        /**
         * Converts this TexasPersonalRoom to JSON.
         * @function toJSON
         * @memberof msg.TexasPersonalRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TexasPersonalRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TexasPersonalRoom;
    })();

    msg.GW2L_ReqRegist = (function() {

        /**
         * Properties of a GW2L_ReqRegist.
         * @memberof msg
         * @interface IGW2L_ReqRegist
         * @property {string|null} [account] GW2L_ReqRegist account
         * @property {string|null} [passwd] GW2L_ReqRegist passwd
         * @property {msg.IIpHost|null} [host] GW2L_ReqRegist host
         * @property {string|null} [name] GW2L_ReqRegist name
         */

        /**
         * Constructs a new GW2L_ReqRegist.
         * @memberof msg
         * @classdesc Represents a GW2L_ReqRegist.
         * @implements IGW2L_ReqRegist
         * @constructor
         * @param {msg.IGW2L_ReqRegist=} [properties] Properties to set
         */
        function GW2L_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2L_ReqRegist account.
         * @member {string} account
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.account = "";

        /**
         * GW2L_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.passwd = "";

        /**
         * GW2L_ReqRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.host = null;

        /**
         * GW2L_ReqRegist name.
         * @member {string} name
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.name = "";

        /**
         * Creates a new GW2L_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist=} [properties] Properties to set
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist instance
         */
        GW2L_ReqRegist.create = function create(properties) {
            return new GW2L_ReqRegist(properties);
        };

        /**
         * Encodes the specified GW2L_ReqRegist message. Does not implicitly {@link msg.GW2L_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist} message GW2L_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified GW2L_ReqRegist message, length delimited. Does not implicitly {@link msg.GW2L_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist} message GW2L_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_ReqRegist message.
         * @function verify
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a GW2L_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         */
        GW2L_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_ReqRegist)
                return object;
            var message = new $root.msg.GW2L_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GW2L_ReqRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a GW2L_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.GW2L_ReqRegist} message GW2L_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.host = null;
                object.name = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this GW2L_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2L_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_ReqRegist;
    })();

    msg.L2GW_RetRegist = (function() {

        /**
         * Properties of a L2GW_RetRegist.
         * @memberof msg
         * @interface IL2GW_RetRegist
         * @property {string|null} [errocde] L2GW_RetRegist errocde
         * @property {msg.IIpHost|null} [host] L2GW_RetRegist host
         */

        /**
         * Constructs a new L2GW_RetRegist.
         * @memberof msg
         * @classdesc Represents a L2GW_RetRegist.
         * @implements IL2GW_RetRegist
         * @constructor
         * @param {msg.IL2GW_RetRegist=} [properties] Properties to set
         */
        function L2GW_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2GW_RetRegist errocde.
         * @member {string} errocde
         * @memberof msg.L2GW_RetRegist
         * @instance
         */
        L2GW_RetRegist.prototype.errocde = "";

        /**
         * L2GW_RetRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.L2GW_RetRegist
         * @instance
         */
        L2GW_RetRegist.prototype.host = null;

        /**
         * Creates a new L2GW_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist=} [properties] Properties to set
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist instance
         */
        L2GW_RetRegist.create = function create(properties) {
            return new L2GW_RetRegist(properties);
        };

        /**
         * Encodes the specified L2GW_RetRegist message. Does not implicitly {@link msg.L2GW_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist} message L2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errocde);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified L2GW_RetRegist message, length delimited. Does not implicitly {@link msg.L2GW_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist} message L2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errocde = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_RetRegist message.
         * @function verify
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                if (!$util.isString(message.errocde))
                    return "errocde: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a L2GW_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         */
        L2GW_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_RetRegist)
                return object;
            var message = new $root.msg.L2GW_RetRegist();
            if (object.errocde != null)
                message.errocde = String(object.errocde);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.L2GW_RetRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a L2GW_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.L2GW_RetRegist} message L2GW_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errocde = "";
                object.host = null;
            }
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                object.errocde = message.errocde;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this L2GW_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.L2GW_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_RetRegist;
    })();

    msg.GW2L_HeartBeat = (function() {

        /**
         * Properties of a GW2L_HeartBeat.
         * @memberof msg
         * @interface IGW2L_HeartBeat
         */

        /**
         * Constructs a new GW2L_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2L_HeartBeat.
         * @implements IGW2L_HeartBeat
         * @constructor
         * @param {msg.IGW2L_HeartBeat=} [properties] Properties to set
         */
        function GW2L_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2L_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat instance
         */
        GW2L_HeartBeat.create = function create(properties) {
            return new GW2L_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2L_HeartBeat message. Does not implicitly {@link msg.GW2L_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat} message GW2L_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2L_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2L_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat} message GW2L_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_HeartBeat message.
         * @function verify
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2L_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         */
        GW2L_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_HeartBeat)
                return object;
            return new $root.msg.GW2L_HeartBeat();
        };

        /**
         * Creates a plain object from a GW2L_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.GW2L_HeartBeat} message GW2L_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2L_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2L_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_HeartBeat;
    })();

    msg.L2GW_HeartBeat = (function() {

        /**
         * Properties of a L2GW_HeartBeat.
         * @memberof msg
         * @interface IL2GW_HeartBeat
         */

        /**
         * Constructs a new L2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a L2GW_HeartBeat.
         * @implements IL2GW_HeartBeat
         * @constructor
         * @param {msg.IL2GW_HeartBeat=} [properties] Properties to set
         */
        function L2GW_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new L2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat instance
         */
        L2GW_HeartBeat.create = function create(properties) {
            return new L2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified L2GW_HeartBeat message. Does not implicitly {@link msg.L2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat} message L2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified L2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.L2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat} message L2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_HeartBeat message.
         * @function verify
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a L2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         */
        L2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_HeartBeat)
                return object;
            return new $root.msg.L2GW_HeartBeat();
        };

        /**
         * Creates a plain object from a L2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.L2GW_HeartBeat} message L2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this L2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.L2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_HeartBeat;
    })();

    msg.L2GW_ReqRegistUser = (function() {

        /**
         * Properties of a L2GW_ReqRegistUser.
         * @memberof msg
         * @interface IL2GW_ReqRegistUser
         * @property {string|null} [account] L2GW_ReqRegistUser account
         * @property {number|Long|null} [expire] L2GW_ReqRegistUser expire
         * @property {string|null} [gatehost] L2GW_ReqRegistUser gatehost
         * @property {number|null} [sid] L2GW_ReqRegistUser sid
         * @property {number|Long|null} [timestamp] L2GW_ReqRegistUser timestamp
         * @property {string|null} [verifykey] L2GW_ReqRegistUser verifykey
         */

        /**
         * Constructs a new L2GW_ReqRegistUser.
         * @memberof msg
         * @classdesc Represents a L2GW_ReqRegistUser.
         * @implements IL2GW_ReqRegistUser
         * @constructor
         * @param {msg.IL2GW_ReqRegistUser=} [properties] Properties to set
         */
        function L2GW_ReqRegistUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2GW_ReqRegistUser account.
         * @member {string} account
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.account = "";

        /**
         * L2GW_ReqRegistUser expire.
         * @member {number|Long} expire
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.expire = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * L2GW_ReqRegistUser gatehost.
         * @member {string} gatehost
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.gatehost = "";

        /**
         * L2GW_ReqRegistUser sid.
         * @member {number} sid
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.sid = 0;

        /**
         * L2GW_ReqRegistUser timestamp.
         * @member {number|Long} timestamp
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * L2GW_ReqRegistUser verifykey.
         * @member {string} verifykey
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.verifykey = "";

        /**
         * Creates a new L2GW_ReqRegistUser instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser=} [properties] Properties to set
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser instance
         */
        L2GW_ReqRegistUser.create = function create(properties) {
            return new L2GW_ReqRegistUser(properties);
        };

        /**
         * Encodes the specified L2GW_ReqRegistUser message. Does not implicitly {@link msg.L2GW_ReqRegistUser.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser} message L2GW_ReqRegistUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_ReqRegistUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.expire != null && message.hasOwnProperty("expire"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.expire);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatehost);
            if (message.sid != null && message.hasOwnProperty("sid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sid);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timestamp);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified L2GW_ReqRegistUser message, length delimited. Does not implicitly {@link msg.L2GW_ReqRegistUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser} message L2GW_ReqRegistUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_ReqRegistUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_ReqRegistUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_ReqRegistUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_ReqRegistUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.expire = reader.int64();
                    break;
                case 3:
                    message.gatehost = reader.string();
                    break;
                case 4:
                    message.sid = reader.int32();
                    break;
                case 5:
                    message.timestamp = reader.int64();
                    break;
                case 6:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_ReqRegistUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_ReqRegistUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_ReqRegistUser message.
         * @function verify
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_ReqRegistUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (!$util.isInteger(message.expire) && !(message.expire && $util.isInteger(message.expire.low) && $util.isInteger(message.expire.high)))
                    return "expire: integer|Long expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                if (!$util.isString(message.gatehost))
                    return "gatehost: string expected";
            if (message.sid != null && message.hasOwnProperty("sid"))
                if (!$util.isInteger(message.sid))
                    return "sid: integer expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a L2GW_ReqRegistUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         */
        L2GW_ReqRegistUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_ReqRegistUser)
                return object;
            var message = new $root.msg.L2GW_ReqRegistUser();
            if (object.account != null)
                message.account = String(object.account);
            if (object.expire != null)
                if ($util.Long)
                    (message.expire = $util.Long.fromValue(object.expire)).unsigned = false;
                else if (typeof object.expire === "string")
                    message.expire = parseInt(object.expire, 10);
                else if (typeof object.expire === "number")
                    message.expire = object.expire;
                else if (typeof object.expire === "object")
                    message.expire = new $util.LongBits(object.expire.low >>> 0, object.expire.high >>> 0).toNumber();
            if (object.gatehost != null)
                message.gatehost = String(object.gatehost);
            if (object.sid != null)
                message.sid = object.sid | 0;
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a L2GW_ReqRegistUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.L2GW_ReqRegistUser} message L2GW_ReqRegistUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_ReqRegistUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.expire = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.expire = options.longs === String ? "0" : 0;
                object.gatehost = "";
                object.sid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.verifykey = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (typeof message.expire === "number")
                    object.expire = options.longs === String ? String(message.expire) : message.expire;
                else
                    object.expire = options.longs === String ? $util.Long.prototype.toString.call(message.expire) : options.longs === Number ? new $util.LongBits(message.expire.low >>> 0, message.expire.high >>> 0).toNumber() : message.expire;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = message.gatehost;
            if (message.sid != null && message.hasOwnProperty("sid"))
                object.sid = message.sid;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this L2GW_ReqRegistUser to JSON.
         * @function toJSON
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_ReqRegistUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_ReqRegistUser;
    })();

    msg.GW2L_RegistUserRet = (function() {

        /**
         * Properties of a GW2L_RegistUserRet.
         * @memberof msg
         * @interface IGW2L_RegistUserRet
         * @property {string|null} [account] GW2L_RegistUserRet account
         * @property {string|null} [gatehost] GW2L_RegistUserRet gatehost
         * @property {string|null} [errcode] GW2L_RegistUserRet errcode
         * @property {number|null} [sid] GW2L_RegistUserRet sid
         * @property {string|null} [verifykey] GW2L_RegistUserRet verifykey
         */

        /**
         * Constructs a new GW2L_RegistUserRet.
         * @memberof msg
         * @classdesc Represents a GW2L_RegistUserRet.
         * @implements IGW2L_RegistUserRet
         * @constructor
         * @param {msg.IGW2L_RegistUserRet=} [properties] Properties to set
         */
        function GW2L_RegistUserRet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2L_RegistUserRet account.
         * @member {string} account
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.account = "";

        /**
         * GW2L_RegistUserRet gatehost.
         * @member {string} gatehost
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.gatehost = "";

        /**
         * GW2L_RegistUserRet errcode.
         * @member {string} errcode
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.errcode = "";

        /**
         * GW2L_RegistUserRet sid.
         * @member {number} sid
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.sid = 0;

        /**
         * GW2L_RegistUserRet verifykey.
         * @member {string} verifykey
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.verifykey = "";

        /**
         * Creates a new GW2L_RegistUserRet instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet=} [properties] Properties to set
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet instance
         */
        GW2L_RegistUserRet.create = function create(properties) {
            return new GW2L_RegistUserRet(properties);
        };

        /**
         * Encodes the specified GW2L_RegistUserRet message. Does not implicitly {@link msg.GW2L_RegistUserRet.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet} message GW2L_RegistUserRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_RegistUserRet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatehost);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            if (message.sid != null && message.hasOwnProperty("sid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sid);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified GW2L_RegistUserRet message, length delimited. Does not implicitly {@link msg.GW2L_RegistUserRet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet} message GW2L_RegistUserRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_RegistUserRet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_RegistUserRet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_RegistUserRet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_RegistUserRet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.gatehost = reader.string();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                case 4:
                    message.sid = reader.int32();
                    break;
                case 5:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_RegistUserRet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_RegistUserRet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_RegistUserRet message.
         * @function verify
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_RegistUserRet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                if (!$util.isString(message.gatehost))
                    return "gatehost: string expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.sid != null && message.hasOwnProperty("sid"))
                if (!$util.isInteger(message.sid))
                    return "sid: integer expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a GW2L_RegistUserRet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         */
        GW2L_RegistUserRet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_RegistUserRet)
                return object;
            var message = new $root.msg.GW2L_RegistUserRet();
            if (object.account != null)
                message.account = String(object.account);
            if (object.gatehost != null)
                message.gatehost = String(object.gatehost);
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.sid != null)
                message.sid = object.sid | 0;
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a GW2L_RegistUserRet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.GW2L_RegistUserRet} message GW2L_RegistUserRet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_RegistUserRet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.gatehost = "";
                object.errcode = "";
                object.sid = 0;
                object.verifykey = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = message.gatehost;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.sid != null && message.hasOwnProperty("sid"))
                object.sid = message.sid;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this GW2L_RegistUserRet to JSON.
         * @function toJSON
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_RegistUserRet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_RegistUserRet;
    })();

    msg.GW2MS_ReqRegist = (function() {

        /**
         * Properties of a GW2MS_ReqRegist.
         * @memberof msg
         * @interface IGW2MS_ReqRegist
         * @property {string|null} [account] GW2MS_ReqRegist account
         * @property {string|null} [passwd] GW2MS_ReqRegist passwd
         * @property {string|null} [agentname] GW2MS_ReqRegist agentname
         * @property {msg.IIpHost|null} [host] GW2MS_ReqRegist host
         */

        /**
         * Constructs a new GW2MS_ReqRegist.
         * @memberof msg
         * @classdesc Represents a GW2MS_ReqRegist.
         * @implements IGW2MS_ReqRegist
         * @constructor
         * @param {msg.IGW2MS_ReqRegist=} [properties] Properties to set
         */
        function GW2MS_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_ReqRegist account.
         * @member {string} account
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.account = "";

        /**
         * GW2MS_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.passwd = "";

        /**
         * GW2MS_ReqRegist agentname.
         * @member {string} agentname
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.agentname = "";

        /**
         * GW2MS_ReqRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.host = null;

        /**
         * Creates a new GW2MS_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist=} [properties] Properties to set
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist instance
         */
        GW2MS_ReqRegist.create = function create(properties) {
            return new GW2MS_ReqRegist(properties);
        };

        /**
         * Encodes the specified GW2MS_ReqRegist message. Does not implicitly {@link msg.GW2MS_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist} message GW2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.agentname);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_ReqRegist message, length delimited. Does not implicitly {@link msg.GW2MS_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist} message GW2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.agentname = reader.string();
                    break;
                case 4:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_ReqRegist message.
         * @function verify
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         */
        GW2MS_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_ReqRegist)
                return object;
            var message = new $root.msg.GW2MS_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GW2MS_ReqRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.GW2MS_ReqRegist} message GW2MS_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.agentname = "";
                object.host = null;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this GW2MS_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_ReqRegist;
    })();

    msg.MS2GW_RetRegist = (function() {

        /**
         * Properties of a MS2GW_RetRegist.
         * @memberof msg
         * @interface IMS2GW_RetRegist
         * @property {string|null} [errcode] MS2GW_RetRegist errcode
         * @property {msg.IIpHost|null} [host] MS2GW_RetRegist host
         */

        /**
         * Constructs a new MS2GW_RetRegist.
         * @memberof msg
         * @classdesc Represents a MS2GW_RetRegist.
         * @implements IMS2GW_RetRegist
         * @constructor
         * @param {msg.IMS2GW_RetRegist=} [properties] Properties to set
         */
        function MS2GW_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.MS2GW_RetRegist
         * @instance
         */
        MS2GW_RetRegist.prototype.errcode = "";

        /**
         * MS2GW_RetRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.MS2GW_RetRegist
         * @instance
         */
        MS2GW_RetRegist.prototype.host = null;

        /**
         * Creates a new MS2GW_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist=} [properties] Properties to set
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist instance
         */
        MS2GW_RetRegist.create = function create(properties) {
            return new MS2GW_RetRegist(properties);
        };

        /**
         * Encodes the specified MS2GW_RetRegist message. Does not implicitly {@link msg.MS2GW_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist} message MS2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_RetRegist message, length delimited. Does not implicitly {@link msg.MS2GW_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist} message MS2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_RetRegist message.
         * @function verify
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a MS2GW_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         */
        MS2GW_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_RetRegist)
                return object;
            var message = new $root.msg.MS2GW_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.MS2GW_RetRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.MS2GW_RetRegist} message MS2GW_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                object.host = null;
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this MS2GW_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_RetRegist;
    })();

    msg.GW2MS_HeartBeat = (function() {

        /**
         * Properties of a GW2MS_HeartBeat.
         * @memberof msg
         * @interface IGW2MS_HeartBeat
         */

        /**
         * Constructs a new GW2MS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2MS_HeartBeat.
         * @implements IGW2MS_HeartBeat
         * @constructor
         * @param {msg.IGW2MS_HeartBeat=} [properties] Properties to set
         */
        function GW2MS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2MS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat instance
         */
        GW2MS_HeartBeat.create = function create(properties) {
            return new GW2MS_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2MS_HeartBeat message. Does not implicitly {@link msg.GW2MS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat} message GW2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2MS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat} message GW2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_HeartBeat message.
         * @function verify
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2MS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         */
        GW2MS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_HeartBeat)
                return object;
            return new $root.msg.GW2MS_HeartBeat();
        };

        /**
         * Creates a plain object from a GW2MS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.GW2MS_HeartBeat} message GW2MS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2MS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_HeartBeat;
    })();

    msg.MS2GW_HeartBeat = (function() {

        /**
         * Properties of a MS2GW_HeartBeat.
         * @memberof msg
         * @interface IMS2GW_HeartBeat
         */

        /**
         * Constructs a new MS2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a MS2GW_HeartBeat.
         * @implements IMS2GW_HeartBeat
         * @constructor
         * @param {msg.IMS2GW_HeartBeat=} [properties] Properties to set
         */
        function MS2GW_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new MS2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat instance
         */
        MS2GW_HeartBeat.create = function create(properties) {
            return new MS2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified MS2GW_HeartBeat message. Does not implicitly {@link msg.MS2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat} message MS2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.MS2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat} message MS2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_HeartBeat message.
         * @function verify
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a MS2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         */
        MS2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_HeartBeat)
                return object;
            return new $root.msg.MS2GW_HeartBeat();
        };

        /**
         * Creates a plain object from a MS2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.MS2GW_HeartBeat} message MS2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this MS2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_HeartBeat;
    })();

    msg.RS2GW_ReqRegist = (function() {

        /**
         * Properties of a RS2GW_ReqRegist.
         * @memberof msg
         * @interface IRS2GW_ReqRegist
         * @property {string|null} [account] RS2GW_ReqRegist account
         * @property {string|null} [passwd] RS2GW_ReqRegist passwd
         * @property {string|null} [agentname] RS2GW_ReqRegist agentname
         */

        /**
         * Constructs a new RS2GW_ReqRegist.
         * @memberof msg
         * @classdesc Represents a RS2GW_ReqRegist.
         * @implements IRS2GW_ReqRegist
         * @constructor
         * @param {msg.IRS2GW_ReqRegist=} [properties] Properties to set
         */
        function RS2GW_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_ReqRegist account.
         * @member {string} account
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.account = "";

        /**
         * RS2GW_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.passwd = "";

        /**
         * RS2GW_ReqRegist agentname.
         * @member {string} agentname
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.agentname = "";

        /**
         * Creates a new RS2GW_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist=} [properties] Properties to set
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist instance
         */
        RS2GW_ReqRegist.create = function create(properties) {
            return new RS2GW_ReqRegist(properties);
        };

        /**
         * Encodes the specified RS2GW_ReqRegist message. Does not implicitly {@link msg.RS2GW_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist} message RS2GW_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.agentname);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_ReqRegist message, length delimited. Does not implicitly {@link msg.RS2GW_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist} message RS2GW_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.agentname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_ReqRegist message.
         * @function verify
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            return null;
        };

        /**
         * Creates a RS2GW_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         */
        RS2GW_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_ReqRegist)
                return object;
            var message = new $root.msg.RS2GW_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.RS2GW_ReqRegist} message RS2GW_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.agentname = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            return object;
        };

        /**
         * Converts this RS2GW_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_ReqRegist;
    })();

    msg.GW2RS_RetRegist = (function() {

        /**
         * Properties of a GW2RS_RetRegist.
         * @memberof msg
         * @interface IGW2RS_RetRegist
         * @property {string|null} [errcode] GW2RS_RetRegist errcode
         * @property {string|null} [agentname] GW2RS_RetRegist agentname
         */

        /**
         * Constructs a new GW2RS_RetRegist.
         * @memberof msg
         * @classdesc Represents a GW2RS_RetRegist.
         * @implements IGW2RS_RetRegist
         * @constructor
         * @param {msg.IGW2RS_RetRegist=} [properties] Properties to set
         */
        function GW2RS_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.GW2RS_RetRegist
         * @instance
         */
        GW2RS_RetRegist.prototype.errcode = "";

        /**
         * GW2RS_RetRegist agentname.
         * @member {string} agentname
         * @memberof msg.GW2RS_RetRegist
         * @instance
         */
        GW2RS_RetRegist.prototype.agentname = "";

        /**
         * Creates a new GW2RS_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist=} [properties] Properties to set
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist instance
         */
        GW2RS_RetRegist.create = function create(properties) {
            return new GW2RS_RetRegist(properties);
        };

        /**
         * Encodes the specified GW2RS_RetRegist message. Does not implicitly {@link msg.GW2RS_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist} message GW2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.agentname);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_RetRegist message, length delimited. Does not implicitly {@link msg.GW2RS_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist} message GW2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.agentname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_RetRegist message.
         * @function verify
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            return null;
        };

        /**
         * Creates a GW2RS_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         */
        GW2RS_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_RetRegist)
                return object;
            var message = new $root.msg.GW2RS_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.GW2RS_RetRegist} message GW2RS_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                object.agentname = "";
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            return object;
        };

        /**
         * Converts this GW2RS_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_RetRegist;
    })();

    msg.GW2RS_UserDisconnect = (function() {

        /**
         * Properties of a GW2RS_UserDisconnect.
         * @memberof msg
         * @interface IGW2RS_UserDisconnect
         * @property {number|Long|null} [roomid] GW2RS_UserDisconnect roomid
         * @property {number|Long|null} [userid] GW2RS_UserDisconnect userid
         */

        /**
         * Constructs a new GW2RS_UserDisconnect.
         * @memberof msg
         * @classdesc Represents a GW2RS_UserDisconnect.
         * @implements IGW2RS_UserDisconnect
         * @constructor
         * @param {msg.IGW2RS_UserDisconnect=} [properties] Properties to set
         */
        function GW2RS_UserDisconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_UserDisconnect roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         */
        GW2RS_UserDisconnect.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2RS_UserDisconnect userid.
         * @member {number|Long} userid
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         */
        GW2RS_UserDisconnect.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GW2RS_UserDisconnect instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect=} [properties] Properties to set
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect instance
         */
        GW2RS_UserDisconnect.create = function create(properties) {
            return new GW2RS_UserDisconnect(properties);
        };

        /**
         * Encodes the specified GW2RS_UserDisconnect message. Does not implicitly {@link msg.GW2RS_UserDisconnect.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect} message GW2RS_UserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UserDisconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_UserDisconnect message, length delimited. Does not implicitly {@link msg.GW2RS_UserDisconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect} message GW2RS_UserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UserDisconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_UserDisconnect message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UserDisconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_UserDisconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_UserDisconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UserDisconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_UserDisconnect message.
         * @function verify
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_UserDisconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2RS_UserDisconnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         */
        GW2RS_UserDisconnect.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_UserDisconnect)
                return object;
            var message = new $root.msg.GW2RS_UserDisconnect();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_UserDisconnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.GW2RS_UserDisconnect} message GW2RS_UserDisconnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_UserDisconnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            return object;
        };

        /**
         * Converts this GW2RS_UserDisconnect to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_UserDisconnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_UserDisconnect;
    })();

    msg.RS2GW_RetUserDisconnect = (function() {

        /**
         * Properties of a RS2GW_RetUserDisconnect.
         * @memberof msg
         * @interface IRS2GW_RetUserDisconnect
         * @property {number|Long|null} [roomid] RS2GW_RetUserDisconnect roomid
         * @property {number|Long|null} [userid] RS2GW_RetUserDisconnect userid
         * @property {string|null} [errcode] RS2GW_RetUserDisconnect errcode
         */

        /**
         * Constructs a new RS2GW_RetUserDisconnect.
         * @memberof msg
         * @classdesc Represents a RS2GW_RetUserDisconnect.
         * @implements IRS2GW_RetUserDisconnect
         * @constructor
         * @param {msg.IRS2GW_RetUserDisconnect=} [properties] Properties to set
         */
        function RS2GW_RetUserDisconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_RetUserDisconnect roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2GW_RetUserDisconnect userid.
         * @member {number|Long} userid
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2GW_RetUserDisconnect errcode.
         * @member {string} errcode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.errcode = "";

        /**
         * Creates a new RS2GW_RetUserDisconnect instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect=} [properties] Properties to set
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect instance
         */
        RS2GW_RetUserDisconnect.create = function create(properties) {
            return new RS2GW_RetUserDisconnect(properties);
        };

        /**
         * Encodes the specified RS2GW_RetUserDisconnect message. Does not implicitly {@link msg.RS2GW_RetUserDisconnect.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_RetUserDisconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userid);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_RetUserDisconnect message, length delimited. Does not implicitly {@link msg.RS2GW_RetUserDisconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_RetUserDisconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_RetUserDisconnect message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_RetUserDisconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_RetUserDisconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.int64();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_RetUserDisconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_RetUserDisconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_RetUserDisconnect message.
         * @function verify
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_RetUserDisconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a RS2GW_RetUserDisconnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         */
        RS2GW_RetUserDisconnect.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_RetUserDisconnect)
                return object;
            var message = new $root.msg.RS2GW_RetUserDisconnect();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = false;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_RetUserDisconnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.RS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_RetUserDisconnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.errcode = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber() : message.userid;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this RS2GW_RetUserDisconnect to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_RetUserDisconnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_RetUserDisconnect;
    })();

    msg.C2RS_MsgTransfer = (function() {

        /**
         * Properties of a C2RS_MsgTransfer.
         * @memberof msg
         * @interface IC2RS_MsgTransfer
         * @property {number|Long|null} [uid] C2RS_MsgTransfer uid
         * @property {string|null} [name] C2RS_MsgTransfer name
         * @property {Uint8Array|null} [buf] C2RS_MsgTransfer buf
         */

        /**
         * Constructs a new C2RS_MsgTransfer.
         * @memberof msg
         * @classdesc Represents a C2RS_MsgTransfer.
         * @implements IC2RS_MsgTransfer
         * @constructor
         * @param {msg.IC2RS_MsgTransfer=} [properties] Properties to set
         */
        function C2RS_MsgTransfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2RS_MsgTransfer uid.
         * @member {number|Long} uid
         * @memberof msg.C2RS_MsgTransfer
         * @instance
         */
        C2RS_MsgTransfer.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2RS_MsgTransfer name.
         * @member {string} name
         * @memberof msg.C2RS_MsgTransfer
         * @instance
         */
        C2RS_MsgTransfer.prototype.name = "";

        /**
         * C2RS_MsgTransfer buf.
         * @member {Uint8Array} buf
         * @memberof msg.C2RS_MsgTransfer
         * @instance
         */
        C2RS_MsgTransfer.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new C2RS_MsgTransfer instance using the specified properties.
         * @function create
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {msg.IC2RS_MsgTransfer=} [properties] Properties to set
         * @returns {msg.C2RS_MsgTransfer} C2RS_MsgTransfer instance
         */
        C2RS_MsgTransfer.create = function create(properties) {
            return new C2RS_MsgTransfer(properties);
        };

        /**
         * Encodes the specified C2RS_MsgTransfer message. Does not implicitly {@link msg.C2RS_MsgTransfer.verify|verify} messages.
         * @function encode
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {msg.IC2RS_MsgTransfer} message C2RS_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2RS_MsgTransfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.buf != null && message.hasOwnProperty("buf"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified C2RS_MsgTransfer message, length delimited. Does not implicitly {@link msg.C2RS_MsgTransfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {msg.IC2RS_MsgTransfer} message C2RS_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2RS_MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2RS_MsgTransfer message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2RS_MsgTransfer} C2RS_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2RS_MsgTransfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2RS_MsgTransfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.buf = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2RS_MsgTransfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2RS_MsgTransfer} C2RS_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2RS_MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2RS_MsgTransfer message.
         * @function verify
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2RS_MsgTransfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a C2RS_MsgTransfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2RS_MsgTransfer} C2RS_MsgTransfer
         */
        C2RS_MsgTransfer.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2RS_MsgTransfer)
                return object;
            var message = new $root.msg.C2RS_MsgTransfer();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a C2RS_MsgTransfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2RS_MsgTransfer
         * @static
         * @param {msg.C2RS_MsgTransfer} message C2RS_MsgTransfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2RS_MsgTransfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.name = "";
                if (options.bytes === String)
                    object.buf = "";
                else {
                    object.buf = [];
                    if (options.bytes !== Array)
                        object.buf = $util.newBuffer(object.buf);
                }
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this C2RS_MsgTransfer to JSON.
         * @function toJSON
         * @memberof msg.C2RS_MsgTransfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2RS_MsgTransfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2RS_MsgTransfer;
    })();

    msg.RS2GW_MsgTransfer = (function() {

        /**
         * Properties of a RS2GW_MsgTransfer.
         * @memberof msg
         * @interface IRS2GW_MsgTransfer
         * @property {number|Long|null} [uid] RS2GW_MsgTransfer uid
         * @property {string|null} [name] RS2GW_MsgTransfer name
         * @property {Uint8Array|null} [buf] RS2GW_MsgTransfer buf
         */

        /**
         * Constructs a new RS2GW_MsgTransfer.
         * @memberof msg
         * @classdesc Represents a RS2GW_MsgTransfer.
         * @implements IRS2GW_MsgTransfer
         * @constructor
         * @param {msg.IRS2GW_MsgTransfer=} [properties] Properties to set
         */
        function RS2GW_MsgTransfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_MsgTransfer uid.
         * @member {number|Long} uid
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2GW_MsgTransfer name.
         * @member {string} name
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.name = "";

        /**
         * RS2GW_MsgTransfer buf.
         * @member {Uint8Array} buf
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new RS2GW_MsgTransfer instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer=} [properties] Properties to set
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer instance
         */
        RS2GW_MsgTransfer.create = function create(properties) {
            return new RS2GW_MsgTransfer(properties);
        };

        /**
         * Encodes the specified RS2GW_MsgTransfer message. Does not implicitly {@link msg.RS2GW_MsgTransfer.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer} message RS2GW_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_MsgTransfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.buf != null && message.hasOwnProperty("buf"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_MsgTransfer message, length delimited. Does not implicitly {@link msg.RS2GW_MsgTransfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer} message RS2GW_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_MsgTransfer message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_MsgTransfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_MsgTransfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.buf = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_MsgTransfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_MsgTransfer message.
         * @function verify
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_MsgTransfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a RS2GW_MsgTransfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         */
        RS2GW_MsgTransfer.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_MsgTransfer)
                return object;
            var message = new $root.msg.RS2GW_MsgTransfer();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_MsgTransfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.RS2GW_MsgTransfer} message RS2GW_MsgTransfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_MsgTransfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.name = "";
                if (options.bytes === String)
                    object.buf = "";
                else {
                    object.buf = [];
                    if (options.bytes !== Array)
                        object.buf = $util.newBuffer(object.buf);
                }
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this RS2GW_MsgTransfer to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_MsgTransfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_MsgTransfer;
    })();

    msg.RS2MS_ReqRegist = (function() {

        /**
         * Properties of a RS2MS_ReqRegist.
         * @memberof msg
         * @interface IRS2MS_ReqRegist
         * @property {string|null} [account] RS2MS_ReqRegist account
         * @property {string|null} [passwd] RS2MS_ReqRegist passwd
         * @property {string|null} [name] RS2MS_ReqRegist name
         */

        /**
         * Constructs a new RS2MS_ReqRegist.
         * @memberof msg
         * @classdesc Represents a RS2MS_ReqRegist.
         * @implements IRS2MS_ReqRegist
         * @constructor
         * @param {msg.IRS2MS_ReqRegist=} [properties] Properties to set
         */
        function RS2MS_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_ReqRegist account.
         * @member {string} account
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.account = "";

        /**
         * RS2MS_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.passwd = "";

        /**
         * RS2MS_ReqRegist name.
         * @member {string} name
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.name = "";

        /**
         * Creates a new RS2MS_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist=} [properties] Properties to set
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist instance
         */
        RS2MS_ReqRegist.create = function create(properties) {
            return new RS2MS_ReqRegist(properties);
        };

        /**
         * Encodes the specified RS2MS_ReqRegist message. Does not implicitly {@link msg.RS2MS_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist} message RS2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_ReqRegist message, length delimited. Does not implicitly {@link msg.RS2MS_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist} message RS2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_ReqRegist message.
         * @function verify
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a RS2MS_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         */
        RS2MS_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_ReqRegist)
                return object;
            var message = new $root.msg.RS2MS_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.RS2MS_ReqRegist} message RS2MS_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.name = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this RS2MS_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_ReqRegist;
    })();

    msg.MS2RS_RetRegist = (function() {

        /**
         * Properties of a MS2RS_RetRegist.
         * @memberof msg
         * @interface IMS2RS_RetRegist
         * @property {string|null} [errcode] MS2RS_RetRegist errcode
         */

        /**
         * Constructs a new MS2RS_RetRegist.
         * @memberof msg
         * @classdesc Represents a MS2RS_RetRegist.
         * @implements IMS2RS_RetRegist
         * @constructor
         * @param {msg.IMS2RS_RetRegist=} [properties] Properties to set
         */
        function MS2RS_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.MS2RS_RetRegist
         * @instance
         */
        MS2RS_RetRegist.prototype.errcode = "";

        /**
         * Creates a new MS2RS_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist=} [properties] Properties to set
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist instance
         */
        MS2RS_RetRegist.create = function create(properties) {
            return new MS2RS_RetRegist(properties);
        };

        /**
         * Encodes the specified MS2RS_RetRegist message. Does not implicitly {@link msg.MS2RS_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist} message MS2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified MS2RS_RetRegist message, length delimited. Does not implicitly {@link msg.MS2RS_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist} message MS2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_RetRegist message.
         * @function verify
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a MS2RS_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         */
        MS2RS_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_RetRegist)
                return object;
            var message = new $root.msg.MS2RS_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.MS2RS_RetRegist} message MS2RS_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this MS2RS_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_RetRegist;
    })();

    msg.RS2MS_HeartBeat = (function() {

        /**
         * Properties of a RS2MS_HeartBeat.
         * @memberof msg
         * @interface IRS2MS_HeartBeat
         */

        /**
         * Constructs a new RS2MS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a RS2MS_HeartBeat.
         * @implements IRS2MS_HeartBeat
         * @constructor
         * @param {msg.IRS2MS_HeartBeat=} [properties] Properties to set
         */
        function RS2MS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RS2MS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat=} [properties] Properties to set
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat instance
         */
        RS2MS_HeartBeat.create = function create(properties) {
            return new RS2MS_HeartBeat(properties);
        };

        /**
         * Encodes the specified RS2MS_HeartBeat message. Does not implicitly {@link msg.RS2MS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat} message RS2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RS2MS_HeartBeat message, length delimited. Does not implicitly {@link msg.RS2MS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat} message RS2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_HeartBeat message.
         * @function verify
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RS2MS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         */
        RS2MS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_HeartBeat)
                return object;
            return new $root.msg.RS2MS_HeartBeat();
        };

        /**
         * Creates a plain object from a RS2MS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.RS2MS_HeartBeat} message RS2MS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RS2MS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_HeartBeat;
    })();

    msg.MS2RS_HeartBeat = (function() {

        /**
         * Properties of a MS2RS_HeartBeat.
         * @memberof msg
         * @interface IMS2RS_HeartBeat
         */

        /**
         * Constructs a new MS2RS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a MS2RS_HeartBeat.
         * @implements IMS2RS_HeartBeat
         * @constructor
         * @param {msg.IMS2RS_HeartBeat=} [properties] Properties to set
         */
        function MS2RS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new MS2RS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat=} [properties] Properties to set
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat instance
         */
        MS2RS_HeartBeat.create = function create(properties) {
            return new MS2RS_HeartBeat(properties);
        };

        /**
         * Encodes the specified MS2RS_HeartBeat message. Does not implicitly {@link msg.MS2RS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat} message MS2RS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_HeartBeat message, length delimited. Does not implicitly {@link msg.MS2RS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat} message MS2RS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_HeartBeat message.
         * @function verify
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a MS2RS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         */
        MS2RS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_HeartBeat)
                return object;
            return new $root.msg.MS2RS_HeartBeat();
        };

        /**
         * Creates a plain object from a MS2RS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.MS2RS_HeartBeat} message MS2RS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this MS2RS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_HeartBeat;
    })();

    msg.GateSimpleInfo = (function() {

        /**
         * Properties of a GateSimpleInfo.
         * @memberof msg
         * @interface IGateSimpleInfo
         * @property {string|null} [name] GateSimpleInfo name
         * @property {msg.IIpHost|null} [host] GateSimpleInfo host
         */

        /**
         * Constructs a new GateSimpleInfo.
         * @memberof msg
         * @classdesc Represents a GateSimpleInfo.
         * @implements IGateSimpleInfo
         * @constructor
         * @param {msg.IGateSimpleInfo=} [properties] Properties to set
         */
        function GateSimpleInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GateSimpleInfo name.
         * @member {string} name
         * @memberof msg.GateSimpleInfo
         * @instance
         */
        GateSimpleInfo.prototype.name = "";

        /**
         * GateSimpleInfo host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GateSimpleInfo
         * @instance
         */
        GateSimpleInfo.prototype.host = null;

        /**
         * Creates a new GateSimpleInfo instance using the specified properties.
         * @function create
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo=} [properties] Properties to set
         * @returns {msg.GateSimpleInfo} GateSimpleInfo instance
         */
        GateSimpleInfo.create = function create(properties) {
            return new GateSimpleInfo(properties);
        };

        /**
         * Encodes the specified GateSimpleInfo message. Does not implicitly {@link msg.GateSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo} message GateSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GateSimpleInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GateSimpleInfo message, length delimited. Does not implicitly {@link msg.GateSimpleInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo} message GateSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GateSimpleInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GateSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GateSimpleInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GateSimpleInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GateSimpleInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GateSimpleInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GateSimpleInfo message.
         * @function verify
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GateSimpleInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a GateSimpleInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         */
        GateSimpleInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GateSimpleInfo)
                return object;
            var message = new $root.msg.GateSimpleInfo();
            if (object.name != null)
                message.name = String(object.name);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GateSimpleInfo.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a GateSimpleInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.GateSimpleInfo} message GateSimpleInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GateSimpleInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.host = null;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this GateSimpleInfo to JSON.
         * @function toJSON
         * @memberof msg.GateSimpleInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GateSimpleInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GateSimpleInfo;
    })();

    msg.MS2RS_GateInfo = (function() {

        /**
         * Properties of a MS2RS_GateInfo.
         * @memberof msg
         * @interface IMS2RS_GateInfo
         * @property {Array.<msg.IGateSimpleInfo>|null} [gates] MS2RS_GateInfo gates
         */

        /**
         * Constructs a new MS2RS_GateInfo.
         * @memberof msg
         * @classdesc Represents a MS2RS_GateInfo.
         * @implements IMS2RS_GateInfo
         * @constructor
         * @param {msg.IMS2RS_GateInfo=} [properties] Properties to set
         */
        function MS2RS_GateInfo(properties) {
            this.gates = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_GateInfo gates.
         * @member {Array.<msg.IGateSimpleInfo>} gates
         * @memberof msg.MS2RS_GateInfo
         * @instance
         */
        MS2RS_GateInfo.prototype.gates = $util.emptyArray;

        /**
         * Creates a new MS2RS_GateInfo instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo=} [properties] Properties to set
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo instance
         */
        MS2RS_GateInfo.create = function create(properties) {
            return new MS2RS_GateInfo(properties);
        };

        /**
         * Encodes the specified MS2RS_GateInfo message. Does not implicitly {@link msg.MS2RS_GateInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo} message MS2RS_GateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_GateInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gates != null && message.gates.length)
                for (var i = 0; i < message.gates.length; ++i)
                    $root.msg.GateSimpleInfo.encode(message.gates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_GateInfo message, length delimited. Does not implicitly {@link msg.MS2RS_GateInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo} message MS2RS_GateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_GateInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_GateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_GateInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_GateInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.gates && message.gates.length))
                        message.gates = [];
                    message.gates.push($root.msg.GateSimpleInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_GateInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_GateInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_GateInfo message.
         * @function verify
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_GateInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gates != null && message.hasOwnProperty("gates")) {
                if (!Array.isArray(message.gates))
                    return "gates: array expected";
                for (var i = 0; i < message.gates.length; ++i) {
                    var error = $root.msg.GateSimpleInfo.verify(message.gates[i]);
                    if (error)
                        return "gates." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MS2RS_GateInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         */
        MS2RS_GateInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_GateInfo)
                return object;
            var message = new $root.msg.MS2RS_GateInfo();
            if (object.gates) {
                if (!Array.isArray(object.gates))
                    throw TypeError(".msg.MS2RS_GateInfo.gates: array expected");
                message.gates = [];
                for (var i = 0; i < object.gates.length; ++i) {
                    if (typeof object.gates[i] !== "object")
                        throw TypeError(".msg.MS2RS_GateInfo.gates: object expected");
                    message.gates[i] = $root.msg.GateSimpleInfo.fromObject(object.gates[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_GateInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.MS2RS_GateInfo} message MS2RS_GateInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_GateInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.gates = [];
            if (message.gates && message.gates.length) {
                object.gates = [];
                for (var j = 0; j < message.gates.length; ++j)
                    object.gates[j] = $root.msg.GateSimpleInfo.toObject(message.gates[j], options);
            }
            return object;
        };

        /**
         * Converts this MS2RS_GateInfo to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_GateInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_GateInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_GateInfo;
    })();

    msg.MS2Server_BroadCast = (function() {

        /**
         * Properties of a MS2Server_BroadCast.
         * @memberof msg
         * @interface IMS2Server_BroadCast
         * @property {string|null} [cmd] MS2Server_BroadCast cmd
         */

        /**
         * Constructs a new MS2Server_BroadCast.
         * @memberof msg
         * @classdesc Represents a MS2Server_BroadCast.
         * @implements IMS2Server_BroadCast
         * @constructor
         * @param {msg.IMS2Server_BroadCast=} [properties] Properties to set
         */
        function MS2Server_BroadCast(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2Server_BroadCast cmd.
         * @member {string} cmd
         * @memberof msg.MS2Server_BroadCast
         * @instance
         */
        MS2Server_BroadCast.prototype.cmd = "";

        /**
         * Creates a new MS2Server_BroadCast instance using the specified properties.
         * @function create
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast=} [properties] Properties to set
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast instance
         */
        MS2Server_BroadCast.create = function create(properties) {
            return new MS2Server_BroadCast(properties);
        };

        /**
         * Encodes the specified MS2Server_BroadCast message. Does not implicitly {@link msg.MS2Server_BroadCast.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast} message MS2Server_BroadCast message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2Server_BroadCast.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cmd);
            return writer;
        };

        /**
         * Encodes the specified MS2Server_BroadCast message, length delimited. Does not implicitly {@link msg.MS2Server_BroadCast.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast} message MS2Server_BroadCast message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2Server_BroadCast.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2Server_BroadCast message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2Server_BroadCast.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2Server_BroadCast();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cmd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2Server_BroadCast message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2Server_BroadCast.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2Server_BroadCast message.
         * @function verify
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2Server_BroadCast.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                if (!$util.isString(message.cmd))
                    return "cmd: string expected";
            return null;
        };

        /**
         * Creates a MS2Server_BroadCast message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         */
        MS2Server_BroadCast.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2Server_BroadCast)
                return object;
            var message = new $root.msg.MS2Server_BroadCast();
            if (object.cmd != null)
                message.cmd = String(object.cmd);
            return message;
        };

        /**
         * Creates a plain object from a MS2Server_BroadCast message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.MS2Server_BroadCast} message MS2Server_BroadCast
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2Server_BroadCast.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cmd = "";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                object.cmd = message.cmd;
            return object;
        };

        /**
         * Converts this MS2Server_BroadCast to JSON.
         * @function toJSON
         * @memberof msg.MS2Server_BroadCast
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2Server_BroadCast.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2Server_BroadCast;
    })();

    /**
     * 牌局模式
     * @name msg.GamblingPattern
     * @enum {string}
     * @property {number} _Fast=1 * 快速出牌模式
     * @property {number} _Ante=2 * 前注模式
     * @property {number} _NoUpperLimit=3 * 无上限模式
     * @property {number} _Personal=4 * 私人房模式
     * @property {number} _AllIn=5 * 全下/弃牌模式
     */
    msg.GamblingPattern = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "_Fast"] = 1;
        values[valuesById[2] = "_Ante"] = 2;
        values[valuesById[3] = "_NoUpperLimit"] = 3;
        values[valuesById[4] = "_Personal"] = 4;
        values[valuesById[5] = "_AllIn"] = 5;
        return values;
    })();

    /**
     * 房间场次类型 对应room.json里面的type
     * @name msg.PlayingFieldType
     * @enum {string}
     * @property {number} Primary=1 * 初级场
     * @property {number} Middle=2 * 中级场
     * @property {number} High=3 * 高级场
     * @property {number} OmahaPrimary=4 * 奥马哈初级场
     * @property {number} OmahaMiddle=5 * 奥马哈中级场
     * @property {number} OmahaHigh=6 * 奥马哈高级场
     * @property {number} PlayFieldPersonal=11 * 游戏场私人房
     * @property {number} OmahaPersonal=12 * 奥马哈私人房
     * @property {number} Mtt=21 * 锦标赛
     * @property {number} Sng=22 * 坐满即玩
     * @property {number} Guide=31 * 新手引导
     * @property {number} GuidePlayWay=32 * 新手引导玩法
     */
    msg.PlayingFieldType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Primary"] = 1;
        values[valuesById[2] = "Middle"] = 2;
        values[valuesById[3] = "High"] = 3;
        values[valuesById[4] = "OmahaPrimary"] = 4;
        values[valuesById[5] = "OmahaMiddle"] = 5;
        values[valuesById[6] = "OmahaHigh"] = 6;
        values[valuesById[11] = "PlayFieldPersonal"] = 11;
        values[valuesById[12] = "OmahaPersonal"] = 12;
        values[valuesById[21] = "Mtt"] = 21;
        values[valuesById[22] = "Sng"] = 22;
        values[valuesById[31] = "Guide"] = 31;
        values[valuesById[32] = "GuidePlayWay"] = 32;
        return values;
    })();

    /**
     * 牌型
     * @name msg.CardType
     * @enum {string}
     * @property {number} None=0 * 无
     * @property {number} HighCard=1 * 高牌
     * @property {number} OnePair=2 * 一对
     * @property {number} TwoPairs=3 * 两对
     * @property {number} ThreeOfAKind=4 * 3条
     * @property {number} Straight=5 * 顺子
     * @property {number} Flush=6 * 同花
     * @property {number} Fullhouse=7 * 葫芦
     * @property {number} FourOfAKind=8 * 4条(金刚)
     * @property {number} StraightFlush=9 * 同花顺
     * @property {number} RoyalFlush=10 * 皇家同花顺
     */
    msg.CardType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "None"] = 0;
        values[valuesById[1] = "HighCard"] = 1;
        values[valuesById[2] = "OnePair"] = 2;
        values[valuesById[3] = "TwoPairs"] = 3;
        values[valuesById[4] = "ThreeOfAKind"] = 4;
        values[valuesById[5] = "Straight"] = 5;
        values[valuesById[6] = "Flush"] = 6;
        values[valuesById[7] = "Fullhouse"] = 7;
        values[valuesById[8] = "FourOfAKind"] = 8;
        values[valuesById[9] = "StraightFlush"] = 9;
        values[valuesById[10] = "RoyalFlush"] = 10;
        return values;
    })();

    /**
     * 花色枚举
     * @name msg.FlushType
     * @enum {string}
     * @property {number} Diamonds=1 * 方块
     * @property {number} Hearts=2 * 红桃
     * @property {number} Spades=3 * 黑桃
     * @property {number} Clubs=4 * 草花
     */
    msg.FlushType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Diamonds"] = 1;
        values[valuesById[2] = "Hearts"] = 2;
        values[valuesById[3] = "Spades"] = 3;
        values[valuesById[4] = "Clubs"] = 4;
        return values;
    })();

    /**
     * 破产购买枚举
     * @name msg.GoBrokeBuyType
     * @enum {string}
     * @property {number} GoldScale=2 * 20万金币
     */
    msg.GoBrokeBuyType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2] = "GoldScale"] = 2;
        return values;
    })();

    /**
     * 牌局面板显示状态
     * @name msg.GamblingPanelStateIndex
     * @enum {string}
     * @property {number} _Null=0 * 无
     * @property {number} _Normal=1 * 常规
     * @property {number} _MatchWait=2 * 比赛等待
     * @property {number} _Match=3 * 比赛
     * @property {number} _Guide=4 * 引导
     * @property {number} _GuidePlayWay=5 * 引导玩法
     * @property {number} _Omaha=8 * 奥马哈
     */
    msg.GamblingPanelStateIndex = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "_Null"] = 0;
        values[valuesById[1] = "_Normal"] = 1;
        values[valuesById[2] = "_MatchWait"] = 2;
        values[valuesById[3] = "_Match"] = 3;
        values[valuesById[4] = "_Guide"] = 4;
        values[valuesById[5] = "_GuidePlayWay"] = 5;
        values[valuesById[8] = "_Omaha"] = 8;
        return values;
    })();

    /**
     * 买入游戏状态
     * @name msg.BuyInGameState
     * @enum {string}
     * @property {number} Sit=1 * 坐下
     * @property {number} Stand=2 * 站起
     */
    msg.BuyInGameState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Sit"] = 1;
        values[valuesById[2] = "Stand"] = 2;
        return values;
    })();

    /**
     * 座位模式
     * @name msg.SeatMode
     * @enum {string}
     * @property {number} Three=3 * 3人模式
     * @property {number} Five=5 * 5人模式
     * @property {number} Six=6 * 6人模式
     * @property {number} Nine=9 * 9人模式
     */
    msg.SeatMode = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[3] = "Three"] = 3;
        values[valuesById[5] = "Five"] = 5;
        values[valuesById[6] = "Six"] = 6;
        values[valuesById[9] = "Nine"] = 9;
        return values;
    })();

    /**
     * 筹码显示状态
     * @name msg.ChipsShowState
     * @enum {string}
     * @property {number} Left=1 * 左
     * @property {number} Right=2 * 右
     * @property {number} LeftDown=3 * 左下
     * @property {number} RightDown=4 * 右下
     * @property {number} Top=5 * 上
     */
    msg.ChipsShowState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Left"] = 1;
        values[valuesById[2] = "Right"] = 2;
        values[valuesById[3] = "LeftDown"] = 3;
        values[valuesById[4] = "RightDown"] = 4;
        values[valuesById[5] = "Top"] = 5;
        return values;
    })();

    /**
     * 插槽层级类型
     * @name msg.SlotLayerType
     * @enum {string}
     * @property {number} _None=0 _None value
     * @property {number} _Down=1 * 正常牌局组下面
     * @property {number} _Up=2 * 正常牌局组上面
     */
    msg.SlotLayerType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "_None"] = 0;
        values[valuesById[1] = "_Down"] = 1;
        values[valuesById[2] = "_Up"] = 2;
        return values;
    })();

    /**
     * 玩家状态
     * @name msg.PlayerState
     * @enum {string}
     * @property {number} WaitNext=0 * 等待下一局
     * @property {number} Fold=1 * 弃牌
     * @property {number} Check=2 * 过牌
     * @property {number} Raise=3 * 加注
     * @property {number} AllIn=4 * allin
     * @property {number} Call=5 * 跟注
     * @property {number} Blind=6 * 盲注
     * @property {number} WaitAction=7 * 等待说话
     * @property {number} Trusteeship=8 取消托管
     * @property {number} RoomId=20 房间ID
     * @property {number} ThePos=21 玩家和POS
     * @property {number} ButtonPos=22 庄家POS
     * @property {number} HandCard=23 手牌
     * @property {number} SetPos=24 操作POS
     * @property {number} PubCard=25 公共牌
     * @property {number} PoolWon=26 池赢得 num1 为池，num2 赢得
     * @property {number} ShowCard=27 亮牌
     * @property {number} StandUp=28 * 站起
     * @property {number} Action=100 * 正在说话 仅限客户端
     * @property {number} Empty=104 * 空状态 仅限客户端
     */
    msg.PlayerState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "WaitNext"] = 0;
        values[valuesById[1] = "Fold"] = 1;
        values[valuesById[2] = "Check"] = 2;
        values[valuesById[3] = "Raise"] = 3;
        values[valuesById[4] = "AllIn"] = 4;
        values[valuesById[5] = "Call"] = 5;
        values[valuesById[6] = "Blind"] = 6;
        values[valuesById[7] = "WaitAction"] = 7;
        values[valuesById[8] = "Trusteeship"] = 8;
        values[valuesById[20] = "RoomId"] = 20;
        values[valuesById[21] = "ThePos"] = 21;
        values[valuesById[22] = "ButtonPos"] = 22;
        values[valuesById[23] = "HandCard"] = 23;
        values[valuesById[24] = "SetPos"] = 24;
        values[valuesById[25] = "PubCard"] = 25;
        values[valuesById[26] = "PoolWon"] = 26;
        values[valuesById[27] = "ShowCard"] = 27;
        values[valuesById[28] = "StandUp"] = 28;
        values[valuesById[100] = "Action"] = 100;
        values[valuesById[104] = "Empty"] = 104;
        return values;
    })();

    /**
     * 上局回顾玩家位置类型
     * @name msg.PlayerPosType
     * @enum {string}
     * @property {number} Sblind=1 小盲位
     * @property {number} Bblind=2 大盲位
     * @property {number} Banker=3 庄家位
     */
    msg.PlayerPosType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Sblind"] = 1;
        values[valuesById[2] = "Bblind"] = 2;
        values[valuesById[3] = "Banker"] = 3;
        return values;
    })();

    /**
     * 玩法类型枚举
     * @name msg.PlayWayType
     * @enum {string}
     * @property {number} PlayField=1 * 游戏场
     * @property {number} Omaha=2 * 奥马哈
     */
    msg.PlayWayType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "PlayField"] = 1;
        values[valuesById[2] = "Omaha"] = 2;
        return values;
    })();

    return msg;
})();

$root.table = (function() {

    /**
     * Namespace table.
     * @exports table
     * @namespace
     */
    var table = {};

    table.TBallGiftbase = (function() {

        /**
         * Properties of a TBallGiftbase.
         * @memberof table
         * @interface ITBallGiftbase
         * @property {Array.<table.ITBallGiftDefine>|null} [TBallGift] TBallGiftbase TBallGift
         */

        /**
         * Constructs a new TBallGiftbase.
         * @memberof table
         * @classdesc Represents a TBallGiftbase.
         * @implements ITBallGiftbase
         * @constructor
         * @param {table.ITBallGiftbase=} [properties] Properties to set
         */
        function TBallGiftbase(properties) {
            this.TBallGift = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBallGiftbase TBallGift.
         * @member {Array.<table.ITBallGiftDefine>} TBallGift
         * @memberof table.TBallGiftbase
         * @instance
         */
        TBallGiftbase.prototype.TBallGift = $util.emptyArray;

        /**
         * Creates a new TBallGiftbase instance using the specified properties.
         * @function create
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.ITBallGiftbase=} [properties] Properties to set
         * @returns {table.TBallGiftbase} TBallGiftbase instance
         */
        TBallGiftbase.create = function create(properties) {
            return new TBallGiftbase(properties);
        };

        /**
         * Encodes the specified TBallGiftbase message. Does not implicitly {@link table.TBallGiftbase.verify|verify} messages.
         * @function encode
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.ITBallGiftbase} message TBallGiftbase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftbase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBallGift != null && message.TBallGift.length)
                for (var i = 0; i < message.TBallGift.length; ++i)
                    $root.table.TBallGiftDefine.encode(message.TBallGift[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TBallGiftbase message, length delimited. Does not implicitly {@link table.TBallGiftbase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.ITBallGiftbase} message TBallGiftbase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftbase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBallGiftbase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBallGiftbase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBallGiftbase} TBallGiftbase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftbase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBallGiftbase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBallGift && message.TBallGift.length))
                        message.TBallGift = [];
                    message.TBallGift.push($root.table.TBallGiftDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBallGiftbase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBallGiftbase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBallGiftbase} TBallGiftbase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftbase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBallGiftbase message.
         * @function verify
         * @memberof table.TBallGiftbase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBallGiftbase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBallGift != null && message.hasOwnProperty("TBallGift")) {
                if (!Array.isArray(message.TBallGift))
                    return "TBallGift: array expected";
                for (var i = 0; i < message.TBallGift.length; ++i) {
                    var error = $root.table.TBallGiftDefine.verify(message.TBallGift[i]);
                    if (error)
                        return "TBallGift." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TBallGiftbase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBallGiftbase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBallGiftbase} TBallGiftbase
         */
        TBallGiftbase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBallGiftbase)
                return object;
            var message = new $root.table.TBallGiftbase();
            if (object.TBallGift) {
                if (!Array.isArray(object.TBallGift))
                    throw TypeError(".table.TBallGiftbase.TBallGift: array expected");
                message.TBallGift = [];
                for (var i = 0; i < object.TBallGift.length; ++i) {
                    if (typeof object.TBallGift[i] !== "object")
                        throw TypeError(".table.TBallGiftbase.TBallGift: object expected");
                    message.TBallGift[i] = $root.table.TBallGiftDefine.fromObject(object.TBallGift[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TBallGiftbase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.TBallGiftbase} message TBallGiftbase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBallGiftbase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBallGift = [];
            if (message.TBallGift && message.TBallGift.length) {
                object.TBallGift = [];
                for (var j = 0; j < message.TBallGift.length; ++j)
                    object.TBallGift[j] = $root.table.TBallGiftDefine.toObject(message.TBallGift[j], options);
            }
            return object;
        };

        /**
         * Converts this TBallGiftbase to JSON.
         * @function toJSON
         * @memberof table.TBallGiftbase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBallGiftbase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBallGiftbase;
    })();

    table.TBallGiftDefine = (function() {

        /**
         * Properties of a TBallGiftDefine.
         * @memberof table
         * @interface ITBallGiftDefine
         * @property {number|null} [Id] TBallGiftDefine Id
         * @property {string|null} [Name] TBallGiftDefine Name
         * @property {number|null} [Num] TBallGiftDefine Num
         * @property {number|null} [ItemId] TBallGiftDefine ItemId
         * @property {string|null} [Path] TBallGiftDefine Path
         * @property {number|null} [Pro] TBallGiftDefine Pro
         * @property {number|null} [PushBag] TBallGiftDefine PushBag
         * @property {number|null} [Cost] TBallGiftDefine Cost
         */

        /**
         * Constructs a new TBallGiftDefine.
         * @memberof table
         * @classdesc Represents a TBallGiftDefine.
         * @implements ITBallGiftDefine
         * @constructor
         * @param {table.ITBallGiftDefine=} [properties] Properties to set
         */
        function TBallGiftDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBallGiftDefine Id.
         * @member {number} Id
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Id = 0;

        /**
         * TBallGiftDefine Name.
         * @member {string} Name
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Name = "";

        /**
         * TBallGiftDefine Num.
         * @member {number} Num
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Num = 0;

        /**
         * TBallGiftDefine ItemId.
         * @member {number} ItemId
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.ItemId = 0;

        /**
         * TBallGiftDefine Path.
         * @member {string} Path
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Path = "";

        /**
         * TBallGiftDefine Pro.
         * @member {number} Pro
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Pro = 0;

        /**
         * TBallGiftDefine PushBag.
         * @member {number} PushBag
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.PushBag = 0;

        /**
         * TBallGiftDefine Cost.
         * @member {number} Cost
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Cost = 0;

        /**
         * Creates a new TBallGiftDefine instance using the specified properties.
         * @function create
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.ITBallGiftDefine=} [properties] Properties to set
         * @returns {table.TBallGiftDefine} TBallGiftDefine instance
         */
        TBallGiftDefine.create = function create(properties) {
            return new TBallGiftDefine(properties);
        };

        /**
         * Encodes the specified TBallGiftDefine message. Does not implicitly {@link table.TBallGiftDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.ITBallGiftDefine} message TBallGiftDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Num);
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ItemId);
            if (message.Path != null && message.hasOwnProperty("Path"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.Path);
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Pro);
            if (message.PushBag != null && message.hasOwnProperty("PushBag"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.PushBag);
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Cost);
            return writer;
        };

        /**
         * Encodes the specified TBallGiftDefine message, length delimited. Does not implicitly {@link table.TBallGiftDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.ITBallGiftDefine} message TBallGiftDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBallGiftDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBallGiftDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBallGiftDefine} TBallGiftDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBallGiftDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                case 3:
                    message.Num = reader.int32();
                    break;
                case 4:
                    message.ItemId = reader.int32();
                    break;
                case 5:
                    message.Path = reader.string();
                    break;
                case 6:
                    message.Pro = reader.int32();
                    break;
                case 7:
                    message.PushBag = reader.int32();
                    break;
                case 8:
                    message.Cost = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBallGiftDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBallGiftDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBallGiftDefine} TBallGiftDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBallGiftDefine message.
         * @function verify
         * @memberof table.TBallGiftDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBallGiftDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                if (!$util.isInteger(message.ItemId))
                    return "ItemId: integer expected";
            if (message.Path != null && message.hasOwnProperty("Path"))
                if (!$util.isString(message.Path))
                    return "Path: string expected";
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                if (!$util.isInteger(message.Pro))
                    return "Pro: integer expected";
            if (message.PushBag != null && message.hasOwnProperty("PushBag"))
                if (!$util.isInteger(message.PushBag))
                    return "PushBag: integer expected";
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                if (!$util.isInteger(message.Cost))
                    return "Cost: integer expected";
            return null;
        };

        /**
         * Creates a TBallGiftDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBallGiftDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBallGiftDefine} TBallGiftDefine
         */
        TBallGiftDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBallGiftDefine)
                return object;
            var message = new $root.table.TBallGiftDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Num != null)
                message.Num = object.Num | 0;
            if (object.ItemId != null)
                message.ItemId = object.ItemId | 0;
            if (object.Path != null)
                message.Path = String(object.Path);
            if (object.Pro != null)
                message.Pro = object.Pro | 0;
            if (object.PushBag != null)
                message.PushBag = object.PushBag | 0;
            if (object.Cost != null)
                message.Cost = object.Cost | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBallGiftDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.TBallGiftDefine} message TBallGiftDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBallGiftDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
                object.Num = 0;
                object.ItemId = 0;
                object.Path = "";
                object.Pro = 0;
                object.PushBag = 0;
                object.Cost = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                object.ItemId = message.ItemId;
            if (message.Path != null && message.hasOwnProperty("Path"))
                object.Path = message.Path;
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                object.Pro = message.Pro;
            if (message.PushBag != null && message.hasOwnProperty("PushBag"))
                object.PushBag = message.PushBag;
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                object.Cost = message.Cost;
            return object;
        };

        /**
         * Converts this TBallGiftDefine to JSON.
         * @function toJSON
         * @memberof table.TBallGiftDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBallGiftDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBallGiftDefine;
    })();

    table.GiftProBase = (function() {

        /**
         * Properties of a GiftProBase.
         * @memberof table
         * @interface IGiftProBase
         * @property {Array.<table.ITGiftProDefine>|null} [TGiftPro] GiftProBase TGiftPro
         */

        /**
         * Constructs a new GiftProBase.
         * @memberof table
         * @classdesc Represents a GiftProBase.
         * @implements IGiftProBase
         * @constructor
         * @param {table.IGiftProBase=} [properties] Properties to set
         */
        function GiftProBase(properties) {
            this.TGiftPro = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GiftProBase TGiftPro.
         * @member {Array.<table.ITGiftProDefine>} TGiftPro
         * @memberof table.GiftProBase
         * @instance
         */
        GiftProBase.prototype.TGiftPro = $util.emptyArray;

        /**
         * Creates a new GiftProBase instance using the specified properties.
         * @function create
         * @memberof table.GiftProBase
         * @static
         * @param {table.IGiftProBase=} [properties] Properties to set
         * @returns {table.GiftProBase} GiftProBase instance
         */
        GiftProBase.create = function create(properties) {
            return new GiftProBase(properties);
        };

        /**
         * Encodes the specified GiftProBase message. Does not implicitly {@link table.GiftProBase.verify|verify} messages.
         * @function encode
         * @memberof table.GiftProBase
         * @static
         * @param {table.IGiftProBase} message GiftProBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftProBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TGiftPro != null && message.TGiftPro.length)
                for (var i = 0; i < message.TGiftPro.length; ++i)
                    $root.table.TGiftProDefine.encode(message.TGiftPro[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GiftProBase message, length delimited. Does not implicitly {@link table.GiftProBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.GiftProBase
         * @static
         * @param {table.IGiftProBase} message GiftProBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftProBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GiftProBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.GiftProBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.GiftProBase} GiftProBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftProBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.GiftProBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TGiftPro && message.TGiftPro.length))
                        message.TGiftPro = [];
                    message.TGiftPro.push($root.table.TGiftProDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GiftProBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.GiftProBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.GiftProBase} GiftProBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftProBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GiftProBase message.
         * @function verify
         * @memberof table.GiftProBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GiftProBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TGiftPro != null && message.hasOwnProperty("TGiftPro")) {
                if (!Array.isArray(message.TGiftPro))
                    return "TGiftPro: array expected";
                for (var i = 0; i < message.TGiftPro.length; ++i) {
                    var error = $root.table.TGiftProDefine.verify(message.TGiftPro[i]);
                    if (error)
                        return "TGiftPro." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GiftProBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.GiftProBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.GiftProBase} GiftProBase
         */
        GiftProBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.GiftProBase)
                return object;
            var message = new $root.table.GiftProBase();
            if (object.TGiftPro) {
                if (!Array.isArray(object.TGiftPro))
                    throw TypeError(".table.GiftProBase.TGiftPro: array expected");
                message.TGiftPro = [];
                for (var i = 0; i < object.TGiftPro.length; ++i) {
                    if (typeof object.TGiftPro[i] !== "object")
                        throw TypeError(".table.GiftProBase.TGiftPro: object expected");
                    message.TGiftPro[i] = $root.table.TGiftProDefine.fromObject(object.TGiftPro[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GiftProBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.GiftProBase
         * @static
         * @param {table.GiftProBase} message GiftProBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GiftProBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TGiftPro = [];
            if (message.TGiftPro && message.TGiftPro.length) {
                object.TGiftPro = [];
                for (var j = 0; j < message.TGiftPro.length; ++j)
                    object.TGiftPro[j] = $root.table.TGiftProDefine.toObject(message.TGiftPro[j], options);
            }
            return object;
        };

        /**
         * Converts this GiftProBase to JSON.
         * @function toJSON
         * @memberof table.GiftProBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GiftProBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GiftProBase;
    })();

    table.TGiftProDefine = (function() {

        /**
         * Properties of a TGiftProDefine.
         * @memberof table
         * @interface ITGiftProDefine
         * @property {number|null} [Id] TGiftProDefine Id
         * @property {number|null} [Limitmin] TGiftProDefine Limitmin
         * @property {number|null} [Limitmax] TGiftProDefine Limitmax
         * @property {Array.<string>|null} [Pro] TGiftProDefine Pro
         */

        /**
         * Constructs a new TGiftProDefine.
         * @memberof table
         * @classdesc Represents a TGiftProDefine.
         * @implements ITGiftProDefine
         * @constructor
         * @param {table.ITGiftProDefine=} [properties] Properties to set
         */
        function TGiftProDefine(properties) {
            this.Pro = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TGiftProDefine Id.
         * @member {number} Id
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Id = 0;

        /**
         * TGiftProDefine Limitmin.
         * @member {number} Limitmin
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Limitmin = 0;

        /**
         * TGiftProDefine Limitmax.
         * @member {number} Limitmax
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Limitmax = 0;

        /**
         * TGiftProDefine Pro.
         * @member {Array.<string>} Pro
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Pro = $util.emptyArray;

        /**
         * Creates a new TGiftProDefine instance using the specified properties.
         * @function create
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.ITGiftProDefine=} [properties] Properties to set
         * @returns {table.TGiftProDefine} TGiftProDefine instance
         */
        TGiftProDefine.create = function create(properties) {
            return new TGiftProDefine(properties);
        };

        /**
         * Encodes the specified TGiftProDefine message. Does not implicitly {@link table.TGiftProDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.ITGiftProDefine} message TGiftProDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TGiftProDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Limitmin != null && message.hasOwnProperty("Limitmin"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Limitmin);
            if (message.Limitmax != null && message.hasOwnProperty("Limitmax"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Limitmax);
            if (message.Pro != null && message.Pro.length)
                for (var i = 0; i < message.Pro.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Pro[i]);
            return writer;
        };

        /**
         * Encodes the specified TGiftProDefine message, length delimited. Does not implicitly {@link table.TGiftProDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.ITGiftProDefine} message TGiftProDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TGiftProDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TGiftProDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TGiftProDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TGiftProDefine} TGiftProDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TGiftProDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TGiftProDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Limitmin = reader.int32();
                    break;
                case 3:
                    message.Limitmax = reader.int32();
                    break;
                case 4:
                    if (!(message.Pro && message.Pro.length))
                        message.Pro = [];
                    message.Pro.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TGiftProDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TGiftProDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TGiftProDefine} TGiftProDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TGiftProDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TGiftProDefine message.
         * @function verify
         * @memberof table.TGiftProDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TGiftProDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Limitmin != null && message.hasOwnProperty("Limitmin"))
                if (!$util.isInteger(message.Limitmin))
                    return "Limitmin: integer expected";
            if (message.Limitmax != null && message.hasOwnProperty("Limitmax"))
                if (!$util.isInteger(message.Limitmax))
                    return "Limitmax: integer expected";
            if (message.Pro != null && message.hasOwnProperty("Pro")) {
                if (!Array.isArray(message.Pro))
                    return "Pro: array expected";
                for (var i = 0; i < message.Pro.length; ++i)
                    if (!$util.isString(message.Pro[i]))
                        return "Pro: string[] expected";
            }
            return null;
        };

        /**
         * Creates a TGiftProDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TGiftProDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TGiftProDefine} TGiftProDefine
         */
        TGiftProDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TGiftProDefine)
                return object;
            var message = new $root.table.TGiftProDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Limitmin != null)
                message.Limitmin = object.Limitmin | 0;
            if (object.Limitmax != null)
                message.Limitmax = object.Limitmax | 0;
            if (object.Pro) {
                if (!Array.isArray(object.Pro))
                    throw TypeError(".table.TGiftProDefine.Pro: array expected");
                message.Pro = [];
                for (var i = 0; i < object.Pro.length; ++i)
                    message.Pro[i] = String(object.Pro[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a TGiftProDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.TGiftProDefine} message TGiftProDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TGiftProDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Pro = [];
            if (options.defaults) {
                object.Id = 0;
                object.Limitmin = 0;
                object.Limitmax = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Limitmin != null && message.hasOwnProperty("Limitmin"))
                object.Limitmin = message.Limitmin;
            if (message.Limitmax != null && message.hasOwnProperty("Limitmax"))
                object.Limitmax = message.Limitmax;
            if (message.Pro && message.Pro.length) {
                object.Pro = [];
                for (var j = 0; j < message.Pro.length; ++j)
                    object.Pro[j] = message.Pro[j];
            }
            return object;
        };

        /**
         * Converts this TGiftProDefine to JSON.
         * @function toJSON
         * @memberof table.TGiftProDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TGiftProDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TGiftProDefine;
    })();

    table.ItemBase = (function() {

        /**
         * Properties of an ItemBase.
         * @memberof table
         * @interface IItemBase
         * @property {Array.<table.IItemBaseDataDefine>|null} [ItemBaseData] ItemBase ItemBaseData
         */

        /**
         * Constructs a new ItemBase.
         * @memberof table
         * @classdesc Represents an ItemBase.
         * @implements IItemBase
         * @constructor
         * @param {table.IItemBase=} [properties] Properties to set
         */
        function ItemBase(properties) {
            this.ItemBaseData = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBase ItemBaseData.
         * @member {Array.<table.IItemBaseDataDefine>} ItemBaseData
         * @memberof table.ItemBase
         * @instance
         */
        ItemBase.prototype.ItemBaseData = $util.emptyArray;

        /**
         * Creates a new ItemBase instance using the specified properties.
         * @function create
         * @memberof table.ItemBase
         * @static
         * @param {table.IItemBase=} [properties] Properties to set
         * @returns {table.ItemBase} ItemBase instance
         */
        ItemBase.create = function create(properties) {
            return new ItemBase(properties);
        };

        /**
         * Encodes the specified ItemBase message. Does not implicitly {@link table.ItemBase.verify|verify} messages.
         * @function encode
         * @memberof table.ItemBase
         * @static
         * @param {table.IItemBase} message ItemBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ItemBaseData != null && message.ItemBaseData.length)
                for (var i = 0; i < message.ItemBaseData.length; ++i)
                    $root.table.ItemBaseDataDefine.encode(message.ItemBaseData[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ItemBase message, length delimited. Does not implicitly {@link table.ItemBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ItemBase
         * @static
         * @param {table.IItemBase} message ItemBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.ItemBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ItemBase} ItemBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ItemBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ItemBaseData && message.ItemBaseData.length))
                        message.ItemBaseData = [];
                    message.ItemBaseData.push($root.table.ItemBaseDataDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ItemBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ItemBase} ItemBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBase message.
         * @function verify
         * @memberof table.ItemBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ItemBaseData != null && message.hasOwnProperty("ItemBaseData")) {
                if (!Array.isArray(message.ItemBaseData))
                    return "ItemBaseData: array expected";
                for (var i = 0; i < message.ItemBaseData.length; ++i) {
                    var error = $root.table.ItemBaseDataDefine.verify(message.ItemBaseData[i]);
                    if (error)
                        return "ItemBaseData." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ItemBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ItemBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ItemBase} ItemBase
         */
        ItemBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ItemBase)
                return object;
            var message = new $root.table.ItemBase();
            if (object.ItemBaseData) {
                if (!Array.isArray(object.ItemBaseData))
                    throw TypeError(".table.ItemBase.ItemBaseData: array expected");
                message.ItemBaseData = [];
                for (var i = 0; i < object.ItemBaseData.length; ++i) {
                    if (typeof object.ItemBaseData[i] !== "object")
                        throw TypeError(".table.ItemBase.ItemBaseData: object expected");
                    message.ItemBaseData[i] = $root.table.ItemBaseDataDefine.fromObject(object.ItemBaseData[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ItemBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ItemBase
         * @static
         * @param {table.ItemBase} message ItemBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ItemBaseData = [];
            if (message.ItemBaseData && message.ItemBaseData.length) {
                object.ItemBaseData = [];
                for (var j = 0; j < message.ItemBaseData.length; ++j)
                    object.ItemBaseData[j] = $root.table.ItemBaseDataDefine.toObject(message.ItemBaseData[j], options);
            }
            return object;
        };

        /**
         * Converts this ItemBase to JSON.
         * @function toJSON
         * @memberof table.ItemBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBase;
    })();

    table.ItemBaseDataDefine = (function() {

        /**
         * Properties of an ItemBaseDataDefine.
         * @memberof table
         * @interface IItemBaseDataDefine
         * @property {number|null} [Id] ItemBaseDataDefine Id
         * @property {number|null} [Type] ItemBaseDataDefine Type
         * @property {number|null} [SubType] ItemBaseDataDefine SubType
         * @property {number|null} [Color] ItemBaseDataDefine Color
         * @property {number|null} [ImageId] ItemBaseDataDefine ImageId
         * @property {string|null} [Name] ItemBaseDataDefine Name
         * @property {string|null} [Desc] ItemBaseDataDefine Desc
         * @property {number|null} [Clothes] ItemBaseDataDefine Clothes
         * @property {string|null} [TypeDes] ItemBaseDataDefine TypeDes
         * @property {number|null} [Tradable] ItemBaseDataDefine Tradable
         */

        /**
         * Constructs a new ItemBaseDataDefine.
         * @memberof table
         * @classdesc Represents an ItemBaseDataDefine.
         * @implements IItemBaseDataDefine
         * @constructor
         * @param {table.IItemBaseDataDefine=} [properties] Properties to set
         */
        function ItemBaseDataDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBaseDataDefine Id.
         * @member {number} Id
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Id = 0;

        /**
         * ItemBaseDataDefine Type.
         * @member {number} Type
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Type = 0;

        /**
         * ItemBaseDataDefine SubType.
         * @member {number} SubType
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.SubType = 0;

        /**
         * ItemBaseDataDefine Color.
         * @member {number} Color
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Color = 0;

        /**
         * ItemBaseDataDefine ImageId.
         * @member {number} ImageId
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.ImageId = 0;

        /**
         * ItemBaseDataDefine Name.
         * @member {string} Name
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Name = "";

        /**
         * ItemBaseDataDefine Desc.
         * @member {string} Desc
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Desc = "";

        /**
         * ItemBaseDataDefine Clothes.
         * @member {number} Clothes
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Clothes = 0;

        /**
         * ItemBaseDataDefine TypeDes.
         * @member {string} TypeDes
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.TypeDes = "";

        /**
         * ItemBaseDataDefine Tradable.
         * @member {number} Tradable
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Tradable = 0;

        /**
         * Creates a new ItemBaseDataDefine instance using the specified properties.
         * @function create
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.IItemBaseDataDefine=} [properties] Properties to set
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine instance
         */
        ItemBaseDataDefine.create = function create(properties) {
            return new ItemBaseDataDefine(properties);
        };

        /**
         * Encodes the specified ItemBaseDataDefine message. Does not implicitly {@link table.ItemBaseDataDefine.verify|verify} messages.
         * @function encode
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.IItemBaseDataDefine} message ItemBaseDataDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBaseDataDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Type);
            if (message.SubType != null && message.hasOwnProperty("SubType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.SubType);
            if (message.Color != null && message.hasOwnProperty("Color"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Color);
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.ImageId);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.Name);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.Desc);
            if (message.Clothes != null && message.hasOwnProperty("Clothes"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Clothes);
            if (message.TypeDes != null && message.hasOwnProperty("TypeDes"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.TypeDes);
            if (message.Tradable != null && message.hasOwnProperty("Tradable"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.Tradable);
            return writer;
        };

        /**
         * Encodes the specified ItemBaseDataDefine message, length delimited. Does not implicitly {@link table.ItemBaseDataDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.IItemBaseDataDefine} message ItemBaseDataDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBaseDataDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBaseDataDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBaseDataDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ItemBaseDataDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Type = reader.int32();
                    break;
                case 3:
                    message.SubType = reader.int32();
                    break;
                case 4:
                    message.Color = reader.int32();
                    break;
                case 5:
                    message.ImageId = reader.int32();
                    break;
                case 6:
                    message.Name = reader.string();
                    break;
                case 7:
                    message.Desc = reader.string();
                    break;
                case 8:
                    message.Clothes = reader.int32();
                    break;
                case 9:
                    message.TypeDes = reader.string();
                    break;
                case 10:
                    message.Tradable = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBaseDataDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBaseDataDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBaseDataDefine message.
         * @function verify
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBaseDataDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.SubType != null && message.hasOwnProperty("SubType"))
                if (!$util.isInteger(message.SubType))
                    return "SubType: integer expected";
            if (message.Color != null && message.hasOwnProperty("Color"))
                if (!$util.isInteger(message.Color))
                    return "Color: integer expected";
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                if (!$util.isInteger(message.ImageId))
                    return "ImageId: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.Clothes != null && message.hasOwnProperty("Clothes"))
                if (!$util.isInteger(message.Clothes))
                    return "Clothes: integer expected";
            if (message.TypeDes != null && message.hasOwnProperty("TypeDes"))
                if (!$util.isString(message.TypeDes))
                    return "TypeDes: string expected";
            if (message.Tradable != null && message.hasOwnProperty("Tradable"))
                if (!$util.isInteger(message.Tradable))
                    return "Tradable: integer expected";
            return null;
        };

        /**
         * Creates an ItemBaseDataDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine
         */
        ItemBaseDataDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ItemBaseDataDefine)
                return object;
            var message = new $root.table.ItemBaseDataDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.SubType != null)
                message.SubType = object.SubType | 0;
            if (object.Color != null)
                message.Color = object.Color | 0;
            if (object.ImageId != null)
                message.ImageId = object.ImageId | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.Clothes != null)
                message.Clothes = object.Clothes | 0;
            if (object.TypeDes != null)
                message.TypeDes = String(object.TypeDes);
            if (object.Tradable != null)
                message.Tradable = object.Tradable | 0;
            return message;
        };

        /**
         * Creates a plain object from an ItemBaseDataDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.ItemBaseDataDefine} message ItemBaseDataDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBaseDataDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.SubType = 0;
                object.Color = 0;
                object.ImageId = 0;
                object.Name = "";
                object.Desc = "";
                object.Clothes = 0;
                object.TypeDes = "";
                object.Tradable = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.SubType != null && message.hasOwnProperty("SubType"))
                object.SubType = message.SubType;
            if (message.Color != null && message.hasOwnProperty("Color"))
                object.Color = message.Color;
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                object.ImageId = message.ImageId;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.Clothes != null && message.hasOwnProperty("Clothes"))
                object.Clothes = message.Clothes;
            if (message.TypeDes != null && message.hasOwnProperty("TypeDes"))
                object.TypeDes = message.TypeDes;
            if (message.Tradable != null && message.hasOwnProperty("Tradable"))
                object.Tradable = message.Tradable;
            return object;
        };

        /**
         * Converts this ItemBaseDataDefine to JSON.
         * @function toJSON
         * @memberof table.ItemBaseDataDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBaseDataDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBaseDataDefine;
    })();

    table.LevelBasee = (function() {

        /**
         * Properties of a LevelBasee.
         * @memberof table
         * @interface ILevelBasee
         * @property {Array.<table.ITLevelDefine>|null} [TLevel] LevelBasee TLevel
         */

        /**
         * Constructs a new LevelBasee.
         * @memberof table
         * @classdesc Represents a LevelBasee.
         * @implements ILevelBasee
         * @constructor
         * @param {table.ILevelBasee=} [properties] Properties to set
         */
        function LevelBasee(properties) {
            this.TLevel = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LevelBasee TLevel.
         * @member {Array.<table.ITLevelDefine>} TLevel
         * @memberof table.LevelBasee
         * @instance
         */
        LevelBasee.prototype.TLevel = $util.emptyArray;

        /**
         * Creates a new LevelBasee instance using the specified properties.
         * @function create
         * @memberof table.LevelBasee
         * @static
         * @param {table.ILevelBasee=} [properties] Properties to set
         * @returns {table.LevelBasee} LevelBasee instance
         */
        LevelBasee.create = function create(properties) {
            return new LevelBasee(properties);
        };

        /**
         * Encodes the specified LevelBasee message. Does not implicitly {@link table.LevelBasee.verify|verify} messages.
         * @function encode
         * @memberof table.LevelBasee
         * @static
         * @param {table.ILevelBasee} message LevelBasee message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelBasee.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TLevel != null && message.TLevel.length)
                for (var i = 0; i < message.TLevel.length; ++i)
                    $root.table.TLevelDefine.encode(message.TLevel[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LevelBasee message, length delimited. Does not implicitly {@link table.LevelBasee.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.LevelBasee
         * @static
         * @param {table.ILevelBasee} message LevelBasee message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelBasee.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LevelBasee message from the specified reader or buffer.
         * @function decode
         * @memberof table.LevelBasee
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.LevelBasee} LevelBasee
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelBasee.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.LevelBasee();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TLevel && message.TLevel.length))
                        message.TLevel = [];
                    message.TLevel.push($root.table.TLevelDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LevelBasee message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.LevelBasee
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.LevelBasee} LevelBasee
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelBasee.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LevelBasee message.
         * @function verify
         * @memberof table.LevelBasee
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LevelBasee.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TLevel != null && message.hasOwnProperty("TLevel")) {
                if (!Array.isArray(message.TLevel))
                    return "TLevel: array expected";
                for (var i = 0; i < message.TLevel.length; ++i) {
                    var error = $root.table.TLevelDefine.verify(message.TLevel[i]);
                    if (error)
                        return "TLevel." + error;
                }
            }
            return null;
        };

        /**
         * Creates a LevelBasee message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.LevelBasee
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.LevelBasee} LevelBasee
         */
        LevelBasee.fromObject = function fromObject(object) {
            if (object instanceof $root.table.LevelBasee)
                return object;
            var message = new $root.table.LevelBasee();
            if (object.TLevel) {
                if (!Array.isArray(object.TLevel))
                    throw TypeError(".table.LevelBasee.TLevel: array expected");
                message.TLevel = [];
                for (var i = 0; i < object.TLevel.length; ++i) {
                    if (typeof object.TLevel[i] !== "object")
                        throw TypeError(".table.LevelBasee.TLevel: object expected");
                    message.TLevel[i] = $root.table.TLevelDefine.fromObject(object.TLevel[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a LevelBasee message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.LevelBasee
         * @static
         * @param {table.LevelBasee} message LevelBasee
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LevelBasee.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TLevel = [];
            if (message.TLevel && message.TLevel.length) {
                object.TLevel = [];
                for (var j = 0; j < message.TLevel.length; ++j)
                    object.TLevel[j] = $root.table.TLevelDefine.toObject(message.TLevel[j], options);
            }
            return object;
        };

        /**
         * Converts this LevelBasee to JSON.
         * @function toJSON
         * @memberof table.LevelBasee
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LevelBasee.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LevelBasee;
    })();

    table.TLevelDefine = (function() {

        /**
         * Properties of a TLevelDefine.
         * @memberof table
         * @interface ITLevelDefine
         * @property {number|null} [Id] TLevelDefine Id
         * @property {number|null} [ExpNums] TLevelDefine ExpNums
         * @property {number|null} [Reward] TLevelDefine Reward
         */

        /**
         * Constructs a new TLevelDefine.
         * @memberof table
         * @classdesc Represents a TLevelDefine.
         * @implements ITLevelDefine
         * @constructor
         * @param {table.ITLevelDefine=} [properties] Properties to set
         */
        function TLevelDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TLevelDefine Id.
         * @member {number} Id
         * @memberof table.TLevelDefine
         * @instance
         */
        TLevelDefine.prototype.Id = 0;

        /**
         * TLevelDefine ExpNums.
         * @member {number} ExpNums
         * @memberof table.TLevelDefine
         * @instance
         */
        TLevelDefine.prototype.ExpNums = 0;

        /**
         * TLevelDefine Reward.
         * @member {number} Reward
         * @memberof table.TLevelDefine
         * @instance
         */
        TLevelDefine.prototype.Reward = 0;

        /**
         * Creates a new TLevelDefine instance using the specified properties.
         * @function create
         * @memberof table.TLevelDefine
         * @static
         * @param {table.ITLevelDefine=} [properties] Properties to set
         * @returns {table.TLevelDefine} TLevelDefine instance
         */
        TLevelDefine.create = function create(properties) {
            return new TLevelDefine(properties);
        };

        /**
         * Encodes the specified TLevelDefine message. Does not implicitly {@link table.TLevelDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TLevelDefine
         * @static
         * @param {table.ITLevelDefine} message TLevelDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.ExpNums != null && message.hasOwnProperty("ExpNums"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ExpNums);
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Reward);
            return writer;
        };

        /**
         * Encodes the specified TLevelDefine message, length delimited. Does not implicitly {@link table.TLevelDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TLevelDefine
         * @static
         * @param {table.ITLevelDefine} message TLevelDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TLevelDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TLevelDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TLevelDefine} TLevelDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TLevelDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.ExpNums = reader.int32();
                    break;
                case 3:
                    message.Reward = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TLevelDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TLevelDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TLevelDefine} TLevelDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TLevelDefine message.
         * @function verify
         * @memberof table.TLevelDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TLevelDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.ExpNums != null && message.hasOwnProperty("ExpNums"))
                if (!$util.isInteger(message.ExpNums))
                    return "ExpNums: integer expected";
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                if (!$util.isInteger(message.Reward))
                    return "Reward: integer expected";
            return null;
        };

        /**
         * Creates a TLevelDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TLevelDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TLevelDefine} TLevelDefine
         */
        TLevelDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TLevelDefine)
                return object;
            var message = new $root.table.TLevelDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.ExpNums != null)
                message.ExpNums = object.ExpNums | 0;
            if (object.Reward != null)
                message.Reward = object.Reward | 0;
            return message;
        };

        /**
         * Creates a plain object from a TLevelDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TLevelDefine
         * @static
         * @param {table.TLevelDefine} message TLevelDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TLevelDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.ExpNums = 0;
                object.Reward = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.ExpNums != null && message.hasOwnProperty("ExpNums"))
                object.ExpNums = message.ExpNums;
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                object.Reward = message.Reward;
            return object;
        };

        /**
         * Converts this TLevelDefine to JSON.
         * @function toJSON
         * @memberof table.TLevelDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TLevelDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TLevelDefine;
    })();

    table.MapEventBase = (function() {

        /**
         * Properties of a MapEventBase.
         * @memberof table
         * @interface IMapEventBase
         * @property {Array.<table.ITMapEventDefine>|null} [TMapEvent] MapEventBase TMapEvent
         */

        /**
         * Constructs a new MapEventBase.
         * @memberof table
         * @classdesc Represents a MapEventBase.
         * @implements IMapEventBase
         * @constructor
         * @param {table.IMapEventBase=} [properties] Properties to set
         */
        function MapEventBase(properties) {
            this.TMapEvent = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapEventBase TMapEvent.
         * @member {Array.<table.ITMapEventDefine>} TMapEvent
         * @memberof table.MapEventBase
         * @instance
         */
        MapEventBase.prototype.TMapEvent = $util.emptyArray;

        /**
         * Creates a new MapEventBase instance using the specified properties.
         * @function create
         * @memberof table.MapEventBase
         * @static
         * @param {table.IMapEventBase=} [properties] Properties to set
         * @returns {table.MapEventBase} MapEventBase instance
         */
        MapEventBase.create = function create(properties) {
            return new MapEventBase(properties);
        };

        /**
         * Encodes the specified MapEventBase message. Does not implicitly {@link table.MapEventBase.verify|verify} messages.
         * @function encode
         * @memberof table.MapEventBase
         * @static
         * @param {table.IMapEventBase} message MapEventBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TMapEvent != null && message.TMapEvent.length)
                for (var i = 0; i < message.TMapEvent.length; ++i)
                    $root.table.TMapEventDefine.encode(message.TMapEvent[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MapEventBase message, length delimited. Does not implicitly {@link table.MapEventBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.MapEventBase
         * @static
         * @param {table.IMapEventBase} message MapEventBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapEventBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.MapEventBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.MapEventBase} MapEventBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.MapEventBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TMapEvent && message.TMapEvent.length))
                        message.TMapEvent = [];
                    message.TMapEvent.push($root.table.TMapEventDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapEventBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.MapEventBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.MapEventBase} MapEventBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapEventBase message.
         * @function verify
         * @memberof table.MapEventBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapEventBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TMapEvent != null && message.hasOwnProperty("TMapEvent")) {
                if (!Array.isArray(message.TMapEvent))
                    return "TMapEvent: array expected";
                for (var i = 0; i < message.TMapEvent.length; ++i) {
                    var error = $root.table.TMapEventDefine.verify(message.TMapEvent[i]);
                    if (error)
                        return "TMapEvent." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MapEventBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.MapEventBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.MapEventBase} MapEventBase
         */
        MapEventBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.MapEventBase)
                return object;
            var message = new $root.table.MapEventBase();
            if (object.TMapEvent) {
                if (!Array.isArray(object.TMapEvent))
                    throw TypeError(".table.MapEventBase.TMapEvent: array expected");
                message.TMapEvent = [];
                for (var i = 0; i < object.TMapEvent.length; ++i) {
                    if (typeof object.TMapEvent[i] !== "object")
                        throw TypeError(".table.MapEventBase.TMapEvent: object expected");
                    message.TMapEvent[i] = $root.table.TMapEventDefine.fromObject(object.TMapEvent[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MapEventBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.MapEventBase
         * @static
         * @param {table.MapEventBase} message MapEventBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapEventBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TMapEvent = [];
            if (message.TMapEvent && message.TMapEvent.length) {
                object.TMapEvent = [];
                for (var j = 0; j < message.TMapEvent.length; ++j)
                    object.TMapEvent[j] = $root.table.TMapEventDefine.toObject(message.TMapEvent[j], options);
            }
            return object;
        };

        /**
         * Converts this MapEventBase to JSON.
         * @function toJSON
         * @memberof table.MapEventBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapEventBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapEventBase;
    })();

    table.TMapEventDefine = (function() {

        /**
         * Properties of a TMapEventDefine.
         * @memberof table
         * @interface ITMapEventDefine
         * @property {number|null} [Id] TMapEventDefine Id
         * @property {number|null} [Type] TMapEventDefine Type
         * @property {string|null} [Desc] TMapEventDefine Desc
         * @property {number|null} [MoneyType] TMapEventDefine MoneyType
         * @property {number|null} [Price] TMapEventDefine Price
         * @property {string|null} [Icon] TMapEventDefine Icon
         * @property {Array.<string>|null} [Reward] TMapEventDefine Reward
         * @property {string|null} [Params] TMapEventDefine Params
         */

        /**
         * Constructs a new TMapEventDefine.
         * @memberof table
         * @classdesc Represents a TMapEventDefine.
         * @implements ITMapEventDefine
         * @constructor
         * @param {table.ITMapEventDefine=} [properties] Properties to set
         */
        function TMapEventDefine(properties) {
            this.Reward = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TMapEventDefine Id.
         * @member {number} Id
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Id = 0;

        /**
         * TMapEventDefine Type.
         * @member {number} Type
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Type = 0;

        /**
         * TMapEventDefine Desc.
         * @member {string} Desc
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Desc = "";

        /**
         * TMapEventDefine MoneyType.
         * @member {number} MoneyType
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.MoneyType = 0;

        /**
         * TMapEventDefine Price.
         * @member {number} Price
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Price = 0;

        /**
         * TMapEventDefine Icon.
         * @member {string} Icon
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Icon = "";

        /**
         * TMapEventDefine Reward.
         * @member {Array.<string>} Reward
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Reward = $util.emptyArray;

        /**
         * TMapEventDefine Params.
         * @member {string} Params
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Params = "";

        /**
         * Creates a new TMapEventDefine instance using the specified properties.
         * @function create
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.ITMapEventDefine=} [properties] Properties to set
         * @returns {table.TMapEventDefine} TMapEventDefine instance
         */
        TMapEventDefine.create = function create(properties) {
            return new TMapEventDefine(properties);
        };

        /**
         * Encodes the specified TMapEventDefine message. Does not implicitly {@link table.TMapEventDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.ITMapEventDefine} message TMapEventDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Type);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Desc);
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.MoneyType);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Price);
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.Icon);
            if (message.Reward != null && message.Reward.length)
                for (var i = 0; i < message.Reward.length; ++i)
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Reward[i]);
            if (message.Params != null && message.hasOwnProperty("Params"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.Params);
            return writer;
        };

        /**
         * Encodes the specified TMapEventDefine message, length delimited. Does not implicitly {@link table.TMapEventDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.ITMapEventDefine} message TMapEventDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TMapEventDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TMapEventDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TMapEventDefine} TMapEventDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TMapEventDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Type = reader.int32();
                    break;
                case 3:
                    message.Desc = reader.string();
                    break;
                case 4:
                    message.MoneyType = reader.int32();
                    break;
                case 5:
                    message.Price = reader.int32();
                    break;
                case 6:
                    message.Icon = reader.string();
                    break;
                case 7:
                    if (!(message.Reward && message.Reward.length))
                        message.Reward = [];
                    message.Reward.push(reader.string());
                    break;
                case 8:
                    message.Params = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TMapEventDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TMapEventDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TMapEventDefine} TMapEventDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TMapEventDefine message.
         * @function verify
         * @memberof table.TMapEventDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TMapEventDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                if (!$util.isInteger(message.MoneyType))
                    return "MoneyType: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                if (!$util.isString(message.Icon))
                    return "Icon: string expected";
            if (message.Reward != null && message.hasOwnProperty("Reward")) {
                if (!Array.isArray(message.Reward))
                    return "Reward: array expected";
                for (var i = 0; i < message.Reward.length; ++i)
                    if (!$util.isString(message.Reward[i]))
                        return "Reward: string[] expected";
            }
            if (message.Params != null && message.hasOwnProperty("Params"))
                if (!$util.isString(message.Params))
                    return "Params: string expected";
            return null;
        };

        /**
         * Creates a TMapEventDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TMapEventDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TMapEventDefine} TMapEventDefine
         */
        TMapEventDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TMapEventDefine)
                return object;
            var message = new $root.table.TMapEventDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.MoneyType != null)
                message.MoneyType = object.MoneyType | 0;
            if (object.Price != null)
                message.Price = object.Price | 0;
            if (object.Icon != null)
                message.Icon = String(object.Icon);
            if (object.Reward) {
                if (!Array.isArray(object.Reward))
                    throw TypeError(".table.TMapEventDefine.Reward: array expected");
                message.Reward = [];
                for (var i = 0; i < object.Reward.length; ++i)
                    message.Reward[i] = String(object.Reward[i]);
            }
            if (object.Params != null)
                message.Params = String(object.Params);
            return message;
        };

        /**
         * Creates a plain object from a TMapEventDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.TMapEventDefine} message TMapEventDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TMapEventDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Reward = [];
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.Desc = "";
                object.MoneyType = 0;
                object.Price = 0;
                object.Icon = "";
                object.Params = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                object.MoneyType = message.MoneyType;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                object.Icon = message.Icon;
            if (message.Reward && message.Reward.length) {
                object.Reward = [];
                for (var j = 0; j < message.Reward.length; ++j)
                    object.Reward[j] = message.Reward[j];
            }
            if (message.Params != null && message.hasOwnProperty("Params"))
                object.Params = message.Params;
            return object;
        };

        /**
         * Converts this TMapEventDefine to JSON.
         * @function toJSON
         * @memberof table.TMapEventDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TMapEventDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TMapEventDefine;
    })();

    table.MapEventRefreshBase = (function() {

        /**
         * Properties of a MapEventRefreshBase.
         * @memberof table
         * @interface IMapEventRefreshBase
         * @property {Array.<table.ITMapEventRefreshDefine>|null} [TMapEventRefresh] MapEventRefreshBase TMapEventRefresh
         */

        /**
         * Constructs a new MapEventRefreshBase.
         * @memberof table
         * @classdesc Represents a MapEventRefreshBase.
         * @implements IMapEventRefreshBase
         * @constructor
         * @param {table.IMapEventRefreshBase=} [properties] Properties to set
         */
        function MapEventRefreshBase(properties) {
            this.TMapEventRefresh = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapEventRefreshBase TMapEventRefresh.
         * @member {Array.<table.ITMapEventRefreshDefine>} TMapEventRefresh
         * @memberof table.MapEventRefreshBase
         * @instance
         */
        MapEventRefreshBase.prototype.TMapEventRefresh = $util.emptyArray;

        /**
         * Creates a new MapEventRefreshBase instance using the specified properties.
         * @function create
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.IMapEventRefreshBase=} [properties] Properties to set
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase instance
         */
        MapEventRefreshBase.create = function create(properties) {
            return new MapEventRefreshBase(properties);
        };

        /**
         * Encodes the specified MapEventRefreshBase message. Does not implicitly {@link table.MapEventRefreshBase.verify|verify} messages.
         * @function encode
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.IMapEventRefreshBase} message MapEventRefreshBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventRefreshBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TMapEventRefresh != null && message.TMapEventRefresh.length)
                for (var i = 0; i < message.TMapEventRefresh.length; ++i)
                    $root.table.TMapEventRefreshDefine.encode(message.TMapEventRefresh[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MapEventRefreshBase message, length delimited. Does not implicitly {@link table.MapEventRefreshBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.IMapEventRefreshBase} message MapEventRefreshBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventRefreshBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapEventRefreshBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventRefreshBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.MapEventRefreshBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TMapEventRefresh && message.TMapEventRefresh.length))
                        message.TMapEventRefresh = [];
                    message.TMapEventRefresh.push($root.table.TMapEventRefreshDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapEventRefreshBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventRefreshBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapEventRefreshBase message.
         * @function verify
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapEventRefreshBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TMapEventRefresh != null && message.hasOwnProperty("TMapEventRefresh")) {
                if (!Array.isArray(message.TMapEventRefresh))
                    return "TMapEventRefresh: array expected";
                for (var i = 0; i < message.TMapEventRefresh.length; ++i) {
                    var error = $root.table.TMapEventRefreshDefine.verify(message.TMapEventRefresh[i]);
                    if (error)
                        return "TMapEventRefresh." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MapEventRefreshBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase
         */
        MapEventRefreshBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.MapEventRefreshBase)
                return object;
            var message = new $root.table.MapEventRefreshBase();
            if (object.TMapEventRefresh) {
                if (!Array.isArray(object.TMapEventRefresh))
                    throw TypeError(".table.MapEventRefreshBase.TMapEventRefresh: array expected");
                message.TMapEventRefresh = [];
                for (var i = 0; i < object.TMapEventRefresh.length; ++i) {
                    if (typeof object.TMapEventRefresh[i] !== "object")
                        throw TypeError(".table.MapEventRefreshBase.TMapEventRefresh: object expected");
                    message.TMapEventRefresh[i] = $root.table.TMapEventRefreshDefine.fromObject(object.TMapEventRefresh[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MapEventRefreshBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.MapEventRefreshBase} message MapEventRefreshBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapEventRefreshBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TMapEventRefresh = [];
            if (message.TMapEventRefresh && message.TMapEventRefresh.length) {
                object.TMapEventRefresh = [];
                for (var j = 0; j < message.TMapEventRefresh.length; ++j)
                    object.TMapEventRefresh[j] = $root.table.TMapEventRefreshDefine.toObject(message.TMapEventRefresh[j], options);
            }
            return object;
        };

        /**
         * Converts this MapEventRefreshBase to JSON.
         * @function toJSON
         * @memberof table.MapEventRefreshBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapEventRefreshBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapEventRefreshBase;
    })();

    table.TMapEventRefreshDefine = (function() {

        /**
         * Properties of a TMapEventRefreshDefine.
         * @memberof table
         * @interface ITMapEventRefreshDefine
         * @property {number|null} [Id] TMapEventRefreshDefine Id
         * @property {Array.<string>|null} [TypeRand] TMapEventRefreshDefine TypeRand
         * @property {number|null} [RangeMin] TMapEventRefreshDefine RangeMin
         * @property {number|null} [RangeMax] TMapEventRefreshDefine RangeMax
         * @property {number|null} [Num] TMapEventRefreshDefine Num
         */

        /**
         * Constructs a new TMapEventRefreshDefine.
         * @memberof table
         * @classdesc Represents a TMapEventRefreshDefine.
         * @implements ITMapEventRefreshDefine
         * @constructor
         * @param {table.ITMapEventRefreshDefine=} [properties] Properties to set
         */
        function TMapEventRefreshDefine(properties) {
            this.TypeRand = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TMapEventRefreshDefine Id.
         * @member {number} Id
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.Id = 0;

        /**
         * TMapEventRefreshDefine TypeRand.
         * @member {Array.<string>} TypeRand
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.TypeRand = $util.emptyArray;

        /**
         * TMapEventRefreshDefine RangeMin.
         * @member {number} RangeMin
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.RangeMin = 0;

        /**
         * TMapEventRefreshDefine RangeMax.
         * @member {number} RangeMax
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.RangeMax = 0;

        /**
         * TMapEventRefreshDefine Num.
         * @member {number} Num
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.Num = 0;

        /**
         * Creates a new TMapEventRefreshDefine instance using the specified properties.
         * @function create
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.ITMapEventRefreshDefine=} [properties] Properties to set
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine instance
         */
        TMapEventRefreshDefine.create = function create(properties) {
            return new TMapEventRefreshDefine(properties);
        };

        /**
         * Encodes the specified TMapEventRefreshDefine message. Does not implicitly {@link table.TMapEventRefreshDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.ITMapEventRefreshDefine} message TMapEventRefreshDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventRefreshDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.TypeRand != null && message.TypeRand.length)
                for (var i = 0; i < message.TypeRand.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.TypeRand[i]);
            if (message.RangeMin != null && message.hasOwnProperty("RangeMin"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.RangeMin);
            if (message.RangeMax != null && message.hasOwnProperty("RangeMax"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.RangeMax);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Num);
            return writer;
        };

        /**
         * Encodes the specified TMapEventRefreshDefine message, length delimited. Does not implicitly {@link table.TMapEventRefreshDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.ITMapEventRefreshDefine} message TMapEventRefreshDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventRefreshDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TMapEventRefreshDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventRefreshDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TMapEventRefreshDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    if (!(message.TypeRand && message.TypeRand.length))
                        message.TypeRand = [];
                    message.TypeRand.push(reader.string());
                    break;
                case 3:
                    message.RangeMin = reader.int32();
                    break;
                case 4:
                    message.RangeMax = reader.int32();
                    break;
                case 5:
                    message.Num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TMapEventRefreshDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventRefreshDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TMapEventRefreshDefine message.
         * @function verify
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TMapEventRefreshDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.TypeRand != null && message.hasOwnProperty("TypeRand")) {
                if (!Array.isArray(message.TypeRand))
                    return "TypeRand: array expected";
                for (var i = 0; i < message.TypeRand.length; ++i)
                    if (!$util.isString(message.TypeRand[i]))
                        return "TypeRand: string[] expected";
            }
            if (message.RangeMin != null && message.hasOwnProperty("RangeMin"))
                if (!$util.isInteger(message.RangeMin))
                    return "RangeMin: integer expected";
            if (message.RangeMax != null && message.hasOwnProperty("RangeMax"))
                if (!$util.isInteger(message.RangeMax))
                    return "RangeMax: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            return null;
        };

        /**
         * Creates a TMapEventRefreshDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine
         */
        TMapEventRefreshDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TMapEventRefreshDefine)
                return object;
            var message = new $root.table.TMapEventRefreshDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.TypeRand) {
                if (!Array.isArray(object.TypeRand))
                    throw TypeError(".table.TMapEventRefreshDefine.TypeRand: array expected");
                message.TypeRand = [];
                for (var i = 0; i < object.TypeRand.length; ++i)
                    message.TypeRand[i] = String(object.TypeRand[i]);
            }
            if (object.RangeMin != null)
                message.RangeMin = object.RangeMin | 0;
            if (object.RangeMax != null)
                message.RangeMax = object.RangeMax | 0;
            if (object.Num != null)
                message.Num = object.Num | 0;
            return message;
        };

        /**
         * Creates a plain object from a TMapEventRefreshDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.TMapEventRefreshDefine} message TMapEventRefreshDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TMapEventRefreshDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TypeRand = [];
            if (options.defaults) {
                object.Id = 0;
                object.RangeMin = 0;
                object.RangeMax = 0;
                object.Num = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.TypeRand && message.TypeRand.length) {
                object.TypeRand = [];
                for (var j = 0; j < message.TypeRand.length; ++j)
                    object.TypeRand[j] = message.TypeRand[j];
            }
            if (message.RangeMin != null && message.hasOwnProperty("RangeMin"))
                object.RangeMin = message.RangeMin;
            if (message.RangeMax != null && message.hasOwnProperty("RangeMax"))
                object.RangeMax = message.RangeMax;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            return object;
        };

        /**
         * Converts this TMapEventRefreshDefine to JSON.
         * @function toJSON
         * @memberof table.TMapEventRefreshDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TMapEventRefreshDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TMapEventRefreshDefine;
    })();

    table.NameBase = (function() {

        /**
         * Properties of a NameBase.
         * @memberof table
         * @interface INameBase
         * @property {Array.<table.ITNameDefine>|null} [TName] NameBase TName
         */

        /**
         * Constructs a new NameBase.
         * @memberof table
         * @classdesc Represents a NameBase.
         * @implements INameBase
         * @constructor
         * @param {table.INameBase=} [properties] Properties to set
         */
        function NameBase(properties) {
            this.TName = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NameBase TName.
         * @member {Array.<table.ITNameDefine>} TName
         * @memberof table.NameBase
         * @instance
         */
        NameBase.prototype.TName = $util.emptyArray;

        /**
         * Creates a new NameBase instance using the specified properties.
         * @function create
         * @memberof table.NameBase
         * @static
         * @param {table.INameBase=} [properties] Properties to set
         * @returns {table.NameBase} NameBase instance
         */
        NameBase.create = function create(properties) {
            return new NameBase(properties);
        };

        /**
         * Encodes the specified NameBase message. Does not implicitly {@link table.NameBase.verify|verify} messages.
         * @function encode
         * @memberof table.NameBase
         * @static
         * @param {table.INameBase} message NameBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NameBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TName != null && message.TName.length)
                for (var i = 0; i < message.TName.length; ++i)
                    $root.table.TNameDefine.encode(message.TName[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NameBase message, length delimited. Does not implicitly {@link table.NameBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.NameBase
         * @static
         * @param {table.INameBase} message NameBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NameBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NameBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.NameBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.NameBase} NameBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NameBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.NameBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TName && message.TName.length))
                        message.TName = [];
                    message.TName.push($root.table.TNameDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NameBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.NameBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.NameBase} NameBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NameBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NameBase message.
         * @function verify
         * @memberof table.NameBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NameBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TName != null && message.hasOwnProperty("TName")) {
                if (!Array.isArray(message.TName))
                    return "TName: array expected";
                for (var i = 0; i < message.TName.length; ++i) {
                    var error = $root.table.TNameDefine.verify(message.TName[i]);
                    if (error)
                        return "TName." + error;
                }
            }
            return null;
        };

        /**
         * Creates a NameBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.NameBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.NameBase} NameBase
         */
        NameBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.NameBase)
                return object;
            var message = new $root.table.NameBase();
            if (object.TName) {
                if (!Array.isArray(object.TName))
                    throw TypeError(".table.NameBase.TName: array expected");
                message.TName = [];
                for (var i = 0; i < object.TName.length; ++i) {
                    if (typeof object.TName[i] !== "object")
                        throw TypeError(".table.NameBase.TName: object expected");
                    message.TName[i] = $root.table.TNameDefine.fromObject(object.TName[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a NameBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.NameBase
         * @static
         * @param {table.NameBase} message NameBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NameBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TName = [];
            if (message.TName && message.TName.length) {
                object.TName = [];
                for (var j = 0; j < message.TName.length; ++j)
                    object.TName[j] = $root.table.TNameDefine.toObject(message.TName[j], options);
            }
            return object;
        };

        /**
         * Converts this NameBase to JSON.
         * @function toJSON
         * @memberof table.NameBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NameBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NameBase;
    })();

    table.TNameDefine = (function() {

        /**
         * Properties of a TNameDefine.
         * @memberof table
         * @interface ITNameDefine
         * @property {number|null} [Id] TNameDefine Id
         * @property {string|null} [Name] TNameDefine Name
         */

        /**
         * Constructs a new TNameDefine.
         * @memberof table
         * @classdesc Represents a TNameDefine.
         * @implements ITNameDefine
         * @constructor
         * @param {table.ITNameDefine=} [properties] Properties to set
         */
        function TNameDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TNameDefine Id.
         * @member {number} Id
         * @memberof table.TNameDefine
         * @instance
         */
        TNameDefine.prototype.Id = 0;

        /**
         * TNameDefine Name.
         * @member {string} Name
         * @memberof table.TNameDefine
         * @instance
         */
        TNameDefine.prototype.Name = "";

        /**
         * Creates a new TNameDefine instance using the specified properties.
         * @function create
         * @memberof table.TNameDefine
         * @static
         * @param {table.ITNameDefine=} [properties] Properties to set
         * @returns {table.TNameDefine} TNameDefine instance
         */
        TNameDefine.create = function create(properties) {
            return new TNameDefine(properties);
        };

        /**
         * Encodes the specified TNameDefine message. Does not implicitly {@link table.TNameDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TNameDefine
         * @static
         * @param {table.ITNameDefine} message TNameDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNameDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            return writer;
        };

        /**
         * Encodes the specified TNameDefine message, length delimited. Does not implicitly {@link table.TNameDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TNameDefine
         * @static
         * @param {table.ITNameDefine} message TNameDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNameDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TNameDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TNameDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TNameDefine} TNameDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNameDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TNameDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TNameDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TNameDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TNameDefine} TNameDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNameDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TNameDefine message.
         * @function verify
         * @memberof table.TNameDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TNameDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            return null;
        };

        /**
         * Creates a TNameDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TNameDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TNameDefine} TNameDefine
         */
        TNameDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TNameDefine)
                return object;
            var message = new $root.table.TNameDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            return message;
        };

        /**
         * Creates a plain object from a TNameDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TNameDefine
         * @static
         * @param {table.TNameDefine} message TNameDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TNameDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            return object;
        };

        /**
         * Converts this TNameDefine to JSON.
         * @function toJSON
         * @memberof table.TNameDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TNameDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TNameDefine;
    })();

    table.NoticeBase = (function() {

        /**
         * Properties of a NoticeBase.
         * @memberof table
         * @interface INoticeBase
         * @property {Array.<table.ITNoticeDefine>|null} [TNotice] NoticeBase TNotice
         */

        /**
         * Constructs a new NoticeBase.
         * @memberof table
         * @classdesc Represents a NoticeBase.
         * @implements INoticeBase
         * @constructor
         * @param {table.INoticeBase=} [properties] Properties to set
         */
        function NoticeBase(properties) {
            this.TNotice = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NoticeBase TNotice.
         * @member {Array.<table.ITNoticeDefine>} TNotice
         * @memberof table.NoticeBase
         * @instance
         */
        NoticeBase.prototype.TNotice = $util.emptyArray;

        /**
         * Creates a new NoticeBase instance using the specified properties.
         * @function create
         * @memberof table.NoticeBase
         * @static
         * @param {table.INoticeBase=} [properties] Properties to set
         * @returns {table.NoticeBase} NoticeBase instance
         */
        NoticeBase.create = function create(properties) {
            return new NoticeBase(properties);
        };

        /**
         * Encodes the specified NoticeBase message. Does not implicitly {@link table.NoticeBase.verify|verify} messages.
         * @function encode
         * @memberof table.NoticeBase
         * @static
         * @param {table.INoticeBase} message NoticeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoticeBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TNotice != null && message.TNotice.length)
                for (var i = 0; i < message.TNotice.length; ++i)
                    $root.table.TNoticeDefine.encode(message.TNotice[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NoticeBase message, length delimited. Does not implicitly {@link table.NoticeBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.NoticeBase
         * @static
         * @param {table.INoticeBase} message NoticeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoticeBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NoticeBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.NoticeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.NoticeBase} NoticeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoticeBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.NoticeBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TNotice && message.TNotice.length))
                        message.TNotice = [];
                    message.TNotice.push($root.table.TNoticeDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NoticeBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.NoticeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.NoticeBase} NoticeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoticeBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NoticeBase message.
         * @function verify
         * @memberof table.NoticeBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NoticeBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TNotice != null && message.hasOwnProperty("TNotice")) {
                if (!Array.isArray(message.TNotice))
                    return "TNotice: array expected";
                for (var i = 0; i < message.TNotice.length; ++i) {
                    var error = $root.table.TNoticeDefine.verify(message.TNotice[i]);
                    if (error)
                        return "TNotice." + error;
                }
            }
            return null;
        };

        /**
         * Creates a NoticeBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.NoticeBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.NoticeBase} NoticeBase
         */
        NoticeBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.NoticeBase)
                return object;
            var message = new $root.table.NoticeBase();
            if (object.TNotice) {
                if (!Array.isArray(object.TNotice))
                    throw TypeError(".table.NoticeBase.TNotice: array expected");
                message.TNotice = [];
                for (var i = 0; i < object.TNotice.length; ++i) {
                    if (typeof object.TNotice[i] !== "object")
                        throw TypeError(".table.NoticeBase.TNotice: object expected");
                    message.TNotice[i] = $root.table.TNoticeDefine.fromObject(object.TNotice[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a NoticeBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.NoticeBase
         * @static
         * @param {table.NoticeBase} message NoticeBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NoticeBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TNotice = [];
            if (message.TNotice && message.TNotice.length) {
                object.TNotice = [];
                for (var j = 0; j < message.TNotice.length; ++j)
                    object.TNotice[j] = $root.table.TNoticeDefine.toObject(message.TNotice[j], options);
            }
            return object;
        };

        /**
         * Converts this NoticeBase to JSON.
         * @function toJSON
         * @memberof table.NoticeBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NoticeBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NoticeBase;
    })();

    table.TNoticeDefine = (function() {

        /**
         * Properties of a TNoticeDefine.
         * @memberof table
         * @interface ITNoticeDefine
         * @property {number|null} [Id] TNoticeDefine Id
         * @property {number|null} [Avatar] TNoticeDefine Avatar
         * @property {string|null} [Info] TNoticeDefine Info
         */

        /**
         * Constructs a new TNoticeDefine.
         * @memberof table
         * @classdesc Represents a TNoticeDefine.
         * @implements ITNoticeDefine
         * @constructor
         * @param {table.ITNoticeDefine=} [properties] Properties to set
         */
        function TNoticeDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TNoticeDefine Id.
         * @member {number} Id
         * @memberof table.TNoticeDefine
         * @instance
         */
        TNoticeDefine.prototype.Id = 0;

        /**
         * TNoticeDefine Avatar.
         * @member {number} Avatar
         * @memberof table.TNoticeDefine
         * @instance
         */
        TNoticeDefine.prototype.Avatar = 0;

        /**
         * TNoticeDefine Info.
         * @member {string} Info
         * @memberof table.TNoticeDefine
         * @instance
         */
        TNoticeDefine.prototype.Info = "";

        /**
         * Creates a new TNoticeDefine instance using the specified properties.
         * @function create
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.ITNoticeDefine=} [properties] Properties to set
         * @returns {table.TNoticeDefine} TNoticeDefine instance
         */
        TNoticeDefine.create = function create(properties) {
            return new TNoticeDefine(properties);
        };

        /**
         * Encodes the specified TNoticeDefine message. Does not implicitly {@link table.TNoticeDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.ITNoticeDefine} message TNoticeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNoticeDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Avatar);
            if (message.Info != null && message.hasOwnProperty("Info"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Info);
            return writer;
        };

        /**
         * Encodes the specified TNoticeDefine message, length delimited. Does not implicitly {@link table.TNoticeDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.ITNoticeDefine} message TNoticeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNoticeDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TNoticeDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TNoticeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TNoticeDefine} TNoticeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNoticeDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TNoticeDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Avatar = reader.int32();
                    break;
                case 3:
                    message.Info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TNoticeDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TNoticeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TNoticeDefine} TNoticeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNoticeDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TNoticeDefine message.
         * @function verify
         * @memberof table.TNoticeDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TNoticeDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                if (!$util.isInteger(message.Avatar))
                    return "Avatar: integer expected";
            if (message.Info != null && message.hasOwnProperty("Info"))
                if (!$util.isString(message.Info))
                    return "Info: string expected";
            return null;
        };

        /**
         * Creates a TNoticeDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TNoticeDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TNoticeDefine} TNoticeDefine
         */
        TNoticeDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TNoticeDefine)
                return object;
            var message = new $root.table.TNoticeDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Avatar != null)
                message.Avatar = object.Avatar | 0;
            if (object.Info != null)
                message.Info = String(object.Info);
            return message;
        };

        /**
         * Creates a plain object from a TNoticeDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.TNoticeDefine} message TNoticeDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TNoticeDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Avatar = 0;
                object.Info = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                object.Avatar = message.Avatar;
            if (message.Info != null && message.hasOwnProperty("Info"))
                object.Info = message.Info;
            return object;
        };

        /**
         * Converts this TNoticeDefine to JSON.
         * @function toJSON
         * @memberof table.TNoticeDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TNoticeDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TNoticeDefine;
    })();

    table.ProtoMsgIndex = (function() {

        /**
         * Properties of a ProtoMsgIndex.
         * @memberof table
         * @interface IProtoMsgIndex
         * @property {Array.<table.IProtoIdDefine>|null} [ProtoId] ProtoMsgIndex ProtoId
         */

        /**
         * Constructs a new ProtoMsgIndex.
         * @memberof table
         * @classdesc Represents a ProtoMsgIndex.
         * @implements IProtoMsgIndex
         * @constructor
         * @param {table.IProtoMsgIndex=} [properties] Properties to set
         */
        function ProtoMsgIndex(properties) {
            this.ProtoId = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProtoMsgIndex ProtoId.
         * @member {Array.<table.IProtoIdDefine>} ProtoId
         * @memberof table.ProtoMsgIndex
         * @instance
         */
        ProtoMsgIndex.prototype.ProtoId = $util.emptyArray;

        /**
         * Creates a new ProtoMsgIndex instance using the specified properties.
         * @function create
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.IProtoMsgIndex=} [properties] Properties to set
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex instance
         */
        ProtoMsgIndex.create = function create(properties) {
            return new ProtoMsgIndex(properties);
        };

        /**
         * Encodes the specified ProtoMsgIndex message. Does not implicitly {@link table.ProtoMsgIndex.verify|verify} messages.
         * @function encode
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.IProtoMsgIndex} message ProtoMsgIndex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoMsgIndex.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ProtoId != null && message.ProtoId.length)
                for (var i = 0; i < message.ProtoId.length; ++i)
                    $root.table.ProtoIdDefine.encode(message.ProtoId[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProtoMsgIndex message, length delimited. Does not implicitly {@link table.ProtoMsgIndex.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.IProtoMsgIndex} message ProtoMsgIndex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoMsgIndex.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProtoMsgIndex message from the specified reader or buffer.
         * @function decode
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoMsgIndex.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ProtoMsgIndex();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ProtoId && message.ProtoId.length))
                        message.ProtoId = [];
                    message.ProtoId.push($root.table.ProtoIdDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProtoMsgIndex message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoMsgIndex.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProtoMsgIndex message.
         * @function verify
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProtoMsgIndex.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ProtoId != null && message.hasOwnProperty("ProtoId")) {
                if (!Array.isArray(message.ProtoId))
                    return "ProtoId: array expected";
                for (var i = 0; i < message.ProtoId.length; ++i) {
                    var error = $root.table.ProtoIdDefine.verify(message.ProtoId[i]);
                    if (error)
                        return "ProtoId." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProtoMsgIndex message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex
         */
        ProtoMsgIndex.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ProtoMsgIndex)
                return object;
            var message = new $root.table.ProtoMsgIndex();
            if (object.ProtoId) {
                if (!Array.isArray(object.ProtoId))
                    throw TypeError(".table.ProtoMsgIndex.ProtoId: array expected");
                message.ProtoId = [];
                for (var i = 0; i < object.ProtoId.length; ++i) {
                    if (typeof object.ProtoId[i] !== "object")
                        throw TypeError(".table.ProtoMsgIndex.ProtoId: object expected");
                    message.ProtoId[i] = $root.table.ProtoIdDefine.fromObject(object.ProtoId[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProtoMsgIndex message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.ProtoMsgIndex} message ProtoMsgIndex
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProtoMsgIndex.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ProtoId = [];
            if (message.ProtoId && message.ProtoId.length) {
                object.ProtoId = [];
                for (var j = 0; j < message.ProtoId.length; ++j)
                    object.ProtoId[j] = $root.table.ProtoIdDefine.toObject(message.ProtoId[j], options);
            }
            return object;
        };

        /**
         * Converts this ProtoMsgIndex to JSON.
         * @function toJSON
         * @memberof table.ProtoMsgIndex
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProtoMsgIndex.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProtoMsgIndex;
    })();

    table.ProtoIdDefine = (function() {

        /**
         * Properties of a ProtoIdDefine.
         * @memberof table
         * @interface IProtoIdDefine
         * @property {number|null} [Id] ProtoIdDefine Id
         * @property {string|null} [Name] ProtoIdDefine Name
         */

        /**
         * Constructs a new ProtoIdDefine.
         * @memberof table
         * @classdesc Represents a ProtoIdDefine.
         * @implements IProtoIdDefine
         * @constructor
         * @param {table.IProtoIdDefine=} [properties] Properties to set
         */
        function ProtoIdDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProtoIdDefine Id.
         * @member {number} Id
         * @memberof table.ProtoIdDefine
         * @instance
         */
        ProtoIdDefine.prototype.Id = 0;

        /**
         * ProtoIdDefine Name.
         * @member {string} Name
         * @memberof table.ProtoIdDefine
         * @instance
         */
        ProtoIdDefine.prototype.Name = "";

        /**
         * Creates a new ProtoIdDefine instance using the specified properties.
         * @function create
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.IProtoIdDefine=} [properties] Properties to set
         * @returns {table.ProtoIdDefine} ProtoIdDefine instance
         */
        ProtoIdDefine.create = function create(properties) {
            return new ProtoIdDefine(properties);
        };

        /**
         * Encodes the specified ProtoIdDefine message. Does not implicitly {@link table.ProtoIdDefine.verify|verify} messages.
         * @function encode
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.IProtoIdDefine} message ProtoIdDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoIdDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            return writer;
        };

        /**
         * Encodes the specified ProtoIdDefine message, length delimited. Does not implicitly {@link table.ProtoIdDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.IProtoIdDefine} message ProtoIdDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoIdDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProtoIdDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.ProtoIdDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ProtoIdDefine} ProtoIdDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoIdDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ProtoIdDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProtoIdDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ProtoIdDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ProtoIdDefine} ProtoIdDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoIdDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProtoIdDefine message.
         * @function verify
         * @memberof table.ProtoIdDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProtoIdDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            return null;
        };

        /**
         * Creates a ProtoIdDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ProtoIdDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ProtoIdDefine} ProtoIdDefine
         */
        ProtoIdDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ProtoIdDefine)
                return object;
            var message = new $root.table.ProtoIdDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            return message;
        };

        /**
         * Creates a plain object from a ProtoIdDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.ProtoIdDefine} message ProtoIdDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProtoIdDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            return object;
        };

        /**
         * Converts this ProtoIdDefine to JSON.
         * @function toJSON
         * @memberof table.ProtoIdDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProtoIdDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProtoIdDefine;
    })();

    table.RechargeBase = (function() {

        /**
         * Properties of a RechargeBase.
         * @memberof table
         * @interface IRechargeBase
         * @property {Array.<table.ITRechargeDefine>|null} [TRecharge] RechargeBase TRecharge
         */

        /**
         * Constructs a new RechargeBase.
         * @memberof table
         * @classdesc Represents a RechargeBase.
         * @implements IRechargeBase
         * @constructor
         * @param {table.IRechargeBase=} [properties] Properties to set
         */
        function RechargeBase(properties) {
            this.TRecharge = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RechargeBase TRecharge.
         * @member {Array.<table.ITRechargeDefine>} TRecharge
         * @memberof table.RechargeBase
         * @instance
         */
        RechargeBase.prototype.TRecharge = $util.emptyArray;

        /**
         * Creates a new RechargeBase instance using the specified properties.
         * @function create
         * @memberof table.RechargeBase
         * @static
         * @param {table.IRechargeBase=} [properties] Properties to set
         * @returns {table.RechargeBase} RechargeBase instance
         */
        RechargeBase.create = function create(properties) {
            return new RechargeBase(properties);
        };

        /**
         * Encodes the specified RechargeBase message. Does not implicitly {@link table.RechargeBase.verify|verify} messages.
         * @function encode
         * @memberof table.RechargeBase
         * @static
         * @param {table.IRechargeBase} message RechargeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RechargeBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TRecharge != null && message.TRecharge.length)
                for (var i = 0; i < message.TRecharge.length; ++i)
                    $root.table.TRechargeDefine.encode(message.TRecharge[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RechargeBase message, length delimited. Does not implicitly {@link table.RechargeBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.RechargeBase
         * @static
         * @param {table.IRechargeBase} message RechargeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RechargeBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RechargeBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.RechargeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.RechargeBase} RechargeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RechargeBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.RechargeBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TRecharge && message.TRecharge.length))
                        message.TRecharge = [];
                    message.TRecharge.push($root.table.TRechargeDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RechargeBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.RechargeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.RechargeBase} RechargeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RechargeBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RechargeBase message.
         * @function verify
         * @memberof table.RechargeBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RechargeBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TRecharge != null && message.hasOwnProperty("TRecharge")) {
                if (!Array.isArray(message.TRecharge))
                    return "TRecharge: array expected";
                for (var i = 0; i < message.TRecharge.length; ++i) {
                    var error = $root.table.TRechargeDefine.verify(message.TRecharge[i]);
                    if (error)
                        return "TRecharge." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RechargeBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.RechargeBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.RechargeBase} RechargeBase
         */
        RechargeBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.RechargeBase)
                return object;
            var message = new $root.table.RechargeBase();
            if (object.TRecharge) {
                if (!Array.isArray(object.TRecharge))
                    throw TypeError(".table.RechargeBase.TRecharge: array expected");
                message.TRecharge = [];
                for (var i = 0; i < object.TRecharge.length; ++i) {
                    if (typeof object.TRecharge[i] !== "object")
                        throw TypeError(".table.RechargeBase.TRecharge: object expected");
                    message.TRecharge[i] = $root.table.TRechargeDefine.fromObject(object.TRecharge[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RechargeBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.RechargeBase
         * @static
         * @param {table.RechargeBase} message RechargeBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RechargeBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TRecharge = [];
            if (message.TRecharge && message.TRecharge.length) {
                object.TRecharge = [];
                for (var j = 0; j < message.TRecharge.length; ++j)
                    object.TRecharge[j] = $root.table.TRechargeDefine.toObject(message.TRecharge[j], options);
            }
            return object;
        };

        /**
         * Converts this RechargeBase to JSON.
         * @function toJSON
         * @memberof table.RechargeBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RechargeBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RechargeBase;
    })();

    table.TRechargeDefine = (function() {

        /**
         * Properties of a TRechargeDefine.
         * @memberof table
         * @interface ITRechargeDefine
         * @property {number|null} [Id] TRechargeDefine Id
         * @property {number|null} [Price] TRechargeDefine Price
         * @property {string|null} [Info] TRechargeDefine Info
         */

        /**
         * Constructs a new TRechargeDefine.
         * @memberof table
         * @classdesc Represents a TRechargeDefine.
         * @implements ITRechargeDefine
         * @constructor
         * @param {table.ITRechargeDefine=} [properties] Properties to set
         */
        function TRechargeDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TRechargeDefine Id.
         * @member {number} Id
         * @memberof table.TRechargeDefine
         * @instance
         */
        TRechargeDefine.prototype.Id = 0;

        /**
         * TRechargeDefine Price.
         * @member {number} Price
         * @memberof table.TRechargeDefine
         * @instance
         */
        TRechargeDefine.prototype.Price = 0;

        /**
         * TRechargeDefine Info.
         * @member {string} Info
         * @memberof table.TRechargeDefine
         * @instance
         */
        TRechargeDefine.prototype.Info = "";

        /**
         * Creates a new TRechargeDefine instance using the specified properties.
         * @function create
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.ITRechargeDefine=} [properties] Properties to set
         * @returns {table.TRechargeDefine} TRechargeDefine instance
         */
        TRechargeDefine.create = function create(properties) {
            return new TRechargeDefine(properties);
        };

        /**
         * Encodes the specified TRechargeDefine message. Does not implicitly {@link table.TRechargeDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.ITRechargeDefine} message TRechargeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TRechargeDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Price);
            if (message.Info != null && message.hasOwnProperty("Info"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Info);
            return writer;
        };

        /**
         * Encodes the specified TRechargeDefine message, length delimited. Does not implicitly {@link table.TRechargeDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.ITRechargeDefine} message TRechargeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TRechargeDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TRechargeDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TRechargeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TRechargeDefine} TRechargeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TRechargeDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TRechargeDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Price = reader.int32();
                    break;
                case 3:
                    message.Info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TRechargeDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TRechargeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TRechargeDefine} TRechargeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TRechargeDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TRechargeDefine message.
         * @function verify
         * @memberof table.TRechargeDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TRechargeDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Info != null && message.hasOwnProperty("Info"))
                if (!$util.isString(message.Info))
                    return "Info: string expected";
            return null;
        };

        /**
         * Creates a TRechargeDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TRechargeDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TRechargeDefine} TRechargeDefine
         */
        TRechargeDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TRechargeDefine)
                return object;
            var message = new $root.table.TRechargeDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Price != null)
                message.Price = object.Price | 0;
            if (object.Info != null)
                message.Info = String(object.Info);
            return message;
        };

        /**
         * Creates a plain object from a TRechargeDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.TRechargeDefine} message TRechargeDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TRechargeDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Price = 0;
                object.Info = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Info != null && message.hasOwnProperty("Info"))
                object.Info = message.Info;
            return object;
        };

        /**
         * Converts this TRechargeDefine to JSON.
         * @function toJSON
         * @memberof table.TRechargeDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TRechargeDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TRechargeDefine;
    })();

    table.ShopBase = (function() {

        /**
         * Properties of a ShopBase.
         * @memberof table
         * @interface IShopBase
         * @property {Array.<table.ITShopDefine>|null} [TShop] ShopBase TShop
         */

        /**
         * Constructs a new ShopBase.
         * @memberof table
         * @classdesc Represents a ShopBase.
         * @implements IShopBase
         * @constructor
         * @param {table.IShopBase=} [properties] Properties to set
         */
        function ShopBase(properties) {
            this.TShop = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShopBase TShop.
         * @member {Array.<table.ITShopDefine>} TShop
         * @memberof table.ShopBase
         * @instance
         */
        ShopBase.prototype.TShop = $util.emptyArray;

        /**
         * Creates a new ShopBase instance using the specified properties.
         * @function create
         * @memberof table.ShopBase
         * @static
         * @param {table.IShopBase=} [properties] Properties to set
         * @returns {table.ShopBase} ShopBase instance
         */
        ShopBase.create = function create(properties) {
            return new ShopBase(properties);
        };

        /**
         * Encodes the specified ShopBase message. Does not implicitly {@link table.ShopBase.verify|verify} messages.
         * @function encode
         * @memberof table.ShopBase
         * @static
         * @param {table.IShopBase} message ShopBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TShop != null && message.TShop.length)
                for (var i = 0; i < message.TShop.length; ++i)
                    $root.table.TShopDefine.encode(message.TShop[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShopBase message, length delimited. Does not implicitly {@link table.ShopBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ShopBase
         * @static
         * @param {table.IShopBase} message ShopBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShopBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.ShopBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ShopBase} ShopBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ShopBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TShop && message.TShop.length))
                        message.TShop = [];
                    message.TShop.push($root.table.TShopDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShopBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ShopBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ShopBase} ShopBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShopBase message.
         * @function verify
         * @memberof table.ShopBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShopBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TShop != null && message.hasOwnProperty("TShop")) {
                if (!Array.isArray(message.TShop))
                    return "TShop: array expected";
                for (var i = 0; i < message.TShop.length; ++i) {
                    var error = $root.table.TShopDefine.verify(message.TShop[i]);
                    if (error)
                        return "TShop." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ShopBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ShopBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ShopBase} ShopBase
         */
        ShopBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ShopBase)
                return object;
            var message = new $root.table.ShopBase();
            if (object.TShop) {
                if (!Array.isArray(object.TShop))
                    throw TypeError(".table.ShopBase.TShop: array expected");
                message.TShop = [];
                for (var i = 0; i < object.TShop.length; ++i) {
                    if (typeof object.TShop[i] !== "object")
                        throw TypeError(".table.ShopBase.TShop: object expected");
                    message.TShop[i] = $root.table.TShopDefine.fromObject(object.TShop[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ShopBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ShopBase
         * @static
         * @param {table.ShopBase} message ShopBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShopBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TShop = [];
            if (message.TShop && message.TShop.length) {
                object.TShop = [];
                for (var j = 0; j < message.TShop.length; ++j)
                    object.TShop[j] = $root.table.TShopDefine.toObject(message.TShop[j], options);
            }
            return object;
        };

        /**
         * Converts this ShopBase to JSON.
         * @function toJSON
         * @memberof table.ShopBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShopBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShopBase;
    })();

    table.TShopDefine = (function() {

        /**
         * Properties of a TShopDefine.
         * @memberof table
         * @interface ITShopDefine
         * @property {number|null} [Id] TShopDefine Id
         * @property {number|null} [Itemid] TShopDefine Itemid
         * @property {string|null} [Name] TShopDefine Name
         * @property {number|null} [Type] TShopDefine Type
         * @property {number|null} [Num] TShopDefine Num
         * @property {number|null} [Rmb] TShopDefine Rmb
         * @property {number|null} [Price] TShopDefine Price
         * @property {number|null} [Send] TShopDefine Send
         */

        /**
         * Constructs a new TShopDefine.
         * @memberof table
         * @classdesc Represents a TShopDefine.
         * @implements ITShopDefine
         * @constructor
         * @param {table.ITShopDefine=} [properties] Properties to set
         */
        function TShopDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TShopDefine Id.
         * @member {number} Id
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Id = 0;

        /**
         * TShopDefine Itemid.
         * @member {number} Itemid
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Itemid = 0;

        /**
         * TShopDefine Name.
         * @member {string} Name
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Name = "";

        /**
         * TShopDefine Type.
         * @member {number} Type
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Type = 0;

        /**
         * TShopDefine Num.
         * @member {number} Num
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Num = 0;

        /**
         * TShopDefine Rmb.
         * @member {number} Rmb
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Rmb = 0;

        /**
         * TShopDefine Price.
         * @member {number} Price
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Price = 0;

        /**
         * TShopDefine Send.
         * @member {number} Send
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Send = 0;

        /**
         * Creates a new TShopDefine instance using the specified properties.
         * @function create
         * @memberof table.TShopDefine
         * @static
         * @param {table.ITShopDefine=} [properties] Properties to set
         * @returns {table.TShopDefine} TShopDefine instance
         */
        TShopDefine.create = function create(properties) {
            return new TShopDefine(properties);
        };

        /**
         * Encodes the specified TShopDefine message. Does not implicitly {@link table.TShopDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TShopDefine
         * @static
         * @param {table.ITShopDefine} message TShopDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TShopDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Itemid != null && message.hasOwnProperty("Itemid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Itemid);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Name);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Type);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Num);
            if (message.Rmb != null && message.hasOwnProperty("Rmb"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Rmb);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.Price);
            if (message.Send != null && message.hasOwnProperty("Send"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Send);
            return writer;
        };

        /**
         * Encodes the specified TShopDefine message, length delimited. Does not implicitly {@link table.TShopDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TShopDefine
         * @static
         * @param {table.ITShopDefine} message TShopDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TShopDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TShopDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TShopDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TShopDefine} TShopDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TShopDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TShopDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Itemid = reader.int32();
                    break;
                case 3:
                    message.Name = reader.string();
                    break;
                case 4:
                    message.Type = reader.int32();
                    break;
                case 5:
                    message.Num = reader.int32();
                    break;
                case 6:
                    message.Rmb = reader.int32();
                    break;
                case 7:
                    message.Price = reader.int32();
                    break;
                case 8:
                    message.Send = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TShopDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TShopDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TShopDefine} TShopDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TShopDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TShopDefine message.
         * @function verify
         * @memberof table.TShopDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TShopDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Itemid != null && message.hasOwnProperty("Itemid"))
                if (!$util.isInteger(message.Itemid))
                    return "Itemid: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.Rmb != null && message.hasOwnProperty("Rmb"))
                if (!$util.isInteger(message.Rmb))
                    return "Rmb: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Send != null && message.hasOwnProperty("Send"))
                if (!$util.isInteger(message.Send))
                    return "Send: integer expected";
            return null;
        };

        /**
         * Creates a TShopDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TShopDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TShopDefine} TShopDefine
         */
        TShopDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TShopDefine)
                return object;
            var message = new $root.table.TShopDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Itemid != null)
                message.Itemid = object.Itemid | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.Num != null)
                message.Num = object.Num | 0;
            if (object.Rmb != null)
                message.Rmb = object.Rmb | 0;
            if (object.Price != null)
                message.Price = object.Price | 0;
            if (object.Send != null)
                message.Send = object.Send | 0;
            return message;
        };

        /**
         * Creates a plain object from a TShopDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TShopDefine
         * @static
         * @param {table.TShopDefine} message TShopDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TShopDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Itemid = 0;
                object.Name = "";
                object.Type = 0;
                object.Num = 0;
                object.Rmb = 0;
                object.Price = 0;
                object.Send = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Itemid != null && message.hasOwnProperty("Itemid"))
                object.Itemid = message.Itemid;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.Rmb != null && message.hasOwnProperty("Rmb"))
                object.Rmb = message.Rmb;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Send != null && message.hasOwnProperty("Send"))
                object.Send = message.Send;
            return object;
        };

        /**
         * Converts this TShopDefine to JSON.
         * @function toJSON
         * @memberof table.TShopDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TShopDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TShopDefine;
    })();

    table.SignBase = (function() {

        /**
         * Properties of a SignBase.
         * @memberof table
         * @interface ISignBase
         * @property {Array.<table.ITSignDefine>|null} [TSign] SignBase TSign
         */

        /**
         * Constructs a new SignBase.
         * @memberof table
         * @classdesc Represents a SignBase.
         * @implements ISignBase
         * @constructor
         * @param {table.ISignBase=} [properties] Properties to set
         */
        function SignBase(properties) {
            this.TSign = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SignBase TSign.
         * @member {Array.<table.ITSignDefine>} TSign
         * @memberof table.SignBase
         * @instance
         */
        SignBase.prototype.TSign = $util.emptyArray;

        /**
         * Creates a new SignBase instance using the specified properties.
         * @function create
         * @memberof table.SignBase
         * @static
         * @param {table.ISignBase=} [properties] Properties to set
         * @returns {table.SignBase} SignBase instance
         */
        SignBase.create = function create(properties) {
            return new SignBase(properties);
        };

        /**
         * Encodes the specified SignBase message. Does not implicitly {@link table.SignBase.verify|verify} messages.
         * @function encode
         * @memberof table.SignBase
         * @static
         * @param {table.ISignBase} message SignBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SignBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TSign != null && message.TSign.length)
                for (var i = 0; i < message.TSign.length; ++i)
                    $root.table.TSignDefine.encode(message.TSign[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SignBase message, length delimited. Does not implicitly {@link table.SignBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.SignBase
         * @static
         * @param {table.ISignBase} message SignBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SignBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SignBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.SignBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.SignBase} SignBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SignBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.SignBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TSign && message.TSign.length))
                        message.TSign = [];
                    message.TSign.push($root.table.TSignDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SignBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.SignBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.SignBase} SignBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SignBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SignBase message.
         * @function verify
         * @memberof table.SignBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SignBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TSign != null && message.hasOwnProperty("TSign")) {
                if (!Array.isArray(message.TSign))
                    return "TSign: array expected";
                for (var i = 0; i < message.TSign.length; ++i) {
                    var error = $root.table.TSignDefine.verify(message.TSign[i]);
                    if (error)
                        return "TSign." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SignBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.SignBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.SignBase} SignBase
         */
        SignBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.SignBase)
                return object;
            var message = new $root.table.SignBase();
            if (object.TSign) {
                if (!Array.isArray(object.TSign))
                    throw TypeError(".table.SignBase.TSign: array expected");
                message.TSign = [];
                for (var i = 0; i < object.TSign.length; ++i) {
                    if (typeof object.TSign[i] !== "object")
                        throw TypeError(".table.SignBase.TSign: object expected");
                    message.TSign[i] = $root.table.TSignDefine.fromObject(object.TSign[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SignBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.SignBase
         * @static
         * @param {table.SignBase} message SignBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SignBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TSign = [];
            if (message.TSign && message.TSign.length) {
                object.TSign = [];
                for (var j = 0; j < message.TSign.length; ++j)
                    object.TSign[j] = $root.table.TSignDefine.toObject(message.TSign[j], options);
            }
            return object;
        };

        /**
         * Converts this SignBase to JSON.
         * @function toJSON
         * @memberof table.SignBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SignBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SignBase;
    })();

    table.TSignDefine = (function() {

        /**
         * Properties of a TSignDefine.
         * @memberof table
         * @interface ITSignDefine
         * @property {number|null} [Id] TSignDefine Id
         * @property {number|null} [CostId] TSignDefine CostId
         * @property {number|null} [Num] TSignDefine Num
         */

        /**
         * Constructs a new TSignDefine.
         * @memberof table
         * @classdesc Represents a TSignDefine.
         * @implements ITSignDefine
         * @constructor
         * @param {table.ITSignDefine=} [properties] Properties to set
         */
        function TSignDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TSignDefine Id.
         * @member {number} Id
         * @memberof table.TSignDefine
         * @instance
         */
        TSignDefine.prototype.Id = 0;

        /**
         * TSignDefine CostId.
         * @member {number} CostId
         * @memberof table.TSignDefine
         * @instance
         */
        TSignDefine.prototype.CostId = 0;

        /**
         * TSignDefine Num.
         * @member {number} Num
         * @memberof table.TSignDefine
         * @instance
         */
        TSignDefine.prototype.Num = 0;

        /**
         * Creates a new TSignDefine instance using the specified properties.
         * @function create
         * @memberof table.TSignDefine
         * @static
         * @param {table.ITSignDefine=} [properties] Properties to set
         * @returns {table.TSignDefine} TSignDefine instance
         */
        TSignDefine.create = function create(properties) {
            return new TSignDefine(properties);
        };

        /**
         * Encodes the specified TSignDefine message. Does not implicitly {@link table.TSignDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TSignDefine
         * @static
         * @param {table.ITSignDefine} message TSignDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSignDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.CostId != null && message.hasOwnProperty("CostId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.CostId);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Num);
            return writer;
        };

        /**
         * Encodes the specified TSignDefine message, length delimited. Does not implicitly {@link table.TSignDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TSignDefine
         * @static
         * @param {table.ITSignDefine} message TSignDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSignDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TSignDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TSignDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TSignDefine} TSignDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSignDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TSignDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.CostId = reader.int32();
                    break;
                case 3:
                    message.Num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TSignDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TSignDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TSignDefine} TSignDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSignDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TSignDefine message.
         * @function verify
         * @memberof table.TSignDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TSignDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.CostId != null && message.hasOwnProperty("CostId"))
                if (!$util.isInteger(message.CostId))
                    return "CostId: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            return null;
        };

        /**
         * Creates a TSignDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TSignDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TSignDefine} TSignDefine
         */
        TSignDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TSignDefine)
                return object;
            var message = new $root.table.TSignDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.CostId != null)
                message.CostId = object.CostId | 0;
            if (object.Num != null)
                message.Num = object.Num | 0;
            return message;
        };

        /**
         * Creates a plain object from a TSignDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TSignDefine
         * @static
         * @param {table.TSignDefine} message TSignDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TSignDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.CostId = 0;
                object.Num = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.CostId != null && message.hasOwnProperty("CostId"))
                object.CostId = message.CostId;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            return object;
        };

        /**
         * Converts this TSignDefine to JSON.
         * @function toJSON
         * @memberof table.TSignDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TSignDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TSignDefine;
    })();

    table.TaskBase = (function() {

        /**
         * Properties of a TaskBase.
         * @memberof table
         * @interface ITaskBase
         * @property {Array.<table.ITTaskDefine>|null} [TTask] TaskBase TTask
         */

        /**
         * Constructs a new TaskBase.
         * @memberof table
         * @classdesc Represents a TaskBase.
         * @implements ITaskBase
         * @constructor
         * @param {table.ITaskBase=} [properties] Properties to set
         */
        function TaskBase(properties) {
            this.TTask = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaskBase TTask.
         * @member {Array.<table.ITTaskDefine>} TTask
         * @memberof table.TaskBase
         * @instance
         */
        TaskBase.prototype.TTask = $util.emptyArray;

        /**
         * Creates a new TaskBase instance using the specified properties.
         * @function create
         * @memberof table.TaskBase
         * @static
         * @param {table.ITaskBase=} [properties] Properties to set
         * @returns {table.TaskBase} TaskBase instance
         */
        TaskBase.create = function create(properties) {
            return new TaskBase(properties);
        };

        /**
         * Encodes the specified TaskBase message. Does not implicitly {@link table.TaskBase.verify|verify} messages.
         * @function encode
         * @memberof table.TaskBase
         * @static
         * @param {table.ITaskBase} message TaskBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TTask != null && message.TTask.length)
                for (var i = 0; i < message.TTask.length; ++i)
                    $root.table.TTaskDefine.encode(message.TTask[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TaskBase message, length delimited. Does not implicitly {@link table.TaskBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TaskBase
         * @static
         * @param {table.ITaskBase} message TaskBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaskBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TaskBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TaskBase} TaskBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TaskBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TTask && message.TTask.length))
                        message.TTask = [];
                    message.TTask.push($root.table.TTaskDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaskBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TaskBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TaskBase} TaskBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaskBase message.
         * @function verify
         * @memberof table.TaskBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaskBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TTask != null && message.hasOwnProperty("TTask")) {
                if (!Array.isArray(message.TTask))
                    return "TTask: array expected";
                for (var i = 0; i < message.TTask.length; ++i) {
                    var error = $root.table.TTaskDefine.verify(message.TTask[i]);
                    if (error)
                        return "TTask." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TaskBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TaskBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TaskBase} TaskBase
         */
        TaskBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TaskBase)
                return object;
            var message = new $root.table.TaskBase();
            if (object.TTask) {
                if (!Array.isArray(object.TTask))
                    throw TypeError(".table.TaskBase.TTask: array expected");
                message.TTask = [];
                for (var i = 0; i < object.TTask.length; ++i) {
                    if (typeof object.TTask[i] !== "object")
                        throw TypeError(".table.TaskBase.TTask: object expected");
                    message.TTask[i] = $root.table.TTaskDefine.fromObject(object.TTask[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TaskBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TaskBase
         * @static
         * @param {table.TaskBase} message TaskBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaskBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TTask = [];
            if (message.TTask && message.TTask.length) {
                object.TTask = [];
                for (var j = 0; j < message.TTask.length; ++j)
                    object.TTask[j] = $root.table.TTaskDefine.toObject(message.TTask[j], options);
            }
            return object;
        };

        /**
         * Converts this TaskBase to JSON.
         * @function toJSON
         * @memberof table.TaskBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaskBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaskBase;
    })();

    table.TTaskDefine = (function() {

        /**
         * Properties of a TTaskDefine.
         * @memberof table
         * @interface ITTaskDefine
         * @property {number|null} [Id] TTaskDefine Id
         * @property {string|null} [Desc] TTaskDefine Desc
         * @property {number|null} [Count] TTaskDefine Count
         * @property {string|null} [Reward] TTaskDefine Reward
         */

        /**
         * Constructs a new TTaskDefine.
         * @memberof table
         * @classdesc Represents a TTaskDefine.
         * @implements ITTaskDefine
         * @constructor
         * @param {table.ITTaskDefine=} [properties] Properties to set
         */
        function TTaskDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TTaskDefine Id.
         * @member {number} Id
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Id = 0;

        /**
         * TTaskDefine Desc.
         * @member {string} Desc
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Desc = "";

        /**
         * TTaskDefine Count.
         * @member {number} Count
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Count = 0;

        /**
         * TTaskDefine Reward.
         * @member {string} Reward
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Reward = "";

        /**
         * Creates a new TTaskDefine instance using the specified properties.
         * @function create
         * @memberof table.TTaskDefine
         * @static
         * @param {table.ITTaskDefine=} [properties] Properties to set
         * @returns {table.TTaskDefine} TTaskDefine instance
         */
        TTaskDefine.create = function create(properties) {
            return new TTaskDefine(properties);
        };

        /**
         * Encodes the specified TTaskDefine message. Does not implicitly {@link table.TTaskDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TTaskDefine
         * @static
         * @param {table.ITTaskDefine} message TTaskDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TTaskDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Desc);
            if (message.Count != null && message.hasOwnProperty("Count"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Count);
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.Reward);
            return writer;
        };

        /**
         * Encodes the specified TTaskDefine message, length delimited. Does not implicitly {@link table.TTaskDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TTaskDefine
         * @static
         * @param {table.ITTaskDefine} message TTaskDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TTaskDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TTaskDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TTaskDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TTaskDefine} TTaskDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TTaskDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TTaskDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Desc = reader.string();
                    break;
                case 3:
                    message.Count = reader.int32();
                    break;
                case 4:
                    message.Reward = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TTaskDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TTaskDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TTaskDefine} TTaskDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TTaskDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TTaskDefine message.
         * @function verify
         * @memberof table.TTaskDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TTaskDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.Count != null && message.hasOwnProperty("Count"))
                if (!$util.isInteger(message.Count))
                    return "Count: integer expected";
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                if (!$util.isString(message.Reward))
                    return "Reward: string expected";
            return null;
        };

        /**
         * Creates a TTaskDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TTaskDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TTaskDefine} TTaskDefine
         */
        TTaskDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TTaskDefine)
                return object;
            var message = new $root.table.TTaskDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.Count != null)
                message.Count = object.Count | 0;
            if (object.Reward != null)
                message.Reward = String(object.Reward);
            return message;
        };

        /**
         * Creates a plain object from a TTaskDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TTaskDefine
         * @static
         * @param {table.TTaskDefine} message TTaskDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TTaskDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Desc = "";
                object.Count = 0;
                object.Reward = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.Count != null && message.hasOwnProperty("Count"))
                object.Count = message.Count;
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                object.Reward = message.Reward;
            return object;
        };

        /**
         * Converts this TTaskDefine to JSON.
         * @function toJSON
         * @memberof table.TTaskDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TTaskDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TTaskDefine;
    })();

    table.TexasRoomBase = (function() {

        /**
         * Properties of a TexasRoomBase.
         * @memberof table
         * @interface ITexasRoomBase
         * @property {Array.<table.ITexasRoomDefine>|null} [TexasRoom] TexasRoomBase TexasRoom
         */

        /**
         * Constructs a new TexasRoomBase.
         * @memberof table
         * @classdesc Represents a TexasRoomBase.
         * @implements ITexasRoomBase
         * @constructor
         * @param {table.ITexasRoomBase=} [properties] Properties to set
         */
        function TexasRoomBase(properties) {
            this.TexasRoom = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TexasRoomBase TexasRoom.
         * @member {Array.<table.ITexasRoomDefine>} TexasRoom
         * @memberof table.TexasRoomBase
         * @instance
         */
        TexasRoomBase.prototype.TexasRoom = $util.emptyArray;

        /**
         * Creates a new TexasRoomBase instance using the specified properties.
         * @function create
         * @memberof table.TexasRoomBase
         * @static
         * @param {table.ITexasRoomBase=} [properties] Properties to set
         * @returns {table.TexasRoomBase} TexasRoomBase instance
         */
        TexasRoomBase.create = function create(properties) {
            return new TexasRoomBase(properties);
        };

        /**
         * Encodes the specified TexasRoomBase message. Does not implicitly {@link table.TexasRoomBase.verify|verify} messages.
         * @function encode
         * @memberof table.TexasRoomBase
         * @static
         * @param {table.ITexasRoomBase} message TexasRoomBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasRoomBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TexasRoom != null && message.TexasRoom.length)
                for (var i = 0; i < message.TexasRoom.length; ++i)
                    $root.table.TexasRoomDefine.encode(message.TexasRoom[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TexasRoomBase message, length delimited. Does not implicitly {@link table.TexasRoomBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TexasRoomBase
         * @static
         * @param {table.ITexasRoomBase} message TexasRoomBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasRoomBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TexasRoomBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TexasRoomBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TexasRoomBase} TexasRoomBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasRoomBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TexasRoomBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TexasRoom && message.TexasRoom.length))
                        message.TexasRoom = [];
                    message.TexasRoom.push($root.table.TexasRoomDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TexasRoomBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TexasRoomBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TexasRoomBase} TexasRoomBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasRoomBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TexasRoomBase message.
         * @function verify
         * @memberof table.TexasRoomBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TexasRoomBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TexasRoom != null && message.hasOwnProperty("TexasRoom")) {
                if (!Array.isArray(message.TexasRoom))
                    return "TexasRoom: array expected";
                for (var i = 0; i < message.TexasRoom.length; ++i) {
                    var error = $root.table.TexasRoomDefine.verify(message.TexasRoom[i]);
                    if (error)
                        return "TexasRoom." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TexasRoomBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TexasRoomBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TexasRoomBase} TexasRoomBase
         */
        TexasRoomBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TexasRoomBase)
                return object;
            var message = new $root.table.TexasRoomBase();
            if (object.TexasRoom) {
                if (!Array.isArray(object.TexasRoom))
                    throw TypeError(".table.TexasRoomBase.TexasRoom: array expected");
                message.TexasRoom = [];
                for (var i = 0; i < object.TexasRoom.length; ++i) {
                    if (typeof object.TexasRoom[i] !== "object")
                        throw TypeError(".table.TexasRoomBase.TexasRoom: object expected");
                    message.TexasRoom[i] = $root.table.TexasRoomDefine.fromObject(object.TexasRoom[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TexasRoomBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TexasRoomBase
         * @static
         * @param {table.TexasRoomBase} message TexasRoomBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TexasRoomBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TexasRoom = [];
            if (message.TexasRoom && message.TexasRoom.length) {
                object.TexasRoom = [];
                for (var j = 0; j < message.TexasRoom.length; ++j)
                    object.TexasRoom[j] = $root.table.TexasRoomDefine.toObject(message.TexasRoom[j], options);
            }
            return object;
        };

        /**
         * Converts this TexasRoomBase to JSON.
         * @function toJSON
         * @memberof table.TexasRoomBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TexasRoomBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TexasRoomBase;
    })();

    table.TexasRoomDefine = (function() {

        /**
         * Properties of a TexasRoomDefine.
         * @memberof table
         * @interface ITexasRoomDefine
         * @property {number|null} [Id] TexasRoomDefine Id
         * @property {string|null} [Desc] TexasRoomDefine Desc
         * @property {number|null} [Type] TexasRoomDefine Type
         * @property {number|null} [SBlind] TexasRoomDefine SBlind
         * @property {number|null} [BBlind] TexasRoomDefine BBlind
         * @property {number|null} [SBuyin] TexasRoomDefine SBuyin
         * @property {number|null} [BBuyin] TexasRoomDefine BBuyin
         * @property {number|null} [Tax] TexasRoomDefine Tax
         * @property {number|null} [Seat] TexasRoomDefine Seat
         * @property {number|null} [Pattern] TexasRoomDefine Pattern
         * @property {number|null} [Cd] TexasRoomDefine Cd
         * @property {number|null} [ClientCd] TexasRoomDefine ClientCd
         * @property {number|null} [WaitingTime] TexasRoomDefine WaitingTime
         */

        /**
         * Constructs a new TexasRoomDefine.
         * @memberof table
         * @classdesc Represents a TexasRoomDefine.
         * @implements ITexasRoomDefine
         * @constructor
         * @param {table.ITexasRoomDefine=} [properties] Properties to set
         */
        function TexasRoomDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TexasRoomDefine Id.
         * @member {number} Id
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Id = 0;

        /**
         * TexasRoomDefine Desc.
         * @member {string} Desc
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Desc = "";

        /**
         * TexasRoomDefine Type.
         * @member {number} Type
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Type = 0;

        /**
         * TexasRoomDefine SBlind.
         * @member {number} SBlind
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.SBlind = 0;

        /**
         * TexasRoomDefine BBlind.
         * @member {number} BBlind
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.BBlind = 0;

        /**
         * TexasRoomDefine SBuyin.
         * @member {number} SBuyin
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.SBuyin = 0;

        /**
         * TexasRoomDefine BBuyin.
         * @member {number} BBuyin
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.BBuyin = 0;

        /**
         * TexasRoomDefine Tax.
         * @member {number} Tax
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Tax = 0;

        /**
         * TexasRoomDefine Seat.
         * @member {number} Seat
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Seat = 0;

        /**
         * TexasRoomDefine Pattern.
         * @member {number} Pattern
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Pattern = 0;

        /**
         * TexasRoomDefine Cd.
         * @member {number} Cd
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.Cd = 0;

        /**
         * TexasRoomDefine ClientCd.
         * @member {number} ClientCd
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.ClientCd = 0;

        /**
         * TexasRoomDefine WaitingTime.
         * @member {number} WaitingTime
         * @memberof table.TexasRoomDefine
         * @instance
         */
        TexasRoomDefine.prototype.WaitingTime = 0;

        /**
         * Creates a new TexasRoomDefine instance using the specified properties.
         * @function create
         * @memberof table.TexasRoomDefine
         * @static
         * @param {table.ITexasRoomDefine=} [properties] Properties to set
         * @returns {table.TexasRoomDefine} TexasRoomDefine instance
         */
        TexasRoomDefine.create = function create(properties) {
            return new TexasRoomDefine(properties);
        };

        /**
         * Encodes the specified TexasRoomDefine message. Does not implicitly {@link table.TexasRoomDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TexasRoomDefine
         * @static
         * @param {table.ITexasRoomDefine} message TexasRoomDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasRoomDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Desc);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Type);
            if (message.SBlind != null && message.hasOwnProperty("SBlind"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.SBlind);
            if (message.BBlind != null && message.hasOwnProperty("BBlind"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.BBlind);
            if (message.SBuyin != null && message.hasOwnProperty("SBuyin"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.SBuyin);
            if (message.BBuyin != null && message.hasOwnProperty("BBuyin"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.BBuyin);
            if (message.Tax != null && message.hasOwnProperty("Tax"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Tax);
            if (message.Seat != null && message.hasOwnProperty("Seat"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.Seat);
            if (message.Pattern != null && message.hasOwnProperty("Pattern"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.Pattern);
            if (message.Cd != null && message.hasOwnProperty("Cd"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.Cd);
            if (message.ClientCd != null && message.hasOwnProperty("ClientCd"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.ClientCd);
            if (message.WaitingTime != null && message.hasOwnProperty("WaitingTime"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.WaitingTime);
            return writer;
        };

        /**
         * Encodes the specified TexasRoomDefine message, length delimited. Does not implicitly {@link table.TexasRoomDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TexasRoomDefine
         * @static
         * @param {table.ITexasRoomDefine} message TexasRoomDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TexasRoomDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TexasRoomDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TexasRoomDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TexasRoomDefine} TexasRoomDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasRoomDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TexasRoomDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Desc = reader.string();
                    break;
                case 3:
                    message.Type = reader.int32();
                    break;
                case 4:
                    message.SBlind = reader.int32();
                    break;
                case 5:
                    message.BBlind = reader.int32();
                    break;
                case 6:
                    message.SBuyin = reader.int32();
                    break;
                case 7:
                    message.BBuyin = reader.int32();
                    break;
                case 8:
                    message.Tax = reader.int32();
                    break;
                case 9:
                    message.Seat = reader.int32();
                    break;
                case 10:
                    message.Pattern = reader.int32();
                    break;
                case 11:
                    message.Cd = reader.int32();
                    break;
                case 12:
                    message.ClientCd = reader.int32();
                    break;
                case 13:
                    message.WaitingTime = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TexasRoomDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TexasRoomDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TexasRoomDefine} TexasRoomDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TexasRoomDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TexasRoomDefine message.
         * @function verify
         * @memberof table.TexasRoomDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TexasRoomDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.SBlind != null && message.hasOwnProperty("SBlind"))
                if (!$util.isInteger(message.SBlind))
                    return "SBlind: integer expected";
            if (message.BBlind != null && message.hasOwnProperty("BBlind"))
                if (!$util.isInteger(message.BBlind))
                    return "BBlind: integer expected";
            if (message.SBuyin != null && message.hasOwnProperty("SBuyin"))
                if (!$util.isInteger(message.SBuyin))
                    return "SBuyin: integer expected";
            if (message.BBuyin != null && message.hasOwnProperty("BBuyin"))
                if (!$util.isInteger(message.BBuyin))
                    return "BBuyin: integer expected";
            if (message.Tax != null && message.hasOwnProperty("Tax"))
                if (!$util.isInteger(message.Tax))
                    return "Tax: integer expected";
            if (message.Seat != null && message.hasOwnProperty("Seat"))
                if (!$util.isInteger(message.Seat))
                    return "Seat: integer expected";
            if (message.Pattern != null && message.hasOwnProperty("Pattern"))
                if (!$util.isInteger(message.Pattern))
                    return "Pattern: integer expected";
            if (message.Cd != null && message.hasOwnProperty("Cd"))
                if (!$util.isInteger(message.Cd))
                    return "Cd: integer expected";
            if (message.ClientCd != null && message.hasOwnProperty("ClientCd"))
                if (!$util.isInteger(message.ClientCd))
                    return "ClientCd: integer expected";
            if (message.WaitingTime != null && message.hasOwnProperty("WaitingTime"))
                if (!$util.isInteger(message.WaitingTime))
                    return "WaitingTime: integer expected";
            return null;
        };

        /**
         * Creates a TexasRoomDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TexasRoomDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TexasRoomDefine} TexasRoomDefine
         */
        TexasRoomDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TexasRoomDefine)
                return object;
            var message = new $root.table.TexasRoomDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.SBlind != null)
                message.SBlind = object.SBlind | 0;
            if (object.BBlind != null)
                message.BBlind = object.BBlind | 0;
            if (object.SBuyin != null)
                message.SBuyin = object.SBuyin | 0;
            if (object.BBuyin != null)
                message.BBuyin = object.BBuyin | 0;
            if (object.Tax != null)
                message.Tax = object.Tax | 0;
            if (object.Seat != null)
                message.Seat = object.Seat | 0;
            if (object.Pattern != null)
                message.Pattern = object.Pattern | 0;
            if (object.Cd != null)
                message.Cd = object.Cd | 0;
            if (object.ClientCd != null)
                message.ClientCd = object.ClientCd | 0;
            if (object.WaitingTime != null)
                message.WaitingTime = object.WaitingTime | 0;
            return message;
        };

        /**
         * Creates a plain object from a TexasRoomDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TexasRoomDefine
         * @static
         * @param {table.TexasRoomDefine} message TexasRoomDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TexasRoomDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Desc = "";
                object.Type = 0;
                object.SBlind = 0;
                object.BBlind = 0;
                object.SBuyin = 0;
                object.BBuyin = 0;
                object.Tax = 0;
                object.Seat = 0;
                object.Pattern = 0;
                object.Cd = 0;
                object.ClientCd = 0;
                object.WaitingTime = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.SBlind != null && message.hasOwnProperty("SBlind"))
                object.SBlind = message.SBlind;
            if (message.BBlind != null && message.hasOwnProperty("BBlind"))
                object.BBlind = message.BBlind;
            if (message.SBuyin != null && message.hasOwnProperty("SBuyin"))
                object.SBuyin = message.SBuyin;
            if (message.BBuyin != null && message.hasOwnProperty("BBuyin"))
                object.BBuyin = message.BBuyin;
            if (message.Tax != null && message.hasOwnProperty("Tax"))
                object.Tax = message.Tax;
            if (message.Seat != null && message.hasOwnProperty("Seat"))
                object.Seat = message.Seat;
            if (message.Pattern != null && message.hasOwnProperty("Pattern"))
                object.Pattern = message.Pattern;
            if (message.Cd != null && message.hasOwnProperty("Cd"))
                object.Cd = message.Cd;
            if (message.ClientCd != null && message.hasOwnProperty("ClientCd"))
                object.ClientCd = message.ClientCd;
            if (message.WaitingTime != null && message.hasOwnProperty("WaitingTime"))
                object.WaitingTime = message.WaitingTime;
            return object;
        };

        /**
         * Converts this TexasRoomDefine to JSON.
         * @function toJSON
         * @memberof table.TexasRoomDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TexasRoomDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TexasRoomDefine;
    })();

    return table;
})();