syntax = "proto2";
package msg;
import "define.proto";
import "serialize.proto";

// --------------------------------------------------------------------------
/// @brief GateServer <----> LoginServer
// --------------------------------------------------------------------------
// gw请求注册到login
message GW2L_ReqRegist {
    optional string account = 1;
    optional string passwd  = 2;
    optional msg.IpHost host = 3;
    optional string name = 4;
}

// 注册返回
message L2GW_RetRegist {
    optional string errocde = 1;
    optional msg.IpHost host = 2;
}

// 心跳
message GW2L_HeartBeat {
}

// 
message L2GW_HeartBeat {
}

// 玩家登陆ls成功，注册他到相应的Gw
message L2GW_ReqRegistUser {
    optional string account = 1;
    optional int64  expire  = 2;
    optional string gatehost = 3;
    optional int32  sid = 4;     // 玩家在Login的Taskid
    optional int64  timestamp = 5;
    optional string verifykey = 6;
}

// 注册返回
message GW2L_RegistUserRet {
    optional string account  = 1;
    optional string gatehost = 2;
    optional string errcode  = 3;
    optional int32  sid = 4;
    optional string verifykey = 5;
}



// --------------------------------------------------------------------------
/// @brief GateServer <----> MatchServer
// --------------------------------------------------------------------------
// gw请求注册到match
message GW2MS_ReqRegist {
    optional string account = 1;
    optional string passwd  = 2;
    optional string agentname = 3;
    optional msg.IpHost host = 4;
}

// 注册返回
message MS2GW_RetRegist {
    optional string errcode = 1;
    optional msg.IpHost host = 2;
}

// 心跳
message GW2MS_HeartBeat {
}

// 
message MS2GW_HeartBeat {
}

// 请求创建游戏房间
message GW2MS_ReqCreateRoom {
    optional uint64 userid = 1;
    optional int32 gamekind = 2;
}

// 
message MS2GW_RetCreateRoom {
    optional uint64 userid = 1;
    optional int64  roomid = 2;
    optional string errcode = 3;
    optional string roomagent = 4;
}

// 玩家登录/下线 通知match
message GW2MS_UserOnlineState {
	optional uint64 userid = 1;
	optional uint32 state = 2; //1上线 2下线
}


// 玩家创建新房屋
message GW2MS_ReqCreateHouse {
	optional uint64 userid = 1; 	//玩家id
	optional uint32 housetid = 2; 	//房屋的配置id
	optional string ownername = 3;  //玩家名字
}

//返回玩家创建新房屋
message MS2GW_AckCreateHouse {
	optional uint64 userid = 1;
	optional uint32 housetid = 2;
	optional uint32 ret = 3;
}

// 玩家请求自己的房屋信息
message GW2MS_ReqUserHouse {
	optional uint64 userid = 1;
}

//返回玩家房屋信息 
message MS2GW_AckUserHouse {
	optional uint64 userid = 1;
	repeated msg.HouseData data = 2;
}

//玩家请求升级房屋
message GW2MS_ReqHouseLevelUp {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
}
 
//返回升级房屋
message MS2GW_AckHouseLevelUp {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 ret = 3;
}

//玩家请求升级房屋的房间
message GW2MS_ReqHouseCellLevelUp {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 index = 3;
}

//返回玩家请求升级房屋的房间
message MS2GW_AckHouseCellLevelUp {
 	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 index = 3;
	optional uint32 ret = 4;
}

//玩家请求收金币
message GW2MS_ReqTakeSelfHouseGold {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 index = 3;
}

//返回玩家请求收金币
message MS2GW_AckTakeSelfHouseGoldRet {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 index = 3;
	optional uint32 gold = 4;
}

//玩家请求抢别人金币
message GW2MS_ReqTakeOtherHouseGold {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 index = 3;
	optional string username = 4;
}

//返回玩家请求抢别人金币
message MS2GW_AckTakeOtherHouseGoldRet {
	optional uint64 userid = 1;
	optional uint64 houseid = 2;
	optional uint32 index = 3;
	optional uint32 gold = 4;
}

// 玩家创建新车
message GW2MS_ReqCreateCar {
	optional uint64 userid = 1; 	                    //玩家id
	optional uint32 cartid = 2; 	                    //车辆的配置id
}

//返回玩家创建新车辆
message MS2GW_AckCreateCar {
	optional uint64 userid = 1;
	optional msg.CarData cardata = 2;                  //我的车辆信息
}
//车辆信息
message GW2MS_ReqCarInfo 
{
    optional uint64 userid = 1;
}

message MS2GW_AckCarInfo
{
    optional uint64 userid = 1;
    repeated msg.CarData cardatas = 2;                  //我的车辆信息
    repeated msg.ParkingData parkingdatas = 3;          //我的车辆停放的停车位信息
}
// 玩家创建新车位
message GW2MS_ReqCreateParking {
	optional uint64 userid = 1; 	                    //玩家id
	optional uint32 parkid = 2; 	                    //车位配置
    optional string username = 3;                       //玩家名字 
}

//返回玩家创建新车位
message MS2GW_AckCreateParking {
	optional uint64 userid = 1;
	optional msg.ParkingData parkdata = 2;               //我的车位信息
}
//我的车位信息
message GW2MS_ReqMyParkingInfo
{
    optional uint64 userid = 1;
}
//根据条件查询到的车位信息
message GW2MS_ReqParkingInfoByType
{
    optional uint64 userid = 1;
    optional int32 type = 2;                            //1 公共车位 2 普通车位
}

message MS2GW_ResParkingInfo
{
    optional uint64 userid = 1;
    repeated msg.ParkingData parkingdatas = 2;          //停车位信息
}
//停车
message GW2MS_ParkCar
{
    optional uint64 userid = 1;
    optional string username = 2;
    optional uint64 carid = 3;                          //车辆id
    optional uint64 parkingid = 4;                      //车位id
}
message MS2GW_ParkCarResult 
{
    optional uint64 userid = 1;
    optional int32 result = 2;                          //停车结果 0为成功 其他的失败，具体含义再说
}
//收回
message GW2MS_TakeBackCar 
{
    optional uint64 userid = 1;
    optional uint64 carid = 2;                          //车辆id
}
message MS2GW_TakeBackCarResult 
{
    optional uint64 userid = 1;
    optional int32 result = 2;                          //收回结果 0为成功 其他失败
    optional int32 reward = 3;                          //收回获得的奖励
}
//贴条
message GW2MS_TicketCar 
{
    optional uint64 userid = 1;
    optional uint64 parkingid = 2;                      //车位id
}
message MS2GW_TicketCarResult 
{
    optional uint64 userid = 1;
    optional int32 result = 2;                          //贴条结果 0为成功 其他失败
    optional int32 reward = 3;                          //贴条获得的奖励
}
//玩家请求获取随机的房屋列表
message GW2MS_ReqRandHouseList {
	optional uint64 userid = 1;
}

//返回随机的房屋列表
message MS2GW_AckRandHouseList {
	optional uint64 userid = 1;
	repeated msg.HouseData datas = 2;
}

//请求其他人的房屋信息
message GW2MS_ReqOtherUserHouseData {
	optional uint64 userid = 1;
	optional uint64 otherid = 2;
}

message MS2GW_AckOtherUserHouseData {
	optional uint64 userid = 1;
	optional uint64 otherid = 2;
	repeated msg.HouseData datas = 3;
}




// --------------------------------------------------------------------------
/// @brief GateServer <----> RoomServer
// --------------------------------------------------------------------------
// room 注册到GW
message RS2GW_ReqRegist {
    optional string account = 1;
    optional string passwd  = 2;
    optional string agentname = 3;
}

// 注册返回
message GW2RS_RetRegist {
    optional string errcode = 1;
    optional string agentname = 2;
}

// 通知RS玩家断开连接清理房间
message GW2RS_UserDisconnect {
    optional int64 roomid = 1;
    optional uint64 userid = 2;
}

// 通知RS玩家断开连接清理房间,返回
message RS2GW_RetUserDisconnect {
    optional int64 roomid = 1;
    optional uint64 userid = 2;
    optional string errcode = 3;
}

// Client消息转发到Room
message GW2RS_MsgTransfer {
    optional uint64 uid  = 1;
    optional string name = 2;
    optional bytes buf = 3;
}

//Room 消息转发到Client 
message RS2GW_MsgTransfer {
    optional uint64 uid  = 1;
    optional string name = 2;
    optional bytes buf = 3;
}



// --------------------------------------------------------------------------
/// @brief MatchServer <----> RoomServer
// --------------------------------------------------------------------------
// room请求注册到match
message RS2MS_ReqRegist {
    optional string account = 1;
    optional string passwd  = 2;
    optional string name = 3;
}

// 注册返回
message MS2RS_RetRegist {
    optional string errcode = 1;
}

// 心跳
message RS2MS_HeartBeat {
}

// 
message MS2RS_HeartBeat {
}

//发送Gate信息给Room
message GateSimpleInfo {
    optional string name = 1;
    optional msg.IpHost host = 2;
}
message MS2RS_GateInfo {
    repeated GateSimpleInfo gates = 1;
}

//通知Room创建游戏房间
message MS2RS_CreateRoom {
    optional uint64 userid = 1;     // 玩家id
    optional int64 roomid = 2;      // 房间id
    optional int32 gamekind = 3;    // 游戏模式
    optional int32 gridnum = 4;     // 
    optional int32 sidgate = 5;     // 
    optional bool  quotaflag = 6;   // 大奖配额
}

//创建返回
message RS2MS_RetCreateRoom {
    optional int64 roomid = 1;
    optional uint64 userid = 2;
    optional int32  sidgate = 3;
    optional string errcode = 4;
}

// 通知删除房间
message RS2MS_DeleteRoom {
    optional int64 roomid = 1;
}

// 通知更新奖池
message RS2MS_UpdateRewardPool {
    optional int32 mapid = 1;
    optional int32 cost = 2;
}



// --------------------------------------------------------------------------
/// @brief MatchServer 广播消息到其他服务器
// --------------------------------------------------------------------------
message MS2Server_BroadCast {
    optional string cmd = 1;
}



