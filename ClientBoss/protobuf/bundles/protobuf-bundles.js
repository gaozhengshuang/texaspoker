var $protobuf = window.protobuf;
$protobuf.roots.default=window;
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.msg = (function() {

    /**
     * Namespace msg.
     * @exports msg
     * @namespace
     */
    var msg = {};

    msg.AccountInfo = (function() {

        /**
         * Properties of an AccountInfo.
         * @memberof msg
         * @interface IAccountInfo
         * @property {string|null} [account] AccountInfo account
         * @property {string|null} [passwd] AccountInfo passwd
         * @property {number|Long|null} [userid] AccountInfo userid
         */

        /**
         * Constructs a new AccountInfo.
         * @memberof msg
         * @classdesc Represents an AccountInfo.
         * @implements IAccountInfo
         * @constructor
         * @param {msg.IAccountInfo=} [properties] Properties to set
         */
        function AccountInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountInfo account.
         * @member {string} account
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.account = "";

        /**
         * AccountInfo passwd.
         * @member {string} passwd
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.passwd = "";

        /**
         * AccountInfo userid.
         * @member {number|Long} userid
         * @memberof msg.AccountInfo
         * @instance
         */
        AccountInfo.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new AccountInfo instance using the specified properties.
         * @function create
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo=} [properties] Properties to set
         * @returns {msg.AccountInfo} AccountInfo instance
         */
        AccountInfo.create = function create(properties) {
            return new AccountInfo(properties);
        };

        /**
         * Encodes the specified AccountInfo message. Does not implicitly {@link msg.AccountInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo} message AccountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified AccountInfo message, length delimited. Does not implicitly {@link msg.AccountInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.IAccountInfo} message AccountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.AccountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.AccountInfo} AccountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AccountInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 5:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.AccountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.AccountInfo} AccountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountInfo message.
         * @function verify
         * @memberof msg.AccountInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates an AccountInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.AccountInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.AccountInfo} AccountInfo
         */
        AccountInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.AccountInfo)
                return object;
            var message = new $root.msg.AccountInfo();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from an AccountInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.AccountInfo
         * @static
         * @param {msg.AccountInfo} message AccountInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this AccountInfo to JSON.
         * @function toJSON
         * @memberof msg.AccountInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountInfo;
    })();

    msg.AccountGateInfo = (function() {

        /**
         * Properties of an AccountGateInfo.
         * @memberof msg
         * @interface IAccountGateInfo
         * @property {string|null} [ip] AccountGateInfo ip
         * @property {number|null} [port] AccountGateInfo port
         * @property {string|null} [verifykey] AccountGateInfo verifykey
         */

        /**
         * Constructs a new AccountGateInfo.
         * @memberof msg
         * @classdesc Represents an AccountGateInfo.
         * @implements IAccountGateInfo
         * @constructor
         * @param {msg.IAccountGateInfo=} [properties] Properties to set
         */
        function AccountGateInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountGateInfo ip.
         * @member {string} ip
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.ip = "";

        /**
         * AccountGateInfo port.
         * @member {number} port
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.port = 0;

        /**
         * AccountGateInfo verifykey.
         * @member {string} verifykey
         * @memberof msg.AccountGateInfo
         * @instance
         */
        AccountGateInfo.prototype.verifykey = "";

        /**
         * Creates a new AccountGateInfo instance using the specified properties.
         * @function create
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo=} [properties] Properties to set
         * @returns {msg.AccountGateInfo} AccountGateInfo instance
         */
        AccountGateInfo.create = function create(properties) {
            return new AccountGateInfo(properties);
        };

        /**
         * Encodes the specified AccountGateInfo message. Does not implicitly {@link msg.AccountGateInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo} message AccountGateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountGateInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            if (message.port != null && message.hasOwnProperty("port"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified AccountGateInfo message, length delimited. Does not implicitly {@link msg.AccountGateInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.IAccountGateInfo} message AccountGateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountGateInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountGateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.AccountGateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.AccountGateInfo} AccountGateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountGateInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AccountGateInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                case 2:
                    message.port = reader.int32();
                    break;
                case 3:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountGateInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.AccountGateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.AccountGateInfo} AccountGateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountGateInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountGateInfo message.
         * @function verify
         * @memberof msg.AccountGateInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountGateInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates an AccountGateInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.AccountGateInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.AccountGateInfo} AccountGateInfo
         */
        AccountGateInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.AccountGateInfo)
                return object;
            var message = new $root.msg.AccountGateInfo();
            if (object.ip != null)
                message.ip = String(object.ip);
            if (object.port != null)
                message.port = object.port | 0;
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from an AccountGateInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.AccountGateInfo
         * @static
         * @param {msg.AccountGateInfo} message AccountGateInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountGateInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = "";
                object.port = 0;
                object.verifykey = "";
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this AccountGateInfo to JSON.
         * @function toJSON
         * @memberof msg.AccountGateInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountGateInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountGateInfo;
    })();

    msg.GridItem = (function() {

        /**
         * Properties of a GridItem.
         * @memberof msg
         * @interface IGridItem
         * @property {number|null} [index] GridItem index
         * @property {number|null} [id] GridItem id
         * @property {number|null} [num] GridItem num
         * @property {number|null} [gridtype] GridItem gridtype
         * @property {boolean|null} [control] GridItem control
         */

        /**
         * Constructs a new GridItem.
         * @memberof msg
         * @classdesc Represents a GridItem.
         * @implements IGridItem
         * @constructor
         * @param {msg.IGridItem=} [properties] Properties to set
         */
        function GridItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GridItem index.
         * @member {number} index
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.index = 0;

        /**
         * GridItem id.
         * @member {number} id
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.id = 0;

        /**
         * GridItem num.
         * @member {number} num
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.num = 0;

        /**
         * GridItem gridtype.
         * @member {number} gridtype
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.gridtype = 0;

        /**
         * GridItem control.
         * @member {boolean} control
         * @memberof msg.GridItem
         * @instance
         */
        GridItem.prototype.control = false;

        /**
         * Creates a new GridItem instance using the specified properties.
         * @function create
         * @memberof msg.GridItem
         * @static
         * @param {msg.IGridItem=} [properties] Properties to set
         * @returns {msg.GridItem} GridItem instance
         */
        GridItem.create = function create(properties) {
            return new GridItem(properties);
        };

        /**
         * Encodes the specified GridItem message. Does not implicitly {@link msg.GridItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GridItem
         * @static
         * @param {msg.IGridItem} message GridItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GridItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
            if (message.gridtype != null && message.hasOwnProperty("gridtype"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gridtype);
            if (message.control != null && message.hasOwnProperty("control"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.control);
            return writer;
        };

        /**
         * Encodes the specified GridItem message, length delimited. Does not implicitly {@link msg.GridItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GridItem
         * @static
         * @param {msg.IGridItem} message GridItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GridItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GridItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GridItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GridItem} GridItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GridItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GridItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.int32();
                    break;
                case 2:
                    message.id = reader.int32();
                    break;
                case 3:
                    message.num = reader.int32();
                    break;
                case 4:
                    message.gridtype = reader.int32();
                    break;
                case 5:
                    message.control = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GridItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GridItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GridItem} GridItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GridItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GridItem message.
         * @function verify
         * @memberof msg.GridItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GridItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.gridtype != null && message.hasOwnProperty("gridtype"))
                if (!$util.isInteger(message.gridtype))
                    return "gridtype: integer expected";
            if (message.control != null && message.hasOwnProperty("control"))
                if (typeof message.control !== "boolean")
                    return "control: boolean expected";
            return null;
        };

        /**
         * Creates a GridItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GridItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GridItem} GridItem
         */
        GridItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GridItem)
                return object;
            var message = new $root.msg.GridItem();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.id != null)
                message.id = object.id | 0;
            if (object.num != null)
                message.num = object.num | 0;
            if (object.gridtype != null)
                message.gridtype = object.gridtype | 0;
            if (object.control != null)
                message.control = Boolean(object.control);
            return message;
        };

        /**
         * Creates a plain object from a GridItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GridItem
         * @static
         * @param {msg.GridItem} message GridItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GridItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.id = 0;
                object.num = 0;
                object.gridtype = 0;
                object.control = false;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.gridtype != null && message.hasOwnProperty("gridtype"))
                object.gridtype = message.gridtype;
            if (message.control != null && message.hasOwnProperty("control"))
                object.control = message.control;
            return object;
        };

        /**
         * Converts this GridItem to JSON.
         * @function toJSON
         * @memberof msg.GridItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GridItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GridItem;
    })();

    msg.BT_UploadGameUser = (function() {

        /**
         * Properties of a BT_UploadGameUser.
         * @memberof msg
         * @interface IBT_UploadGameUser
         * @property {number|Long|null} [roomid] BT_UploadGameUser roomid
         * @property {msg.ISerialize|null} [bin] BT_UploadGameUser bin
         */

        /**
         * Constructs a new BT_UploadGameUser.
         * @memberof msg
         * @classdesc Represents a BT_UploadGameUser.
         * @implements IBT_UploadGameUser
         * @constructor
         * @param {msg.IBT_UploadGameUser=} [properties] Properties to set
         */
        function BT_UploadGameUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_UploadGameUser roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_UploadGameUser
         * @instance
         */
        BT_UploadGameUser.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_UploadGameUser bin.
         * @member {msg.ISerialize|null|undefined} bin
         * @memberof msg.BT_UploadGameUser
         * @instance
         */
        BT_UploadGameUser.prototype.bin = null;

        /**
         * Creates a new BT_UploadGameUser instance using the specified properties.
         * @function create
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.IBT_UploadGameUser=} [properties] Properties to set
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser instance
         */
        BT_UploadGameUser.create = function create(properties) {
            return new BT_UploadGameUser(properties);
        };

        /**
         * Encodes the specified BT_UploadGameUser message. Does not implicitly {@link msg.BT_UploadGameUser.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.IBT_UploadGameUser} message BT_UploadGameUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UploadGameUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.bin != null && message.hasOwnProperty("bin"))
                $root.msg.Serialize.encode(message.bin, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_UploadGameUser message, length delimited. Does not implicitly {@link msg.BT_UploadGameUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.IBT_UploadGameUser} message BT_UploadGameUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UploadGameUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_UploadGameUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UploadGameUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_UploadGameUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.bin = $root.msg.Serialize.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_UploadGameUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UploadGameUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_UploadGameUser message.
         * @function verify
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_UploadGameUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.bin != null && message.hasOwnProperty("bin")) {
                var error = $root.msg.Serialize.verify(message.bin);
                if (error)
                    return "bin." + error;
            }
            return null;
        };

        /**
         * Creates a BT_UploadGameUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_UploadGameUser} BT_UploadGameUser
         */
        BT_UploadGameUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_UploadGameUser)
                return object;
            var message = new $root.msg.BT_UploadGameUser();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.bin != null) {
                if (typeof object.bin !== "object")
                    throw TypeError(".msg.BT_UploadGameUser.bin: object expected");
                message.bin = $root.msg.Serialize.fromObject(object.bin);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_UploadGameUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_UploadGameUser
         * @static
         * @param {msg.BT_UploadGameUser} message BT_UploadGameUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_UploadGameUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.bin = null;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.bin != null && message.hasOwnProperty("bin"))
                object.bin = $root.msg.Serialize.toObject(message.bin, options);
            return object;
        };

        /**
         * Converts this BT_UploadGameUser to JSON.
         * @function toJSON
         * @memberof msg.BT_UploadGameUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_UploadGameUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_UploadGameUser;
    })();

    msg.BT_ReqEnterRoom = (function() {

        /**
         * Properties of a BT_ReqEnterRoom.
         * @memberof msg
         * @interface IBT_ReqEnterRoom
         * @property {number|Long|null} [roomid] BT_ReqEnterRoom roomid
         * @property {number|Long|null} [userid] BT_ReqEnterRoom userid
         * @property {string|null} [token] BT_ReqEnterRoom token
         */

        /**
         * Constructs a new BT_ReqEnterRoom.
         * @memberof msg
         * @classdesc Represents a BT_ReqEnterRoom.
         * @implements IBT_ReqEnterRoom
         * @constructor
         * @param {msg.IBT_ReqEnterRoom=} [properties] Properties to set
         */
        function BT_ReqEnterRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqEnterRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_ReqEnterRoom userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_ReqEnterRoom token.
         * @member {string} token
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         */
        BT_ReqEnterRoom.prototype.token = "";

        /**
         * Creates a new BT_ReqEnterRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom=} [properties] Properties to set
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom instance
         */
        BT_ReqEnterRoom.create = function create(properties) {
            return new BT_ReqEnterRoom(properties);
        };

        /**
         * Encodes the specified BT_ReqEnterRoom message. Does not implicitly {@link msg.BT_ReqEnterRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom} message BT_ReqEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqEnterRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqEnterRoom message, length delimited. Does not implicitly {@link msg.BT_ReqEnterRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.IBT_ReqEnterRoom} message BT_ReqEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqEnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqEnterRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqEnterRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqEnterRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqEnterRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqEnterRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqEnterRoom message.
         * @function verify
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqEnterRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a BT_ReqEnterRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqEnterRoom} BT_ReqEnterRoom
         */
        BT_ReqEnterRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqEnterRoom)
                return object;
            var message = new $root.msg.BT_ReqEnterRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqEnterRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqEnterRoom
         * @static
         * @param {msg.BT_ReqEnterRoom} message BT_ReqEnterRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqEnterRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.token = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this BT_ReqEnterRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqEnterRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqEnterRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqEnterRoom;
    })();

    msg.BT_GameInit = (function() {

        /**
         * Properties of a BT_GameInit.
         * @memberof msg
         * @interface IBT_GameInit
         * @property {number|Long|null} [roomid] BT_GameInit roomid
         * @property {number|Long|null} [ownerid] BT_GameInit ownerid
         * @property {number|null} [gamekind] BT_GameInit gamekind
         * @property {number|null} [diamond] BT_GameInit diamond
         * @property {number|null} [gold] BT_GameInit gold
         */

        /**
         * Constructs a new BT_GameInit.
         * @memberof msg
         * @classdesc Represents a BT_GameInit.
         * @implements IBT_GameInit
         * @constructor
         * @param {msg.IBT_GameInit=} [properties] Properties to set
         */
        function BT_GameInit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameInit roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameInit ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_GameInit gamekind.
         * @member {number} gamekind
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.gamekind = 0;

        /**
         * BT_GameInit diamond.
         * @member {number} diamond
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.diamond = 0;

        /**
         * BT_GameInit gold.
         * @member {number} gold
         * @memberof msg.BT_GameInit
         * @instance
         */
        BT_GameInit.prototype.gold = 0;

        /**
         * Creates a new BT_GameInit instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit=} [properties] Properties to set
         * @returns {msg.BT_GameInit} BT_GameInit instance
         */
        BT_GameInit.create = function create(properties) {
            return new BT_GameInit(properties);
        };

        /**
         * Encodes the specified BT_GameInit message. Does not implicitly {@link msg.BT_GameInit.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit} message BT_GameInit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameInit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamekind);
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.diamond);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified BT_GameInit message, length delimited. Does not implicitly {@link msg.BT_GameInit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.IBT_GameInit} message BT_GameInit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameInit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameInit message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameInit} BT_GameInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameInit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameInit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                case 3:
                    message.gamekind = reader.int32();
                    break;
                case 4:
                    message.diamond = reader.uint32();
                    break;
                case 5:
                    message.gold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameInit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameInit} BT_GameInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameInit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameInit message.
         * @function verify
         * @memberof msg.BT_GameInit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameInit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                if (!$util.isInteger(message.diamond))
                    return "diamond: integer expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a BT_GameInit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameInit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameInit} BT_GameInit
         */
        BT_GameInit.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameInit)
                return object;
            var message = new $root.msg.BT_GameInit();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            if (object.diamond != null)
                message.diamond = object.diamond >>> 0;
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_GameInit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameInit
         * @static
         * @param {msg.BT_GameInit} message BT_GameInit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameInit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
                object.diamond = 0;
                object.gold = 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                object.diamond = message.diamond;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this BT_GameInit to JSON.
         * @function toJSON
         * @memberof msg.BT_GameInit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameInit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameInit;
    })();

    msg.BT_GameStart = (function() {

        /**
         * Properties of a BT_GameStart.
         * @memberof msg
         * @interface IBT_GameStart
         * @property {number|Long|null} [roomid] BT_GameStart roomid
         * @property {number|Long|null} [ownerid] BT_GameStart ownerid
         */

        /**
         * Constructs a new BT_GameStart.
         * @memberof msg
         * @classdesc Represents a BT_GameStart.
         * @implements IBT_GameStart
         * @constructor
         * @param {msg.IBT_GameStart=} [properties] Properties to set
         */
        function BT_GameStart(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameStart roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameStart
         * @instance
         */
        BT_GameStart.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameStart ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameStart
         * @instance
         */
        BT_GameStart.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_GameStart instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart=} [properties] Properties to set
         * @returns {msg.BT_GameStart} BT_GameStart instance
         */
        BT_GameStart.create = function create(properties) {
            return new BT_GameStart(properties);
        };

        /**
         * Encodes the specified BT_GameStart message. Does not implicitly {@link msg.BT_GameStart.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart} message BT_GameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameStart.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameStart message, length delimited. Does not implicitly {@link msg.BT_GameStart.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.IBT_GameStart} message BT_GameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameStart.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameStart message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameStart} BT_GameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameStart.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameStart();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameStart message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameStart} BT_GameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameStart.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameStart message.
         * @function verify
         * @memberof msg.BT_GameStart
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameStart.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameStart message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameStart
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameStart} BT_GameStart
         */
        BT_GameStart.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameStart)
                return object;
            var message = new $root.msg.BT_GameStart();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_GameStart message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameStart
         * @static
         * @param {msg.BT_GameStart} message BT_GameStart
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameStart.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            return object;
        };

        /**
         * Converts this BT_GameStart to JSON.
         * @function toJSON
         * @memberof msg.BT_GameStart
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameStart.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameStart;
    })();

    msg.BT_GameEnd = (function() {

        /**
         * Properties of a BT_GameEnd.
         * @memberof msg
         * @interface IBT_GameEnd
         * @property {number|Long|null} [roomid] BT_GameEnd roomid
         * @property {number|Long|null} [ownerid] BT_GameEnd ownerid
         * @property {string|null} [reason] BT_GameEnd reason
         * @property {msg.ISerialize|null} [bin] BT_GameEnd bin
         */

        /**
         * Constructs a new BT_GameEnd.
         * @memberof msg
         * @classdesc Represents a BT_GameEnd.
         * @implements IBT_GameEnd
         * @constructor
         * @param {msg.IBT_GameEnd=} [properties] Properties to set
         */
        function BT_GameEnd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameEnd roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_GameEnd ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_GameEnd reason.
         * @member {string} reason
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.reason = "";

        /**
         * BT_GameEnd bin.
         * @member {msg.ISerialize|null|undefined} bin
         * @memberof msg.BT_GameEnd
         * @instance
         */
        BT_GameEnd.prototype.bin = null;

        /**
         * Creates a new BT_GameEnd instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd=} [properties] Properties to set
         * @returns {msg.BT_GameEnd} BT_GameEnd instance
         */
        BT_GameEnd.create = function create(properties) {
            return new BT_GameEnd(properties);
        };

        /**
         * Encodes the specified BT_GameEnd message. Does not implicitly {@link msg.BT_GameEnd.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd} message BT_GameEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameEnd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ownerid);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
            if (message.bin != null && message.hasOwnProperty("bin"))
                $root.msg.Serialize.encode(message.bin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_GameEnd message, length delimited. Does not implicitly {@link msg.BT_GameEnd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.IBT_GameEnd} message BT_GameEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameEnd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameEnd message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameEnd} BT_GameEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameEnd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameEnd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.ownerid = reader.uint64();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.bin = $root.msg.Serialize.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameEnd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameEnd} BT_GameEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameEnd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameEnd message.
         * @function verify
         * @memberof msg.BT_GameEnd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameEnd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.bin != null && message.hasOwnProperty("bin")) {
                var error = $root.msg.Serialize.verify(message.bin);
                if (error)
                    return "bin." + error;
            }
            return null;
        };

        /**
         * Creates a BT_GameEnd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameEnd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameEnd} BT_GameEnd
         */
        BT_GameEnd.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameEnd)
                return object;
            var message = new $root.msg.BT_GameEnd();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.bin != null) {
                if (typeof object.bin !== "object")
                    throw TypeError(".msg.BT_GameEnd.bin: object expected");
                message.bin = $root.msg.Serialize.fromObject(object.bin);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_GameEnd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameEnd
         * @static
         * @param {msg.BT_GameEnd} message BT_GameEnd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameEnd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.reason = "";
                object.bin = null;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.bin != null && message.hasOwnProperty("bin"))
                object.bin = $root.msg.Serialize.toObject(message.bin, options);
            return object;
        };

        /**
         * Converts this BT_GameEnd to JSON.
         * @function toJSON
         * @memberof msg.BT_GameEnd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameEnd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameEnd;
    })();

    msg.BT_GameOver = (function() {

        /**
         * Properties of a BT_GameOver.
         * @memberof msg
         * @interface IBT_GameOver
         * @property {number|Long|null} [roomid] BT_GameOver roomid
         */

        /**
         * Constructs a new BT_GameOver.
         * @memberof msg
         * @classdesc Represents a BT_GameOver.
         * @implements IBT_GameOver
         * @constructor
         * @param {msg.IBT_GameOver=} [properties] Properties to set
         */
        function BT_GameOver(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameOver roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameOver
         * @instance
         */
        BT_GameOver.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_GameOver instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver=} [properties] Properties to set
         * @returns {msg.BT_GameOver} BT_GameOver instance
         */
        BT_GameOver.create = function create(properties) {
            return new BT_GameOver(properties);
        };

        /**
         * Encodes the specified BT_GameOver message. Does not implicitly {@link msg.BT_GameOver.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver} message BT_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameOver.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameOver message, length delimited. Does not implicitly {@link msg.BT_GameOver.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.IBT_GameOver} message BT_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameOver.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameOver message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameOver} BT_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameOver.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameOver();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameOver message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameOver} BT_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameOver.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameOver message.
         * @function verify
         * @memberof msg.BT_GameOver
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameOver.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameOver message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameOver
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameOver} BT_GameOver
         */
        BT_GameOver.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameOver)
                return object;
            var message = new $root.msg.BT_GameOver();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_GameOver message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameOver
         * @static
         * @param {msg.BT_GameOver} message BT_GameOver
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameOver.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this BT_GameOver to JSON.
         * @function toJSON
         * @memberof msg.BT_GameOver
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameOver.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameOver;
    })();

    msg.BT_ReqQuitGameRoom = (function() {

        /**
         * Properties of a BT_ReqQuitGameRoom.
         * @memberof msg
         * @interface IBT_ReqQuitGameRoom
         * @property {number|Long|null} [roomid] BT_ReqQuitGameRoom roomid
         * @property {number|Long|null} [userid] BT_ReqQuitGameRoom userid
         * @property {number|null} [gold] BT_ReqQuitGameRoom gold
         */

        /**
         * Constructs a new BT_ReqQuitGameRoom.
         * @memberof msg
         * @classdesc Represents a BT_ReqQuitGameRoom.
         * @implements IBT_ReqQuitGameRoom
         * @constructor
         * @param {msg.IBT_ReqQuitGameRoom=} [properties] Properties to set
         */
        function BT_ReqQuitGameRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqQuitGameRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         */
        BT_ReqQuitGameRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_ReqQuitGameRoom userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         */
        BT_ReqQuitGameRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_ReqQuitGameRoom gold.
         * @member {number} gold
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         */
        BT_ReqQuitGameRoom.prototype.gold = 0;

        /**
         * Creates a new BT_ReqQuitGameRoom instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.IBT_ReqQuitGameRoom=} [properties] Properties to set
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom instance
         */
        BT_ReqQuitGameRoom.create = function create(properties) {
            return new BT_ReqQuitGameRoom(properties);
        };

        /**
         * Encodes the specified BT_ReqQuitGameRoom message. Does not implicitly {@link msg.BT_ReqQuitGameRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.IBT_ReqQuitGameRoom} message BT_ReqQuitGameRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqQuitGameRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqQuitGameRoom message, length delimited. Does not implicitly {@link msg.BT_ReqQuitGameRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.IBT_ReqQuitGameRoom} message BT_ReqQuitGameRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqQuitGameRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqQuitGameRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqQuitGameRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqQuitGameRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.gold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqQuitGameRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqQuitGameRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqQuitGameRoom message.
         * @function verify
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqQuitGameRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a BT_ReqQuitGameRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqQuitGameRoom} BT_ReqQuitGameRoom
         */
        BT_ReqQuitGameRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqQuitGameRoom)
                return object;
            var message = new $root.msg.BT_ReqQuitGameRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqQuitGameRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqQuitGameRoom
         * @static
         * @param {msg.BT_ReqQuitGameRoom} message BT_ReqQuitGameRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqQuitGameRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.gold = 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this BT_ReqQuitGameRoom to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqQuitGameRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqQuitGameRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqQuitGameRoom;
    })();

    msg.BT_GameRoomDestroy = (function() {

        /**
         * Properties of a BT_GameRoomDestroy.
         * @memberof msg
         * @interface IBT_GameRoomDestroy
         * @property {number|Long|null} [roomid] BT_GameRoomDestroy roomid
         */

        /**
         * Constructs a new BT_GameRoomDestroy.
         * @memberof msg
         * @classdesc Represents a BT_GameRoomDestroy.
         * @implements IBT_GameRoomDestroy
         * @constructor
         * @param {msg.IBT_GameRoomDestroy=} [properties] Properties to set
         */
        function BT_GameRoomDestroy(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_GameRoomDestroy roomid.
         * @member {number|Long} roomid
         * @memberof msg.BT_GameRoomDestroy
         * @instance
         */
        BT_GameRoomDestroy.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new BT_GameRoomDestroy instance using the specified properties.
         * @function create
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {msg.IBT_GameRoomDestroy=} [properties] Properties to set
         * @returns {msg.BT_GameRoomDestroy} BT_GameRoomDestroy instance
         */
        BT_GameRoomDestroy.create = function create(properties) {
            return new BT_GameRoomDestroy(properties);
        };

        /**
         * Encodes the specified BT_GameRoomDestroy message. Does not implicitly {@link msg.BT_GameRoomDestroy.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {msg.IBT_GameRoomDestroy} message BT_GameRoomDestroy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameRoomDestroy.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified BT_GameRoomDestroy message, length delimited. Does not implicitly {@link msg.BT_GameRoomDestroy.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {msg.IBT_GameRoomDestroy} message BT_GameRoomDestroy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_GameRoomDestroy.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_GameRoomDestroy message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_GameRoomDestroy} BT_GameRoomDestroy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameRoomDestroy.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_GameRoomDestroy();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_GameRoomDestroy message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_GameRoomDestroy} BT_GameRoomDestroy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_GameRoomDestroy.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_GameRoomDestroy message.
         * @function verify
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_GameRoomDestroy.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_GameRoomDestroy message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_GameRoomDestroy} BT_GameRoomDestroy
         */
        BT_GameRoomDestroy.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_GameRoomDestroy)
                return object;
            var message = new $root.msg.BT_GameRoomDestroy();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a BT_GameRoomDestroy message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_GameRoomDestroy
         * @static
         * @param {msg.BT_GameRoomDestroy} message BT_GameRoomDestroy
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_GameRoomDestroy.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this BT_GameRoomDestroy to JSON.
         * @function toJSON
         * @memberof msg.BT_GameRoomDestroy
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_GameRoomDestroy.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_GameRoomDestroy;
    })();

    msg.BT_PickItem = (function() {

        /**
         * Properties of a BT_PickItem.
         * @memberof msg
         * @interface IBT_PickItem
         * @property {number|Long|null} [userid] BT_PickItem userid
         * @property {msg.IGridItem|null} [item] BT_PickItem item
         */

        /**
         * Constructs a new BT_PickItem.
         * @memberof msg
         * @classdesc Represents a BT_PickItem.
         * @implements IBT_PickItem
         * @constructor
         * @param {msg.IBT_PickItem=} [properties] Properties to set
         */
        function BT_PickItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_PickItem userid.
         * @member {number|Long} userid
         * @memberof msg.BT_PickItem
         * @instance
         */
        BT_PickItem.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_PickItem item.
         * @member {msg.IGridItem|null|undefined} item
         * @memberof msg.BT_PickItem
         * @instance
         */
        BT_PickItem.prototype.item = null;

        /**
         * Creates a new BT_PickItem instance using the specified properties.
         * @function create
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.IBT_PickItem=} [properties] Properties to set
         * @returns {msg.BT_PickItem} BT_PickItem instance
         */
        BT_PickItem.create = function create(properties) {
            return new BT_PickItem(properties);
        };

        /**
         * Encodes the specified BT_PickItem message. Does not implicitly {@link msg.BT_PickItem.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.IBT_PickItem} message BT_PickItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_PickItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.GridItem.encode(message.item, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BT_PickItem message, length delimited. Does not implicitly {@link msg.BT_PickItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.IBT_PickItem} message BT_PickItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_PickItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_PickItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_PickItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_PickItem} BT_PickItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_PickItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_PickItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.item = $root.msg.GridItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_PickItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_PickItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_PickItem} BT_PickItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_PickItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_PickItem message.
         * @function verify
         * @memberof msg.BT_PickItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_PickItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.GridItem.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a BT_PickItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_PickItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_PickItem} BT_PickItem
         */
        BT_PickItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_PickItem)
                return object;
            var message = new $root.msg.BT_PickItem();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.BT_PickItem.item: object expected");
                message.item = $root.msg.GridItem.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a BT_PickItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_PickItem
         * @static
         * @param {msg.BT_PickItem} message BT_PickItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_PickItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.item = null;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.GridItem.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this BT_PickItem to JSON.
         * @function toJSON
         * @memberof msg.BT_PickItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_PickItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_PickItem;
    })();

    msg.BT_ReqLaunchBullet = (function() {

        /**
         * Properties of a BT_ReqLaunchBullet.
         * @memberof msg
         * @interface IBT_ReqLaunchBullet
         * @property {number|Long|null} [userid] BT_ReqLaunchBullet userid
         */

        /**
         * Constructs a new BT_ReqLaunchBullet.
         * @memberof msg
         * @classdesc Represents a BT_ReqLaunchBullet.
         * @implements IBT_ReqLaunchBullet
         * @constructor
         * @param {msg.IBT_ReqLaunchBullet=} [properties] Properties to set
         */
        function BT_ReqLaunchBullet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqLaunchBullet userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqLaunchBullet
         * @instance
         */
        BT_ReqLaunchBullet.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_ReqLaunchBullet instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {msg.IBT_ReqLaunchBullet=} [properties] Properties to set
         * @returns {msg.BT_ReqLaunchBullet} BT_ReqLaunchBullet instance
         */
        BT_ReqLaunchBullet.create = function create(properties) {
            return new BT_ReqLaunchBullet(properties);
        };

        /**
         * Encodes the specified BT_ReqLaunchBullet message. Does not implicitly {@link msg.BT_ReqLaunchBullet.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {msg.IBT_ReqLaunchBullet} message BT_ReqLaunchBullet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqLaunchBullet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqLaunchBullet message, length delimited. Does not implicitly {@link msg.BT_ReqLaunchBullet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {msg.IBT_ReqLaunchBullet} message BT_ReqLaunchBullet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqLaunchBullet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqLaunchBullet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqLaunchBullet} BT_ReqLaunchBullet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqLaunchBullet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqLaunchBullet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqLaunchBullet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqLaunchBullet} BT_ReqLaunchBullet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqLaunchBullet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqLaunchBullet message.
         * @function verify
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqLaunchBullet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_ReqLaunchBullet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqLaunchBullet} BT_ReqLaunchBullet
         */
        BT_ReqLaunchBullet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqLaunchBullet)
                return object;
            var message = new $root.msg.BT_ReqLaunchBullet();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqLaunchBullet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqLaunchBullet
         * @static
         * @param {msg.BT_ReqLaunchBullet} message BT_ReqLaunchBullet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqLaunchBullet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this BT_ReqLaunchBullet to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqLaunchBullet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqLaunchBullet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqLaunchBullet;
    })();

    msg.BT_RetLaunchBullet = (function() {

        /**
         * Properties of a BT_RetLaunchBullet.
         * @memberof msg
         * @interface IBT_RetLaunchBullet
         * @property {number|Long|null} [bulletid] BT_RetLaunchBullet bulletid
         * @property {number|Long|null} [energy] BT_RetLaunchBullet energy
         * @property {string|null} [errmsg] BT_RetLaunchBullet errmsg
         */

        /**
         * Constructs a new BT_RetLaunchBullet.
         * @memberof msg
         * @classdesc Represents a BT_RetLaunchBullet.
         * @implements IBT_RetLaunchBullet
         * @constructor
         * @param {msg.IBT_RetLaunchBullet=} [properties] Properties to set
         */
        function BT_RetLaunchBullet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_RetLaunchBullet bulletid.
         * @member {number|Long} bulletid
         * @memberof msg.BT_RetLaunchBullet
         * @instance
         */
        BT_RetLaunchBullet.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_RetLaunchBullet energy.
         * @member {number|Long} energy
         * @memberof msg.BT_RetLaunchBullet
         * @instance
         */
        BT_RetLaunchBullet.prototype.energy = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_RetLaunchBullet errmsg.
         * @member {string} errmsg
         * @memberof msg.BT_RetLaunchBullet
         * @instance
         */
        BT_RetLaunchBullet.prototype.errmsg = "";

        /**
         * Creates a new BT_RetLaunchBullet instance using the specified properties.
         * @function create
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {msg.IBT_RetLaunchBullet=} [properties] Properties to set
         * @returns {msg.BT_RetLaunchBullet} BT_RetLaunchBullet instance
         */
        BT_RetLaunchBullet.create = function create(properties) {
            return new BT_RetLaunchBullet(properties);
        };

        /**
         * Encodes the specified BT_RetLaunchBullet message. Does not implicitly {@link msg.BT_RetLaunchBullet.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {msg.IBT_RetLaunchBullet} message BT_RetLaunchBullet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetLaunchBullet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bulletid != null && message.hasOwnProperty("bulletid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.bulletid);
            if (message.energy != null && message.hasOwnProperty("energy"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.energy);
            if (message.errmsg != null && message.hasOwnProperty("errmsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errmsg);
            return writer;
        };

        /**
         * Encodes the specified BT_RetLaunchBullet message, length delimited. Does not implicitly {@link msg.BT_RetLaunchBullet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {msg.IBT_RetLaunchBullet} message BT_RetLaunchBullet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetLaunchBullet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_RetLaunchBullet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_RetLaunchBullet} BT_RetLaunchBullet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetLaunchBullet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_RetLaunchBullet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bulletid = reader.int64();
                    break;
                case 2:
                    message.energy = reader.int64();
                    break;
                case 3:
                    message.errmsg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_RetLaunchBullet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_RetLaunchBullet} BT_RetLaunchBullet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetLaunchBullet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_RetLaunchBullet message.
         * @function verify
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_RetLaunchBullet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bulletid != null && message.hasOwnProperty("bulletid"))
                if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                    return "bulletid: integer|Long expected";
            if (message.energy != null && message.hasOwnProperty("energy"))
                if (!$util.isInteger(message.energy) && !(message.energy && $util.isInteger(message.energy.low) && $util.isInteger(message.energy.high)))
                    return "energy: integer|Long expected";
            if (message.errmsg != null && message.hasOwnProperty("errmsg"))
                if (!$util.isString(message.errmsg))
                    return "errmsg: string expected";
            return null;
        };

        /**
         * Creates a BT_RetLaunchBullet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_RetLaunchBullet} BT_RetLaunchBullet
         */
        BT_RetLaunchBullet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_RetLaunchBullet)
                return object;
            var message = new $root.msg.BT_RetLaunchBullet();
            if (object.bulletid != null)
                if ($util.Long)
                    (message.bulletid = $util.Long.fromValue(object.bulletid)).unsigned = false;
                else if (typeof object.bulletid === "string")
                    message.bulletid = parseInt(object.bulletid, 10);
                else if (typeof object.bulletid === "number")
                    message.bulletid = object.bulletid;
                else if (typeof object.bulletid === "object")
                    message.bulletid = new $util.LongBits(object.bulletid.low >>> 0, object.bulletid.high >>> 0).toNumber();
            if (object.energy != null)
                if ($util.Long)
                    (message.energy = $util.Long.fromValue(object.energy)).unsigned = false;
                else if (typeof object.energy === "string")
                    message.energy = parseInt(object.energy, 10);
                else if (typeof object.energy === "number")
                    message.energy = object.energy;
                else if (typeof object.energy === "object")
                    message.energy = new $util.LongBits(object.energy.low >>> 0, object.energy.high >>> 0).toNumber();
            if (object.errmsg != null)
                message.errmsg = String(object.errmsg);
            return message;
        };

        /**
         * Creates a plain object from a BT_RetLaunchBullet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_RetLaunchBullet
         * @static
         * @param {msg.BT_RetLaunchBullet} message BT_RetLaunchBullet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_RetLaunchBullet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bulletid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bulletid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.energy = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.energy = options.longs === String ? "0" : 0;
                object.errmsg = "";
            }
            if (message.bulletid != null && message.hasOwnProperty("bulletid"))
                if (typeof message.bulletid === "number")
                    object.bulletid = options.longs === String ? String(message.bulletid) : message.bulletid;
                else
                    object.bulletid = options.longs === String ? $util.Long.prototype.toString.call(message.bulletid) : options.longs === Number ? new $util.LongBits(message.bulletid.low >>> 0, message.bulletid.high >>> 0).toNumber() : message.bulletid;
            if (message.energy != null && message.hasOwnProperty("energy"))
                if (typeof message.energy === "number")
                    object.energy = options.longs === String ? String(message.energy) : message.energy;
                else
                    object.energy = options.longs === String ? $util.Long.prototype.toString.call(message.energy) : options.longs === Number ? new $util.LongBits(message.energy.low >>> 0, message.energy.high >>> 0).toNumber() : message.energy;
            if (message.errmsg != null && message.hasOwnProperty("errmsg"))
                object.errmsg = message.errmsg;
            return object;
        };

        /**
         * Converts this BT_RetLaunchBullet to JSON.
         * @function toJSON
         * @memberof msg.BT_RetLaunchBullet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_RetLaunchBullet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_RetLaunchBullet;
    })();

    msg.BT_StepOnBomb = (function() {

        /**
         * Properties of a BT_StepOnBomb.
         * @memberof msg
         * @interface IBT_StepOnBomb
         * @property {number|Long|null} [userid] BT_StepOnBomb userid
         */

        /**
         * Constructs a new BT_StepOnBomb.
         * @memberof msg
         * @classdesc Represents a BT_StepOnBomb.
         * @implements IBT_StepOnBomb
         * @constructor
         * @param {msg.IBT_StepOnBomb=} [properties] Properties to set
         */
        function BT_StepOnBomb(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_StepOnBomb userid.
         * @member {number|Long} userid
         * @memberof msg.BT_StepOnBomb
         * @instance
         */
        BT_StepOnBomb.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_StepOnBomb instance using the specified properties.
         * @function create
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {msg.IBT_StepOnBomb=} [properties] Properties to set
         * @returns {msg.BT_StepOnBomb} BT_StepOnBomb instance
         */
        BT_StepOnBomb.create = function create(properties) {
            return new BT_StepOnBomb(properties);
        };

        /**
         * Encodes the specified BT_StepOnBomb message. Does not implicitly {@link msg.BT_StepOnBomb.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {msg.IBT_StepOnBomb} message BT_StepOnBomb message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_StepOnBomb.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified BT_StepOnBomb message, length delimited. Does not implicitly {@link msg.BT_StepOnBomb.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {msg.IBT_StepOnBomb} message BT_StepOnBomb message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_StepOnBomb.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_StepOnBomb message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_StepOnBomb} BT_StepOnBomb
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_StepOnBomb.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_StepOnBomb();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_StepOnBomb message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_StepOnBomb} BT_StepOnBomb
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_StepOnBomb.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_StepOnBomb message.
         * @function verify
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_StepOnBomb.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_StepOnBomb message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_StepOnBomb} BT_StepOnBomb
         */
        BT_StepOnBomb.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_StepOnBomb)
                return object;
            var message = new $root.msg.BT_StepOnBomb();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_StepOnBomb message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_StepOnBomb
         * @static
         * @param {msg.BT_StepOnBomb} message BT_StepOnBomb
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_StepOnBomb.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this BT_StepOnBomb to JSON.
         * @function toJSON
         * @memberof msg.BT_StepOnBomb
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_StepOnBomb.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_StepOnBomb;
    })();

    msg.BT_RetStepOnBomb = (function() {

        /**
         * Properties of a BT_RetStepOnBomb.
         * @memberof msg
         * @interface IBT_RetStepOnBomb
         */

        /**
         * Constructs a new BT_RetStepOnBomb.
         * @memberof msg
         * @classdesc Represents a BT_RetStepOnBomb.
         * @implements IBT_RetStepOnBomb
         * @constructor
         * @param {msg.IBT_RetStepOnBomb=} [properties] Properties to set
         */
        function BT_RetStepOnBomb(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new BT_RetStepOnBomb instance using the specified properties.
         * @function create
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {msg.IBT_RetStepOnBomb=} [properties] Properties to set
         * @returns {msg.BT_RetStepOnBomb} BT_RetStepOnBomb instance
         */
        BT_RetStepOnBomb.create = function create(properties) {
            return new BT_RetStepOnBomb(properties);
        };

        /**
         * Encodes the specified BT_RetStepOnBomb message. Does not implicitly {@link msg.BT_RetStepOnBomb.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {msg.IBT_RetStepOnBomb} message BT_RetStepOnBomb message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetStepOnBomb.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified BT_RetStepOnBomb message, length delimited. Does not implicitly {@link msg.BT_RetStepOnBomb.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {msg.IBT_RetStepOnBomb} message BT_RetStepOnBomb message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetStepOnBomb.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_RetStepOnBomb message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_RetStepOnBomb} BT_RetStepOnBomb
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetStepOnBomb.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_RetStepOnBomb();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_RetStepOnBomb message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_RetStepOnBomb} BT_RetStepOnBomb
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetStepOnBomb.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_RetStepOnBomb message.
         * @function verify
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_RetStepOnBomb.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a BT_RetStepOnBomb message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_RetStepOnBomb} BT_RetStepOnBomb
         */
        BT_RetStepOnBomb.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_RetStepOnBomb)
                return object;
            return new $root.msg.BT_RetStepOnBomb();
        };

        /**
         * Creates a plain object from a BT_RetStepOnBomb message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_RetStepOnBomb
         * @static
         * @param {msg.BT_RetStepOnBomb} message BT_RetStepOnBomb
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_RetStepOnBomb.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this BT_RetStepOnBomb to JSON.
         * @function toJSON
         * @memberof msg.BT_RetStepOnBomb
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_RetStepOnBomb.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_RetStepOnBomb;
    })();

    msg.BT_BulletEarnMoney = (function() {

        /**
         * Properties of a BT_BulletEarnMoney.
         * @memberof msg
         * @interface IBT_BulletEarnMoney
         * @property {number|Long|null} [userid] BT_BulletEarnMoney userid
         * @property {number|Long|null} [bulletid] BT_BulletEarnMoney bulletid
         * @property {number|null} [gold] BT_BulletEarnMoney gold
         */

        /**
         * Constructs a new BT_BulletEarnMoney.
         * @memberof msg
         * @classdesc Represents a BT_BulletEarnMoney.
         * @implements IBT_BulletEarnMoney
         * @constructor
         * @param {msg.IBT_BulletEarnMoney=} [properties] Properties to set
         */
        function BT_BulletEarnMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_BulletEarnMoney userid.
         * @member {number|Long} userid
         * @memberof msg.BT_BulletEarnMoney
         * @instance
         */
        BT_BulletEarnMoney.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_BulletEarnMoney bulletid.
         * @member {number|Long} bulletid
         * @memberof msg.BT_BulletEarnMoney
         * @instance
         */
        BT_BulletEarnMoney.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BT_BulletEarnMoney gold.
         * @member {number} gold
         * @memberof msg.BT_BulletEarnMoney
         * @instance
         */
        BT_BulletEarnMoney.prototype.gold = 0;

        /**
         * Creates a new BT_BulletEarnMoney instance using the specified properties.
         * @function create
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {msg.IBT_BulletEarnMoney=} [properties] Properties to set
         * @returns {msg.BT_BulletEarnMoney} BT_BulletEarnMoney instance
         */
        BT_BulletEarnMoney.create = function create(properties) {
            return new BT_BulletEarnMoney(properties);
        };

        /**
         * Encodes the specified BT_BulletEarnMoney message. Does not implicitly {@link msg.BT_BulletEarnMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {msg.IBT_BulletEarnMoney} message BT_BulletEarnMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_BulletEarnMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.bulletid != null && message.hasOwnProperty("bulletid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.bulletid);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified BT_BulletEarnMoney message, length delimited. Does not implicitly {@link msg.BT_BulletEarnMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {msg.IBT_BulletEarnMoney} message BT_BulletEarnMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_BulletEarnMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_BulletEarnMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_BulletEarnMoney} BT_BulletEarnMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_BulletEarnMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_BulletEarnMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.bulletid = reader.int64();
                    break;
                case 3:
                    message.gold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_BulletEarnMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_BulletEarnMoney} BT_BulletEarnMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_BulletEarnMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_BulletEarnMoney message.
         * @function verify
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_BulletEarnMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.bulletid != null && message.hasOwnProperty("bulletid"))
                if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                    return "bulletid: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a BT_BulletEarnMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_BulletEarnMoney} BT_BulletEarnMoney
         */
        BT_BulletEarnMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_BulletEarnMoney)
                return object;
            var message = new $root.msg.BT_BulletEarnMoney();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.bulletid != null)
                if ($util.Long)
                    (message.bulletid = $util.Long.fromValue(object.bulletid)).unsigned = false;
                else if (typeof object.bulletid === "string")
                    message.bulletid = parseInt(object.bulletid, 10);
                else if (typeof object.bulletid === "number")
                    message.bulletid = object.bulletid;
                else if (typeof object.bulletid === "object")
                    message.bulletid = new $util.LongBits(object.bulletid.low >>> 0, object.bulletid.high >>> 0).toNumber();
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_BulletEarnMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_BulletEarnMoney
         * @static
         * @param {msg.BT_BulletEarnMoney} message BT_BulletEarnMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_BulletEarnMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bulletid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bulletid = options.longs === String ? "0" : 0;
                object.gold = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.bulletid != null && message.hasOwnProperty("bulletid"))
                if (typeof message.bulletid === "number")
                    object.bulletid = options.longs === String ? String(message.bulletid) : message.bulletid;
                else
                    object.bulletid = options.longs === String ? $util.Long.prototype.toString.call(message.bulletid) : options.longs === Number ? new $util.LongBits(message.bulletid.low >>> 0, message.bulletid.high >>> 0).toNumber() : message.bulletid;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this BT_BulletEarnMoney to JSON.
         * @function toJSON
         * @memberof msg.BT_BulletEarnMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_BulletEarnMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_BulletEarnMoney;
    })();

    msg.BT_RetBulletEarnMoney = (function() {

        /**
         * Properties of a BT_RetBulletEarnMoney.
         * @memberof msg
         * @interface IBT_RetBulletEarnMoney
         */

        /**
         * Constructs a new BT_RetBulletEarnMoney.
         * @memberof msg
         * @classdesc Represents a BT_RetBulletEarnMoney.
         * @implements IBT_RetBulletEarnMoney
         * @constructor
         * @param {msg.IBT_RetBulletEarnMoney=} [properties] Properties to set
         */
        function BT_RetBulletEarnMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new BT_RetBulletEarnMoney instance using the specified properties.
         * @function create
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {msg.IBT_RetBulletEarnMoney=} [properties] Properties to set
         * @returns {msg.BT_RetBulletEarnMoney} BT_RetBulletEarnMoney instance
         */
        BT_RetBulletEarnMoney.create = function create(properties) {
            return new BT_RetBulletEarnMoney(properties);
        };

        /**
         * Encodes the specified BT_RetBulletEarnMoney message. Does not implicitly {@link msg.BT_RetBulletEarnMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {msg.IBT_RetBulletEarnMoney} message BT_RetBulletEarnMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetBulletEarnMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified BT_RetBulletEarnMoney message, length delimited. Does not implicitly {@link msg.BT_RetBulletEarnMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {msg.IBT_RetBulletEarnMoney} message BT_RetBulletEarnMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetBulletEarnMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_RetBulletEarnMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_RetBulletEarnMoney} BT_RetBulletEarnMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetBulletEarnMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_RetBulletEarnMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_RetBulletEarnMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_RetBulletEarnMoney} BT_RetBulletEarnMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetBulletEarnMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_RetBulletEarnMoney message.
         * @function verify
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_RetBulletEarnMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a BT_RetBulletEarnMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_RetBulletEarnMoney} BT_RetBulletEarnMoney
         */
        BT_RetBulletEarnMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_RetBulletEarnMoney)
                return object;
            return new $root.msg.BT_RetBulletEarnMoney();
        };

        /**
         * Creates a plain object from a BT_RetBulletEarnMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_RetBulletEarnMoney
         * @static
         * @param {msg.BT_RetBulletEarnMoney} message BT_RetBulletEarnMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_RetBulletEarnMoney.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this BT_RetBulletEarnMoney to JSON.
         * @function toJSON
         * @memberof msg.BT_RetBulletEarnMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_RetBulletEarnMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_RetBulletEarnMoney;
    })();

    msg.BT_UseUltimateSkil = (function() {

        /**
         * Properties of a BT_UseUltimateSkil.
         * @memberof msg
         * @interface IBT_UseUltimateSkil
         * @property {number|Long|null} [userid] BT_UseUltimateSkil userid
         * @property {number|null} [gold] BT_UseUltimateSkil gold
         */

        /**
         * Constructs a new BT_UseUltimateSkil.
         * @memberof msg
         * @classdesc Represents a BT_UseUltimateSkil.
         * @implements IBT_UseUltimateSkil
         * @constructor
         * @param {msg.IBT_UseUltimateSkil=} [properties] Properties to set
         */
        function BT_UseUltimateSkil(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_UseUltimateSkil userid.
         * @member {number|Long} userid
         * @memberof msg.BT_UseUltimateSkil
         * @instance
         */
        BT_UseUltimateSkil.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BT_UseUltimateSkil gold.
         * @member {number} gold
         * @memberof msg.BT_UseUltimateSkil
         * @instance
         */
        BT_UseUltimateSkil.prototype.gold = 0;

        /**
         * Creates a new BT_UseUltimateSkil instance using the specified properties.
         * @function create
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {msg.IBT_UseUltimateSkil=} [properties] Properties to set
         * @returns {msg.BT_UseUltimateSkil} BT_UseUltimateSkil instance
         */
        BT_UseUltimateSkil.create = function create(properties) {
            return new BT_UseUltimateSkil(properties);
        };

        /**
         * Encodes the specified BT_UseUltimateSkil message. Does not implicitly {@link msg.BT_UseUltimateSkil.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {msg.IBT_UseUltimateSkil} message BT_UseUltimateSkil message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UseUltimateSkil.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified BT_UseUltimateSkil message, length delimited. Does not implicitly {@link msg.BT_UseUltimateSkil.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {msg.IBT_UseUltimateSkil} message BT_UseUltimateSkil message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_UseUltimateSkil.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_UseUltimateSkil message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_UseUltimateSkil} BT_UseUltimateSkil
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UseUltimateSkil.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_UseUltimateSkil();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.gold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_UseUltimateSkil message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_UseUltimateSkil} BT_UseUltimateSkil
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_UseUltimateSkil.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_UseUltimateSkil message.
         * @function verify
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_UseUltimateSkil.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a BT_UseUltimateSkil message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_UseUltimateSkil} BT_UseUltimateSkil
         */
        BT_UseUltimateSkil.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_UseUltimateSkil)
                return object;
            var message = new $root.msg.BT_UseUltimateSkil();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BT_UseUltimateSkil message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_UseUltimateSkil
         * @static
         * @param {msg.BT_UseUltimateSkil} message BT_UseUltimateSkil
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_UseUltimateSkil.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.gold = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this BT_UseUltimateSkil to JSON.
         * @function toJSON
         * @memberof msg.BT_UseUltimateSkil
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_UseUltimateSkil.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_UseUltimateSkil;
    })();

    msg.BT_ReqCrushSuperBrick = (function() {

        /**
         * Properties of a BT_ReqCrushSuperBrick.
         * @memberof msg
         * @interface IBT_ReqCrushSuperBrick
         * @property {number|Long|null} [userid] BT_ReqCrushSuperBrick userid
         */

        /**
         * Constructs a new BT_ReqCrushSuperBrick.
         * @memberof msg
         * @classdesc Represents a BT_ReqCrushSuperBrick.
         * @implements IBT_ReqCrushSuperBrick
         * @constructor
         * @param {msg.IBT_ReqCrushSuperBrick=} [properties] Properties to set
         */
        function BT_ReqCrushSuperBrick(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_ReqCrushSuperBrick userid.
         * @member {number|Long} userid
         * @memberof msg.BT_ReqCrushSuperBrick
         * @instance
         */
        BT_ReqCrushSuperBrick.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new BT_ReqCrushSuperBrick instance using the specified properties.
         * @function create
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {msg.IBT_ReqCrushSuperBrick=} [properties] Properties to set
         * @returns {msg.BT_ReqCrushSuperBrick} BT_ReqCrushSuperBrick instance
         */
        BT_ReqCrushSuperBrick.create = function create(properties) {
            return new BT_ReqCrushSuperBrick(properties);
        };

        /**
         * Encodes the specified BT_ReqCrushSuperBrick message. Does not implicitly {@link msg.BT_ReqCrushSuperBrick.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {msg.IBT_ReqCrushSuperBrick} message BT_ReqCrushSuperBrick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqCrushSuperBrick.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified BT_ReqCrushSuperBrick message, length delimited. Does not implicitly {@link msg.BT_ReqCrushSuperBrick.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {msg.IBT_ReqCrushSuperBrick} message BT_ReqCrushSuperBrick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_ReqCrushSuperBrick.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_ReqCrushSuperBrick message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_ReqCrushSuperBrick} BT_ReqCrushSuperBrick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqCrushSuperBrick.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_ReqCrushSuperBrick();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_ReqCrushSuperBrick message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_ReqCrushSuperBrick} BT_ReqCrushSuperBrick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_ReqCrushSuperBrick.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_ReqCrushSuperBrick message.
         * @function verify
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_ReqCrushSuperBrick.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a BT_ReqCrushSuperBrick message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_ReqCrushSuperBrick} BT_ReqCrushSuperBrick
         */
        BT_ReqCrushSuperBrick.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_ReqCrushSuperBrick)
                return object;
            var message = new $root.msg.BT_ReqCrushSuperBrick();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a BT_ReqCrushSuperBrick message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_ReqCrushSuperBrick
         * @static
         * @param {msg.BT_ReqCrushSuperBrick} message BT_ReqCrushSuperBrick
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_ReqCrushSuperBrick.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this BT_ReqCrushSuperBrick to JSON.
         * @function toJSON
         * @memberof msg.BT_ReqCrushSuperBrick
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_ReqCrushSuperBrick.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_ReqCrushSuperBrick;
    })();

    msg.BT_RetCrushSuperBrick = (function() {

        /**
         * Properties of a BT_RetCrushSuperBrick.
         * @memberof msg
         * @interface IBT_RetCrushSuperBrick
         * @property {string|null} [errmsg] BT_RetCrushSuperBrick errmsg
         */

        /**
         * Constructs a new BT_RetCrushSuperBrick.
         * @memberof msg
         * @classdesc Represents a BT_RetCrushSuperBrick.
         * @implements IBT_RetCrushSuperBrick
         * @constructor
         * @param {msg.IBT_RetCrushSuperBrick=} [properties] Properties to set
         */
        function BT_RetCrushSuperBrick(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BT_RetCrushSuperBrick errmsg.
         * @member {string} errmsg
         * @memberof msg.BT_RetCrushSuperBrick
         * @instance
         */
        BT_RetCrushSuperBrick.prototype.errmsg = "";

        /**
         * Creates a new BT_RetCrushSuperBrick instance using the specified properties.
         * @function create
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {msg.IBT_RetCrushSuperBrick=} [properties] Properties to set
         * @returns {msg.BT_RetCrushSuperBrick} BT_RetCrushSuperBrick instance
         */
        BT_RetCrushSuperBrick.create = function create(properties) {
            return new BT_RetCrushSuperBrick(properties);
        };

        /**
         * Encodes the specified BT_RetCrushSuperBrick message. Does not implicitly {@link msg.BT_RetCrushSuperBrick.verify|verify} messages.
         * @function encode
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {msg.IBT_RetCrushSuperBrick} message BT_RetCrushSuperBrick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetCrushSuperBrick.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errmsg != null && message.hasOwnProperty("errmsg"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errmsg);
            return writer;
        };

        /**
         * Encodes the specified BT_RetCrushSuperBrick message, length delimited. Does not implicitly {@link msg.BT_RetCrushSuperBrick.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {msg.IBT_RetCrushSuperBrick} message BT_RetCrushSuperBrick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BT_RetCrushSuperBrick.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BT_RetCrushSuperBrick message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BT_RetCrushSuperBrick} BT_RetCrushSuperBrick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetCrushSuperBrick.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BT_RetCrushSuperBrick();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errmsg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BT_RetCrushSuperBrick message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BT_RetCrushSuperBrick} BT_RetCrushSuperBrick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BT_RetCrushSuperBrick.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BT_RetCrushSuperBrick message.
         * @function verify
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BT_RetCrushSuperBrick.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errmsg != null && message.hasOwnProperty("errmsg"))
                if (!$util.isString(message.errmsg))
                    return "errmsg: string expected";
            return null;
        };

        /**
         * Creates a BT_RetCrushSuperBrick message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BT_RetCrushSuperBrick} BT_RetCrushSuperBrick
         */
        BT_RetCrushSuperBrick.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BT_RetCrushSuperBrick)
                return object;
            var message = new $root.msg.BT_RetCrushSuperBrick();
            if (object.errmsg != null)
                message.errmsg = String(object.errmsg);
            return message;
        };

        /**
         * Creates a plain object from a BT_RetCrushSuperBrick message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BT_RetCrushSuperBrick
         * @static
         * @param {msg.BT_RetCrushSuperBrick} message BT_RetCrushSuperBrick
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BT_RetCrushSuperBrick.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errmsg = "";
            if (message.errmsg != null && message.hasOwnProperty("errmsg"))
                object.errmsg = message.errmsg;
            return object;
        };

        /**
         * Converts this BT_RetCrushSuperBrick to JSON.
         * @function toJSON
         * @memberof msg.BT_RetCrushSuperBrick
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BT_RetCrushSuperBrick.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BT_RetCrushSuperBrick;
    })();

    msg.EntityBase = (function() {

        /**
         * Properties of an EntityBase.
         * @memberof msg
         * @interface IEntityBase
         * @property {number|Long|null} [id] EntityBase id
         * @property {string|null} [name] EntityBase name
         * @property {string|null} [face] EntityBase face
         * @property {number|null} [sex] EntityBase sex
         * @property {string|null} [account] EntityBase account
         */

        /**
         * Constructs a new EntityBase.
         * @memberof msg
         * @classdesc Represents an EntityBase.
         * @implements IEntityBase
         * @constructor
         * @param {msg.IEntityBase=} [properties] Properties to set
         */
        function EntityBase(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EntityBase id.
         * @member {number|Long} id
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * EntityBase name.
         * @member {string} name
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.name = "";

        /**
         * EntityBase face.
         * @member {string} face
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.face = "";

        /**
         * EntityBase sex.
         * @member {number} sex
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.sex = 0;

        /**
         * EntityBase account.
         * @member {string} account
         * @memberof msg.EntityBase
         * @instance
         */
        EntityBase.prototype.account = "";

        /**
         * Creates a new EntityBase instance using the specified properties.
         * @function create
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase=} [properties] Properties to set
         * @returns {msg.EntityBase} EntityBase instance
         */
        EntityBase.create = function create(properties) {
            return new EntityBase(properties);
        };

        /**
         * Encodes the specified EntityBase message. Does not implicitly {@link msg.EntityBase.verify|verify} messages.
         * @function encode
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase} message EntityBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.face);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sex);
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.account);
            return writer;
        };

        /**
         * Encodes the specified EntityBase message, length delimited. Does not implicitly {@link msg.EntityBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.EntityBase
         * @static
         * @param {msg.IEntityBase} message EntityBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntityBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EntityBase message from the specified reader or buffer.
         * @function decode
         * @memberof msg.EntityBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.EntityBase} EntityBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.EntityBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.face = reader.string();
                    break;
                case 4:
                    message.sex = reader.int32();
                    break;
                case 5:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EntityBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.EntityBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.EntityBase} EntityBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntityBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EntityBase message.
         * @function verify
         * @memberof msg.EntityBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EntityBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            return null;
        };

        /**
         * Creates an EntityBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.EntityBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.EntityBase} EntityBase
         */
        EntityBase.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.EntityBase)
                return object;
            var message = new $root.msg.EntityBase();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.face != null)
                message.face = String(object.face);
            if (object.sex != null)
                message.sex = object.sex | 0;
            if (object.account != null)
                message.account = String(object.account);
            return message;
        };

        /**
         * Creates a plain object from an EntityBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.EntityBase
         * @static
         * @param {msg.EntityBase} message EntityBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EntityBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.name = "";
                object.face = "";
                object.sex = 0;
                object.account = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            return object;
        };

        /**
         * Converts this EntityBase to JSON.
         * @function toJSON
         * @memberof msg.EntityBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EntityBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EntityBase;
    })();

    msg.SimpleCounter = (function() {

        /**
         * Properties of a SimpleCounter.
         * @memberof msg
         * @interface ISimpleCounter
         * @property {number|null} [freestep] SimpleCounter freestep
         * @property {number|Long|null} [givestep] SimpleCounter givestep
         * @property {number|Long|null} [moneyCost] SimpleCounter moneyCost
         * @property {number|Long|null} [moneyCostReset] SimpleCounter moneyCostReset
         */

        /**
         * Constructs a new SimpleCounter.
         * @memberof msg
         * @classdesc Represents a SimpleCounter.
         * @implements ISimpleCounter
         * @constructor
         * @param {msg.ISimpleCounter=} [properties] Properties to set
         */
        function SimpleCounter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SimpleCounter freestep.
         * @member {number} freestep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.freestep = 0;

        /**
         * SimpleCounter givestep.
         * @member {number|Long} givestep
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.givestep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter moneyCost.
         * @member {number|Long} moneyCost
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.moneyCost = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SimpleCounter moneyCostReset.
         * @member {number|Long} moneyCostReset
         * @memberof msg.SimpleCounter
         * @instance
         */
        SimpleCounter.prototype.moneyCostReset = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SimpleCounter instance using the specified properties.
         * @function create
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter=} [properties] Properties to set
         * @returns {msg.SimpleCounter} SimpleCounter instance
         */
        SimpleCounter.create = function create(properties) {
            return new SimpleCounter(properties);
        };

        /**
         * Encodes the specified SimpleCounter message. Does not implicitly {@link msg.SimpleCounter.verify|verify} messages.
         * @function encode
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter} message SimpleCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCounter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.freestep);
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.givestep);
            if (message.moneyCost != null && message.hasOwnProperty("moneyCost"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.moneyCost);
            if (message.moneyCostReset != null && message.hasOwnProperty("moneyCostReset"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.moneyCostReset);
            return writer;
        };

        /**
         * Encodes the specified SimpleCounter message, length delimited. Does not implicitly {@link msg.SimpleCounter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.ISimpleCounter} message SimpleCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCounter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SimpleCounter message from the specified reader or buffer.
         * @function decode
         * @memberof msg.SimpleCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.SimpleCounter} SimpleCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCounter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.SimpleCounter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.freestep = reader.int32();
                    break;
                case 2:
                    message.givestep = reader.int64();
                    break;
                case 3:
                    message.moneyCost = reader.int64();
                    break;
                case 4:
                    message.moneyCostReset = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SimpleCounter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.SimpleCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.SimpleCounter} SimpleCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCounter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SimpleCounter message.
         * @function verify
         * @memberof msg.SimpleCounter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SimpleCounter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                if (!$util.isInteger(message.freestep))
                    return "freestep: integer expected";
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                if (!$util.isInteger(message.givestep) && !(message.givestep && $util.isInteger(message.givestep.low) && $util.isInteger(message.givestep.high)))
                    return "givestep: integer|Long expected";
            if (message.moneyCost != null && message.hasOwnProperty("moneyCost"))
                if (!$util.isInteger(message.moneyCost) && !(message.moneyCost && $util.isInteger(message.moneyCost.low) && $util.isInteger(message.moneyCost.high)))
                    return "moneyCost: integer|Long expected";
            if (message.moneyCostReset != null && message.hasOwnProperty("moneyCostReset"))
                if (!$util.isInteger(message.moneyCostReset) && !(message.moneyCostReset && $util.isInteger(message.moneyCostReset.low) && $util.isInteger(message.moneyCostReset.high)))
                    return "moneyCostReset: integer|Long expected";
            return null;
        };

        /**
         * Creates a SimpleCounter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.SimpleCounter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.SimpleCounter} SimpleCounter
         */
        SimpleCounter.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.SimpleCounter)
                return object;
            var message = new $root.msg.SimpleCounter();
            if (object.freestep != null)
                message.freestep = object.freestep | 0;
            if (object.givestep != null)
                if ($util.Long)
                    (message.givestep = $util.Long.fromValue(object.givestep)).unsigned = false;
                else if (typeof object.givestep === "string")
                    message.givestep = parseInt(object.givestep, 10);
                else if (typeof object.givestep === "number")
                    message.givestep = object.givestep;
                else if (typeof object.givestep === "object")
                    message.givestep = new $util.LongBits(object.givestep.low >>> 0, object.givestep.high >>> 0).toNumber();
            if (object.moneyCost != null)
                if ($util.Long)
                    (message.moneyCost = $util.Long.fromValue(object.moneyCost)).unsigned = false;
                else if (typeof object.moneyCost === "string")
                    message.moneyCost = parseInt(object.moneyCost, 10);
                else if (typeof object.moneyCost === "number")
                    message.moneyCost = object.moneyCost;
                else if (typeof object.moneyCost === "object")
                    message.moneyCost = new $util.LongBits(object.moneyCost.low >>> 0, object.moneyCost.high >>> 0).toNumber();
            if (object.moneyCostReset != null)
                if ($util.Long)
                    (message.moneyCostReset = $util.Long.fromValue(object.moneyCostReset)).unsigned = false;
                else if (typeof object.moneyCostReset === "string")
                    message.moneyCostReset = parseInt(object.moneyCostReset, 10);
                else if (typeof object.moneyCostReset === "number")
                    message.moneyCostReset = object.moneyCostReset;
                else if (typeof object.moneyCostReset === "object")
                    message.moneyCostReset = new $util.LongBits(object.moneyCostReset.low >>> 0, object.moneyCostReset.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SimpleCounter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.SimpleCounter
         * @static
         * @param {msg.SimpleCounter} message SimpleCounter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SimpleCounter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.freestep = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.givestep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.givestep = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.moneyCost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.moneyCost = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.moneyCostReset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.moneyCostReset = options.longs === String ? "0" : 0;
            }
            if (message.freestep != null && message.hasOwnProperty("freestep"))
                object.freestep = message.freestep;
            if (message.givestep != null && message.hasOwnProperty("givestep"))
                if (typeof message.givestep === "number")
                    object.givestep = options.longs === String ? String(message.givestep) : message.givestep;
                else
                    object.givestep = options.longs === String ? $util.Long.prototype.toString.call(message.givestep) : options.longs === Number ? new $util.LongBits(message.givestep.low >>> 0, message.givestep.high >>> 0).toNumber() : message.givestep;
            if (message.moneyCost != null && message.hasOwnProperty("moneyCost"))
                if (typeof message.moneyCost === "number")
                    object.moneyCost = options.longs === String ? String(message.moneyCost) : message.moneyCost;
                else
                    object.moneyCost = options.longs === String ? $util.Long.prototype.toString.call(message.moneyCost) : options.longs === Number ? new $util.LongBits(message.moneyCost.low >>> 0, message.moneyCost.high >>> 0).toNumber() : message.moneyCost;
            if (message.moneyCostReset != null && message.hasOwnProperty("moneyCostReset"))
                if (typeof message.moneyCostReset === "number")
                    object.moneyCostReset = options.longs === String ? String(message.moneyCostReset) : message.moneyCostReset;
                else
                    object.moneyCostReset = options.longs === String ? $util.Long.prototype.toString.call(message.moneyCostReset) : options.longs === Number ? new $util.LongBits(message.moneyCostReset.low >>> 0, message.moneyCostReset.high >>> 0).toNumber() : message.moneyCostReset;
            return object;
        };

        /**
         * Converts this SimpleCounter to JSON.
         * @function toJSON
         * @memberof msg.SimpleCounter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SimpleCounter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SimpleCounter;
    })();

    msg.FreePresentMoney = (function() {

        /**
         * Properties of a FreePresentMoney.
         * @memberof msg
         * @interface IFreePresentMoney
         * @property {number|null} [count] FreePresentMoney count
         * @property {number|Long|null} [tmrecord] FreePresentMoney tmrecord
         */

        /**
         * Constructs a new FreePresentMoney.
         * @memberof msg
         * @classdesc Represents a FreePresentMoney.
         * @implements IFreePresentMoney
         * @constructor
         * @param {msg.IFreePresentMoney=} [properties] Properties to set
         */
        function FreePresentMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FreePresentMoney count.
         * @member {number} count
         * @memberof msg.FreePresentMoney
         * @instance
         */
        FreePresentMoney.prototype.count = 0;

        /**
         * FreePresentMoney tmrecord.
         * @member {number|Long} tmrecord
         * @memberof msg.FreePresentMoney
         * @instance
         */
        FreePresentMoney.prototype.tmrecord = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new FreePresentMoney instance using the specified properties.
         * @function create
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney=} [properties] Properties to set
         * @returns {msg.FreePresentMoney} FreePresentMoney instance
         */
        FreePresentMoney.create = function create(properties) {
            return new FreePresentMoney(properties);
        };

        /**
         * Encodes the specified FreePresentMoney message. Does not implicitly {@link msg.FreePresentMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney} message FreePresentMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FreePresentMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.count);
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tmrecord);
            return writer;
        };

        /**
         * Encodes the specified FreePresentMoney message, length delimited. Does not implicitly {@link msg.FreePresentMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.IFreePresentMoney} message FreePresentMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FreePresentMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FreePresentMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.FreePresentMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.FreePresentMoney} FreePresentMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FreePresentMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.FreePresentMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.count = reader.int32();
                    break;
                case 2:
                    message.tmrecord = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FreePresentMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.FreePresentMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.FreePresentMoney} FreePresentMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FreePresentMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FreePresentMoney message.
         * @function verify
         * @memberof msg.FreePresentMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FreePresentMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                if (!$util.isInteger(message.tmrecord) && !(message.tmrecord && $util.isInteger(message.tmrecord.low) && $util.isInteger(message.tmrecord.high)))
                    return "tmrecord: integer|Long expected";
            return null;
        };

        /**
         * Creates a FreePresentMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.FreePresentMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.FreePresentMoney} FreePresentMoney
         */
        FreePresentMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.FreePresentMoney)
                return object;
            var message = new $root.msg.FreePresentMoney();
            if (object.count != null)
                message.count = object.count | 0;
            if (object.tmrecord != null)
                if ($util.Long)
                    (message.tmrecord = $util.Long.fromValue(object.tmrecord)).unsigned = false;
                else if (typeof object.tmrecord === "string")
                    message.tmrecord = parseInt(object.tmrecord, 10);
                else if (typeof object.tmrecord === "number")
                    message.tmrecord = object.tmrecord;
                else if (typeof object.tmrecord === "object")
                    message.tmrecord = new $util.LongBits(object.tmrecord.low >>> 0, object.tmrecord.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a FreePresentMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.FreePresentMoney
         * @static
         * @param {msg.FreePresentMoney} message FreePresentMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FreePresentMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmrecord = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmrecord = options.longs === String ? "0" : 0;
            }
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.tmrecord != null && message.hasOwnProperty("tmrecord"))
                if (typeof message.tmrecord === "number")
                    object.tmrecord = options.longs === String ? String(message.tmrecord) : message.tmrecord;
                else
                    object.tmrecord = options.longs === String ? $util.Long.prototype.toString.call(message.tmrecord) : options.longs === Number ? new $util.LongBits(message.tmrecord.low >>> 0, message.tmrecord.high >>> 0).toNumber() : message.tmrecord;
            return object;
        };

        /**
         * Converts this FreePresentMoney to JSON.
         * @function toJSON
         * @memberof msg.FreePresentMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FreePresentMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FreePresentMoney;
    })();

    msg.UserWechat = (function() {

        /**
         * Properties of a UserWechat.
         * @memberof msg
         * @interface IUserWechat
         * @property {string|null} [openid] UserWechat openid
         */

        /**
         * Constructs a new UserWechat.
         * @memberof msg
         * @classdesc Represents a UserWechat.
         * @implements IUserWechat
         * @constructor
         * @param {msg.IUserWechat=} [properties] Properties to set
         */
        function UserWechat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserWechat openid.
         * @member {string} openid
         * @memberof msg.UserWechat
         * @instance
         */
        UserWechat.prototype.openid = "";

        /**
         * Creates a new UserWechat instance using the specified properties.
         * @function create
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat=} [properties] Properties to set
         * @returns {msg.UserWechat} UserWechat instance
         */
        UserWechat.create = function create(properties) {
            return new UserWechat(properties);
        };

        /**
         * Encodes the specified UserWechat message. Does not implicitly {@link msg.UserWechat.verify|verify} messages.
         * @function encode
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat} message UserWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserWechat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            return writer;
        };

        /**
         * Encodes the specified UserWechat message, length delimited. Does not implicitly {@link msg.UserWechat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserWechat
         * @static
         * @param {msg.IUserWechat} message UserWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserWechat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserWechat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserWechat} UserWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserWechat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserWechat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserWechat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserWechat} UserWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserWechat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserWechat message.
         * @function verify
         * @memberof msg.UserWechat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserWechat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            return null;
        };

        /**
         * Creates a UserWechat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserWechat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserWechat} UserWechat
         */
        UserWechat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserWechat)
                return object;
            var message = new $root.msg.UserWechat();
            if (object.openid != null)
                message.openid = String(object.openid);
            return message;
        };

        /**
         * Creates a plain object from a UserWechat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserWechat
         * @static
         * @param {msg.UserWechat} message UserWechat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserWechat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.openid = "";
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            return object;
        };

        /**
         * Converts this UserWechat to JSON.
         * @function toJSON
         * @memberof msg.UserWechat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserWechat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserWechat;
    })();

    msg.UserTask = (function() {

        /**
         * Properties of a UserTask.
         * @memberof msg
         * @interface IUserTask
         * @property {Array.<msg.ITaskData>|null} [tasks] UserTask tasks
         */

        /**
         * Constructs a new UserTask.
         * @memberof msg
         * @classdesc Represents a UserTask.
         * @implements IUserTask
         * @constructor
         * @param {msg.IUserTask=} [properties] Properties to set
         */
        function UserTask(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserTask tasks.
         * @member {Array.<msg.ITaskData>} tasks
         * @memberof msg.UserTask
         * @instance
         */
        UserTask.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new UserTask instance using the specified properties.
         * @function create
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask=} [properties] Properties to set
         * @returns {msg.UserTask} UserTask instance
         */
        UserTask.create = function create(properties) {
            return new UserTask(properties);
        };

        /**
         * Encodes the specified UserTask message. Does not implicitly {@link msg.UserTask.verify|verify} messages.
         * @function encode
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask} message UserTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.msg.TaskData.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserTask message, length delimited. Does not implicitly {@link msg.UserTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserTask
         * @static
         * @param {msg.IUserTask} message UserTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserTask message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserTask} UserTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.msg.TaskData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserTask} UserTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserTask message.
         * @function verify
         * @memberof msg.UserTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.msg.TaskData.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a UserTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserTask} UserTask
         */
        UserTask.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserTask)
                return object;
            var message = new $root.msg.UserTask();
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".msg.UserTask.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".msg.UserTask.tasks: object expected");
                    message.tasks[i] = $root.msg.TaskData.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a UserTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserTask
         * @static
         * @param {msg.UserTask} message UserTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.msg.TaskData.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this UserTask to JSON.
         * @function toJSON
         * @memberof msg.UserTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserTask;
    })();

    msg.TaskData = (function() {

        /**
         * Properties of a TaskData.
         * @memberof msg
         * @interface ITaskData
         * @property {number|null} [id] TaskData id
         * @property {number|null} [progress] TaskData progress
         * @property {number|null} [completed] TaskData completed
         */

        /**
         * Constructs a new TaskData.
         * @memberof msg
         * @classdesc Represents a TaskData.
         * @implements ITaskData
         * @constructor
         * @param {msg.ITaskData=} [properties] Properties to set
         */
        function TaskData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaskData id.
         * @member {number} id
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.id = 0;

        /**
         * TaskData progress.
         * @member {number} progress
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.progress = 0;

        /**
         * TaskData completed.
         * @member {number} completed
         * @memberof msg.TaskData
         * @instance
         */
        TaskData.prototype.completed = 0;

        /**
         * Creates a new TaskData instance using the specified properties.
         * @function create
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData=} [properties] Properties to set
         * @returns {msg.TaskData} TaskData instance
         */
        TaskData.create = function create(properties) {
            return new TaskData(properties);
        };

        /**
         * Encodes the specified TaskData message. Does not implicitly {@link msg.TaskData.verify|verify} messages.
         * @function encode
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData} message TaskData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.progress != null && message.hasOwnProperty("progress"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
            if (message.completed != null && message.hasOwnProperty("completed"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.completed);
            return writer;
        };

        /**
         * Encodes the specified TaskData message, length delimited. Does not implicitly {@link msg.TaskData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TaskData
         * @static
         * @param {msg.ITaskData} message TaskData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TaskData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.progress = reader.int32();
                    break;
                case 3:
                    message.completed = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaskData message.
         * @function verify
         * @memberof msg.TaskData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaskData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (!$util.isInteger(message.progress))
                    return "progress: integer expected";
            if (message.completed != null && message.hasOwnProperty("completed"))
                if (!$util.isInteger(message.completed))
                    return "completed: integer expected";
            return null;
        };

        /**
         * Creates a TaskData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TaskData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TaskData} TaskData
         */
        TaskData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TaskData)
                return object;
            var message = new $root.msg.TaskData();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.progress != null)
                message.progress = object.progress | 0;
            if (object.completed != null)
                message.completed = object.completed | 0;
            return message;
        };

        /**
         * Creates a plain object from a TaskData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TaskData
         * @static
         * @param {msg.TaskData} message TaskData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaskData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.progress = 0;
                object.completed = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = message.progress;
            if (message.completed != null && message.hasOwnProperty("completed"))
                object.completed = message.completed;
            return object;
        };

        /**
         * Converts this TaskData to JSON.
         * @function toJSON
         * @memberof msg.TaskData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaskData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaskData;
    })();

    msg.LuckyDrawItem = (function() {

        /**
         * Properties of a LuckyDrawItem.
         * @memberof msg
         * @interface ILuckyDrawItem
         * @property {number|Long|null} [time] LuckyDrawItem time
         * @property {number|null} [item] LuckyDrawItem item
         * @property {number|null} [num] LuckyDrawItem num
         * @property {number|null} [worth] LuckyDrawItem worth
         */

        /**
         * Constructs a new LuckyDrawItem.
         * @memberof msg
         * @classdesc Represents a LuckyDrawItem.
         * @implements ILuckyDrawItem
         * @constructor
         * @param {msg.ILuckyDrawItem=} [properties] Properties to set
         */
        function LuckyDrawItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LuckyDrawItem time.
         * @member {number|Long} time
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * LuckyDrawItem item.
         * @member {number} item
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.item = 0;

        /**
         * LuckyDrawItem num.
         * @member {number} num
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.num = 0;

        /**
         * LuckyDrawItem worth.
         * @member {number} worth
         * @memberof msg.LuckyDrawItem
         * @instance
         */
        LuckyDrawItem.prototype.worth = 0;

        /**
         * Creates a new LuckyDrawItem instance using the specified properties.
         * @function create
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.ILuckyDrawItem=} [properties] Properties to set
         * @returns {msg.LuckyDrawItem} LuckyDrawItem instance
         */
        LuckyDrawItem.create = function create(properties) {
            return new LuckyDrawItem(properties);
        };

        /**
         * Encodes the specified LuckyDrawItem message. Does not implicitly {@link msg.LuckyDrawItem.verify|verify} messages.
         * @function encode
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.ILuckyDrawItem} message LuckyDrawItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.item != null && message.hasOwnProperty("item"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.item);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
            if (message.worth != null && message.hasOwnProperty("worth"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.worth);
            return writer;
        };

        /**
         * Encodes the specified LuckyDrawItem message, length delimited. Does not implicitly {@link msg.LuckyDrawItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.ILuckyDrawItem} message LuckyDrawItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LuckyDrawItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.LuckyDrawItem} LuckyDrawItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.LuckyDrawItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.item = reader.int32();
                    break;
                case 3:
                    message.num = reader.int32();
                    break;
                case 4:
                    message.worth = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LuckyDrawItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.LuckyDrawItem} LuckyDrawItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LuckyDrawItem message.
         * @function verify
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LuckyDrawItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.item != null && message.hasOwnProperty("item"))
                if (!$util.isInteger(message.item))
                    return "item: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.worth != null && message.hasOwnProperty("worth"))
                if (!$util.isInteger(message.worth))
                    return "worth: integer expected";
            return null;
        };

        /**
         * Creates a LuckyDrawItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.LuckyDrawItem} LuckyDrawItem
         */
        LuckyDrawItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.LuckyDrawItem)
                return object;
            var message = new $root.msg.LuckyDrawItem();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.item != null)
                message.item = object.item | 0;
            if (object.num != null)
                message.num = object.num | 0;
            if (object.worth != null)
                message.worth = object.worth | 0;
            return message;
        };

        /**
         * Creates a plain object from a LuckyDrawItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.LuckyDrawItem
         * @static
         * @param {msg.LuckyDrawItem} message LuckyDrawItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LuckyDrawItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                object.item = 0;
                object.num = 0;
                object.worth = 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = message.item;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.worth != null && message.hasOwnProperty("worth"))
                object.worth = message.worth;
            return object;
        };

        /**
         * Converts this LuckyDrawItem to JSON.
         * @function toJSON
         * @memberof msg.LuckyDrawItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LuckyDrawItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LuckyDrawItem;
    })();

    msg.LuckyDrawRecord = (function() {

        /**
         * Properties of a LuckyDrawRecord.
         * @memberof msg
         * @interface ILuckyDrawRecord
         * @property {Array.<msg.ILuckyDrawItem>|null} [drawlist] LuckyDrawRecord drawlist
         * @property {number|Long|null} [totalvalue] LuckyDrawRecord totalvalue
         */

        /**
         * Constructs a new LuckyDrawRecord.
         * @memberof msg
         * @classdesc Represents a LuckyDrawRecord.
         * @implements ILuckyDrawRecord
         * @constructor
         * @param {msg.ILuckyDrawRecord=} [properties] Properties to set
         */
        function LuckyDrawRecord(properties) {
            this.drawlist = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LuckyDrawRecord drawlist.
         * @member {Array.<msg.ILuckyDrawItem>} drawlist
         * @memberof msg.LuckyDrawRecord
         * @instance
         */
        LuckyDrawRecord.prototype.drawlist = $util.emptyArray;

        /**
         * LuckyDrawRecord totalvalue.
         * @member {number|Long} totalvalue
         * @memberof msg.LuckyDrawRecord
         * @instance
         */
        LuckyDrawRecord.prototype.totalvalue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new LuckyDrawRecord instance using the specified properties.
         * @function create
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.ILuckyDrawRecord=} [properties] Properties to set
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord instance
         */
        LuckyDrawRecord.create = function create(properties) {
            return new LuckyDrawRecord(properties);
        };

        /**
         * Encodes the specified LuckyDrawRecord message. Does not implicitly {@link msg.LuckyDrawRecord.verify|verify} messages.
         * @function encode
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.ILuckyDrawRecord} message LuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawRecord.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.drawlist != null && message.drawlist.length)
                for (var i = 0; i < message.drawlist.length; ++i)
                    $root.msg.LuckyDrawItem.encode(message.drawlist[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.totalvalue != null && message.hasOwnProperty("totalvalue"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.totalvalue);
            return writer;
        };

        /**
         * Encodes the specified LuckyDrawRecord message, length delimited. Does not implicitly {@link msg.LuckyDrawRecord.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.ILuckyDrawRecord} message LuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LuckyDrawRecord.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LuckyDrawRecord message from the specified reader or buffer.
         * @function decode
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawRecord.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.LuckyDrawRecord();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.drawlist && message.drawlist.length))
                        message.drawlist = [];
                    message.drawlist.push($root.msg.LuckyDrawItem.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.totalvalue = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LuckyDrawRecord message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LuckyDrawRecord.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LuckyDrawRecord message.
         * @function verify
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LuckyDrawRecord.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.drawlist != null && message.hasOwnProperty("drawlist")) {
                if (!Array.isArray(message.drawlist))
                    return "drawlist: array expected";
                for (var i = 0; i < message.drawlist.length; ++i) {
                    var error = $root.msg.LuckyDrawItem.verify(message.drawlist[i]);
                    if (error)
                        return "drawlist." + error;
                }
            }
            if (message.totalvalue != null && message.hasOwnProperty("totalvalue"))
                if (!$util.isInteger(message.totalvalue) && !(message.totalvalue && $util.isInteger(message.totalvalue.low) && $util.isInteger(message.totalvalue.high)))
                    return "totalvalue: integer|Long expected";
            return null;
        };

        /**
         * Creates a LuckyDrawRecord message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.LuckyDrawRecord} LuckyDrawRecord
         */
        LuckyDrawRecord.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.LuckyDrawRecord)
                return object;
            var message = new $root.msg.LuckyDrawRecord();
            if (object.drawlist) {
                if (!Array.isArray(object.drawlist))
                    throw TypeError(".msg.LuckyDrawRecord.drawlist: array expected");
                message.drawlist = [];
                for (var i = 0; i < object.drawlist.length; ++i) {
                    if (typeof object.drawlist[i] !== "object")
                        throw TypeError(".msg.LuckyDrawRecord.drawlist: object expected");
                    message.drawlist[i] = $root.msg.LuckyDrawItem.fromObject(object.drawlist[i]);
                }
            }
            if (object.totalvalue != null)
                if ($util.Long)
                    (message.totalvalue = $util.Long.fromValue(object.totalvalue)).unsigned = false;
                else if (typeof object.totalvalue === "string")
                    message.totalvalue = parseInt(object.totalvalue, 10);
                else if (typeof object.totalvalue === "number")
                    message.totalvalue = object.totalvalue;
                else if (typeof object.totalvalue === "object")
                    message.totalvalue = new $util.LongBits(object.totalvalue.low >>> 0, object.totalvalue.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a LuckyDrawRecord message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.LuckyDrawRecord
         * @static
         * @param {msg.LuckyDrawRecord} message LuckyDrawRecord
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LuckyDrawRecord.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.drawlist = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.totalvalue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.totalvalue = options.longs === String ? "0" : 0;
            if (message.drawlist && message.drawlist.length) {
                object.drawlist = [];
                for (var j = 0; j < message.drawlist.length; ++j)
                    object.drawlist[j] = $root.msg.LuckyDrawItem.toObject(message.drawlist[j], options);
            }
            if (message.totalvalue != null && message.hasOwnProperty("totalvalue"))
                if (typeof message.totalvalue === "number")
                    object.totalvalue = options.longs === String ? String(message.totalvalue) : message.totalvalue;
                else
                    object.totalvalue = options.longs === String ? $util.Long.prototype.toString.call(message.totalvalue) : options.longs === Number ? new $util.LongBits(message.totalvalue.low >>> 0, message.totalvalue.high >>> 0).toNumber() : message.totalvalue;
            return object;
        };

        /**
         * Converts this LuckyDrawRecord to JSON.
         * @function toJSON
         * @memberof msg.LuckyDrawRecord
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LuckyDrawRecord.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LuckyDrawRecord;
    })();

    msg.ImageData = (function() {

        /**
         * Properties of an ImageData.
         * @memberof msg
         * @interface IImageData
         * @property {number|null} [sex] ImageData sex
         * @property {Array.<msg.IItemData>|null} [clothes] ImageData clothes
         */

        /**
         * Constructs a new ImageData.
         * @memberof msg
         * @classdesc Represents an ImageData.
         * @implements IImageData
         * @constructor
         * @param {msg.IImageData=} [properties] Properties to set
         */
        function ImageData(properties) {
            this.clothes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ImageData sex.
         * @member {number} sex
         * @memberof msg.ImageData
         * @instance
         */
        ImageData.prototype.sex = 0;

        /**
         * ImageData clothes.
         * @member {Array.<msg.IItemData>} clothes
         * @memberof msg.ImageData
         * @instance
         */
        ImageData.prototype.clothes = $util.emptyArray;

        /**
         * Creates a new ImageData instance using the specified properties.
         * @function create
         * @memberof msg.ImageData
         * @static
         * @param {msg.IImageData=} [properties] Properties to set
         * @returns {msg.ImageData} ImageData instance
         */
        ImageData.create = function create(properties) {
            return new ImageData(properties);
        };

        /**
         * Encodes the specified ImageData message. Does not implicitly {@link msg.ImageData.verify|verify} messages.
         * @function encode
         * @memberof msg.ImageData
         * @static
         * @param {msg.IImageData} message ImageData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ImageData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sex);
            if (message.clothes != null && message.clothes.length)
                for (var i = 0; i < message.clothes.length; ++i)
                    $root.msg.ItemData.encode(message.clothes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ImageData message, length delimited. Does not implicitly {@link msg.ImageData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ImageData
         * @static
         * @param {msg.IImageData} message ImageData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ImageData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ImageData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ImageData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ImageData} ImageData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ImageData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ImageData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sex = reader.int32();
                    break;
                case 2:
                    if (!(message.clothes && message.clothes.length))
                        message.clothes = [];
                    message.clothes.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ImageData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ImageData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ImageData} ImageData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ImageData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ImageData message.
         * @function verify
         * @memberof msg.ImageData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ImageData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            if (message.clothes != null && message.hasOwnProperty("clothes")) {
                if (!Array.isArray(message.clothes))
                    return "clothes: array expected";
                for (var i = 0; i < message.clothes.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.clothes[i]);
                    if (error)
                        return "clothes." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ImageData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ImageData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ImageData} ImageData
         */
        ImageData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ImageData)
                return object;
            var message = new $root.msg.ImageData();
            if (object.sex != null)
                message.sex = object.sex | 0;
            if (object.clothes) {
                if (!Array.isArray(object.clothes))
                    throw TypeError(".msg.ImageData.clothes: array expected");
                message.clothes = [];
                for (var i = 0; i < object.clothes.length; ++i) {
                    if (typeof object.clothes[i] !== "object")
                        throw TypeError(".msg.ImageData.clothes: object expected");
                    message.clothes[i] = $root.msg.ItemData.fromObject(object.clothes[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ImageData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ImageData
         * @static
         * @param {msg.ImageData} message ImageData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ImageData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.clothes = [];
            if (options.defaults)
                object.sex = 0;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.clothes && message.clothes.length) {
                object.clothes = [];
                for (var j = 0; j < message.clothes.length; ++j)
                    object.clothes[j] = $root.msg.ItemData.toObject(message.clothes[j], options);
            }
            return object;
        };

        /**
         * Converts this ImageData to JSON.
         * @function toJSON
         * @memberof msg.ImageData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ImageData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ImageData;
    })();

    msg.PersonalImage = (function() {

        /**
         * Properties of a PersonalImage.
         * @memberof msg
         * @interface IPersonalImage
         * @property {Array.<msg.IImageData>|null} [lists] PersonalImage lists
         */

        /**
         * Constructs a new PersonalImage.
         * @memberof msg
         * @classdesc Represents a PersonalImage.
         * @implements IPersonalImage
         * @constructor
         * @param {msg.IPersonalImage=} [properties] Properties to set
         */
        function PersonalImage(properties) {
            this.lists = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PersonalImage lists.
         * @member {Array.<msg.IImageData>} lists
         * @memberof msg.PersonalImage
         * @instance
         */
        PersonalImage.prototype.lists = $util.emptyArray;

        /**
         * Creates a new PersonalImage instance using the specified properties.
         * @function create
         * @memberof msg.PersonalImage
         * @static
         * @param {msg.IPersonalImage=} [properties] Properties to set
         * @returns {msg.PersonalImage} PersonalImage instance
         */
        PersonalImage.create = function create(properties) {
            return new PersonalImage(properties);
        };

        /**
         * Encodes the specified PersonalImage message. Does not implicitly {@link msg.PersonalImage.verify|verify} messages.
         * @function encode
         * @memberof msg.PersonalImage
         * @static
         * @param {msg.IPersonalImage} message PersonalImage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PersonalImage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lists != null && message.lists.length)
                for (var i = 0; i < message.lists.length; ++i)
                    $root.msg.ImageData.encode(message.lists[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PersonalImage message, length delimited. Does not implicitly {@link msg.PersonalImage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.PersonalImage
         * @static
         * @param {msg.IPersonalImage} message PersonalImage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PersonalImage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PersonalImage message from the specified reader or buffer.
         * @function decode
         * @memberof msg.PersonalImage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.PersonalImage} PersonalImage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PersonalImage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.PersonalImage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.lists && message.lists.length))
                        message.lists = [];
                    message.lists.push($root.msg.ImageData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PersonalImage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.PersonalImage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.PersonalImage} PersonalImage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PersonalImage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PersonalImage message.
         * @function verify
         * @memberof msg.PersonalImage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PersonalImage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lists != null && message.hasOwnProperty("lists")) {
                if (!Array.isArray(message.lists))
                    return "lists: array expected";
                for (var i = 0; i < message.lists.length; ++i) {
                    var error = $root.msg.ImageData.verify(message.lists[i]);
                    if (error)
                        return "lists." + error;
                }
            }
            return null;
        };

        /**
         * Creates a PersonalImage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.PersonalImage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.PersonalImage} PersonalImage
         */
        PersonalImage.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.PersonalImage)
                return object;
            var message = new $root.msg.PersonalImage();
            if (object.lists) {
                if (!Array.isArray(object.lists))
                    throw TypeError(".msg.PersonalImage.lists: array expected");
                message.lists = [];
                for (var i = 0; i < object.lists.length; ++i) {
                    if (typeof object.lists[i] !== "object")
                        throw TypeError(".msg.PersonalImage.lists: object expected");
                    message.lists[i] = $root.msg.ImageData.fromObject(object.lists[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a PersonalImage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.PersonalImage
         * @static
         * @param {msg.PersonalImage} message PersonalImage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PersonalImage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.lists = [];
            if (message.lists && message.lists.length) {
                object.lists = [];
                for (var j = 0; j < message.lists.length; ++j)
                    object.lists[j] = $root.msg.ImageData.toObject(message.lists[j], options);
            }
            return object;
        };

        /**
         * Converts this PersonalImage to JSON.
         * @function toJSON
         * @memberof msg.PersonalImage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PersonalImage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PersonalImage;
    })();

    msg.HouseMaidData = (function() {

        /**
         * Properties of an HouseMaidData.
         * @memberof msg
         * @interface IHouseMaidData
         * @property {Array.<msg.IItemData>|null} [clothes] HouseMaidData clothes
         * @property {number|Long|null} [id] HouseMaidData id
         * @property {number|null} [level] HouseMaidData level
         * @property {number|Long|null} [ownerid] HouseMaidData ownerid
         * @property {string|null} [ownername] HouseMaidData ownername
         * @property {number|Long|null} [robberid] HouseMaidData robberid
         * @property {string|null} [robbername] HouseMaidData robbername
         * @property {number|null} [earning] HouseMaidData earning
         * @property {number|Long|null} [houseid] HouseMaidData houseid
         * @property {number|null} [sex] HouseMaidData sex
         * @property {number|Long|null} [tmworking] HouseMaidData tmworking
         * @property {number|Long|null} [robberto] HouseMaidData robberto
         */

        /**
         * Constructs a new HouseMaidData.
         * @memberof msg
         * @classdesc Represents an HouseMaidData.
         * @implements IHouseMaidData
         * @constructor
         * @param {msg.IHouseMaidData=} [properties] Properties to set
         */
        function HouseMaidData(properties) {
            this.clothes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * HouseMaidData clothes.
         * @member {Array.<msg.IItemData>} clothes
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.clothes = $util.emptyArray;

        /**
         * HouseMaidData id.
         * @member {number|Long} id
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseMaidData level.
         * @member {number} level
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.level = 0;

        /**
         * HouseMaidData ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseMaidData ownername.
         * @member {string} ownername
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.ownername = "";

        /**
         * HouseMaidData robberid.
         * @member {number|Long} robberid
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.robberid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseMaidData robbername.
         * @member {string} robbername
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.robbername = "";

        /**
         * HouseMaidData earning.
         * @member {number} earning
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.earning = 0;

        /**
         * HouseMaidData houseid.
         * @member {number|Long} houseid
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseMaidData sex.
         * @member {number} sex
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.sex = 0;

        /**
         * HouseMaidData tmworking.
         * @member {number|Long} tmworking
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.tmworking = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * HouseMaidData robberto.
         * @member {number|Long} robberto
         * @memberof msg.HouseMaidData
         * @instance
         */
        HouseMaidData.prototype.robberto = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new HouseMaidData instance using the specified properties.
         * @function create
         * @memberof msg.HouseMaidData
         * @static
         * @param {msg.IHouseMaidData=} [properties] Properties to set
         * @returns {msg.HouseMaidData} HouseMaidData instance
         */
        HouseMaidData.create = function create(properties) {
            return new HouseMaidData(properties);
        };

        /**
         * Encodes the specified HouseMaidData message. Does not implicitly {@link msg.HouseMaidData.verify|verify} messages.
         * @function encode
         * @memberof msg.HouseMaidData
         * @static
         * @param {msg.IHouseMaidData} message HouseMaidData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseMaidData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clothes != null && message.clothes.length)
                for (var i = 0; i < message.clothes.length; ++i)
                    $root.msg.ItemData.encode(message.clothes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ownerid);
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.ownername);
            if (message.robberid != null && message.hasOwnProperty("robberid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.robberid);
            if (message.robbername != null && message.hasOwnProperty("robbername"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.robbername);
            if (message.earning != null && message.hasOwnProperty("earning"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.earning);
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.houseid);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.sex);
            if (message.tmworking != null && message.hasOwnProperty("tmworking"))
                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.tmworking);
            if (message.robberto != null && message.hasOwnProperty("robberto"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.robberto);
            return writer;
        };

        /**
         * Encodes the specified HouseMaidData message, length delimited. Does not implicitly {@link msg.HouseMaidData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.HouseMaidData
         * @static
         * @param {msg.IHouseMaidData} message HouseMaidData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseMaidData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an HouseMaidData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.HouseMaidData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.HouseMaidData} HouseMaidData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseMaidData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.HouseMaidData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.clothes && message.clothes.length))
                        message.clothes = [];
                    message.clothes.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.id = reader.uint64();
                    break;
                case 3:
                    message.level = reader.int32();
                    break;
                case 4:
                    message.ownerid = reader.uint64();
                    break;
                case 5:
                    message.ownername = reader.string();
                    break;
                case 6:
                    message.robberid = reader.uint64();
                    break;
                case 7:
                    message.robbername = reader.string();
                    break;
                case 8:
                    message.earning = reader.uint32();
                    break;
                case 9:
                    message.houseid = reader.uint64();
                    break;
                case 10:
                    message.sex = reader.int32();
                    break;
                case 11:
                    message.tmworking = reader.int64();
                    break;
                case 12:
                    message.robberto = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an HouseMaidData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.HouseMaidData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.HouseMaidData} HouseMaidData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseMaidData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an HouseMaidData message.
         * @function verify
         * @memberof msg.HouseMaidData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        HouseMaidData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clothes != null && message.hasOwnProperty("clothes")) {
                if (!Array.isArray(message.clothes))
                    return "clothes: array expected";
                for (var i = 0; i < message.clothes.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.clothes[i]);
                    if (error)
                        return "clothes." + error;
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                if (!$util.isString(message.ownername))
                    return "ownername: string expected";
            if (message.robberid != null && message.hasOwnProperty("robberid"))
                if (!$util.isInteger(message.robberid) && !(message.robberid && $util.isInteger(message.robberid.low) && $util.isInteger(message.robberid.high)))
                    return "robberid: integer|Long expected";
            if (message.robbername != null && message.hasOwnProperty("robbername"))
                if (!$util.isString(message.robbername))
                    return "robbername: string expected";
            if (message.earning != null && message.hasOwnProperty("earning"))
                if (!$util.isInteger(message.earning))
                    return "earning: integer expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            if (message.tmworking != null && message.hasOwnProperty("tmworking"))
                if (!$util.isInteger(message.tmworking) && !(message.tmworking && $util.isInteger(message.tmworking.low) && $util.isInteger(message.tmworking.high)))
                    return "tmworking: integer|Long expected";
            if (message.robberto != null && message.hasOwnProperty("robberto"))
                if (!$util.isInteger(message.robberto) && !(message.robberto && $util.isInteger(message.robberto.low) && $util.isInteger(message.robberto.high)))
                    return "robberto: integer|Long expected";
            return null;
        };

        /**
         * Creates an HouseMaidData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.HouseMaidData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.HouseMaidData} HouseMaidData
         */
        HouseMaidData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.HouseMaidData)
                return object;
            var message = new $root.msg.HouseMaidData();
            if (object.clothes) {
                if (!Array.isArray(object.clothes))
                    throw TypeError(".msg.HouseMaidData.clothes: array expected");
                message.clothes = [];
                for (var i = 0; i < object.clothes.length; ++i) {
                    if (typeof object.clothes[i] !== "object")
                        throw TypeError(".msg.HouseMaidData.clothes: object expected");
                    message.clothes[i] = $root.msg.ItemData.fromObject(object.clothes[i]);
                }
            }
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.level != null)
                message.level = object.level | 0;
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.ownername != null)
                message.ownername = String(object.ownername);
            if (object.robberid != null)
                if ($util.Long)
                    (message.robberid = $util.Long.fromValue(object.robberid)).unsigned = true;
                else if (typeof object.robberid === "string")
                    message.robberid = parseInt(object.robberid, 10);
                else if (typeof object.robberid === "number")
                    message.robberid = object.robberid;
                else if (typeof object.robberid === "object")
                    message.robberid = new $util.LongBits(object.robberid.low >>> 0, object.robberid.high >>> 0).toNumber(true);
            if (object.robbername != null)
                message.robbername = String(object.robbername);
            if (object.earning != null)
                message.earning = object.earning >>> 0;
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.sex != null)
                message.sex = object.sex | 0;
            if (object.tmworking != null)
                if ($util.Long)
                    (message.tmworking = $util.Long.fromValue(object.tmworking)).unsigned = false;
                else if (typeof object.tmworking === "string")
                    message.tmworking = parseInt(object.tmworking, 10);
                else if (typeof object.tmworking === "number")
                    message.tmworking = object.tmworking;
                else if (typeof object.tmworking === "object")
                    message.tmworking = new $util.LongBits(object.tmworking.low >>> 0, object.tmworking.high >>> 0).toNumber();
            if (object.robberto != null)
                if ($util.Long)
                    (message.robberto = $util.Long.fromValue(object.robberto)).unsigned = true;
                else if (typeof object.robberto === "string")
                    message.robberto = parseInt(object.robberto, 10);
                else if (typeof object.robberto === "number")
                    message.robberto = object.robberto;
                else if (typeof object.robberto === "object")
                    message.robberto = new $util.LongBits(object.robberto.low >>> 0, object.robberto.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from an HouseMaidData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.HouseMaidData
         * @static
         * @param {msg.HouseMaidData} message HouseMaidData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        HouseMaidData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.clothes = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.level = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.ownername = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.robberid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.robberid = options.longs === String ? "0" : 0;
                object.robbername = "";
                object.earning = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.sex = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmworking = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmworking = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.robberto = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.robberto = options.longs === String ? "0" : 0;
            }
            if (message.clothes && message.clothes.length) {
                object.clothes = [];
                for (var j = 0; j < message.clothes.length; ++j)
                    object.clothes[j] = $root.msg.ItemData.toObject(message.clothes[j], options);
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                object.ownername = message.ownername;
            if (message.robberid != null && message.hasOwnProperty("robberid"))
                if (typeof message.robberid === "number")
                    object.robberid = options.longs === String ? String(message.robberid) : message.robberid;
                else
                    object.robberid = options.longs === String ? $util.Long.prototype.toString.call(message.robberid) : options.longs === Number ? new $util.LongBits(message.robberid.low >>> 0, message.robberid.high >>> 0).toNumber(true) : message.robberid;
            if (message.robbername != null && message.hasOwnProperty("robbername"))
                object.robbername = message.robbername;
            if (message.earning != null && message.hasOwnProperty("earning"))
                object.earning = message.earning;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.tmworking != null && message.hasOwnProperty("tmworking"))
                if (typeof message.tmworking === "number")
                    object.tmworking = options.longs === String ? String(message.tmworking) : message.tmworking;
                else
                    object.tmworking = options.longs === String ? $util.Long.prototype.toString.call(message.tmworking) : options.longs === Number ? new $util.LongBits(message.tmworking.low >>> 0, message.tmworking.high >>> 0).toNumber() : message.tmworking;
            if (message.robberto != null && message.hasOwnProperty("robberto"))
                if (typeof message.robberto === "number")
                    object.robberto = options.longs === String ? String(message.robberto) : message.robberto;
                else
                    object.robberto = options.longs === String ? $util.Long.prototype.toString.call(message.robberto) : options.longs === Number ? new $util.LongBits(message.robberto.low >>> 0, message.robberto.high >>> 0).toNumber(true) : message.robberto;
            return object;
        };

        /**
         * Converts this HouseMaidData to JSON.
         * @function toJSON
         * @memberof msg.HouseMaidData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        HouseMaidData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return HouseMaidData;
    })();

    msg.MapEvent = (function() {

        /**
         * Properties of a MapEvent.
         * @memberof msg
         * @interface IMapEvent
         * @property {number|Long|null} [id] MapEvent id
         * @property {number|null} [tid] MapEvent tid
         * @property {number|null} [longitude] MapEvent longitude
         * @property {number|null} [latitude] MapEvent latitude
         */

        /**
         * Constructs a new MapEvent.
         * @memberof msg
         * @classdesc Represents a MapEvent.
         * @implements IMapEvent
         * @constructor
         * @param {msg.IMapEvent=} [properties] Properties to set
         */
        function MapEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapEvent id.
         * @member {number|Long} id
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MapEvent tid.
         * @member {number} tid
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.tid = 0;

        /**
         * MapEvent longitude.
         * @member {number} longitude
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.longitude = 0;

        /**
         * MapEvent latitude.
         * @member {number} latitude
         * @memberof msg.MapEvent
         * @instance
         */
        MapEvent.prototype.latitude = 0;

        /**
         * Creates a new MapEvent instance using the specified properties.
         * @function create
         * @memberof msg.MapEvent
         * @static
         * @param {msg.IMapEvent=} [properties] Properties to set
         * @returns {msg.MapEvent} MapEvent instance
         */
        MapEvent.create = function create(properties) {
            return new MapEvent(properties);
        };

        /**
         * Encodes the specified MapEvent message. Does not implicitly {@link msg.MapEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.MapEvent
         * @static
         * @param {msg.IMapEvent} message MapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tid);
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.longitude);
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.latitude);
            return writer;
        };

        /**
         * Encodes the specified MapEvent message, length delimited. Does not implicitly {@link msg.MapEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MapEvent
         * @static
         * @param {msg.IMapEvent} message MapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MapEvent} MapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MapEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.tid = reader.uint32();
                    break;
                case 3:
                    message.longitude = reader.int32();
                    break;
                case 4:
                    message.latitude = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MapEvent} MapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapEvent message.
         * @function verify
         * @memberof msg.MapEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                if (!$util.isInteger(message.longitude))
                    return "longitude: integer expected";
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                if (!$util.isInteger(message.latitude))
                    return "latitude: integer expected";
            return null;
        };

        /**
         * Creates a MapEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MapEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MapEvent} MapEvent
         */
        MapEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MapEvent)
                return object;
            var message = new $root.msg.MapEvent();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.longitude != null)
                message.longitude = object.longitude | 0;
            if (object.latitude != null)
                message.latitude = object.latitude | 0;
            return message;
        };

        /**
         * Creates a plain object from a MapEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MapEvent
         * @static
         * @param {msg.MapEvent} message MapEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.tid = 0;
                object.longitude = 0;
                object.latitude = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                object.longitude = message.longitude;
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                object.latitude = message.latitude;
            return object;
        };

        /**
         * Converts this MapEvent to JSON.
         * @function toJSON
         * @memberof msg.MapEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapEvent;
    })();

    msg.UserMapEvent = (function() {

        /**
         * Properties of a UserMapEvent.
         * @memberof msg
         * @interface IUserMapEvent
         * @property {Array.<msg.IMapEvent>|null} [events] UserMapEvent events
         * @property {number|Long|null} [tmrefresh] UserMapEvent tmrefresh
         */

        /**
         * Constructs a new UserMapEvent.
         * @memberof msg
         * @classdesc Represents a UserMapEvent.
         * @implements IUserMapEvent
         * @constructor
         * @param {msg.IUserMapEvent=} [properties] Properties to set
         */
        function UserMapEvent(properties) {
            this.events = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserMapEvent events.
         * @member {Array.<msg.IMapEvent>} events
         * @memberof msg.UserMapEvent
         * @instance
         */
        UserMapEvent.prototype.events = $util.emptyArray;

        /**
         * UserMapEvent tmrefresh.
         * @member {number|Long} tmrefresh
         * @memberof msg.UserMapEvent
         * @instance
         */
        UserMapEvent.prototype.tmrefresh = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new UserMapEvent instance using the specified properties.
         * @function create
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.IUserMapEvent=} [properties] Properties to set
         * @returns {msg.UserMapEvent} UserMapEvent instance
         */
        UserMapEvent.create = function create(properties) {
            return new UserMapEvent(properties);
        };

        /**
         * Encodes the specified UserMapEvent message. Does not implicitly {@link msg.UserMapEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.IUserMapEvent} message UserMapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserMapEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.events != null && message.events.length)
                for (var i = 0; i < message.events.length; ++i)
                    $root.msg.MapEvent.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.tmrefresh != null && message.hasOwnProperty("tmrefresh"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tmrefresh);
            return writer;
        };

        /**
         * Encodes the specified UserMapEvent message, length delimited. Does not implicitly {@link msg.UserMapEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.IUserMapEvent} message UserMapEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserMapEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserMapEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserMapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserMapEvent} UserMapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserMapEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserMapEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.events && message.events.length))
                        message.events = [];
                    message.events.push($root.msg.MapEvent.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.tmrefresh = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserMapEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserMapEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserMapEvent} UserMapEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserMapEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserMapEvent message.
         * @function verify
         * @memberof msg.UserMapEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserMapEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.events != null && message.hasOwnProperty("events")) {
                if (!Array.isArray(message.events))
                    return "events: array expected";
                for (var i = 0; i < message.events.length; ++i) {
                    var error = $root.msg.MapEvent.verify(message.events[i]);
                    if (error)
                        return "events." + error;
                }
            }
            if (message.tmrefresh != null && message.hasOwnProperty("tmrefresh"))
                if (!$util.isInteger(message.tmrefresh) && !(message.tmrefresh && $util.isInteger(message.tmrefresh.low) && $util.isInteger(message.tmrefresh.high)))
                    return "tmrefresh: integer|Long expected";
            return null;
        };

        /**
         * Creates a UserMapEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserMapEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserMapEvent} UserMapEvent
         */
        UserMapEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserMapEvent)
                return object;
            var message = new $root.msg.UserMapEvent();
            if (object.events) {
                if (!Array.isArray(object.events))
                    throw TypeError(".msg.UserMapEvent.events: array expected");
                message.events = [];
                for (var i = 0; i < object.events.length; ++i) {
                    if (typeof object.events[i] !== "object")
                        throw TypeError(".msg.UserMapEvent.events: object expected");
                    message.events[i] = $root.msg.MapEvent.fromObject(object.events[i]);
                }
            }
            if (object.tmrefresh != null)
                if ($util.Long)
                    (message.tmrefresh = $util.Long.fromValue(object.tmrefresh)).unsigned = false;
                else if (typeof object.tmrefresh === "string")
                    message.tmrefresh = parseInt(object.tmrefresh, 10);
                else if (typeof object.tmrefresh === "number")
                    message.tmrefresh = object.tmrefresh;
                else if (typeof object.tmrefresh === "object")
                    message.tmrefresh = new $util.LongBits(object.tmrefresh.low >>> 0, object.tmrefresh.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a UserMapEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserMapEvent
         * @static
         * @param {msg.UserMapEvent} message UserMapEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserMapEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.events = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmrefresh = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmrefresh = options.longs === String ? "0" : 0;
            if (message.events && message.events.length) {
                object.events = [];
                for (var j = 0; j < message.events.length; ++j)
                    object.events[j] = $root.msg.MapEvent.toObject(message.events[j], options);
            }
            if (message.tmrefresh != null && message.hasOwnProperty("tmrefresh"))
                if (typeof message.tmrefresh === "number")
                    object.tmrefresh = options.longs === String ? String(message.tmrefresh) : message.tmrefresh;
                else
                    object.tmrefresh = options.longs === String ? $util.Long.prototype.toString.call(message.tmrefresh) : options.longs === Number ? new $util.LongBits(message.tmrefresh.low >>> 0, message.tmrefresh.high >>> 0).toNumber() : message.tmrefresh;
            return object;
        };

        /**
         * Converts this UserMapEvent to JSON.
         * @function toJSON
         * @memberof msg.UserMapEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserMapEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserMapEvent;
    })();

    msg.UserBase = (function() {

        /**
         * Properties of a UserBase.
         * @memberof msg
         * @interface IUserBase
         * @property {number|null} [level] UserBase level
         * @property {number|null} [exp] UserBase exp
         * @property {number|null} [gold] UserBase gold
         * @property {number|null} [diamond] UserBase diamond
         * @property {number|null} [yuanbao] UserBase yuanbao
         * @property {number|Long|null} [tmlogin] UserBase tmlogin
         * @property {number|Long|null} [tmlogout] UserBase tmlogout
         * @property {number|null} [continuelogin] UserBase continuelogin
         * @property {number|null} [nocountlogin] UserBase nocountlogin
         * @property {number|null} [signreward] UserBase signreward
         * @property {number|null} [signtime] UserBase signtime
         * @property {Array.<msg.IUserAddress>|null} [addrlist] UserBase addrlist
         * @property {msg.ISimpleCounter|null} [scounter] UserBase scounter
         * @property {msg.IUserWechat|null} [wechat] UserBase wechat
         * @property {string|null} [invitationcode] UserBase invitationcode
         * @property {msg.IFreePresentMoney|null} [freepresent] UserBase freepresent
         * @property {msg.IUserTask|null} [task] UserBase task
         * @property {msg.ILuckyDrawRecord|null} [luckydraw] UserBase luckydraw
         * @property {number|null} [totalRecharge] UserBase totalRecharge
         * @property {number|null} [newplayerstep] UserBase newplayerstep
         * @property {number|null} [robcount] UserBase robcount
         * @property {number|Long|null} [tmaddrobcount] UserBase tmaddrobcount
         * @property {number|null} [age] UserBase age
         * @property {number|null} [constellation] UserBase constellation
         * @property {string|null} [sign] UserBase sign
         * @property {msg.IUserMapEvent|null} [mapevent] UserBase mapevent
         * @property {number|null} [baseprovince] UserBase baseprovince
         * @property {number|null} [basecity] UserBase basecity
         */

        /**
         * Constructs a new UserBase.
         * @memberof msg
         * @classdesc Represents a UserBase.
         * @implements IUserBase
         * @constructor
         * @param {msg.IUserBase=} [properties] Properties to set
         */
        function UserBase(properties) {
            this.addrlist = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserBase level.
         * @member {number} level
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.level = 0;

        /**
         * UserBase exp.
         * @member {number} exp
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.exp = 0;

        /**
         * UserBase gold.
         * @member {number} gold
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.gold = 0;

        /**
         * UserBase diamond.
         * @member {number} diamond
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.diamond = 0;

        /**
         * UserBase yuanbao.
         * @member {number} yuanbao
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.yuanbao = 0;

        /**
         * UserBase tmlogin.
         * @member {number|Long} tmlogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmlogin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase tmlogout.
         * @member {number|Long} tmlogout
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmlogout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase continuelogin.
         * @member {number} continuelogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.continuelogin = 0;

        /**
         * UserBase nocountlogin.
         * @member {number} nocountlogin
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.nocountlogin = 0;

        /**
         * UserBase signreward.
         * @member {number} signreward
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.signreward = 0;

        /**
         * UserBase signtime.
         * @member {number} signtime
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.signtime = 0;

        /**
         * UserBase addrlist.
         * @member {Array.<msg.IUserAddress>} addrlist
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.addrlist = $util.emptyArray;

        /**
         * UserBase scounter.
         * @member {msg.ISimpleCounter|null|undefined} scounter
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.scounter = null;

        /**
         * UserBase wechat.
         * @member {msg.IUserWechat|null|undefined} wechat
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.wechat = null;

        /**
         * UserBase invitationcode.
         * @member {string} invitationcode
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.invitationcode = "";

        /**
         * UserBase freepresent.
         * @member {msg.IFreePresentMoney|null|undefined} freepresent
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.freepresent = null;

        /**
         * UserBase task.
         * @member {msg.IUserTask|null|undefined} task
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.task = null;

        /**
         * UserBase luckydraw.
         * @member {msg.ILuckyDrawRecord|null|undefined} luckydraw
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.luckydraw = null;

        /**
         * UserBase totalRecharge.
         * @member {number} totalRecharge
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.totalRecharge = 0;

        /**
         * UserBase newplayerstep.
         * @member {number} newplayerstep
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.newplayerstep = 0;

        /**
         * UserBase robcount.
         * @member {number} robcount
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.robcount = 0;

        /**
         * UserBase tmaddrobcount.
         * @member {number|Long} tmaddrobcount
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.tmaddrobcount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBase age.
         * @member {number} age
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.age = 0;

        /**
         * UserBase constellation.
         * @member {number} constellation
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.constellation = 0;

        /**
         * UserBase sign.
         * @member {string} sign
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.sign = "";

        /**
         * UserBase mapevent.
         * @member {msg.IUserMapEvent|null|undefined} mapevent
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.mapevent = null;

        /**
         * UserBase baseprovince.
         * @member {number} baseprovince
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.baseprovince = 0;

        /**
         * UserBase basecity.
         * @member {number} basecity
         * @memberof msg.UserBase
         * @instance
         */
        UserBase.prototype.basecity = 0;

        /**
         * Creates a new UserBase instance using the specified properties.
         * @function create
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase=} [properties] Properties to set
         * @returns {msg.UserBase} UserBase instance
         */
        UserBase.create = function create(properties) {
            return new UserBase(properties);
        };

        /**
         * Encodes the specified UserBase message. Does not implicitly {@link msg.UserBase.verify|verify} messages.
         * @function encode
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase} message UserBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.level);
            if (message.exp != null && message.hasOwnProperty("exp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.exp);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gold);
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.diamond);
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.yuanbao);
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.tmlogin);
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.tmlogout);
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.continuelogin);
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.nocountlogin);
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.signreward);
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.signtime);
            if (message.addrlist != null && message.addrlist.length)
                for (var i = 0; i < message.addrlist.length; ++i)
                    $root.msg.UserAddress.encode(message.addrlist[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.scounter != null && message.hasOwnProperty("scounter"))
                $root.msg.SimpleCounter.encode(message.scounter, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.wechat != null && message.hasOwnProperty("wechat"))
                $root.msg.UserWechat.encode(message.wechat, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.invitationcode);
            if (message.freepresent != null && message.hasOwnProperty("freepresent"))
                $root.msg.FreePresentMoney.encode(message.freepresent, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.task != null && message.hasOwnProperty("task"))
                $root.msg.UserTask.encode(message.task, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                $root.msg.LuckyDrawRecord.encode(message.luckydraw, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.totalRecharge != null && message.hasOwnProperty("totalRecharge"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.totalRecharge);
            if (message.newplayerstep != null && message.hasOwnProperty("newplayerstep"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.newplayerstep);
            if (message.robcount != null && message.hasOwnProperty("robcount"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.robcount);
            if (message.tmaddrobcount != null && message.hasOwnProperty("tmaddrobcount"))
                writer.uint32(/* id 23, wireType 0 =*/184).int64(message.tmaddrobcount);
            if (message.age != null && message.hasOwnProperty("age"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.age);
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.constellation);
            if (message.sign != null && message.hasOwnProperty("sign"))
                writer.uint32(/* id 26, wireType 2 =*/210).string(message.sign);
            if (message.mapevent != null && message.hasOwnProperty("mapevent"))
                $root.msg.UserMapEvent.encode(message.mapevent, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
            if (message.baseprovince != null && message.hasOwnProperty("baseprovince"))
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.baseprovince);
            if (message.basecity != null && message.hasOwnProperty("basecity"))
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.basecity);
            return writer;
        };

        /**
         * Encodes the specified UserBase message, length delimited. Does not implicitly {@link msg.UserBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserBase
         * @static
         * @param {msg.IUserBase} message UserBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserBase message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserBase} UserBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.level = reader.uint32();
                    break;
                case 2:
                    message.exp = reader.uint32();
                    break;
                case 3:
                    message.gold = reader.uint32();
                    break;
                case 4:
                    message.diamond = reader.uint32();
                    break;
                case 5:
                    message.yuanbao = reader.uint32();
                    break;
                case 6:
                    message.tmlogin = reader.int64();
                    break;
                case 7:
                    message.tmlogout = reader.int64();
                    break;
                case 8:
                    message.continuelogin = reader.uint32();
                    break;
                case 9:
                    message.nocountlogin = reader.uint32();
                    break;
                case 10:
                    message.signreward = reader.uint32();
                    break;
                case 11:
                    message.signtime = reader.uint32();
                    break;
                case 12:
                    if (!(message.addrlist && message.addrlist.length))
                        message.addrlist = [];
                    message.addrlist.push($root.msg.UserAddress.decode(reader, reader.uint32()));
                    break;
                case 13:
                    message.scounter = $root.msg.SimpleCounter.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.wechat = $root.msg.UserWechat.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.invitationcode = reader.string();
                    break;
                case 16:
                    message.freepresent = $root.msg.FreePresentMoney.decode(reader, reader.uint32());
                    break;
                case 17:
                    message.task = $root.msg.UserTask.decode(reader, reader.uint32());
                    break;
                case 18:
                    message.luckydraw = $root.msg.LuckyDrawRecord.decode(reader, reader.uint32());
                    break;
                case 19:
                    message.totalRecharge = reader.uint32();
                    break;
                case 21:
                    message.newplayerstep = reader.uint32();
                    break;
                case 22:
                    message.robcount = reader.uint32();
                    break;
                case 23:
                    message.tmaddrobcount = reader.int64();
                    break;
                case 24:
                    message.age = reader.uint32();
                    break;
                case 25:
                    message.constellation = reader.uint32();
                    break;
                case 26:
                    message.sign = reader.string();
                    break;
                case 27:
                    message.mapevent = $root.msg.UserMapEvent.decode(reader, reader.uint32());
                    break;
                case 28:
                    message.baseprovince = reader.uint32();
                    break;
                case 29:
                    message.basecity = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserBase} UserBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserBase message.
         * @function verify
         * @memberof msg.UserBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.exp != null && message.hasOwnProperty("exp"))
                if (!$util.isInteger(message.exp))
                    return "exp: integer expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                if (!$util.isInteger(message.diamond))
                    return "diamond: integer expected";
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                if (!$util.isInteger(message.yuanbao))
                    return "yuanbao: integer expected";
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                if (!$util.isInteger(message.tmlogin) && !(message.tmlogin && $util.isInteger(message.tmlogin.low) && $util.isInteger(message.tmlogin.high)))
                    return "tmlogin: integer|Long expected";
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                if (!$util.isInteger(message.tmlogout) && !(message.tmlogout && $util.isInteger(message.tmlogout.low) && $util.isInteger(message.tmlogout.high)))
                    return "tmlogout: integer|Long expected";
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                if (!$util.isInteger(message.continuelogin))
                    return "continuelogin: integer expected";
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                if (!$util.isInteger(message.nocountlogin))
                    return "nocountlogin: integer expected";
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                if (!$util.isInteger(message.signreward))
                    return "signreward: integer expected";
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                if (!$util.isInteger(message.signtime))
                    return "signtime: integer expected";
            if (message.addrlist != null && message.hasOwnProperty("addrlist")) {
                if (!Array.isArray(message.addrlist))
                    return "addrlist: array expected";
                for (var i = 0; i < message.addrlist.length; ++i) {
                    var error = $root.msg.UserAddress.verify(message.addrlist[i]);
                    if (error)
                        return "addrlist." + error;
                }
            }
            if (message.scounter != null && message.hasOwnProperty("scounter")) {
                var error = $root.msg.SimpleCounter.verify(message.scounter);
                if (error)
                    return "scounter." + error;
            }
            if (message.wechat != null && message.hasOwnProperty("wechat")) {
                var error = $root.msg.UserWechat.verify(message.wechat);
                if (error)
                    return "wechat." + error;
            }
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            if (message.freepresent != null && message.hasOwnProperty("freepresent")) {
                var error = $root.msg.FreePresentMoney.verify(message.freepresent);
                if (error)
                    return "freepresent." + error;
            }
            if (message.task != null && message.hasOwnProperty("task")) {
                var error = $root.msg.UserTask.verify(message.task);
                if (error)
                    return "task." + error;
            }
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw")) {
                var error = $root.msg.LuckyDrawRecord.verify(message.luckydraw);
                if (error)
                    return "luckydraw." + error;
            }
            if (message.totalRecharge != null && message.hasOwnProperty("totalRecharge"))
                if (!$util.isInteger(message.totalRecharge))
                    return "totalRecharge: integer expected";
            if (message.newplayerstep != null && message.hasOwnProperty("newplayerstep"))
                if (!$util.isInteger(message.newplayerstep))
                    return "newplayerstep: integer expected";
            if (message.robcount != null && message.hasOwnProperty("robcount"))
                if (!$util.isInteger(message.robcount))
                    return "robcount: integer expected";
            if (message.tmaddrobcount != null && message.hasOwnProperty("tmaddrobcount"))
                if (!$util.isInteger(message.tmaddrobcount) && !(message.tmaddrobcount && $util.isInteger(message.tmaddrobcount.low) && $util.isInteger(message.tmaddrobcount.high)))
                    return "tmaddrobcount: integer|Long expected";
            if (message.age != null && message.hasOwnProperty("age"))
                if (!$util.isInteger(message.age))
                    return "age: integer expected";
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                if (!$util.isInteger(message.constellation))
                    return "constellation: integer expected";
            if (message.sign != null && message.hasOwnProperty("sign"))
                if (!$util.isString(message.sign))
                    return "sign: string expected";
            if (message.mapevent != null && message.hasOwnProperty("mapevent")) {
                var error = $root.msg.UserMapEvent.verify(message.mapevent);
                if (error)
                    return "mapevent." + error;
            }
            if (message.baseprovince != null && message.hasOwnProperty("baseprovince"))
                if (!$util.isInteger(message.baseprovince))
                    return "baseprovince: integer expected";
            if (message.basecity != null && message.hasOwnProperty("basecity"))
                if (!$util.isInteger(message.basecity))
                    return "basecity: integer expected";
            return null;
        };

        /**
         * Creates a UserBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserBase} UserBase
         */
        UserBase.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserBase)
                return object;
            var message = new $root.msg.UserBase();
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.exp != null)
                message.exp = object.exp >>> 0;
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            if (object.diamond != null)
                message.diamond = object.diamond >>> 0;
            if (object.yuanbao != null)
                message.yuanbao = object.yuanbao >>> 0;
            if (object.tmlogin != null)
                if ($util.Long)
                    (message.tmlogin = $util.Long.fromValue(object.tmlogin)).unsigned = false;
                else if (typeof object.tmlogin === "string")
                    message.tmlogin = parseInt(object.tmlogin, 10);
                else if (typeof object.tmlogin === "number")
                    message.tmlogin = object.tmlogin;
                else if (typeof object.tmlogin === "object")
                    message.tmlogin = new $util.LongBits(object.tmlogin.low >>> 0, object.tmlogin.high >>> 0).toNumber();
            if (object.tmlogout != null)
                if ($util.Long)
                    (message.tmlogout = $util.Long.fromValue(object.tmlogout)).unsigned = false;
                else if (typeof object.tmlogout === "string")
                    message.tmlogout = parseInt(object.tmlogout, 10);
                else if (typeof object.tmlogout === "number")
                    message.tmlogout = object.tmlogout;
                else if (typeof object.tmlogout === "object")
                    message.tmlogout = new $util.LongBits(object.tmlogout.low >>> 0, object.tmlogout.high >>> 0).toNumber();
            if (object.continuelogin != null)
                message.continuelogin = object.continuelogin >>> 0;
            if (object.nocountlogin != null)
                message.nocountlogin = object.nocountlogin >>> 0;
            if (object.signreward != null)
                message.signreward = object.signreward >>> 0;
            if (object.signtime != null)
                message.signtime = object.signtime >>> 0;
            if (object.addrlist) {
                if (!Array.isArray(object.addrlist))
                    throw TypeError(".msg.UserBase.addrlist: array expected");
                message.addrlist = [];
                for (var i = 0; i < object.addrlist.length; ++i) {
                    if (typeof object.addrlist[i] !== "object")
                        throw TypeError(".msg.UserBase.addrlist: object expected");
                    message.addrlist[i] = $root.msg.UserAddress.fromObject(object.addrlist[i]);
                }
            }
            if (object.scounter != null) {
                if (typeof object.scounter !== "object")
                    throw TypeError(".msg.UserBase.scounter: object expected");
                message.scounter = $root.msg.SimpleCounter.fromObject(object.scounter);
            }
            if (object.wechat != null) {
                if (typeof object.wechat !== "object")
                    throw TypeError(".msg.UserBase.wechat: object expected");
                message.wechat = $root.msg.UserWechat.fromObject(object.wechat);
            }
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            if (object.freepresent != null) {
                if (typeof object.freepresent !== "object")
                    throw TypeError(".msg.UserBase.freepresent: object expected");
                message.freepresent = $root.msg.FreePresentMoney.fromObject(object.freepresent);
            }
            if (object.task != null) {
                if (typeof object.task !== "object")
                    throw TypeError(".msg.UserBase.task: object expected");
                message.task = $root.msg.UserTask.fromObject(object.task);
            }
            if (object.luckydraw != null) {
                if (typeof object.luckydraw !== "object")
                    throw TypeError(".msg.UserBase.luckydraw: object expected");
                message.luckydraw = $root.msg.LuckyDrawRecord.fromObject(object.luckydraw);
            }
            if (object.totalRecharge != null)
                message.totalRecharge = object.totalRecharge >>> 0;
            if (object.newplayerstep != null)
                message.newplayerstep = object.newplayerstep >>> 0;
            if (object.robcount != null)
                message.robcount = object.robcount >>> 0;
            if (object.tmaddrobcount != null)
                if ($util.Long)
                    (message.tmaddrobcount = $util.Long.fromValue(object.tmaddrobcount)).unsigned = false;
                else if (typeof object.tmaddrobcount === "string")
                    message.tmaddrobcount = parseInt(object.tmaddrobcount, 10);
                else if (typeof object.tmaddrobcount === "number")
                    message.tmaddrobcount = object.tmaddrobcount;
                else if (typeof object.tmaddrobcount === "object")
                    message.tmaddrobcount = new $util.LongBits(object.tmaddrobcount.low >>> 0, object.tmaddrobcount.high >>> 0).toNumber();
            if (object.age != null)
                message.age = object.age >>> 0;
            if (object.constellation != null)
                message.constellation = object.constellation >>> 0;
            if (object.sign != null)
                message.sign = String(object.sign);
            if (object.mapevent != null) {
                if (typeof object.mapevent !== "object")
                    throw TypeError(".msg.UserBase.mapevent: object expected");
                message.mapevent = $root.msg.UserMapEvent.fromObject(object.mapevent);
            }
            if (object.baseprovince != null)
                message.baseprovince = object.baseprovince >>> 0;
            if (object.basecity != null)
                message.basecity = object.basecity >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a UserBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserBase
         * @static
         * @param {msg.UserBase} message UserBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.addrlist = [];
            if (options.defaults) {
                object.level = 0;
                object.exp = 0;
                object.gold = 0;
                object.diamond = 0;
                object.yuanbao = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmlogin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmlogin = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmlogout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmlogout = options.longs === String ? "0" : 0;
                object.continuelogin = 0;
                object.nocountlogin = 0;
                object.signreward = 0;
                object.signtime = 0;
                object.scounter = null;
                object.wechat = null;
                object.invitationcode = "";
                object.freepresent = null;
                object.task = null;
                object.luckydraw = null;
                object.totalRecharge = 0;
                object.newplayerstep = 0;
                object.robcount = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmaddrobcount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmaddrobcount = options.longs === String ? "0" : 0;
                object.age = 0;
                object.constellation = 0;
                object.sign = "";
                object.mapevent = null;
                object.baseprovince = 0;
                object.basecity = 0;
            }
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.exp != null && message.hasOwnProperty("exp"))
                object.exp = message.exp;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                object.diamond = message.diamond;
            if (message.yuanbao != null && message.hasOwnProperty("yuanbao"))
                object.yuanbao = message.yuanbao;
            if (message.tmlogin != null && message.hasOwnProperty("tmlogin"))
                if (typeof message.tmlogin === "number")
                    object.tmlogin = options.longs === String ? String(message.tmlogin) : message.tmlogin;
                else
                    object.tmlogin = options.longs === String ? $util.Long.prototype.toString.call(message.tmlogin) : options.longs === Number ? new $util.LongBits(message.tmlogin.low >>> 0, message.tmlogin.high >>> 0).toNumber() : message.tmlogin;
            if (message.tmlogout != null && message.hasOwnProperty("tmlogout"))
                if (typeof message.tmlogout === "number")
                    object.tmlogout = options.longs === String ? String(message.tmlogout) : message.tmlogout;
                else
                    object.tmlogout = options.longs === String ? $util.Long.prototype.toString.call(message.tmlogout) : options.longs === Number ? new $util.LongBits(message.tmlogout.low >>> 0, message.tmlogout.high >>> 0).toNumber() : message.tmlogout;
            if (message.continuelogin != null && message.hasOwnProperty("continuelogin"))
                object.continuelogin = message.continuelogin;
            if (message.nocountlogin != null && message.hasOwnProperty("nocountlogin"))
                object.nocountlogin = message.nocountlogin;
            if (message.signreward != null && message.hasOwnProperty("signreward"))
                object.signreward = message.signreward;
            if (message.signtime != null && message.hasOwnProperty("signtime"))
                object.signtime = message.signtime;
            if (message.addrlist && message.addrlist.length) {
                object.addrlist = [];
                for (var j = 0; j < message.addrlist.length; ++j)
                    object.addrlist[j] = $root.msg.UserAddress.toObject(message.addrlist[j], options);
            }
            if (message.scounter != null && message.hasOwnProperty("scounter"))
                object.scounter = $root.msg.SimpleCounter.toObject(message.scounter, options);
            if (message.wechat != null && message.hasOwnProperty("wechat"))
                object.wechat = $root.msg.UserWechat.toObject(message.wechat, options);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            if (message.freepresent != null && message.hasOwnProperty("freepresent"))
                object.freepresent = $root.msg.FreePresentMoney.toObject(message.freepresent, options);
            if (message.task != null && message.hasOwnProperty("task"))
                object.task = $root.msg.UserTask.toObject(message.task, options);
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                object.luckydraw = $root.msg.LuckyDrawRecord.toObject(message.luckydraw, options);
            if (message.totalRecharge != null && message.hasOwnProperty("totalRecharge"))
                object.totalRecharge = message.totalRecharge;
            if (message.newplayerstep != null && message.hasOwnProperty("newplayerstep"))
                object.newplayerstep = message.newplayerstep;
            if (message.robcount != null && message.hasOwnProperty("robcount"))
                object.robcount = message.robcount;
            if (message.tmaddrobcount != null && message.hasOwnProperty("tmaddrobcount"))
                if (typeof message.tmaddrobcount === "number")
                    object.tmaddrobcount = options.longs === String ? String(message.tmaddrobcount) : message.tmaddrobcount;
                else
                    object.tmaddrobcount = options.longs === String ? $util.Long.prototype.toString.call(message.tmaddrobcount) : options.longs === Number ? new $util.LongBits(message.tmaddrobcount.low >>> 0, message.tmaddrobcount.high >>> 0).toNumber() : message.tmaddrobcount;
            if (message.age != null && message.hasOwnProperty("age"))
                object.age = message.age;
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                object.constellation = message.constellation;
            if (message.sign != null && message.hasOwnProperty("sign"))
                object.sign = message.sign;
            if (message.mapevent != null && message.hasOwnProperty("mapevent"))
                object.mapevent = $root.msg.UserMapEvent.toObject(message.mapevent, options);
            if (message.baseprovince != null && message.hasOwnProperty("baseprovince"))
                object.baseprovince = message.baseprovince;
            if (message.basecity != null && message.hasOwnProperty("basecity"))
                object.basecity = message.basecity;
            return object;
        };

        /**
         * Converts this UserBase to JSON.
         * @function toJSON
         * @memberof msg.UserBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserBase;
    })();

    msg.UserAddress = (function() {

        /**
         * Properties of a UserAddress.
         * @memberof msg
         * @interface IUserAddress
         * @property {string|null} [receiver] UserAddress receiver
         * @property {string|null} [phone] UserAddress phone
         * @property {string|null} [address] UserAddress address
         */

        /**
         * Constructs a new UserAddress.
         * @memberof msg
         * @classdesc Represents a UserAddress.
         * @implements IUserAddress
         * @constructor
         * @param {msg.IUserAddress=} [properties] Properties to set
         */
        function UserAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserAddress receiver.
         * @member {string} receiver
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.receiver = "";

        /**
         * UserAddress phone.
         * @member {string} phone
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.phone = "";

        /**
         * UserAddress address.
         * @member {string} address
         * @memberof msg.UserAddress
         * @instance
         */
        UserAddress.prototype.address = "";

        /**
         * Creates a new UserAddress instance using the specified properties.
         * @function create
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress=} [properties] Properties to set
         * @returns {msg.UserAddress} UserAddress instance
         */
        UserAddress.create = function create(properties) {
            return new UserAddress(properties);
        };

        /**
         * Encodes the specified UserAddress message. Does not implicitly {@link msg.UserAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress} message UserAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.receiver);
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.phone);
            if (message.address != null && message.hasOwnProperty("address"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.address);
            return writer;
        };

        /**
         * Encodes the specified UserAddress message, length delimited. Does not implicitly {@link msg.UserAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.UserAddress
         * @static
         * @param {msg.IUserAddress} message UserAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.UserAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.UserAddress} UserAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.receiver = reader.string();
                    break;
                case 2:
                    message.phone = reader.string();
                    break;
                case 3:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.UserAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.UserAddress} UserAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserAddress message.
         * @function verify
         * @memberof msg.UserAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                if (!$util.isString(message.receiver))
                    return "receiver: string expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            if (message.address != null && message.hasOwnProperty("address"))
                if (!$util.isString(message.address))
                    return "address: string expected";
            return null;
        };

        /**
         * Creates a UserAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.UserAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.UserAddress} UserAddress
         */
        UserAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.UserAddress)
                return object;
            var message = new $root.msg.UserAddress();
            if (object.receiver != null)
                message.receiver = String(object.receiver);
            if (object.phone != null)
                message.phone = String(object.phone);
            if (object.address != null)
                message.address = String(object.address);
            return message;
        };

        /**
         * Creates a plain object from a UserAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.UserAddress
         * @static
         * @param {msg.UserAddress} message UserAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.receiver = "";
                object.phone = "";
                object.address = "";
            }
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                object.receiver = message.receiver;
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            if (message.address != null && message.hasOwnProperty("address"))
                object.address = message.address;
            return object;
        };

        /**
         * Converts this UserAddress to JSON.
         * @function toJSON
         * @memberof msg.UserAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserAddress;
    })();

    msg.ItemData = (function() {

        /**
         * Properties of an ItemData.
         * @memberof msg
         * @interface IItemData
         * @property {number|null} [id] ItemData id
         * @property {number|null} [num] ItemData num
         * @property {number|null} [pos] ItemData pos
         */

        /**
         * Constructs a new ItemData.
         * @memberof msg
         * @classdesc Represents an ItemData.
         * @implements IItemData
         * @constructor
         * @param {msg.IItemData=} [properties] Properties to set
         */
        function ItemData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemData id.
         * @member {number} id
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.id = 0;

        /**
         * ItemData num.
         * @member {number} num
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.num = 0;

        /**
         * ItemData pos.
         * @member {number} pos
         * @memberof msg.ItemData
         * @instance
         */
        ItemData.prototype.pos = 0;

        /**
         * Creates a new ItemData instance using the specified properties.
         * @function create
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData=} [properties] Properties to set
         * @returns {msg.ItemData} ItemData instance
         */
        ItemData.create = function create(properties) {
            return new ItemData(properties);
        };

        /**
         * Encodes the specified ItemData message. Does not implicitly {@link msg.ItemData.verify|verify} messages.
         * @function encode
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData} message ItemData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            if (message.pos != null && message.hasOwnProperty("pos"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pos);
            return writer;
        };

        /**
         * Encodes the specified ItemData message, length delimited. Does not implicitly {@link msg.ItemData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ItemData
         * @static
         * @param {msg.IItemData} message ItemData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ItemData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                case 3:
                    message.pos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemData message.
         * @function verify
         * @memberof msg.ItemData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            return null;
        };

        /**
         * Creates an ItemData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ItemData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ItemData} ItemData
         */
        ItemData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ItemData)
                return object;
            var message = new $root.msg.ItemData();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            if (object.pos != null)
                message.pos = object.pos | 0;
            return message;
        };

        /**
         * Creates a plain object from an ItemData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ItemData
         * @static
         * @param {msg.ItemData} message ItemData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.num = 0;
                object.pos = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            return object;
        };

        /**
         * Converts this ItemData to JSON.
         * @function toJSON
         * @memberof msg.ItemData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemData;
    })();

    msg.ItemBin = (function() {

        /**
         * Properties of an ItemBin.
         * @memberof msg
         * @interface IItemBin
         * @property {Array.<msg.IItemData>|null} [items] ItemBin items
         */

        /**
         * Constructs a new ItemBin.
         * @memberof msg
         * @classdesc Represents an ItemBin.
         * @implements IItemBin
         * @constructor
         * @param {msg.IItemBin=} [properties] Properties to set
         */
        function ItemBin(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBin items.
         * @member {Array.<msg.IItemData>} items
         * @memberof msg.ItemBin
         * @instance
         */
        ItemBin.prototype.items = $util.emptyArray;

        /**
         * Creates a new ItemBin instance using the specified properties.
         * @function create
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin=} [properties] Properties to set
         * @returns {msg.ItemBin} ItemBin instance
         */
        ItemBin.create = function create(properties) {
            return new ItemBin(properties);
        };

        /**
         * Encodes the specified ItemBin message. Does not implicitly {@link msg.ItemBin.verify|verify} messages.
         * @function encode
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin} message ItemBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.ItemData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ItemBin message, length delimited. Does not implicitly {@link msg.ItemBin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ItemBin
         * @static
         * @param {msg.IItemBin} message ItemBin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ItemBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ItemBin} ItemBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ItemBin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ItemBin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ItemBin} ItemBin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBin message.
         * @function verify
         * @memberof msg.ItemBin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ItemBin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ItemBin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ItemBin} ItemBin
         */
        ItemBin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ItemBin)
                return object;
            var message = new $root.msg.ItemBin();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.ItemBin.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.ItemBin.items: object expected");
                    message.items[i] = $root.msg.ItemData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ItemBin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ItemBin
         * @static
         * @param {msg.ItemBin} message ItemBin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.ItemData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this ItemBin to JSON.
         * @function toJSON
         * @memberof msg.ItemBin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBin;
    })();

    msg.Serialize = (function() {

        /**
         * Properties of a Serialize.
         * @memberof msg
         * @interface ISerialize
         * @property {msg.IEntityBase|null} [entity] Serialize entity
         * @property {msg.IUserBase|null} [base] Serialize base
         * @property {msg.IItemBin|null} [item] Serialize item
         */

        /**
         * Constructs a new Serialize.
         * @memberof msg
         * @classdesc Represents a Serialize.
         * @implements ISerialize
         * @constructor
         * @param {msg.ISerialize=} [properties] Properties to set
         */
        function Serialize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Serialize entity.
         * @member {msg.IEntityBase|null|undefined} entity
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.entity = null;

        /**
         * Serialize base.
         * @member {msg.IUserBase|null|undefined} base
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.base = null;

        /**
         * Serialize item.
         * @member {msg.IItemBin|null|undefined} item
         * @memberof msg.Serialize
         * @instance
         */
        Serialize.prototype.item = null;

        /**
         * Creates a new Serialize instance using the specified properties.
         * @function create
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize=} [properties] Properties to set
         * @returns {msg.Serialize} Serialize instance
         */
        Serialize.create = function create(properties) {
            return new Serialize(properties);
        };

        /**
         * Encodes the specified Serialize message. Does not implicitly {@link msg.Serialize.verify|verify} messages.
         * @function encode
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize} message Serialize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Serialize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && message.hasOwnProperty("entity"))
                $root.msg.EntityBase.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.base != null && message.hasOwnProperty("base"))
                $root.msg.UserBase.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.ItemBin.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Serialize message, length delimited. Does not implicitly {@link msg.Serialize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.Serialize
         * @static
         * @param {msg.ISerialize} message Serialize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Serialize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Serialize message from the specified reader or buffer.
         * @function decode
         * @memberof msg.Serialize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.Serialize} Serialize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Serialize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.Serialize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.msg.EntityBase.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.base = $root.msg.UserBase.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.item = $root.msg.ItemBin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Serialize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.Serialize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.Serialize} Serialize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Serialize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Serialize message.
         * @function verify
         * @memberof msg.Serialize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Serialize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.msg.EntityBase.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.msg.UserBase.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.ItemBin.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a Serialize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.Serialize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.Serialize} Serialize
         */
        Serialize.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.Serialize)
                return object;
            var message = new $root.msg.Serialize();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".msg.Serialize.entity: object expected");
                message.entity = $root.msg.EntityBase.fromObject(object.entity);
            }
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".msg.Serialize.base: object expected");
                message.base = $root.msg.UserBase.fromObject(object.base);
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.Serialize.item: object expected");
                message.item = $root.msg.ItemBin.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a Serialize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.Serialize
         * @static
         * @param {msg.Serialize} message Serialize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Serialize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entity = null;
                object.base = null;
                object.item = null;
            }
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.msg.EntityBase.toObject(message.entity, options);
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.msg.UserBase.toObject(message.base, options);
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.ItemBin.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this Serialize to JSON.
         * @function toJSON
         * @memberof msg.Serialize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Serialize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Serialize;
    })();

    msg.CarPartData = (function() {

        /**
         * Properties of a CarPartData.
         * @memberof msg
         * @interface ICarPartData
         * @property {number|null} [partid] CarPartData partid
         * @property {number|null} [parttype] CarPartData parttype
         * @property {number|null} [level] CarPartData level
         * @property {number|null} [exp] CarPartData exp
         */

        /**
         * Constructs a new CarPartData.
         * @memberof msg
         * @classdesc Represents a CarPartData.
         * @implements ICarPartData
         * @constructor
         * @param {msg.ICarPartData=} [properties] Properties to set
         */
        function CarPartData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarPartData partid.
         * @member {number} partid
         * @memberof msg.CarPartData
         * @instance
         */
        CarPartData.prototype.partid = 0;

        /**
         * CarPartData parttype.
         * @member {number} parttype
         * @memberof msg.CarPartData
         * @instance
         */
        CarPartData.prototype.parttype = 0;

        /**
         * CarPartData level.
         * @member {number} level
         * @memberof msg.CarPartData
         * @instance
         */
        CarPartData.prototype.level = 0;

        /**
         * CarPartData exp.
         * @member {number} exp
         * @memberof msg.CarPartData
         * @instance
         */
        CarPartData.prototype.exp = 0;

        /**
         * Creates a new CarPartData instance using the specified properties.
         * @function create
         * @memberof msg.CarPartData
         * @static
         * @param {msg.ICarPartData=} [properties] Properties to set
         * @returns {msg.CarPartData} CarPartData instance
         */
        CarPartData.create = function create(properties) {
            return new CarPartData(properties);
        };

        /**
         * Encodes the specified CarPartData message. Does not implicitly {@link msg.CarPartData.verify|verify} messages.
         * @function encode
         * @memberof msg.CarPartData
         * @static
         * @param {msg.ICarPartData} message CarPartData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarPartData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.partid != null && message.hasOwnProperty("partid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.partid);
            if (message.parttype != null && message.hasOwnProperty("parttype"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.parttype);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.level);
            if (message.exp != null && message.hasOwnProperty("exp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.exp);
            return writer;
        };

        /**
         * Encodes the specified CarPartData message, length delimited. Does not implicitly {@link msg.CarPartData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CarPartData
         * @static
         * @param {msg.ICarPartData} message CarPartData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarPartData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarPartData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CarPartData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CarPartData} CarPartData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarPartData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CarPartData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.partid = reader.uint32();
                    break;
                case 2:
                    message.parttype = reader.uint32();
                    break;
                case 3:
                    message.level = reader.uint32();
                    break;
                case 4:
                    message.exp = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarPartData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CarPartData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CarPartData} CarPartData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarPartData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarPartData message.
         * @function verify
         * @memberof msg.CarPartData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarPartData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.partid != null && message.hasOwnProperty("partid"))
                if (!$util.isInteger(message.partid))
                    return "partid: integer expected";
            if (message.parttype != null && message.hasOwnProperty("parttype"))
                if (!$util.isInteger(message.parttype))
                    return "parttype: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.exp != null && message.hasOwnProperty("exp"))
                if (!$util.isInteger(message.exp))
                    return "exp: integer expected";
            return null;
        };

        /**
         * Creates a CarPartData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CarPartData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CarPartData} CarPartData
         */
        CarPartData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CarPartData)
                return object;
            var message = new $root.msg.CarPartData();
            if (object.partid != null)
                message.partid = object.partid >>> 0;
            if (object.parttype != null)
                message.parttype = object.parttype >>> 0;
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.exp != null)
                message.exp = object.exp >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CarPartData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CarPartData
         * @static
         * @param {msg.CarPartData} message CarPartData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarPartData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.partid = 0;
                object.parttype = 0;
                object.level = 0;
                object.exp = 0;
            }
            if (message.partid != null && message.hasOwnProperty("partid"))
                object.partid = message.partid;
            if (message.parttype != null && message.hasOwnProperty("parttype"))
                object.parttype = message.parttype;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.exp != null && message.hasOwnProperty("exp"))
                object.exp = message.exp;
            return object;
        };

        /**
         * Converts this CarPartData to JSON.
         * @function toJSON
         * @memberof msg.CarPartData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarPartData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarPartData;
    })();

    msg.CarAttribute = (function() {

        /**
         * Properties of a CarAttribute.
         * @memberof msg
         * @interface ICarAttribute
         * @property {number|null} [reward] CarAttribute reward
         * @property {number|null} [range] CarAttribute range
         * @property {number|null} [itemlimit] CarAttribute itemlimit
         * @property {number|null} [moneylimit] CarAttribute moneylimit
         * @property {number|null} [speed] CarAttribute speed
         * @property {number|null} [stoptime] CarAttribute stoptime
         */

        /**
         * Constructs a new CarAttribute.
         * @memberof msg
         * @classdesc Represents a CarAttribute.
         * @implements ICarAttribute
         * @constructor
         * @param {msg.ICarAttribute=} [properties] Properties to set
         */
        function CarAttribute(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarAttribute reward.
         * @member {number} reward
         * @memberof msg.CarAttribute
         * @instance
         */
        CarAttribute.prototype.reward = 0;

        /**
         * CarAttribute range.
         * @member {number} range
         * @memberof msg.CarAttribute
         * @instance
         */
        CarAttribute.prototype.range = 0;

        /**
         * CarAttribute itemlimit.
         * @member {number} itemlimit
         * @memberof msg.CarAttribute
         * @instance
         */
        CarAttribute.prototype.itemlimit = 0;

        /**
         * CarAttribute moneylimit.
         * @member {number} moneylimit
         * @memberof msg.CarAttribute
         * @instance
         */
        CarAttribute.prototype.moneylimit = 0;

        /**
         * CarAttribute speed.
         * @member {number} speed
         * @memberof msg.CarAttribute
         * @instance
         */
        CarAttribute.prototype.speed = 0;

        /**
         * CarAttribute stoptime.
         * @member {number} stoptime
         * @memberof msg.CarAttribute
         * @instance
         */
        CarAttribute.prototype.stoptime = 0;

        /**
         * Creates a new CarAttribute instance using the specified properties.
         * @function create
         * @memberof msg.CarAttribute
         * @static
         * @param {msg.ICarAttribute=} [properties] Properties to set
         * @returns {msg.CarAttribute} CarAttribute instance
         */
        CarAttribute.create = function create(properties) {
            return new CarAttribute(properties);
        };

        /**
         * Encodes the specified CarAttribute message. Does not implicitly {@link msg.CarAttribute.verify|verify} messages.
         * @function encode
         * @memberof msg.CarAttribute
         * @static
         * @param {msg.ICarAttribute} message CarAttribute message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarAttribute.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.reward);
            if (message.range != null && message.hasOwnProperty("range"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.range);
            if (message.itemlimit != null && message.hasOwnProperty("itemlimit"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.itemlimit);
            if (message.moneylimit != null && message.hasOwnProperty("moneylimit"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.moneylimit);
            if (message.speed != null && message.hasOwnProperty("speed"))
                writer.uint32(/* id 5, wireType 5 =*/45).float(message.speed);
            if (message.stoptime != null && message.hasOwnProperty("stoptime"))
                writer.uint32(/* id 6, wireType 5 =*/53).float(message.stoptime);
            return writer;
        };

        /**
         * Encodes the specified CarAttribute message, length delimited. Does not implicitly {@link msg.CarAttribute.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CarAttribute
         * @static
         * @param {msg.ICarAttribute} message CarAttribute message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarAttribute.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarAttribute message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CarAttribute
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CarAttribute} CarAttribute
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarAttribute.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CarAttribute();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reward = reader.uint32();
                    break;
                case 2:
                    message.range = reader.float();
                    break;
                case 3:
                    message.itemlimit = reader.uint32();
                    break;
                case 4:
                    message.moneylimit = reader.uint32();
                    break;
                case 5:
                    message.speed = reader.float();
                    break;
                case 6:
                    message.stoptime = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarAttribute message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CarAttribute
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CarAttribute} CarAttribute
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarAttribute.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarAttribute message.
         * @function verify
         * @memberof msg.CarAttribute
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarAttribute.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (!$util.isInteger(message.reward))
                    return "reward: integer expected";
            if (message.range != null && message.hasOwnProperty("range"))
                if (typeof message.range !== "number")
                    return "range: number expected";
            if (message.itemlimit != null && message.hasOwnProperty("itemlimit"))
                if (!$util.isInteger(message.itemlimit))
                    return "itemlimit: integer expected";
            if (message.moneylimit != null && message.hasOwnProperty("moneylimit"))
                if (!$util.isInteger(message.moneylimit))
                    return "moneylimit: integer expected";
            if (message.speed != null && message.hasOwnProperty("speed"))
                if (typeof message.speed !== "number")
                    return "speed: number expected";
            if (message.stoptime != null && message.hasOwnProperty("stoptime"))
                if (typeof message.stoptime !== "number")
                    return "stoptime: number expected";
            return null;
        };

        /**
         * Creates a CarAttribute message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CarAttribute
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CarAttribute} CarAttribute
         */
        CarAttribute.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CarAttribute)
                return object;
            var message = new $root.msg.CarAttribute();
            if (object.reward != null)
                message.reward = object.reward >>> 0;
            if (object.range != null)
                message.range = Number(object.range);
            if (object.itemlimit != null)
                message.itemlimit = object.itemlimit >>> 0;
            if (object.moneylimit != null)
                message.moneylimit = object.moneylimit >>> 0;
            if (object.speed != null)
                message.speed = Number(object.speed);
            if (object.stoptime != null)
                message.stoptime = Number(object.stoptime);
            return message;
        };

        /**
         * Creates a plain object from a CarAttribute message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CarAttribute
         * @static
         * @param {msg.CarAttribute} message CarAttribute
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarAttribute.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.reward = 0;
                object.range = 0;
                object.itemlimit = 0;
                object.moneylimit = 0;
                object.speed = 0;
                object.stoptime = 0;
            }
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = message.reward;
            if (message.range != null && message.hasOwnProperty("range"))
                object.range = options.json && !isFinite(message.range) ? String(message.range) : message.range;
            if (message.itemlimit != null && message.hasOwnProperty("itemlimit"))
                object.itemlimit = message.itemlimit;
            if (message.moneylimit != null && message.hasOwnProperty("moneylimit"))
                object.moneylimit = message.moneylimit;
            if (message.speed != null && message.hasOwnProperty("speed"))
                object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;
            if (message.stoptime != null && message.hasOwnProperty("stoptime"))
                object.stoptime = options.json && !isFinite(message.stoptime) ? String(message.stoptime) : message.stoptime;
            return object;
        };

        /**
         * Converts this CarAttribute to JSON.
         * @function toJSON
         * @memberof msg.CarAttribute
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarAttribute.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarAttribute;
    })();

    msg.CarPartPiece = (function() {

        /**
         * Properties of a CarPartPiece.
         * @memberof msg
         * @interface ICarPartPiece
         * @property {number|null} [id] CarPartPiece id
         * @property {number|null} [num] CarPartPiece num
         */

        /**
         * Constructs a new CarPartPiece.
         * @memberof msg
         * @classdesc Represents a CarPartPiece.
         * @implements ICarPartPiece
         * @constructor
         * @param {msg.ICarPartPiece=} [properties] Properties to set
         */
        function CarPartPiece(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarPartPiece id.
         * @member {number} id
         * @memberof msg.CarPartPiece
         * @instance
         */
        CarPartPiece.prototype.id = 0;

        /**
         * CarPartPiece num.
         * @member {number} num
         * @memberof msg.CarPartPiece
         * @instance
         */
        CarPartPiece.prototype.num = 0;

        /**
         * Creates a new CarPartPiece instance using the specified properties.
         * @function create
         * @memberof msg.CarPartPiece
         * @static
         * @param {msg.ICarPartPiece=} [properties] Properties to set
         * @returns {msg.CarPartPiece} CarPartPiece instance
         */
        CarPartPiece.create = function create(properties) {
            return new CarPartPiece(properties);
        };

        /**
         * Encodes the specified CarPartPiece message. Does not implicitly {@link msg.CarPartPiece.verify|verify} messages.
         * @function encode
         * @memberof msg.CarPartPiece
         * @static
         * @param {msg.ICarPartPiece} message CarPartPiece message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarPartPiece.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified CarPartPiece message, length delimited. Does not implicitly {@link msg.CarPartPiece.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CarPartPiece
         * @static
         * @param {msg.ICarPartPiece} message CarPartPiece message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarPartPiece.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarPartPiece message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CarPartPiece
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CarPartPiece} CarPartPiece
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarPartPiece.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CarPartPiece();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarPartPiece message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CarPartPiece
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CarPartPiece} CarPartPiece
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarPartPiece.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarPartPiece message.
         * @function verify
         * @memberof msg.CarPartPiece
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarPartPiece.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a CarPartPiece message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CarPartPiece
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CarPartPiece} CarPartPiece
         */
        CarPartPiece.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CarPartPiece)
                return object;
            var message = new $root.msg.CarPartPiece();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CarPartPiece message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CarPartPiece
         * @static
         * @param {msg.CarPartPiece} message CarPartPiece
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarPartPiece.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.num = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this CarPartPiece to JSON.
         * @function toJSON
         * @memberof msg.CarPartPiece
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarPartPiece.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarPartPiece;
    })();

    msg.CarReward = (function() {

        /**
         * Properties of a CarReward.
         * @memberof msg
         * @interface ICarReward
         * @property {number|null} [money] CarReward money
         * @property {Array.<msg.ICarPartPiece>|null} [items] CarReward items
         */

        /**
         * Constructs a new CarReward.
         * @memberof msg
         * @classdesc Represents a CarReward.
         * @implements ICarReward
         * @constructor
         * @param {msg.ICarReward=} [properties] Properties to set
         */
        function CarReward(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarReward money.
         * @member {number} money
         * @memberof msg.CarReward
         * @instance
         */
        CarReward.prototype.money = 0;

        /**
         * CarReward items.
         * @member {Array.<msg.ICarPartPiece>} items
         * @memberof msg.CarReward
         * @instance
         */
        CarReward.prototype.items = $util.emptyArray;

        /**
         * Creates a new CarReward instance using the specified properties.
         * @function create
         * @memberof msg.CarReward
         * @static
         * @param {msg.ICarReward=} [properties] Properties to set
         * @returns {msg.CarReward} CarReward instance
         */
        CarReward.create = function create(properties) {
            return new CarReward(properties);
        };

        /**
         * Encodes the specified CarReward message. Does not implicitly {@link msg.CarReward.verify|verify} messages.
         * @function encode
         * @memberof msg.CarReward
         * @static
         * @param {msg.ICarReward} message CarReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.money != null && message.hasOwnProperty("money"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.money);
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.CarPartPiece.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CarReward message, length delimited. Does not implicitly {@link msg.CarReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CarReward
         * @static
         * @param {msg.ICarReward} message CarReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CarReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CarReward} CarReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CarReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.money = reader.uint32();
                    break;
                case 2:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.CarPartPiece.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CarReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CarReward} CarReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarReward message.
         * @function verify
         * @memberof msg.CarReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.CarPartPiece.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CarReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CarReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CarReward} CarReward
         */
        CarReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CarReward)
                return object;
            var message = new $root.msg.CarReward();
            if (object.money != null)
                message.money = object.money >>> 0;
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.CarReward.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.CarReward.items: object expected");
                    message.items[i] = $root.msg.CarPartPiece.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CarReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CarReward
         * @static
         * @param {msg.CarReward} message CarReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults)
                object.money = 0;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.CarPartPiece.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this CarReward to JSON.
         * @function toJSON
         * @memberof msg.CarReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarReward;
    })();

    msg.CarData = (function() {

        /**
         * Properties of a CarData.
         * @memberof msg
         * @interface ICarData
         * @property {number|Long|null} [id] CarData id
         * @property {number|null} [tid] CarData tid
         * @property {number|Long|null} [ownerid] CarData ownerid
         * @property {number|Long|null} [createtime] CarData createtime
         * @property {number|Long|null} [parkingid] CarData parkingid
         * @property {string|null} [ownername] CarData ownername
         * @property {msg.ICarReward|null} [reward] CarData reward
         * @property {number|null} [star] CarData star
         * @property {Array.<msg.ICarPartData>|null} [parts] CarData parts
         * @property {msg.ICarAttribute|null} [attr] CarData attr
         * @property {number|null} [state] CarData state
         * @property {number|Long|null} [starttime] CarData starttime
         * @property {number|Long|null} [endtime] CarData endtime
         * @property {number|null} [latitude] CarData latitude
         * @property {number|null} [longitude] CarData longitude
         * @property {number|null} [price] CarData price
         * @property {number|null} [tradeendtime] CarData tradeendtime
         * @property {number|Long|null} [tradeuid] CarData tradeuid
         * @property {number|null} [tradeprice] CarData tradeprice
         * @property {number|null} [initprice] CarData initprice
         */

        /**
         * Constructs a new CarData.
         * @memberof msg
         * @classdesc Represents a CarData.
         * @implements ICarData
         * @constructor
         * @param {msg.ICarData=} [properties] Properties to set
         */
        function CarData(properties) {
            this.parts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarData id.
         * @member {number|Long} id
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData tid.
         * @member {number} tid
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.tid = 0;

        /**
         * CarData ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData createtime.
         * @member {number|Long} createtime
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.createtime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData parkingid.
         * @member {number|Long} parkingid
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.parkingid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData ownername.
         * @member {string} ownername
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.ownername = "";

        /**
         * CarData reward.
         * @member {msg.ICarReward|null|undefined} reward
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.reward = null;

        /**
         * CarData star.
         * @member {number} star
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.star = 0;

        /**
         * CarData parts.
         * @member {Array.<msg.ICarPartData>} parts
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.parts = $util.emptyArray;

        /**
         * CarData attr.
         * @member {msg.ICarAttribute|null|undefined} attr
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.attr = null;

        /**
         * CarData state.
         * @member {number} state
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.state = 0;

        /**
         * CarData starttime.
         * @member {number|Long} starttime
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.starttime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData endtime.
         * @member {number|Long} endtime
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.endtime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData latitude.
         * @member {number} latitude
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.latitude = 0;

        /**
         * CarData longitude.
         * @member {number} longitude
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.longitude = 0;

        /**
         * CarData price.
         * @member {number} price
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.price = 0;

        /**
         * CarData tradeendtime.
         * @member {number} tradeendtime
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.tradeendtime = 0;

        /**
         * CarData tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CarData tradeprice.
         * @member {number} tradeprice
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.tradeprice = 0;

        /**
         * CarData initprice.
         * @member {number} initprice
         * @memberof msg.CarData
         * @instance
         */
        CarData.prototype.initprice = 0;

        /**
         * Creates a new CarData instance using the specified properties.
         * @function create
         * @memberof msg.CarData
         * @static
         * @param {msg.ICarData=} [properties] Properties to set
         * @returns {msg.CarData} CarData instance
         */
        CarData.create = function create(properties) {
            return new CarData(properties);
        };

        /**
         * Encodes the specified CarData message. Does not implicitly {@link msg.CarData.verify|verify} messages.
         * @function encode
         * @memberof msg.CarData
         * @static
         * @param {msg.ICarData} message CarData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ownerid);
            if (message.createtime != null && message.hasOwnProperty("createtime"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.createtime);
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.parkingid);
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.ownername);
            if (message.reward != null && message.hasOwnProperty("reward"))
                $root.msg.CarReward.encode(message.reward, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.star != null && message.hasOwnProperty("star"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.star);
            if (message.parts != null && message.parts.length)
                for (var i = 0; i < message.parts.length; ++i)
                    $root.msg.CarPartData.encode(message.parts[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.attr != null && message.hasOwnProperty("attr"))
                $root.msg.CarAttribute.encode(message.attr, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.state);
            if (message.starttime != null && message.hasOwnProperty("starttime"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.starttime);
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.endtime);
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                writer.uint32(/* id 14, wireType 5 =*/117).float(message.latitude);
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                writer.uint32(/* id 15, wireType 5 =*/125).float(message.longitude);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.price);
            if (message.tradeendtime != null && message.hasOwnProperty("tradeendtime"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.tradeendtime);
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.tradeuid);
            if (message.tradeprice != null && message.hasOwnProperty("tradeprice"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.tradeprice);
            if (message.initprice != null && message.hasOwnProperty("initprice"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.initprice);
            return writer;
        };

        /**
         * Encodes the specified CarData message, length delimited. Does not implicitly {@link msg.CarData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CarData
         * @static
         * @param {msg.ICarData} message CarData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CarData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CarData} CarData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CarData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.tid = reader.uint32();
                    break;
                case 3:
                    message.ownerid = reader.uint64();
                    break;
                case 4:
                    message.createtime = reader.uint64();
                    break;
                case 5:
                    message.parkingid = reader.uint64();
                    break;
                case 6:
                    message.ownername = reader.string();
                    break;
                case 7:
                    message.reward = $root.msg.CarReward.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.star = reader.uint32();
                    break;
                case 9:
                    if (!(message.parts && message.parts.length))
                        message.parts = [];
                    message.parts.push($root.msg.CarPartData.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.attr = $root.msg.CarAttribute.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.state = reader.uint32();
                    break;
                case 12:
                    message.starttime = reader.uint64();
                    break;
                case 13:
                    message.endtime = reader.uint64();
                    break;
                case 14:
                    message.latitude = reader.float();
                    break;
                case 15:
                    message.longitude = reader.float();
                    break;
                case 16:
                    message.price = reader.uint32();
                    break;
                case 17:
                    message.tradeendtime = reader.uint32();
                    break;
                case 18:
                    message.tradeuid = reader.uint64();
                    break;
                case 19:
                    message.tradeprice = reader.uint32();
                    break;
                case 20:
                    message.initprice = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CarData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CarData} CarData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarData message.
         * @function verify
         * @memberof msg.CarData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.createtime != null && message.hasOwnProperty("createtime"))
                if (!$util.isInteger(message.createtime) && !(message.createtime && $util.isInteger(message.createtime.low) && $util.isInteger(message.createtime.high)))
                    return "createtime: integer|Long expected";
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                if (!$util.isInteger(message.parkingid) && !(message.parkingid && $util.isInteger(message.parkingid.low) && $util.isInteger(message.parkingid.high)))
                    return "parkingid: integer|Long expected";
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                if (!$util.isString(message.ownername))
                    return "ownername: string expected";
            if (message.reward != null && message.hasOwnProperty("reward")) {
                var error = $root.msg.CarReward.verify(message.reward);
                if (error)
                    return "reward." + error;
            }
            if (message.star != null && message.hasOwnProperty("star"))
                if (!$util.isInteger(message.star))
                    return "star: integer expected";
            if (message.parts != null && message.hasOwnProperty("parts")) {
                if (!Array.isArray(message.parts))
                    return "parts: array expected";
                for (var i = 0; i < message.parts.length; ++i) {
                    var error = $root.msg.CarPartData.verify(message.parts[i]);
                    if (error)
                        return "parts." + error;
                }
            }
            if (message.attr != null && message.hasOwnProperty("attr")) {
                var error = $root.msg.CarAttribute.verify(message.attr);
                if (error)
                    return "attr." + error;
            }
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.starttime != null && message.hasOwnProperty("starttime"))
                if (!$util.isInteger(message.starttime) && !(message.starttime && $util.isInteger(message.starttime.low) && $util.isInteger(message.starttime.high)))
                    return "starttime: integer|Long expected";
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                if (!$util.isInteger(message.endtime) && !(message.endtime && $util.isInteger(message.endtime.low) && $util.isInteger(message.endtime.high)))
                    return "endtime: integer|Long expected";
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                if (typeof message.latitude !== "number")
                    return "latitude: number expected";
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                if (typeof message.longitude !== "number")
                    return "longitude: number expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.tradeendtime != null && message.hasOwnProperty("tradeendtime"))
                if (!$util.isInteger(message.tradeendtime))
                    return "tradeendtime: integer expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.tradeprice != null && message.hasOwnProperty("tradeprice"))
                if (!$util.isInteger(message.tradeprice))
                    return "tradeprice: integer expected";
            if (message.initprice != null && message.hasOwnProperty("initprice"))
                if (!$util.isInteger(message.initprice))
                    return "initprice: integer expected";
            return null;
        };

        /**
         * Creates a CarData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CarData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CarData} CarData
         */
        CarData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CarData)
                return object;
            var message = new $root.msg.CarData();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.createtime != null)
                if ($util.Long)
                    (message.createtime = $util.Long.fromValue(object.createtime)).unsigned = true;
                else if (typeof object.createtime === "string")
                    message.createtime = parseInt(object.createtime, 10);
                else if (typeof object.createtime === "number")
                    message.createtime = object.createtime;
                else if (typeof object.createtime === "object")
                    message.createtime = new $util.LongBits(object.createtime.low >>> 0, object.createtime.high >>> 0).toNumber(true);
            if (object.parkingid != null)
                if ($util.Long)
                    (message.parkingid = $util.Long.fromValue(object.parkingid)).unsigned = true;
                else if (typeof object.parkingid === "string")
                    message.parkingid = parseInt(object.parkingid, 10);
                else if (typeof object.parkingid === "number")
                    message.parkingid = object.parkingid;
                else if (typeof object.parkingid === "object")
                    message.parkingid = new $util.LongBits(object.parkingid.low >>> 0, object.parkingid.high >>> 0).toNumber(true);
            if (object.ownername != null)
                message.ownername = String(object.ownername);
            if (object.reward != null) {
                if (typeof object.reward !== "object")
                    throw TypeError(".msg.CarData.reward: object expected");
                message.reward = $root.msg.CarReward.fromObject(object.reward);
            }
            if (object.star != null)
                message.star = object.star >>> 0;
            if (object.parts) {
                if (!Array.isArray(object.parts))
                    throw TypeError(".msg.CarData.parts: array expected");
                message.parts = [];
                for (var i = 0; i < object.parts.length; ++i) {
                    if (typeof object.parts[i] !== "object")
                        throw TypeError(".msg.CarData.parts: object expected");
                    message.parts[i] = $root.msg.CarPartData.fromObject(object.parts[i]);
                }
            }
            if (object.attr != null) {
                if (typeof object.attr !== "object")
                    throw TypeError(".msg.CarData.attr: object expected");
                message.attr = $root.msg.CarAttribute.fromObject(object.attr);
            }
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.starttime != null)
                if ($util.Long)
                    (message.starttime = $util.Long.fromValue(object.starttime)).unsigned = true;
                else if (typeof object.starttime === "string")
                    message.starttime = parseInt(object.starttime, 10);
                else if (typeof object.starttime === "number")
                    message.starttime = object.starttime;
                else if (typeof object.starttime === "object")
                    message.starttime = new $util.LongBits(object.starttime.low >>> 0, object.starttime.high >>> 0).toNumber(true);
            if (object.endtime != null)
                if ($util.Long)
                    (message.endtime = $util.Long.fromValue(object.endtime)).unsigned = true;
                else if (typeof object.endtime === "string")
                    message.endtime = parseInt(object.endtime, 10);
                else if (typeof object.endtime === "number")
                    message.endtime = object.endtime;
                else if (typeof object.endtime === "object")
                    message.endtime = new $util.LongBits(object.endtime.low >>> 0, object.endtime.high >>> 0).toNumber(true);
            if (object.latitude != null)
                message.latitude = Number(object.latitude);
            if (object.longitude != null)
                message.longitude = Number(object.longitude);
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.tradeendtime != null)
                message.tradeendtime = object.tradeendtime >>> 0;
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.tradeprice != null)
                message.tradeprice = object.tradeprice >>> 0;
            if (object.initprice != null)
                message.initprice = object.initprice >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CarData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CarData
         * @static
         * @param {msg.CarData} message CarData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.parts = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.tid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.createtime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.createtime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.parkingid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.parkingid = options.longs === String ? "0" : 0;
                object.ownername = "";
                object.reward = null;
                object.star = 0;
                object.attr = null;
                object.state = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.starttime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.starttime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.endtime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.endtime = options.longs === String ? "0" : 0;
                object.latitude = 0;
                object.longitude = 0;
                object.price = 0;
                object.tradeendtime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                object.tradeprice = 0;
                object.initprice = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.createtime != null && message.hasOwnProperty("createtime"))
                if (typeof message.createtime === "number")
                    object.createtime = options.longs === String ? String(message.createtime) : message.createtime;
                else
                    object.createtime = options.longs === String ? $util.Long.prototype.toString.call(message.createtime) : options.longs === Number ? new $util.LongBits(message.createtime.low >>> 0, message.createtime.high >>> 0).toNumber(true) : message.createtime;
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                if (typeof message.parkingid === "number")
                    object.parkingid = options.longs === String ? String(message.parkingid) : message.parkingid;
                else
                    object.parkingid = options.longs === String ? $util.Long.prototype.toString.call(message.parkingid) : options.longs === Number ? new $util.LongBits(message.parkingid.low >>> 0, message.parkingid.high >>> 0).toNumber(true) : message.parkingid;
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                object.ownername = message.ownername;
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = $root.msg.CarReward.toObject(message.reward, options);
            if (message.star != null && message.hasOwnProperty("star"))
                object.star = message.star;
            if (message.parts && message.parts.length) {
                object.parts = [];
                for (var j = 0; j < message.parts.length; ++j)
                    object.parts[j] = $root.msg.CarPartData.toObject(message.parts[j], options);
            }
            if (message.attr != null && message.hasOwnProperty("attr"))
                object.attr = $root.msg.CarAttribute.toObject(message.attr, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.starttime != null && message.hasOwnProperty("starttime"))
                if (typeof message.starttime === "number")
                    object.starttime = options.longs === String ? String(message.starttime) : message.starttime;
                else
                    object.starttime = options.longs === String ? $util.Long.prototype.toString.call(message.starttime) : options.longs === Number ? new $util.LongBits(message.starttime.low >>> 0, message.starttime.high >>> 0).toNumber(true) : message.starttime;
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                if (typeof message.endtime === "number")
                    object.endtime = options.longs === String ? String(message.endtime) : message.endtime;
                else
                    object.endtime = options.longs === String ? $util.Long.prototype.toString.call(message.endtime) : options.longs === Number ? new $util.LongBits(message.endtime.low >>> 0, message.endtime.high >>> 0).toNumber(true) : message.endtime;
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.tradeendtime != null && message.hasOwnProperty("tradeendtime"))
                object.tradeendtime = message.tradeendtime;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.tradeprice != null && message.hasOwnProperty("tradeprice"))
                object.tradeprice = message.tradeprice;
            if (message.initprice != null && message.hasOwnProperty("initprice"))
                object.initprice = message.initprice;
            return object;
        };

        /**
         * Converts this CarData to JSON.
         * @function toJSON
         * @memberof msg.CarData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarData;
    })();

    msg.ParkingData = (function() {

        /**
         * Properties of a ParkingData.
         * @memberof msg
         * @interface IParkingData
         * @property {number|Long|null} [id] ParkingData id
         * @property {number|null} [tid] ParkingData tid
         * @property {number|null} [parkingtype] ParkingData parkingtype
         * @property {number|Long|null} [ownerid] ParkingData ownerid
         * @property {number|Long|null} [parkingcar] ParkingData parkingcar
         * @property {number|Long|null} [parkingcarownerid] ParkingData parkingcarownerid
         * @property {string|null} [parkingcarownername] ParkingData parkingcarownername
         * @property {number|Long|null} [parkingtime] ParkingData parkingtime
         * @property {number|null} [parkingreward] ParkingData parkingreward
         * @property {string|null} [ownername] ParkingData ownername
         * @property {number|null} [parkingcartid] ParkingData parkingcartid
         * @property {number|Long|null} [houseid] ParkingData houseid
         */

        /**
         * Constructs a new ParkingData.
         * @memberof msg
         * @classdesc Represents a ParkingData.
         * @implements IParkingData
         * @constructor
         * @param {msg.IParkingData=} [properties] Properties to set
         */
        function ParkingData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ParkingData id.
         * @member {number|Long} id
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ParkingData tid.
         * @member {number} tid
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.tid = 0;

        /**
         * ParkingData parkingtype.
         * @member {number} parkingtype
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingtype = 0;

        /**
         * ParkingData ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ParkingData parkingcar.
         * @member {number|Long} parkingcar
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingcar = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ParkingData parkingcarownerid.
         * @member {number|Long} parkingcarownerid
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingcarownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ParkingData parkingcarownername.
         * @member {string} parkingcarownername
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingcarownername = "";

        /**
         * ParkingData parkingtime.
         * @member {number|Long} parkingtime
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingtime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ParkingData parkingreward.
         * @member {number} parkingreward
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingreward = 0;

        /**
         * ParkingData ownername.
         * @member {string} ownername
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.ownername = "";

        /**
         * ParkingData parkingcartid.
         * @member {number} parkingcartid
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.parkingcartid = 0;

        /**
         * ParkingData houseid.
         * @member {number|Long} houseid
         * @memberof msg.ParkingData
         * @instance
         */
        ParkingData.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new ParkingData instance using the specified properties.
         * @function create
         * @memberof msg.ParkingData
         * @static
         * @param {msg.IParkingData=} [properties] Properties to set
         * @returns {msg.ParkingData} ParkingData instance
         */
        ParkingData.create = function create(properties) {
            return new ParkingData(properties);
        };

        /**
         * Encodes the specified ParkingData message. Does not implicitly {@link msg.ParkingData.verify|verify} messages.
         * @function encode
         * @memberof msg.ParkingData
         * @static
         * @param {msg.IParkingData} message ParkingData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ParkingData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tid);
            if (message.parkingtype != null && message.hasOwnProperty("parkingtype"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.parkingtype);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ownerid);
            if (message.parkingcar != null && message.hasOwnProperty("parkingcar"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.parkingcar);
            if (message.parkingcarownerid != null && message.hasOwnProperty("parkingcarownerid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.parkingcarownerid);
            if (message.parkingcarownername != null && message.hasOwnProperty("parkingcarownername"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.parkingcarownername);
            if (message.parkingtime != null && message.hasOwnProperty("parkingtime"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.parkingtime);
            if (message.parkingreward != null && message.hasOwnProperty("parkingreward"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.parkingreward);
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.ownername);
            if (message.parkingcartid != null && message.hasOwnProperty("parkingcartid"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.parkingcartid);
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.houseid);
            return writer;
        };

        /**
         * Encodes the specified ParkingData message, length delimited. Does not implicitly {@link msg.ParkingData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.ParkingData
         * @static
         * @param {msg.IParkingData} message ParkingData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ParkingData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ParkingData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.ParkingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.ParkingData} ParkingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ParkingData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.ParkingData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.tid = reader.uint32();
                    break;
                case 3:
                    message.parkingtype = reader.uint32();
                    break;
                case 4:
                    message.ownerid = reader.uint64();
                    break;
                case 5:
                    message.parkingcar = reader.uint64();
                    break;
                case 6:
                    message.parkingcarownerid = reader.uint64();
                    break;
                case 7:
                    message.parkingcarownername = reader.string();
                    break;
                case 8:
                    message.parkingtime = reader.uint64();
                    break;
                case 9:
                    message.parkingreward = reader.uint32();
                    break;
                case 10:
                    message.ownername = reader.string();
                    break;
                case 11:
                    message.parkingcartid = reader.uint32();
                    break;
                case 12:
                    message.houseid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ParkingData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.ParkingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.ParkingData} ParkingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ParkingData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ParkingData message.
         * @function verify
         * @memberof msg.ParkingData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ParkingData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.parkingtype != null && message.hasOwnProperty("parkingtype"))
                if (!$util.isInteger(message.parkingtype))
                    return "parkingtype: integer expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.parkingcar != null && message.hasOwnProperty("parkingcar"))
                if (!$util.isInteger(message.parkingcar) && !(message.parkingcar && $util.isInteger(message.parkingcar.low) && $util.isInteger(message.parkingcar.high)))
                    return "parkingcar: integer|Long expected";
            if (message.parkingcarownerid != null && message.hasOwnProperty("parkingcarownerid"))
                if (!$util.isInteger(message.parkingcarownerid) && !(message.parkingcarownerid && $util.isInteger(message.parkingcarownerid.low) && $util.isInteger(message.parkingcarownerid.high)))
                    return "parkingcarownerid: integer|Long expected";
            if (message.parkingcarownername != null && message.hasOwnProperty("parkingcarownername"))
                if (!$util.isString(message.parkingcarownername))
                    return "parkingcarownername: string expected";
            if (message.parkingtime != null && message.hasOwnProperty("parkingtime"))
                if (!$util.isInteger(message.parkingtime) && !(message.parkingtime && $util.isInteger(message.parkingtime.low) && $util.isInteger(message.parkingtime.high)))
                    return "parkingtime: integer|Long expected";
            if (message.parkingreward != null && message.hasOwnProperty("parkingreward"))
                if (!$util.isInteger(message.parkingreward))
                    return "parkingreward: integer expected";
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                if (!$util.isString(message.ownername))
                    return "ownername: string expected";
            if (message.parkingcartid != null && message.hasOwnProperty("parkingcartid"))
                if (!$util.isInteger(message.parkingcartid))
                    return "parkingcartid: integer expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            return null;
        };

        /**
         * Creates a ParkingData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.ParkingData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.ParkingData} ParkingData
         */
        ParkingData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.ParkingData)
                return object;
            var message = new $root.msg.ParkingData();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.parkingtype != null)
                message.parkingtype = object.parkingtype >>> 0;
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.parkingcar != null)
                if ($util.Long)
                    (message.parkingcar = $util.Long.fromValue(object.parkingcar)).unsigned = true;
                else if (typeof object.parkingcar === "string")
                    message.parkingcar = parseInt(object.parkingcar, 10);
                else if (typeof object.parkingcar === "number")
                    message.parkingcar = object.parkingcar;
                else if (typeof object.parkingcar === "object")
                    message.parkingcar = new $util.LongBits(object.parkingcar.low >>> 0, object.parkingcar.high >>> 0).toNumber(true);
            if (object.parkingcarownerid != null)
                if ($util.Long)
                    (message.parkingcarownerid = $util.Long.fromValue(object.parkingcarownerid)).unsigned = true;
                else if (typeof object.parkingcarownerid === "string")
                    message.parkingcarownerid = parseInt(object.parkingcarownerid, 10);
                else if (typeof object.parkingcarownerid === "number")
                    message.parkingcarownerid = object.parkingcarownerid;
                else if (typeof object.parkingcarownerid === "object")
                    message.parkingcarownerid = new $util.LongBits(object.parkingcarownerid.low >>> 0, object.parkingcarownerid.high >>> 0).toNumber(true);
            if (object.parkingcarownername != null)
                message.parkingcarownername = String(object.parkingcarownername);
            if (object.parkingtime != null)
                if ($util.Long)
                    (message.parkingtime = $util.Long.fromValue(object.parkingtime)).unsigned = true;
                else if (typeof object.parkingtime === "string")
                    message.parkingtime = parseInt(object.parkingtime, 10);
                else if (typeof object.parkingtime === "number")
                    message.parkingtime = object.parkingtime;
                else if (typeof object.parkingtime === "object")
                    message.parkingtime = new $util.LongBits(object.parkingtime.low >>> 0, object.parkingtime.high >>> 0).toNumber(true);
            if (object.parkingreward != null)
                message.parkingreward = object.parkingreward >>> 0;
            if (object.ownername != null)
                message.ownername = String(object.ownername);
            if (object.parkingcartid != null)
                message.parkingcartid = object.parkingcartid >>> 0;
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a ParkingData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.ParkingData
         * @static
         * @param {msg.ParkingData} message ParkingData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ParkingData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.tid = 0;
                object.parkingtype = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.parkingcar = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.parkingcar = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.parkingcarownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.parkingcarownerid = options.longs === String ? "0" : 0;
                object.parkingcarownername = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.parkingtime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.parkingtime = options.longs === String ? "0" : 0;
                object.parkingreward = 0;
                object.ownername = "";
                object.parkingcartid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.parkingtype != null && message.hasOwnProperty("parkingtype"))
                object.parkingtype = message.parkingtype;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.parkingcar != null && message.hasOwnProperty("parkingcar"))
                if (typeof message.parkingcar === "number")
                    object.parkingcar = options.longs === String ? String(message.parkingcar) : message.parkingcar;
                else
                    object.parkingcar = options.longs === String ? $util.Long.prototype.toString.call(message.parkingcar) : options.longs === Number ? new $util.LongBits(message.parkingcar.low >>> 0, message.parkingcar.high >>> 0).toNumber(true) : message.parkingcar;
            if (message.parkingcarownerid != null && message.hasOwnProperty("parkingcarownerid"))
                if (typeof message.parkingcarownerid === "number")
                    object.parkingcarownerid = options.longs === String ? String(message.parkingcarownerid) : message.parkingcarownerid;
                else
                    object.parkingcarownerid = options.longs === String ? $util.Long.prototype.toString.call(message.parkingcarownerid) : options.longs === Number ? new $util.LongBits(message.parkingcarownerid.low >>> 0, message.parkingcarownerid.high >>> 0).toNumber(true) : message.parkingcarownerid;
            if (message.parkingcarownername != null && message.hasOwnProperty("parkingcarownername"))
                object.parkingcarownername = message.parkingcarownername;
            if (message.parkingtime != null && message.hasOwnProperty("parkingtime"))
                if (typeof message.parkingtime === "number")
                    object.parkingtime = options.longs === String ? String(message.parkingtime) : message.parkingtime;
                else
                    object.parkingtime = options.longs === String ? $util.Long.prototype.toString.call(message.parkingtime) : options.longs === Number ? new $util.LongBits(message.parkingtime.low >>> 0, message.parkingtime.high >>> 0).toNumber(true) : message.parkingtime;
            if (message.parkingreward != null && message.hasOwnProperty("parkingreward"))
                object.parkingreward = message.parkingreward;
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                object.ownername = message.ownername;
            if (message.parkingcartid != null && message.hasOwnProperty("parkingcartid"))
                object.parkingcartid = message.parkingcartid;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            return object;
        };

        /**
         * Converts this ParkingData to JSON.
         * @function toJSON
         * @memberof msg.ParkingData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ParkingData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ParkingData;
    })();

    msg.HouseCell = (function() {

        /**
         * Properties of an HouseCell.
         * @memberof msg
         * @interface IHouseCell
         * @property {number|null} [tid] HouseCell tid
         * @property {number|null} [index] HouseCell index
         * @property {number|null} [level] HouseCell level
         * @property {number|Long|null} [tmproduce] HouseCell tmproduce
         * @property {number|null} [gold] HouseCell gold
         * @property {number|null} [state] HouseCell state
         * @property {Array.<number|Long>|null} [robers] HouseCell robers
         */

        /**
         * Constructs a new HouseCell.
         * @memberof msg
         * @classdesc Represents an HouseCell.
         * @implements IHouseCell
         * @constructor
         * @param {msg.IHouseCell=} [properties] Properties to set
         */
        function HouseCell(properties) {
            this.robers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * HouseCell tid.
         * @member {number} tid
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.tid = 0;

        /**
         * HouseCell index.
         * @member {number} index
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.index = 0;

        /**
         * HouseCell level.
         * @member {number} level
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.level = 0;

        /**
         * HouseCell tmproduce.
         * @member {number|Long} tmproduce
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.tmproduce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * HouseCell gold.
         * @member {number} gold
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.gold = 0;

        /**
         * HouseCell state.
         * @member {number} state
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.state = 0;

        /**
         * HouseCell robers.
         * @member {Array.<number|Long>} robers
         * @memberof msg.HouseCell
         * @instance
         */
        HouseCell.prototype.robers = $util.emptyArray;

        /**
         * Creates a new HouseCell instance using the specified properties.
         * @function create
         * @memberof msg.HouseCell
         * @static
         * @param {msg.IHouseCell=} [properties] Properties to set
         * @returns {msg.HouseCell} HouseCell instance
         */
        HouseCell.create = function create(properties) {
            return new HouseCell(properties);
        };

        /**
         * Encodes the specified HouseCell message. Does not implicitly {@link msg.HouseCell.verify|verify} messages.
         * @function encode
         * @memberof msg.HouseCell
         * @static
         * @param {msg.IHouseCell} message HouseCell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseCell.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.level);
            if (message.tmproduce != null && message.hasOwnProperty("tmproduce"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.tmproduce);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.gold);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.state);
            if (message.robers != null && message.robers.length)
                for (var i = 0; i < message.robers.length; ++i)
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.robers[i]);
            return writer;
        };

        /**
         * Encodes the specified HouseCell message, length delimited. Does not implicitly {@link msg.HouseCell.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.HouseCell
         * @static
         * @param {msg.IHouseCell} message HouseCell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseCell.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an HouseCell message from the specified reader or buffer.
         * @function decode
         * @memberof msg.HouseCell
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.HouseCell} HouseCell
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseCell.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.HouseCell();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tid = reader.uint32();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                case 3:
                    message.level = reader.uint32();
                    break;
                case 4:
                    message.tmproduce = reader.int64();
                    break;
                case 5:
                    message.gold = reader.uint32();
                    break;
                case 6:
                    message.state = reader.uint32();
                    break;
                case 7:
                    if (!(message.robers && message.robers.length))
                        message.robers = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.robers.push(reader.uint64());
                    } else
                        message.robers.push(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an HouseCell message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.HouseCell
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.HouseCell} HouseCell
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseCell.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an HouseCell message.
         * @function verify
         * @memberof msg.HouseCell
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        HouseCell.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.tmproduce != null && message.hasOwnProperty("tmproduce"))
                if (!$util.isInteger(message.tmproduce) && !(message.tmproduce && $util.isInteger(message.tmproduce.low) && $util.isInteger(message.tmproduce.high)))
                    return "tmproduce: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.robers != null && message.hasOwnProperty("robers")) {
                if (!Array.isArray(message.robers))
                    return "robers: array expected";
                for (var i = 0; i < message.robers.length; ++i)
                    if (!$util.isInteger(message.robers[i]) && !(message.robers[i] && $util.isInteger(message.robers[i].low) && $util.isInteger(message.robers[i].high)))
                        return "robers: integer|Long[] expected";
            }
            return null;
        };

        /**
         * Creates an HouseCell message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.HouseCell
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.HouseCell} HouseCell
         */
        HouseCell.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.HouseCell)
                return object;
            var message = new $root.msg.HouseCell();
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.tmproduce != null)
                if ($util.Long)
                    (message.tmproduce = $util.Long.fromValue(object.tmproduce)).unsigned = false;
                else if (typeof object.tmproduce === "string")
                    message.tmproduce = parseInt(object.tmproduce, 10);
                else if (typeof object.tmproduce === "number")
                    message.tmproduce = object.tmproduce;
                else if (typeof object.tmproduce === "object")
                    message.tmproduce = new $util.LongBits(object.tmproduce.low >>> 0, object.tmproduce.high >>> 0).toNumber();
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.robers) {
                if (!Array.isArray(object.robers))
                    throw TypeError(".msg.HouseCell.robers: array expected");
                message.robers = [];
                for (var i = 0; i < object.robers.length; ++i)
                    if ($util.Long)
                        (message.robers[i] = $util.Long.fromValue(object.robers[i])).unsigned = true;
                    else if (typeof object.robers[i] === "string")
                        message.robers[i] = parseInt(object.robers[i], 10);
                    else if (typeof object.robers[i] === "number")
                        message.robers[i] = object.robers[i];
                    else if (typeof object.robers[i] === "object")
                        message.robers[i] = new $util.LongBits(object.robers[i].low >>> 0, object.robers[i].high >>> 0).toNumber(true);
            }
            return message;
        };

        /**
         * Creates a plain object from an HouseCell message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.HouseCell
         * @static
         * @param {msg.HouseCell} message HouseCell
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        HouseCell.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.robers = [];
            if (options.defaults) {
                object.tid = 0;
                object.index = 0;
                object.level = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmproduce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmproduce = options.longs === String ? "0" : 0;
                object.gold = 0;
                object.state = 0;
            }
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.tmproduce != null && message.hasOwnProperty("tmproduce"))
                if (typeof message.tmproduce === "number")
                    object.tmproduce = options.longs === String ? String(message.tmproduce) : message.tmproduce;
                else
                    object.tmproduce = options.longs === String ? $util.Long.prototype.toString.call(message.tmproduce) : options.longs === Number ? new $util.LongBits(message.tmproduce.low >>> 0, message.tmproduce.high >>> 0).toNumber() : message.tmproduce;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.robers && message.robers.length) {
                object.robers = [];
                for (var j = 0; j < message.robers.length; ++j)
                    if (typeof message.robers[j] === "number")
                        object.robers[j] = options.longs === String ? String(message.robers[j]) : message.robers[j];
                    else
                        object.robers[j] = options.longs === String ? $util.Long.prototype.toString.call(message.robers[j]) : options.longs === Number ? new $util.LongBits(message.robers[j].low >>> 0, message.robers[j].high >>> 0).toNumber(true) : message.robers[j];
            }
            return object;
        };

        /**
         * Converts this HouseCell to JSON.
         * @function toJSON
         * @memberof msg.HouseCell
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        HouseCell.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return HouseCell;
    })();

    msg.HouseVisitInfo = (function() {

        /**
         * Properties of an HouseVisitInfo.
         * @memberof msg
         * @interface IHouseVisitInfo
         * @property {number|Long|null} [visitorid] HouseVisitInfo visitorid
         * @property {number|Long|null} [tmvisit] HouseVisitInfo tmvisit
         * @property {number|null} [optindex] HouseVisitInfo optindex
         * @property {number|null} [opttype] HouseVisitInfo opttype
         * @property {number|null} [optparam] HouseVisitInfo optparam
         * @property {string|null} [visitorname] HouseVisitInfo visitorname
         * @property {number|Long|null} [visitorhouse] HouseVisitInfo visitorhouse
         * @property {number|Long|null} [id] HouseVisitInfo id
         */

        /**
         * Constructs a new HouseVisitInfo.
         * @memberof msg
         * @classdesc Represents an HouseVisitInfo.
         * @implements IHouseVisitInfo
         * @constructor
         * @param {msg.IHouseVisitInfo=} [properties] Properties to set
         */
        function HouseVisitInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * HouseVisitInfo visitorid.
         * @member {number|Long} visitorid
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.visitorid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseVisitInfo tmvisit.
         * @member {number|Long} tmvisit
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.tmvisit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * HouseVisitInfo optindex.
         * @member {number} optindex
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.optindex = 0;

        /**
         * HouseVisitInfo opttype.
         * @member {number} opttype
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.opttype = 0;

        /**
         * HouseVisitInfo optparam.
         * @member {number} optparam
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.optparam = 0;

        /**
         * HouseVisitInfo visitorname.
         * @member {string} visitorname
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.visitorname = "";

        /**
         * HouseVisitInfo visitorhouse.
         * @member {number|Long} visitorhouse
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.visitorhouse = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseVisitInfo id.
         * @member {number|Long} id
         * @memberof msg.HouseVisitInfo
         * @instance
         */
        HouseVisitInfo.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new HouseVisitInfo instance using the specified properties.
         * @function create
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {msg.IHouseVisitInfo=} [properties] Properties to set
         * @returns {msg.HouseVisitInfo} HouseVisitInfo instance
         */
        HouseVisitInfo.create = function create(properties) {
            return new HouseVisitInfo(properties);
        };

        /**
         * Encodes the specified HouseVisitInfo message. Does not implicitly {@link msg.HouseVisitInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {msg.IHouseVisitInfo} message HouseVisitInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseVisitInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.visitorid != null && message.hasOwnProperty("visitorid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.visitorid);
            if (message.tmvisit != null && message.hasOwnProperty("tmvisit"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tmvisit);
            if (message.optindex != null && message.hasOwnProperty("optindex"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.optindex);
            if (message.opttype != null && message.hasOwnProperty("opttype"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.opttype);
            if (message.optparam != null && message.hasOwnProperty("optparam"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.optparam);
            if (message.visitorname != null && message.hasOwnProperty("visitorname"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.visitorname);
            if (message.visitorhouse != null && message.hasOwnProperty("visitorhouse"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.visitorhouse);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified HouseVisitInfo message, length delimited. Does not implicitly {@link msg.HouseVisitInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {msg.IHouseVisitInfo} message HouseVisitInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseVisitInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an HouseVisitInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.HouseVisitInfo} HouseVisitInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseVisitInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.HouseVisitInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.visitorid = reader.uint64();
                    break;
                case 2:
                    message.tmvisit = reader.int64();
                    break;
                case 3:
                    message.optindex = reader.uint32();
                    break;
                case 4:
                    message.opttype = reader.uint32();
                    break;
                case 5:
                    message.optparam = reader.uint32();
                    break;
                case 6:
                    message.visitorname = reader.string();
                    break;
                case 7:
                    message.visitorhouse = reader.uint64();
                    break;
                case 8:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an HouseVisitInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.HouseVisitInfo} HouseVisitInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseVisitInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an HouseVisitInfo message.
         * @function verify
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        HouseVisitInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.visitorid != null && message.hasOwnProperty("visitorid"))
                if (!$util.isInteger(message.visitorid) && !(message.visitorid && $util.isInteger(message.visitorid.low) && $util.isInteger(message.visitorid.high)))
                    return "visitorid: integer|Long expected";
            if (message.tmvisit != null && message.hasOwnProperty("tmvisit"))
                if (!$util.isInteger(message.tmvisit) && !(message.tmvisit && $util.isInteger(message.tmvisit.low) && $util.isInteger(message.tmvisit.high)))
                    return "tmvisit: integer|Long expected";
            if (message.optindex != null && message.hasOwnProperty("optindex"))
                if (!$util.isInteger(message.optindex))
                    return "optindex: integer expected";
            if (message.opttype != null && message.hasOwnProperty("opttype"))
                if (!$util.isInteger(message.opttype))
                    return "opttype: integer expected";
            if (message.optparam != null && message.hasOwnProperty("optparam"))
                if (!$util.isInteger(message.optparam))
                    return "optparam: integer expected";
            if (message.visitorname != null && message.hasOwnProperty("visitorname"))
                if (!$util.isString(message.visitorname))
                    return "visitorname: string expected";
            if (message.visitorhouse != null && message.hasOwnProperty("visitorhouse"))
                if (!$util.isInteger(message.visitorhouse) && !(message.visitorhouse && $util.isInteger(message.visitorhouse.low) && $util.isInteger(message.visitorhouse.high)))
                    return "visitorhouse: integer|Long expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates an HouseVisitInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.HouseVisitInfo} HouseVisitInfo
         */
        HouseVisitInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.HouseVisitInfo)
                return object;
            var message = new $root.msg.HouseVisitInfo();
            if (object.visitorid != null)
                if ($util.Long)
                    (message.visitorid = $util.Long.fromValue(object.visitorid)).unsigned = true;
                else if (typeof object.visitorid === "string")
                    message.visitorid = parseInt(object.visitorid, 10);
                else if (typeof object.visitorid === "number")
                    message.visitorid = object.visitorid;
                else if (typeof object.visitorid === "object")
                    message.visitorid = new $util.LongBits(object.visitorid.low >>> 0, object.visitorid.high >>> 0).toNumber(true);
            if (object.tmvisit != null)
                if ($util.Long)
                    (message.tmvisit = $util.Long.fromValue(object.tmvisit)).unsigned = false;
                else if (typeof object.tmvisit === "string")
                    message.tmvisit = parseInt(object.tmvisit, 10);
                else if (typeof object.tmvisit === "number")
                    message.tmvisit = object.tmvisit;
                else if (typeof object.tmvisit === "object")
                    message.tmvisit = new $util.LongBits(object.tmvisit.low >>> 0, object.tmvisit.high >>> 0).toNumber();
            if (object.optindex != null)
                message.optindex = object.optindex >>> 0;
            if (object.opttype != null)
                message.opttype = object.opttype >>> 0;
            if (object.optparam != null)
                message.optparam = object.optparam >>> 0;
            if (object.visitorname != null)
                message.visitorname = String(object.visitorname);
            if (object.visitorhouse != null)
                if ($util.Long)
                    (message.visitorhouse = $util.Long.fromValue(object.visitorhouse)).unsigned = true;
                else if (typeof object.visitorhouse === "string")
                    message.visitorhouse = parseInt(object.visitorhouse, 10);
                else if (typeof object.visitorhouse === "number")
                    message.visitorhouse = object.visitorhouse;
                else if (typeof object.visitorhouse === "object")
                    message.visitorhouse = new $util.LongBits(object.visitorhouse.low >>> 0, object.visitorhouse.high >>> 0).toNumber(true);
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from an HouseVisitInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.HouseVisitInfo
         * @static
         * @param {msg.HouseVisitInfo} message HouseVisitInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        HouseVisitInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.visitorid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.visitorid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmvisit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmvisit = options.longs === String ? "0" : 0;
                object.optindex = 0;
                object.opttype = 0;
                object.optparam = 0;
                object.visitorname = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.visitorhouse = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.visitorhouse = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            }
            if (message.visitorid != null && message.hasOwnProperty("visitorid"))
                if (typeof message.visitorid === "number")
                    object.visitorid = options.longs === String ? String(message.visitorid) : message.visitorid;
                else
                    object.visitorid = options.longs === String ? $util.Long.prototype.toString.call(message.visitorid) : options.longs === Number ? new $util.LongBits(message.visitorid.low >>> 0, message.visitorid.high >>> 0).toNumber(true) : message.visitorid;
            if (message.tmvisit != null && message.hasOwnProperty("tmvisit"))
                if (typeof message.tmvisit === "number")
                    object.tmvisit = options.longs === String ? String(message.tmvisit) : message.tmvisit;
                else
                    object.tmvisit = options.longs === String ? $util.Long.prototype.toString.call(message.tmvisit) : options.longs === Number ? new $util.LongBits(message.tmvisit.low >>> 0, message.tmvisit.high >>> 0).toNumber() : message.tmvisit;
            if (message.optindex != null && message.hasOwnProperty("optindex"))
                object.optindex = message.optindex;
            if (message.opttype != null && message.hasOwnProperty("opttype"))
                object.opttype = message.opttype;
            if (message.optparam != null && message.hasOwnProperty("optparam"))
                object.optparam = message.optparam;
            if (message.visitorname != null && message.hasOwnProperty("visitorname"))
                object.visitorname = message.visitorname;
            if (message.visitorhouse != null && message.hasOwnProperty("visitorhouse"))
                if (typeof message.visitorhouse === "number")
                    object.visitorhouse = options.longs === String ? String(message.visitorhouse) : message.visitorhouse;
                else
                    object.visitorhouse = options.longs === String ? $util.Long.prototype.toString.call(message.visitorhouse) : options.longs === Number ? new $util.LongBits(message.visitorhouse.low >>> 0, message.visitorhouse.high >>> 0).toNumber(true) : message.visitorhouse;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            return object;
        };

        /**
         * Converts this HouseVisitInfo to JSON.
         * @function toJSON
         * @memberof msg.HouseVisitInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        HouseVisitInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return HouseVisitInfo;
    })();

    msg.HouseData = (function() {

        /**
         * Properties of an HouseData.
         * @memberof msg
         * @interface IHouseData
         * @property {number|Long|null} [id] HouseData id
         * @property {number|null} [tid] HouseData tid
         * @property {number|Long|null} [ownerid] HouseData ownerid
         * @property {number|null} [buildingid] HouseData buildingid
         * @property {number|null} [level] HouseData level
         * @property {Array.<msg.IHouseCell>|null} [housecells] HouseData housecells
         * @property {Array.<msg.IHouseVisitInfo>|null} [visitinfo] HouseData visitinfo
         * @property {string|null} [ownername] HouseData ownername
         * @property {number|null} [robcheckflag] HouseData robcheckflag
         * @property {Array.<msg.IParkingData>|null} [parkings] HouseData parkings
         * @property {number|null} [roommember] HouseData roommember
         * @property {number|null} [area] HouseData area
         * @property {boolean|null} [issell] HouseData issell
         * @property {number|null} [tradeendtime] HouseData tradeendtime
         * @property {number|null} [income] HouseData income
         * @property {number|null} [sumvalue] HouseData sumvalue
         * @property {number|Long|null} [tradeuid] HouseData tradeuid
         * @property {number|null} [tradeprice] HouseData tradeprice
         * @property {number|Long|null} [visitrecordid] HouseData visitrecordid
         * @property {number|null} [ownersex] HouseData ownersex
         * @property {number|null} [ownerlevel] HouseData ownerlevel
         * @property {string|null} [ownerface] HouseData ownerface
         */

        /**
         * Constructs a new HouseData.
         * @memberof msg
         * @classdesc Represents an HouseData.
         * @implements IHouseData
         * @constructor
         * @param {msg.IHouseData=} [properties] Properties to set
         */
        function HouseData(properties) {
            this.housecells = [];
            this.visitinfo = [];
            this.parkings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * HouseData id.
         * @member {number|Long} id
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseData tid.
         * @member {number} tid
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.tid = 0;

        /**
         * HouseData ownerid.
         * @member {number|Long} ownerid
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.ownerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseData buildingid.
         * @member {number} buildingid
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.buildingid = 0;

        /**
         * HouseData level.
         * @member {number} level
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.level = 0;

        /**
         * HouseData housecells.
         * @member {Array.<msg.IHouseCell>} housecells
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.housecells = $util.emptyArray;

        /**
         * HouseData visitinfo.
         * @member {Array.<msg.IHouseVisitInfo>} visitinfo
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.visitinfo = $util.emptyArray;

        /**
         * HouseData ownername.
         * @member {string} ownername
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.ownername = "";

        /**
         * HouseData robcheckflag.
         * @member {number} robcheckflag
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.robcheckflag = 0;

        /**
         * HouseData parkings.
         * @member {Array.<msg.IParkingData>} parkings
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.parkings = $util.emptyArray;

        /**
         * HouseData roommember.
         * @member {number} roommember
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.roommember = 0;

        /**
         * HouseData area.
         * @member {number} area
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.area = 0;

        /**
         * HouseData issell.
         * @member {boolean} issell
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.issell = false;

        /**
         * HouseData tradeendtime.
         * @member {number} tradeendtime
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.tradeendtime = 0;

        /**
         * HouseData income.
         * @member {number} income
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.income = 0;

        /**
         * HouseData sumvalue.
         * @member {number} sumvalue
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.sumvalue = 0;

        /**
         * HouseData tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseData tradeprice.
         * @member {number} tradeprice
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.tradeprice = 0;

        /**
         * HouseData visitrecordid.
         * @member {number|Long} visitrecordid
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.visitrecordid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * HouseData ownersex.
         * @member {number} ownersex
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.ownersex = 0;

        /**
         * HouseData ownerlevel.
         * @member {number} ownerlevel
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.ownerlevel = 0;

        /**
         * HouseData ownerface.
         * @member {string} ownerface
         * @memberof msg.HouseData
         * @instance
         */
        HouseData.prototype.ownerface = "";

        /**
         * Creates a new HouseData instance using the specified properties.
         * @function create
         * @memberof msg.HouseData
         * @static
         * @param {msg.IHouseData=} [properties] Properties to set
         * @returns {msg.HouseData} HouseData instance
         */
        HouseData.create = function create(properties) {
            return new HouseData(properties);
        };

        /**
         * Encodes the specified HouseData message. Does not implicitly {@link msg.HouseData.verify|verify} messages.
         * @function encode
         * @memberof msg.HouseData
         * @static
         * @param {msg.IHouseData} message HouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tid);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ownerid);
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.buildingid);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.level);
            if (message.housecells != null && message.housecells.length)
                for (var i = 0; i < message.housecells.length; ++i)
                    $root.msg.HouseCell.encode(message.housecells[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.visitinfo != null && message.visitinfo.length)
                for (var i = 0; i < message.visitinfo.length; ++i)
                    $root.msg.HouseVisitInfo.encode(message.visitinfo[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.ownername);
            if (message.robcheckflag != null && message.hasOwnProperty("robcheckflag"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.robcheckflag);
            if (message.parkings != null && message.parkings.length)
                for (var i = 0; i < message.parkings.length; ++i)
                    $root.msg.ParkingData.encode(message.parkings[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.roommember != null && message.hasOwnProperty("roommember"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.roommember);
            if (message.area != null && message.hasOwnProperty("area"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.area);
            if (message.issell != null && message.hasOwnProperty("issell"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.issell);
            if (message.tradeendtime != null && message.hasOwnProperty("tradeendtime"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.tradeendtime);
            if (message.income != null && message.hasOwnProperty("income"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.income);
            if (message.sumvalue != null && message.hasOwnProperty("sumvalue"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.sumvalue);
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.tradeuid);
            if (message.tradeprice != null && message.hasOwnProperty("tradeprice"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.tradeprice);
            if (message.visitrecordid != null && message.hasOwnProperty("visitrecordid"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.visitrecordid);
            if (message.ownersex != null && message.hasOwnProperty("ownersex"))
                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.ownersex);
            if (message.ownerlevel != null && message.hasOwnProperty("ownerlevel"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.ownerlevel);
            if (message.ownerface != null && message.hasOwnProperty("ownerface"))
                writer.uint32(/* id 22, wireType 2 =*/178).string(message.ownerface);
            return writer;
        };

        /**
         * Encodes the specified HouseData message, length delimited. Does not implicitly {@link msg.HouseData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.HouseData
         * @static
         * @param {msg.IHouseData} message HouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HouseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an HouseData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.HouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.HouseData} HouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.HouseData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.tid = reader.uint32();
                    break;
                case 3:
                    message.ownerid = reader.uint64();
                    break;
                case 4:
                    message.buildingid = reader.uint32();
                    break;
                case 5:
                    message.level = reader.uint32();
                    break;
                case 6:
                    if (!(message.housecells && message.housecells.length))
                        message.housecells = [];
                    message.housecells.push($root.msg.HouseCell.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.visitinfo && message.visitinfo.length))
                        message.visitinfo = [];
                    message.visitinfo.push($root.msg.HouseVisitInfo.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.ownername = reader.string();
                    break;
                case 9:
                    message.robcheckflag = reader.uint32();
                    break;
                case 10:
                    if (!(message.parkings && message.parkings.length))
                        message.parkings = [];
                    message.parkings.push($root.msg.ParkingData.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.roommember = reader.uint32();
                    break;
                case 12:
                    message.area = reader.uint32();
                    break;
                case 13:
                    message.issell = reader.bool();
                    break;
                case 14:
                    message.tradeendtime = reader.uint32();
                    break;
                case 15:
                    message.income = reader.uint32();
                    break;
                case 16:
                    message.sumvalue = reader.uint32();
                    break;
                case 17:
                    message.tradeuid = reader.uint64();
                    break;
                case 18:
                    message.tradeprice = reader.uint32();
                    break;
                case 19:
                    message.visitrecordid = reader.uint64();
                    break;
                case 20:
                    message.ownersex = reader.int32();
                    break;
                case 21:
                    message.ownerlevel = reader.uint32();
                    break;
                case 22:
                    message.ownerface = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an HouseData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.HouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.HouseData} HouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HouseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an HouseData message.
         * @function verify
         * @memberof msg.HouseData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        HouseData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid) && !(message.ownerid && $util.isInteger(message.ownerid.low) && $util.isInteger(message.ownerid.high)))
                    return "ownerid: integer|Long expected";
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                if (!$util.isInteger(message.buildingid))
                    return "buildingid: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.housecells != null && message.hasOwnProperty("housecells")) {
                if (!Array.isArray(message.housecells))
                    return "housecells: array expected";
                for (var i = 0; i < message.housecells.length; ++i) {
                    var error = $root.msg.HouseCell.verify(message.housecells[i]);
                    if (error)
                        return "housecells." + error;
                }
            }
            if (message.visitinfo != null && message.hasOwnProperty("visitinfo")) {
                if (!Array.isArray(message.visitinfo))
                    return "visitinfo: array expected";
                for (var i = 0; i < message.visitinfo.length; ++i) {
                    var error = $root.msg.HouseVisitInfo.verify(message.visitinfo[i]);
                    if (error)
                        return "visitinfo." + error;
                }
            }
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                if (!$util.isString(message.ownername))
                    return "ownername: string expected";
            if (message.robcheckflag != null && message.hasOwnProperty("robcheckflag"))
                if (!$util.isInteger(message.robcheckflag))
                    return "robcheckflag: integer expected";
            if (message.parkings != null && message.hasOwnProperty("parkings")) {
                if (!Array.isArray(message.parkings))
                    return "parkings: array expected";
                for (var i = 0; i < message.parkings.length; ++i) {
                    var error = $root.msg.ParkingData.verify(message.parkings[i]);
                    if (error)
                        return "parkings." + error;
                }
            }
            if (message.roommember != null && message.hasOwnProperty("roommember"))
                if (!$util.isInteger(message.roommember))
                    return "roommember: integer expected";
            if (message.area != null && message.hasOwnProperty("area"))
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
            if (message.issell != null && message.hasOwnProperty("issell"))
                if (typeof message.issell !== "boolean")
                    return "issell: boolean expected";
            if (message.tradeendtime != null && message.hasOwnProperty("tradeendtime"))
                if (!$util.isInteger(message.tradeendtime))
                    return "tradeendtime: integer expected";
            if (message.income != null && message.hasOwnProperty("income"))
                if (!$util.isInteger(message.income))
                    return "income: integer expected";
            if (message.sumvalue != null && message.hasOwnProperty("sumvalue"))
                if (!$util.isInteger(message.sumvalue))
                    return "sumvalue: integer expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.tradeprice != null && message.hasOwnProperty("tradeprice"))
                if (!$util.isInteger(message.tradeprice))
                    return "tradeprice: integer expected";
            if (message.visitrecordid != null && message.hasOwnProperty("visitrecordid"))
                if (!$util.isInteger(message.visitrecordid) && !(message.visitrecordid && $util.isInteger(message.visitrecordid.low) && $util.isInteger(message.visitrecordid.high)))
                    return "visitrecordid: integer|Long expected";
            if (message.ownersex != null && message.hasOwnProperty("ownersex"))
                if (!$util.isInteger(message.ownersex))
                    return "ownersex: integer expected";
            if (message.ownerlevel != null && message.hasOwnProperty("ownerlevel"))
                if (!$util.isInteger(message.ownerlevel))
                    return "ownerlevel: integer expected";
            if (message.ownerface != null && message.hasOwnProperty("ownerface"))
                if (!$util.isString(message.ownerface))
                    return "ownerface: string expected";
            return null;
        };

        /**
         * Creates an HouseData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.HouseData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.HouseData} HouseData
         */
        HouseData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.HouseData)
                return object;
            var message = new $root.msg.HouseData();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.ownerid != null)
                if ($util.Long)
                    (message.ownerid = $util.Long.fromValue(object.ownerid)).unsigned = true;
                else if (typeof object.ownerid === "string")
                    message.ownerid = parseInt(object.ownerid, 10);
                else if (typeof object.ownerid === "number")
                    message.ownerid = object.ownerid;
                else if (typeof object.ownerid === "object")
                    message.ownerid = new $util.LongBits(object.ownerid.low >>> 0, object.ownerid.high >>> 0).toNumber(true);
            if (object.buildingid != null)
                message.buildingid = object.buildingid >>> 0;
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.housecells) {
                if (!Array.isArray(object.housecells))
                    throw TypeError(".msg.HouseData.housecells: array expected");
                message.housecells = [];
                for (var i = 0; i < object.housecells.length; ++i) {
                    if (typeof object.housecells[i] !== "object")
                        throw TypeError(".msg.HouseData.housecells: object expected");
                    message.housecells[i] = $root.msg.HouseCell.fromObject(object.housecells[i]);
                }
            }
            if (object.visitinfo) {
                if (!Array.isArray(object.visitinfo))
                    throw TypeError(".msg.HouseData.visitinfo: array expected");
                message.visitinfo = [];
                for (var i = 0; i < object.visitinfo.length; ++i) {
                    if (typeof object.visitinfo[i] !== "object")
                        throw TypeError(".msg.HouseData.visitinfo: object expected");
                    message.visitinfo[i] = $root.msg.HouseVisitInfo.fromObject(object.visitinfo[i]);
                }
            }
            if (object.ownername != null)
                message.ownername = String(object.ownername);
            if (object.robcheckflag != null)
                message.robcheckflag = object.robcheckflag >>> 0;
            if (object.parkings) {
                if (!Array.isArray(object.parkings))
                    throw TypeError(".msg.HouseData.parkings: array expected");
                message.parkings = [];
                for (var i = 0; i < object.parkings.length; ++i) {
                    if (typeof object.parkings[i] !== "object")
                        throw TypeError(".msg.HouseData.parkings: object expected");
                    message.parkings[i] = $root.msg.ParkingData.fromObject(object.parkings[i]);
                }
            }
            if (object.roommember != null)
                message.roommember = object.roommember >>> 0;
            if (object.area != null)
                message.area = object.area >>> 0;
            if (object.issell != null)
                message.issell = Boolean(object.issell);
            if (object.tradeendtime != null)
                message.tradeendtime = object.tradeendtime >>> 0;
            if (object.income != null)
                message.income = object.income >>> 0;
            if (object.sumvalue != null)
                message.sumvalue = object.sumvalue >>> 0;
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.tradeprice != null)
                message.tradeprice = object.tradeprice >>> 0;
            if (object.visitrecordid != null)
                if ($util.Long)
                    (message.visitrecordid = $util.Long.fromValue(object.visitrecordid)).unsigned = true;
                else if (typeof object.visitrecordid === "string")
                    message.visitrecordid = parseInt(object.visitrecordid, 10);
                else if (typeof object.visitrecordid === "number")
                    message.visitrecordid = object.visitrecordid;
                else if (typeof object.visitrecordid === "object")
                    message.visitrecordid = new $util.LongBits(object.visitrecordid.low >>> 0, object.visitrecordid.high >>> 0).toNumber(true);
            if (object.ownersex != null)
                message.ownersex = object.ownersex | 0;
            if (object.ownerlevel != null)
                message.ownerlevel = object.ownerlevel >>> 0;
            if (object.ownerface != null)
                message.ownerface = String(object.ownerface);
            return message;
        };

        /**
         * Creates a plain object from an HouseData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.HouseData
         * @static
         * @param {msg.HouseData} message HouseData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        HouseData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.housecells = [];
                object.visitinfo = [];
                object.parkings = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.tid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ownerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ownerid = options.longs === String ? "0" : 0;
                object.buildingid = 0;
                object.level = 0;
                object.ownername = "";
                object.robcheckflag = 0;
                object.roommember = 0;
                object.area = 0;
                object.issell = false;
                object.tradeendtime = 0;
                object.income = 0;
                object.sumvalue = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                object.tradeprice = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.visitrecordid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.visitrecordid = options.longs === String ? "0" : 0;
                object.ownersex = 0;
                object.ownerlevel = 0;
                object.ownerface = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (typeof message.ownerid === "number")
                    object.ownerid = options.longs === String ? String(message.ownerid) : message.ownerid;
                else
                    object.ownerid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerid) : options.longs === Number ? new $util.LongBits(message.ownerid.low >>> 0, message.ownerid.high >>> 0).toNumber(true) : message.ownerid;
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                object.buildingid = message.buildingid;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.housecells && message.housecells.length) {
                object.housecells = [];
                for (var j = 0; j < message.housecells.length; ++j)
                    object.housecells[j] = $root.msg.HouseCell.toObject(message.housecells[j], options);
            }
            if (message.visitinfo && message.visitinfo.length) {
                object.visitinfo = [];
                for (var j = 0; j < message.visitinfo.length; ++j)
                    object.visitinfo[j] = $root.msg.HouseVisitInfo.toObject(message.visitinfo[j], options);
            }
            if (message.ownername != null && message.hasOwnProperty("ownername"))
                object.ownername = message.ownername;
            if (message.robcheckflag != null && message.hasOwnProperty("robcheckflag"))
                object.robcheckflag = message.robcheckflag;
            if (message.parkings && message.parkings.length) {
                object.parkings = [];
                for (var j = 0; j < message.parkings.length; ++j)
                    object.parkings[j] = $root.msg.ParkingData.toObject(message.parkings[j], options);
            }
            if (message.roommember != null && message.hasOwnProperty("roommember"))
                object.roommember = message.roommember;
            if (message.area != null && message.hasOwnProperty("area"))
                object.area = message.area;
            if (message.issell != null && message.hasOwnProperty("issell"))
                object.issell = message.issell;
            if (message.tradeendtime != null && message.hasOwnProperty("tradeendtime"))
                object.tradeendtime = message.tradeendtime;
            if (message.income != null && message.hasOwnProperty("income"))
                object.income = message.income;
            if (message.sumvalue != null && message.hasOwnProperty("sumvalue"))
                object.sumvalue = message.sumvalue;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.tradeprice != null && message.hasOwnProperty("tradeprice"))
                object.tradeprice = message.tradeprice;
            if (message.visitrecordid != null && message.hasOwnProperty("visitrecordid"))
                if (typeof message.visitrecordid === "number")
                    object.visitrecordid = options.longs === String ? String(message.visitrecordid) : message.visitrecordid;
                else
                    object.visitrecordid = options.longs === String ? $util.Long.prototype.toString.call(message.visitrecordid) : options.longs === Number ? new $util.LongBits(message.visitrecordid.low >>> 0, message.visitrecordid.high >>> 0).toNumber(true) : message.visitrecordid;
            if (message.ownersex != null && message.hasOwnProperty("ownersex"))
                object.ownersex = message.ownersex;
            if (message.ownerlevel != null && message.hasOwnProperty("ownerlevel"))
                object.ownerlevel = message.ownerlevel;
            if (message.ownerface != null && message.hasOwnProperty("ownerface"))
                object.ownerface = message.ownerface;
            return object;
        };

        /**
         * Converts this HouseData to JSON.
         * @function toJSON
         * @memberof msg.HouseData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        HouseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return HouseData;
    })();

    msg.CarProductData = (function() {

        /**
         * Properties of a CarProductData.
         * @memberof msg
         * @interface ICarProductData
         * @property {number|null} [pid] CarProductData pid
         * @property {number|null} [sell] CarProductData sell
         * @property {number|null} [sold] CarProductData sold
         */

        /**
         * Constructs a new CarProductData.
         * @memberof msg
         * @classdesc Represents a CarProductData.
         * @implements ICarProductData
         * @constructor
         * @param {msg.ICarProductData=} [properties] Properties to set
         */
        function CarProductData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarProductData pid.
         * @member {number} pid
         * @memberof msg.CarProductData
         * @instance
         */
        CarProductData.prototype.pid = 0;

        /**
         * CarProductData sell.
         * @member {number} sell
         * @memberof msg.CarProductData
         * @instance
         */
        CarProductData.prototype.sell = 0;

        /**
         * CarProductData sold.
         * @member {number} sold
         * @memberof msg.CarProductData
         * @instance
         */
        CarProductData.prototype.sold = 0;

        /**
         * Creates a new CarProductData instance using the specified properties.
         * @function create
         * @memberof msg.CarProductData
         * @static
         * @param {msg.ICarProductData=} [properties] Properties to set
         * @returns {msg.CarProductData} CarProductData instance
         */
        CarProductData.create = function create(properties) {
            return new CarProductData(properties);
        };

        /**
         * Encodes the specified CarProductData message. Does not implicitly {@link msg.CarProductData.verify|verify} messages.
         * @function encode
         * @memberof msg.CarProductData
         * @static
         * @param {msg.ICarProductData} message CarProductData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarProductData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pid != null && message.hasOwnProperty("pid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pid);
            if (message.sell != null && message.hasOwnProperty("sell"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sell);
            if (message.sold != null && message.hasOwnProperty("sold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.sold);
            return writer;
        };

        /**
         * Encodes the specified CarProductData message, length delimited. Does not implicitly {@link msg.CarProductData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CarProductData
         * @static
         * @param {msg.ICarProductData} message CarProductData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarProductData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarProductData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CarProductData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CarProductData} CarProductData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarProductData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CarProductData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pid = reader.uint32();
                    break;
                case 2:
                    message.sell = reader.uint32();
                    break;
                case 3:
                    message.sold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarProductData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CarProductData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CarProductData} CarProductData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarProductData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarProductData message.
         * @function verify
         * @memberof msg.CarProductData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarProductData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pid != null && message.hasOwnProperty("pid"))
                if (!$util.isInteger(message.pid))
                    return "pid: integer expected";
            if (message.sell != null && message.hasOwnProperty("sell"))
                if (!$util.isInteger(message.sell))
                    return "sell: integer expected";
            if (message.sold != null && message.hasOwnProperty("sold"))
                if (!$util.isInteger(message.sold))
                    return "sold: integer expected";
            return null;
        };

        /**
         * Creates a CarProductData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CarProductData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CarProductData} CarProductData
         */
        CarProductData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CarProductData)
                return object;
            var message = new $root.msg.CarProductData();
            if (object.pid != null)
                message.pid = object.pid >>> 0;
            if (object.sell != null)
                message.sell = object.sell >>> 0;
            if (object.sold != null)
                message.sold = object.sold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CarProductData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CarProductData
         * @static
         * @param {msg.CarProductData} message CarProductData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarProductData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pid = 0;
                object.sell = 0;
                object.sold = 0;
            }
            if (message.pid != null && message.hasOwnProperty("pid"))
                object.pid = message.pid;
            if (message.sell != null && message.hasOwnProperty("sell"))
                object.sell = message.sell;
            if (message.sold != null && message.hasOwnProperty("sold"))
                object.sold = message.sold;
            return object;
        };

        /**
         * Converts this CarProductData to JSON.
         * @function toJSON
         * @memberof msg.CarProductData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarProductData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarProductData;
    })();

    msg.StoreProductData = (function() {

        /**
         * Properties of a StoreProductData.
         * @memberof msg
         * @interface IStoreProductData
         * @property {number|null} [pid] StoreProductData pid
         * @property {number|null} [shopid] StoreProductData shopid
         * @property {number|null} [sell] StoreProductData sell
         * @property {number|null} [sold] StoreProductData sold
         */

        /**
         * Constructs a new StoreProductData.
         * @memberof msg
         * @classdesc Represents a StoreProductData.
         * @implements IStoreProductData
         * @constructor
         * @param {msg.IStoreProductData=} [properties] Properties to set
         */
        function StoreProductData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StoreProductData pid.
         * @member {number} pid
         * @memberof msg.StoreProductData
         * @instance
         */
        StoreProductData.prototype.pid = 0;

        /**
         * StoreProductData shopid.
         * @member {number} shopid
         * @memberof msg.StoreProductData
         * @instance
         */
        StoreProductData.prototype.shopid = 0;

        /**
         * StoreProductData sell.
         * @member {number} sell
         * @memberof msg.StoreProductData
         * @instance
         */
        StoreProductData.prototype.sell = 0;

        /**
         * StoreProductData sold.
         * @member {number} sold
         * @memberof msg.StoreProductData
         * @instance
         */
        StoreProductData.prototype.sold = 0;

        /**
         * Creates a new StoreProductData instance using the specified properties.
         * @function create
         * @memberof msg.StoreProductData
         * @static
         * @param {msg.IStoreProductData=} [properties] Properties to set
         * @returns {msg.StoreProductData} StoreProductData instance
         */
        StoreProductData.create = function create(properties) {
            return new StoreProductData(properties);
        };

        /**
         * Encodes the specified StoreProductData message. Does not implicitly {@link msg.StoreProductData.verify|verify} messages.
         * @function encode
         * @memberof msg.StoreProductData
         * @static
         * @param {msg.IStoreProductData} message StoreProductData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StoreProductData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pid != null && message.hasOwnProperty("pid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pid);
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.shopid);
            if (message.sell != null && message.hasOwnProperty("sell"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.sell);
            if (message.sold != null && message.hasOwnProperty("sold"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.sold);
            return writer;
        };

        /**
         * Encodes the specified StoreProductData message, length delimited. Does not implicitly {@link msg.StoreProductData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.StoreProductData
         * @static
         * @param {msg.IStoreProductData} message StoreProductData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StoreProductData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StoreProductData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.StoreProductData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.StoreProductData} StoreProductData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StoreProductData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.StoreProductData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pid = reader.uint32();
                    break;
                case 2:
                    message.shopid = reader.uint32();
                    break;
                case 3:
                    message.sell = reader.uint32();
                    break;
                case 4:
                    message.sold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StoreProductData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.StoreProductData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.StoreProductData} StoreProductData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StoreProductData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StoreProductData message.
         * @function verify
         * @memberof msg.StoreProductData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StoreProductData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pid != null && message.hasOwnProperty("pid"))
                if (!$util.isInteger(message.pid))
                    return "pid: integer expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            if (message.sell != null && message.hasOwnProperty("sell"))
                if (!$util.isInteger(message.sell))
                    return "sell: integer expected";
            if (message.sold != null && message.hasOwnProperty("sold"))
                if (!$util.isInteger(message.sold))
                    return "sold: integer expected";
            return null;
        };

        /**
         * Creates a StoreProductData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.StoreProductData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.StoreProductData} StoreProductData
         */
        StoreProductData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.StoreProductData)
                return object;
            var message = new $root.msg.StoreProductData();
            if (object.pid != null)
                message.pid = object.pid >>> 0;
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            if (object.sell != null)
                message.sell = object.sell >>> 0;
            if (object.sold != null)
                message.sold = object.sold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a StoreProductData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.StoreProductData
         * @static
         * @param {msg.StoreProductData} message StoreProductData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StoreProductData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pid = 0;
                object.shopid = 0;
                object.sell = 0;
                object.sold = 0;
            }
            if (message.pid != null && message.hasOwnProperty("pid"))
                object.pid = message.pid;
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            if (message.sell != null && message.hasOwnProperty("sell"))
                object.sell = message.sell;
            if (message.sold != null && message.hasOwnProperty("sold"))
                object.sold = message.sold;
            return object;
        };

        /**
         * Converts this StoreProductData to JSON.
         * @function toJSON
         * @memberof msg.StoreProductData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StoreProductData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StoreProductData;
    })();

    msg.BuidingSoldData = (function() {

        /**
         * Properties of a BuidingSoldData.
         * @memberof msg
         * @interface IBuidingSoldData
         * @property {number|null} [index] BuidingSoldData index
         * @property {Array.<number|Long>|null} [houseid] BuidingSoldData houseid
         */

        /**
         * Constructs a new BuidingSoldData.
         * @memberof msg
         * @classdesc Represents a BuidingSoldData.
         * @implements IBuidingSoldData
         * @constructor
         * @param {msg.IBuidingSoldData=} [properties] Properties to set
         */
        function BuidingSoldData(properties) {
            this.houseid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BuidingSoldData index.
         * @member {number} index
         * @memberof msg.BuidingSoldData
         * @instance
         */
        BuidingSoldData.prototype.index = 0;

        /**
         * BuidingSoldData houseid.
         * @member {Array.<number|Long>} houseid
         * @memberof msg.BuidingSoldData
         * @instance
         */
        BuidingSoldData.prototype.houseid = $util.emptyArray;

        /**
         * Creates a new BuidingSoldData instance using the specified properties.
         * @function create
         * @memberof msg.BuidingSoldData
         * @static
         * @param {msg.IBuidingSoldData=} [properties] Properties to set
         * @returns {msg.BuidingSoldData} BuidingSoldData instance
         */
        BuidingSoldData.create = function create(properties) {
            return new BuidingSoldData(properties);
        };

        /**
         * Encodes the specified BuidingSoldData message. Does not implicitly {@link msg.BuidingSoldData.verify|verify} messages.
         * @function encode
         * @memberof msg.BuidingSoldData
         * @static
         * @param {msg.IBuidingSoldData} message BuidingSoldData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuidingSoldData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            if (message.houseid != null && message.houseid.length)
                for (var i = 0; i < message.houseid.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.houseid[i]);
            return writer;
        };

        /**
         * Encodes the specified BuidingSoldData message, length delimited. Does not implicitly {@link msg.BuidingSoldData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BuidingSoldData
         * @static
         * @param {msg.IBuidingSoldData} message BuidingSoldData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuidingSoldData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BuidingSoldData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BuidingSoldData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BuidingSoldData} BuidingSoldData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuidingSoldData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BuidingSoldData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                case 2:
                    if (!(message.houseid && message.houseid.length))
                        message.houseid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.houseid.push(reader.uint64());
                    } else
                        message.houseid.push(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BuidingSoldData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BuidingSoldData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BuidingSoldData} BuidingSoldData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuidingSoldData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BuidingSoldData message.
         * @function verify
         * @memberof msg.BuidingSoldData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BuidingSoldData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.houseid != null && message.hasOwnProperty("houseid")) {
                if (!Array.isArray(message.houseid))
                    return "houseid: array expected";
                for (var i = 0; i < message.houseid.length; ++i)
                    if (!$util.isInteger(message.houseid[i]) && !(message.houseid[i] && $util.isInteger(message.houseid[i].low) && $util.isInteger(message.houseid[i].high)))
                        return "houseid: integer|Long[] expected";
            }
            return null;
        };

        /**
         * Creates a BuidingSoldData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BuidingSoldData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BuidingSoldData} BuidingSoldData
         */
        BuidingSoldData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BuidingSoldData)
                return object;
            var message = new $root.msg.BuidingSoldData();
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.houseid) {
                if (!Array.isArray(object.houseid))
                    throw TypeError(".msg.BuidingSoldData.houseid: array expected");
                message.houseid = [];
                for (var i = 0; i < object.houseid.length; ++i)
                    if ($util.Long)
                        (message.houseid[i] = $util.Long.fromValue(object.houseid[i])).unsigned = true;
                    else if (typeof object.houseid[i] === "string")
                        message.houseid[i] = parseInt(object.houseid[i], 10);
                    else if (typeof object.houseid[i] === "number")
                        message.houseid[i] = object.houseid[i];
                    else if (typeof object.houseid[i] === "object")
                        message.houseid[i] = new $util.LongBits(object.houseid[i].low >>> 0, object.houseid[i].high >>> 0).toNumber(true);
            }
            return message;
        };

        /**
         * Creates a plain object from a BuidingSoldData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BuidingSoldData
         * @static
         * @param {msg.BuidingSoldData} message BuidingSoldData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BuidingSoldData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.houseid = [];
            if (options.defaults)
                object.index = 0;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.houseid && message.houseid.length) {
                object.houseid = [];
                for (var j = 0; j < message.houseid.length; ++j)
                    if (typeof message.houseid[j] === "number")
                        object.houseid[j] = options.longs === String ? String(message.houseid[j]) : message.houseid[j];
                    else
                        object.houseid[j] = options.longs === String ? $util.Long.prototype.toString.call(message.houseid[j]) : options.longs === Number ? new $util.LongBits(message.houseid[j].low >>> 0, message.houseid[j].high >>> 0).toNumber(true) : message.houseid[j];
            }
            return object;
        };

        /**
         * Converts this BuidingSoldData to JSON.
         * @function toJSON
         * @memberof msg.BuidingSoldData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BuidingSoldData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BuidingSoldData;
    })();

    msg.BuildingData = (function() {

        /**
         * Properties of a BuildingData.
         * @memberof msg
         * @interface IBuildingData
         * @property {number|null} [id] BuildingData id
         * @property {Array.<msg.IBuidingSoldData>|null} [data] BuildingData data
         */

        /**
         * Constructs a new BuildingData.
         * @memberof msg
         * @classdesc Represents a BuildingData.
         * @implements IBuildingData
         * @constructor
         * @param {msg.IBuildingData=} [properties] Properties to set
         */
        function BuildingData(properties) {
            this.data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BuildingData id.
         * @member {number} id
         * @memberof msg.BuildingData
         * @instance
         */
        BuildingData.prototype.id = 0;

        /**
         * BuildingData data.
         * @member {Array.<msg.IBuidingSoldData>} data
         * @memberof msg.BuildingData
         * @instance
         */
        BuildingData.prototype.data = $util.emptyArray;

        /**
         * Creates a new BuildingData instance using the specified properties.
         * @function create
         * @memberof msg.BuildingData
         * @static
         * @param {msg.IBuildingData=} [properties] Properties to set
         * @returns {msg.BuildingData} BuildingData instance
         */
        BuildingData.create = function create(properties) {
            return new BuildingData(properties);
        };

        /**
         * Encodes the specified BuildingData message. Does not implicitly {@link msg.BuildingData.verify|verify} messages.
         * @function encode
         * @memberof msg.BuildingData
         * @static
         * @param {msg.IBuildingData} message BuildingData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuildingData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.data != null && message.data.length)
                for (var i = 0; i < message.data.length; ++i)
                    $root.msg.BuidingSoldData.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BuildingData message, length delimited. Does not implicitly {@link msg.BuildingData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BuildingData
         * @static
         * @param {msg.IBuildingData} message BuildingData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuildingData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BuildingData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BuildingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BuildingData} BuildingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuildingData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BuildingData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.msg.BuidingSoldData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BuildingData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BuildingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BuildingData} BuildingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuildingData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BuildingData message.
         * @function verify
         * @memberof msg.BuildingData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BuildingData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (var i = 0; i < message.data.length; ++i) {
                    var error = $root.msg.BuidingSoldData.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BuildingData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BuildingData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BuildingData} BuildingData
         */
        BuildingData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BuildingData)
                return object;
            var message = new $root.msg.BuildingData();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".msg.BuildingData.data: array expected");
                message.data = [];
                for (var i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".msg.BuildingData.data: object expected");
                    message.data[i] = $root.msg.BuidingSoldData.fromObject(object.data[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a BuildingData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BuildingData
         * @static
         * @param {msg.BuildingData} message BuildingData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BuildingData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.data && message.data.length) {
                object.data = [];
                for (var j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.msg.BuidingSoldData.toObject(message.data[j], options);
            }
            return object;
        };

        /**
         * Converts this BuildingData to JSON.
         * @function toJSON
         * @memberof msg.BuildingData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BuildingData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BuildingData;
    })();

    msg.C2GW_ReqCarInfo = (function() {

        /**
         * Properties of a C2GW_ReqCarInfo.
         * @memberof msg
         * @interface IC2GW_ReqCarInfo
         */

        /**
         * Constructs a new C2GW_ReqCarInfo.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqCarInfo.
         * @implements IC2GW_ReqCarInfo
         * @constructor
         * @param {msg.IC2GW_ReqCarInfo=} [properties] Properties to set
         */
        function C2GW_ReqCarInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqCarInfo instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {msg.IC2GW_ReqCarInfo=} [properties] Properties to set
         * @returns {msg.C2GW_ReqCarInfo} C2GW_ReqCarInfo instance
         */
        C2GW_ReqCarInfo.create = function create(properties) {
            return new C2GW_ReqCarInfo(properties);
        };

        /**
         * Encodes the specified C2GW_ReqCarInfo message. Does not implicitly {@link msg.C2GW_ReqCarInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {msg.IC2GW_ReqCarInfo} message C2GW_ReqCarInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqCarInfo message, length delimited. Does not implicitly {@link msg.C2GW_ReqCarInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {msg.IC2GW_ReqCarInfo} message C2GW_ReqCarInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqCarInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqCarInfo} C2GW_ReqCarInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqCarInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqCarInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqCarInfo} C2GW_ReqCarInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqCarInfo message.
         * @function verify
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqCarInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqCarInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqCarInfo} C2GW_ReqCarInfo
         */
        C2GW_ReqCarInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqCarInfo)
                return object;
            return new $root.msg.C2GW_ReqCarInfo();
        };

        /**
         * Creates a plain object from a C2GW_ReqCarInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqCarInfo
         * @static
         * @param {msg.C2GW_ReqCarInfo} message C2GW_ReqCarInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqCarInfo.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqCarInfo to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqCarInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqCarInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqCarInfo;
    })();

    msg.C2GW_ReqCarInfoById = (function() {

        /**
         * Properties of a C2GW_ReqCarInfoById.
         * @memberof msg
         * @interface IC2GW_ReqCarInfoById
         * @property {number|Long|null} [carid] C2GW_ReqCarInfoById carid
         */

        /**
         * Constructs a new C2GW_ReqCarInfoById.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqCarInfoById.
         * @implements IC2GW_ReqCarInfoById
         * @constructor
         * @param {msg.IC2GW_ReqCarInfoById=} [properties] Properties to set
         */
        function C2GW_ReqCarInfoById(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqCarInfoById carid.
         * @member {number|Long} carid
         * @memberof msg.C2GW_ReqCarInfoById
         * @instance
         */
        C2GW_ReqCarInfoById.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqCarInfoById instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {msg.IC2GW_ReqCarInfoById=} [properties] Properties to set
         * @returns {msg.C2GW_ReqCarInfoById} C2GW_ReqCarInfoById instance
         */
        C2GW_ReqCarInfoById.create = function create(properties) {
            return new C2GW_ReqCarInfoById(properties);
        };

        /**
         * Encodes the specified C2GW_ReqCarInfoById message. Does not implicitly {@link msg.C2GW_ReqCarInfoById.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {msg.IC2GW_ReqCarInfoById} message C2GW_ReqCarInfoById message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarInfoById.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqCarInfoById message, length delimited. Does not implicitly {@link msg.C2GW_ReqCarInfoById.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {msg.IC2GW_ReqCarInfoById} message C2GW_ReqCarInfoById message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarInfoById.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqCarInfoById message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqCarInfoById} C2GW_ReqCarInfoById
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarInfoById.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqCarInfoById();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqCarInfoById message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqCarInfoById} C2GW_ReqCarInfoById
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarInfoById.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqCarInfoById message.
         * @function verify
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqCarInfoById.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqCarInfoById message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqCarInfoById} C2GW_ReqCarInfoById
         */
        C2GW_ReqCarInfoById.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqCarInfoById)
                return object;
            var message = new $root.msg.C2GW_ReqCarInfoById();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqCarInfoById message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqCarInfoById
         * @static
         * @param {msg.C2GW_ReqCarInfoById} message C2GW_ReqCarInfoById
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqCarInfoById.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            return object;
        };

        /**
         * Converts this C2GW_ReqCarInfoById to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqCarInfoById
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqCarInfoById.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqCarInfoById;
    })();

    msg.GW2C_ResCarInfo = (function() {

        /**
         * Properties of a GW2C_ResCarInfo.
         * @memberof msg
         * @interface IGW2C_ResCarInfo
         * @property {Array.<msg.ICarData>|null} [cardatas] GW2C_ResCarInfo cardatas
         * @property {Array.<msg.IParkingData>|null} [parkingdatas] GW2C_ResCarInfo parkingdatas
         */

        /**
         * Constructs a new GW2C_ResCarInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_ResCarInfo.
         * @implements IGW2C_ResCarInfo
         * @constructor
         * @param {msg.IGW2C_ResCarInfo=} [properties] Properties to set
         */
        function GW2C_ResCarInfo(properties) {
            this.cardatas = [];
            this.parkingdatas = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_ResCarInfo cardatas.
         * @member {Array.<msg.ICarData>} cardatas
         * @memberof msg.GW2C_ResCarInfo
         * @instance
         */
        GW2C_ResCarInfo.prototype.cardatas = $util.emptyArray;

        /**
         * GW2C_ResCarInfo parkingdatas.
         * @member {Array.<msg.IParkingData>} parkingdatas
         * @memberof msg.GW2C_ResCarInfo
         * @instance
         */
        GW2C_ResCarInfo.prototype.parkingdatas = $util.emptyArray;

        /**
         * Creates a new GW2C_ResCarInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {msg.IGW2C_ResCarInfo=} [properties] Properties to set
         * @returns {msg.GW2C_ResCarInfo} GW2C_ResCarInfo instance
         */
        GW2C_ResCarInfo.create = function create(properties) {
            return new GW2C_ResCarInfo(properties);
        };

        /**
         * Encodes the specified GW2C_ResCarInfo message. Does not implicitly {@link msg.GW2C_ResCarInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {msg.IGW2C_ResCarInfo} message GW2C_ResCarInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ResCarInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cardatas != null && message.cardatas.length)
                for (var i = 0; i < message.cardatas.length; ++i)
                    $root.msg.CarData.encode(message.cardatas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.parkingdatas != null && message.parkingdatas.length)
                for (var i = 0; i < message.parkingdatas.length; ++i)
                    $root.msg.ParkingData.encode(message.parkingdatas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_ResCarInfo message, length delimited. Does not implicitly {@link msg.GW2C_ResCarInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {msg.IGW2C_ResCarInfo} message GW2C_ResCarInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ResCarInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_ResCarInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_ResCarInfo} GW2C_ResCarInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ResCarInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_ResCarInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.cardatas && message.cardatas.length))
                        message.cardatas = [];
                    message.cardatas.push($root.msg.CarData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.parkingdatas && message.parkingdatas.length))
                        message.parkingdatas = [];
                    message.parkingdatas.push($root.msg.ParkingData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_ResCarInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_ResCarInfo} GW2C_ResCarInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ResCarInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_ResCarInfo message.
         * @function verify
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_ResCarInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cardatas != null && message.hasOwnProperty("cardatas")) {
                if (!Array.isArray(message.cardatas))
                    return "cardatas: array expected";
                for (var i = 0; i < message.cardatas.length; ++i) {
                    var error = $root.msg.CarData.verify(message.cardatas[i]);
                    if (error)
                        return "cardatas." + error;
                }
            }
            if (message.parkingdatas != null && message.hasOwnProperty("parkingdatas")) {
                if (!Array.isArray(message.parkingdatas))
                    return "parkingdatas: array expected";
                for (var i = 0; i < message.parkingdatas.length; ++i) {
                    var error = $root.msg.ParkingData.verify(message.parkingdatas[i]);
                    if (error)
                        return "parkingdatas." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_ResCarInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_ResCarInfo} GW2C_ResCarInfo
         */
        GW2C_ResCarInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_ResCarInfo)
                return object;
            var message = new $root.msg.GW2C_ResCarInfo();
            if (object.cardatas) {
                if (!Array.isArray(object.cardatas))
                    throw TypeError(".msg.GW2C_ResCarInfo.cardatas: array expected");
                message.cardatas = [];
                for (var i = 0; i < object.cardatas.length; ++i) {
                    if (typeof object.cardatas[i] !== "object")
                        throw TypeError(".msg.GW2C_ResCarInfo.cardatas: object expected");
                    message.cardatas[i] = $root.msg.CarData.fromObject(object.cardatas[i]);
                }
            }
            if (object.parkingdatas) {
                if (!Array.isArray(object.parkingdatas))
                    throw TypeError(".msg.GW2C_ResCarInfo.parkingdatas: array expected");
                message.parkingdatas = [];
                for (var i = 0; i < object.parkingdatas.length; ++i) {
                    if (typeof object.parkingdatas[i] !== "object")
                        throw TypeError(".msg.GW2C_ResCarInfo.parkingdatas: object expected");
                    message.parkingdatas[i] = $root.msg.ParkingData.fromObject(object.parkingdatas[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_ResCarInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_ResCarInfo
         * @static
         * @param {msg.GW2C_ResCarInfo} message GW2C_ResCarInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_ResCarInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.cardatas = [];
                object.parkingdatas = [];
            }
            if (message.cardatas && message.cardatas.length) {
                object.cardatas = [];
                for (var j = 0; j < message.cardatas.length; ++j)
                    object.cardatas[j] = $root.msg.CarData.toObject(message.cardatas[j], options);
            }
            if (message.parkingdatas && message.parkingdatas.length) {
                object.parkingdatas = [];
                for (var j = 0; j < message.parkingdatas.length; ++j)
                    object.parkingdatas[j] = $root.msg.ParkingData.toObject(message.parkingdatas[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_ResCarInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_ResCarInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_ResCarInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_ResCarInfo;
    })();

    msg.GW2C_ResCarInfoById = (function() {

        /**
         * Properties of a GW2C_ResCarInfoById.
         * @memberof msg
         * @interface IGW2C_ResCarInfoById
         * @property {msg.ICarData|null} [cardata] GW2C_ResCarInfoById cardata
         */

        /**
         * Constructs a new GW2C_ResCarInfoById.
         * @memberof msg
         * @classdesc Represents a GW2C_ResCarInfoById.
         * @implements IGW2C_ResCarInfoById
         * @constructor
         * @param {msg.IGW2C_ResCarInfoById=} [properties] Properties to set
         */
        function GW2C_ResCarInfoById(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_ResCarInfoById cardata.
         * @member {msg.ICarData|null|undefined} cardata
         * @memberof msg.GW2C_ResCarInfoById
         * @instance
         */
        GW2C_ResCarInfoById.prototype.cardata = null;

        /**
         * Creates a new GW2C_ResCarInfoById instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {msg.IGW2C_ResCarInfoById=} [properties] Properties to set
         * @returns {msg.GW2C_ResCarInfoById} GW2C_ResCarInfoById instance
         */
        GW2C_ResCarInfoById.create = function create(properties) {
            return new GW2C_ResCarInfoById(properties);
        };

        /**
         * Encodes the specified GW2C_ResCarInfoById message. Does not implicitly {@link msg.GW2C_ResCarInfoById.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {msg.IGW2C_ResCarInfoById} message GW2C_ResCarInfoById message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ResCarInfoById.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cardata != null && message.hasOwnProperty("cardata"))
                $root.msg.CarData.encode(message.cardata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_ResCarInfoById message, length delimited. Does not implicitly {@link msg.GW2C_ResCarInfoById.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {msg.IGW2C_ResCarInfoById} message GW2C_ResCarInfoById message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ResCarInfoById.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_ResCarInfoById message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_ResCarInfoById} GW2C_ResCarInfoById
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ResCarInfoById.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_ResCarInfoById();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cardata = $root.msg.CarData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_ResCarInfoById message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_ResCarInfoById} GW2C_ResCarInfoById
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ResCarInfoById.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_ResCarInfoById message.
         * @function verify
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_ResCarInfoById.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cardata != null && message.hasOwnProperty("cardata")) {
                var error = $root.msg.CarData.verify(message.cardata);
                if (error)
                    return "cardata." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_ResCarInfoById message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_ResCarInfoById} GW2C_ResCarInfoById
         */
        GW2C_ResCarInfoById.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_ResCarInfoById)
                return object;
            var message = new $root.msg.GW2C_ResCarInfoById();
            if (object.cardata != null) {
                if (typeof object.cardata !== "object")
                    throw TypeError(".msg.GW2C_ResCarInfoById.cardata: object expected");
                message.cardata = $root.msg.CarData.fromObject(object.cardata);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_ResCarInfoById message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_ResCarInfoById
         * @static
         * @param {msg.GW2C_ResCarInfoById} message GW2C_ResCarInfoById
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_ResCarInfoById.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cardata = null;
            if (message.cardata != null && message.hasOwnProperty("cardata"))
                object.cardata = $root.msg.CarData.toObject(message.cardata, options);
            return object;
        };

        /**
         * Converts this GW2C_ResCarInfoById to JSON.
         * @function toJSON
         * @memberof msg.GW2C_ResCarInfoById
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_ResCarInfoById.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_ResCarInfoById;
    })();

    msg.C2GW_ReqMyParkingInfo = (function() {

        /**
         * Properties of a C2GW_ReqMyParkingInfo.
         * @memberof msg
         * @interface IC2GW_ReqMyParkingInfo
         */

        /**
         * Constructs a new C2GW_ReqMyParkingInfo.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqMyParkingInfo.
         * @implements IC2GW_ReqMyParkingInfo
         * @constructor
         * @param {msg.IC2GW_ReqMyParkingInfo=} [properties] Properties to set
         */
        function C2GW_ReqMyParkingInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqMyParkingInfo instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {msg.IC2GW_ReqMyParkingInfo=} [properties] Properties to set
         * @returns {msg.C2GW_ReqMyParkingInfo} C2GW_ReqMyParkingInfo instance
         */
        C2GW_ReqMyParkingInfo.create = function create(properties) {
            return new C2GW_ReqMyParkingInfo(properties);
        };

        /**
         * Encodes the specified C2GW_ReqMyParkingInfo message. Does not implicitly {@link msg.C2GW_ReqMyParkingInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {msg.IC2GW_ReqMyParkingInfo} message C2GW_ReqMyParkingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqMyParkingInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqMyParkingInfo message, length delimited. Does not implicitly {@link msg.C2GW_ReqMyParkingInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {msg.IC2GW_ReqMyParkingInfo} message C2GW_ReqMyParkingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqMyParkingInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqMyParkingInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqMyParkingInfo} C2GW_ReqMyParkingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqMyParkingInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqMyParkingInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqMyParkingInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqMyParkingInfo} C2GW_ReqMyParkingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqMyParkingInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqMyParkingInfo message.
         * @function verify
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqMyParkingInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqMyParkingInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqMyParkingInfo} C2GW_ReqMyParkingInfo
         */
        C2GW_ReqMyParkingInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqMyParkingInfo)
                return object;
            return new $root.msg.C2GW_ReqMyParkingInfo();
        };

        /**
         * Creates a plain object from a C2GW_ReqMyParkingInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @static
         * @param {msg.C2GW_ReqMyParkingInfo} message C2GW_ReqMyParkingInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqMyParkingInfo.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqMyParkingInfo to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqMyParkingInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqMyParkingInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqMyParkingInfo;
    })();

    msg.C2GW_ReqParkingInfoByType = (function() {

        /**
         * Properties of a C2GW_ReqParkingInfoByType.
         * @memberof msg
         * @interface IC2GW_ReqParkingInfoByType
         * @property {number|null} [type] C2GW_ReqParkingInfoByType type
         * @property {number|Long|null} [playerid] C2GW_ReqParkingInfoByType playerid
         * @property {Array.<number|Long>|null} [houseids] C2GW_ReqParkingInfoByType houseids
         */

        /**
         * Constructs a new C2GW_ReqParkingInfoByType.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqParkingInfoByType.
         * @implements IC2GW_ReqParkingInfoByType
         * @constructor
         * @param {msg.IC2GW_ReqParkingInfoByType=} [properties] Properties to set
         */
        function C2GW_ReqParkingInfoByType(properties) {
            this.houseids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqParkingInfoByType type.
         * @member {number} type
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @instance
         */
        C2GW_ReqParkingInfoByType.prototype.type = 0;

        /**
         * C2GW_ReqParkingInfoByType playerid.
         * @member {number|Long} playerid
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @instance
         */
        C2GW_ReqParkingInfoByType.prototype.playerid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_ReqParkingInfoByType houseids.
         * @member {Array.<number|Long>} houseids
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @instance
         */
        C2GW_ReqParkingInfoByType.prototype.houseids = $util.emptyArray;

        /**
         * Creates a new C2GW_ReqParkingInfoByType instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {msg.IC2GW_ReqParkingInfoByType=} [properties] Properties to set
         * @returns {msg.C2GW_ReqParkingInfoByType} C2GW_ReqParkingInfoByType instance
         */
        C2GW_ReqParkingInfoByType.create = function create(properties) {
            return new C2GW_ReqParkingInfoByType(properties);
        };

        /**
         * Encodes the specified C2GW_ReqParkingInfoByType message. Does not implicitly {@link msg.C2GW_ReqParkingInfoByType.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {msg.IC2GW_ReqParkingInfoByType} message C2GW_ReqParkingInfoByType message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqParkingInfoByType.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.playerid != null && message.hasOwnProperty("playerid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.playerid);
            if (message.houseids != null && message.houseids.length)
                for (var i = 0; i < message.houseids.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.houseids[i]);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqParkingInfoByType message, length delimited. Does not implicitly {@link msg.C2GW_ReqParkingInfoByType.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {msg.IC2GW_ReqParkingInfoByType} message C2GW_ReqParkingInfoByType message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqParkingInfoByType.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqParkingInfoByType message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqParkingInfoByType} C2GW_ReqParkingInfoByType
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqParkingInfoByType.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqParkingInfoByType();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.playerid = reader.uint64();
                    break;
                case 3:
                    if (!(message.houseids && message.houseids.length))
                        message.houseids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.houseids.push(reader.uint64());
                    } else
                        message.houseids.push(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqParkingInfoByType message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqParkingInfoByType} C2GW_ReqParkingInfoByType
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqParkingInfoByType.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqParkingInfoByType message.
         * @function verify
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqParkingInfoByType.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.playerid != null && message.hasOwnProperty("playerid"))
                if (!$util.isInteger(message.playerid) && !(message.playerid && $util.isInteger(message.playerid.low) && $util.isInteger(message.playerid.high)))
                    return "playerid: integer|Long expected";
            if (message.houseids != null && message.hasOwnProperty("houseids")) {
                if (!Array.isArray(message.houseids))
                    return "houseids: array expected";
                for (var i = 0; i < message.houseids.length; ++i)
                    if (!$util.isInteger(message.houseids[i]) && !(message.houseids[i] && $util.isInteger(message.houseids[i].low) && $util.isInteger(message.houseids[i].high)))
                        return "houseids: integer|Long[] expected";
            }
            return null;
        };

        /**
         * Creates a C2GW_ReqParkingInfoByType message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqParkingInfoByType} C2GW_ReqParkingInfoByType
         */
        C2GW_ReqParkingInfoByType.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqParkingInfoByType)
                return object;
            var message = new $root.msg.C2GW_ReqParkingInfoByType();
            if (object.type != null)
                message.type = object.type | 0;
            if (object.playerid != null)
                if ($util.Long)
                    (message.playerid = $util.Long.fromValue(object.playerid)).unsigned = true;
                else if (typeof object.playerid === "string")
                    message.playerid = parseInt(object.playerid, 10);
                else if (typeof object.playerid === "number")
                    message.playerid = object.playerid;
                else if (typeof object.playerid === "object")
                    message.playerid = new $util.LongBits(object.playerid.low >>> 0, object.playerid.high >>> 0).toNumber(true);
            if (object.houseids) {
                if (!Array.isArray(object.houseids))
                    throw TypeError(".msg.C2GW_ReqParkingInfoByType.houseids: array expected");
                message.houseids = [];
                for (var i = 0; i < object.houseids.length; ++i)
                    if ($util.Long)
                        (message.houseids[i] = $util.Long.fromValue(object.houseids[i])).unsigned = true;
                    else if (typeof object.houseids[i] === "string")
                        message.houseids[i] = parseInt(object.houseids[i], 10);
                    else if (typeof object.houseids[i] === "number")
                        message.houseids[i] = object.houseids[i];
                    else if (typeof object.houseids[i] === "object")
                        message.houseids[i] = new $util.LongBits(object.houseids[i].low >>> 0, object.houseids[i].high >>> 0).toNumber(true);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqParkingInfoByType message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @static
         * @param {msg.C2GW_ReqParkingInfoByType} message C2GW_ReqParkingInfoByType
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqParkingInfoByType.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.houseids = [];
            if (options.defaults) {
                object.type = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.playerid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.playerid = options.longs === String ? "0" : 0;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.playerid != null && message.hasOwnProperty("playerid"))
                if (typeof message.playerid === "number")
                    object.playerid = options.longs === String ? String(message.playerid) : message.playerid;
                else
                    object.playerid = options.longs === String ? $util.Long.prototype.toString.call(message.playerid) : options.longs === Number ? new $util.LongBits(message.playerid.low >>> 0, message.playerid.high >>> 0).toNumber(true) : message.playerid;
            if (message.houseids && message.houseids.length) {
                object.houseids = [];
                for (var j = 0; j < message.houseids.length; ++j)
                    if (typeof message.houseids[j] === "number")
                        object.houseids[j] = options.longs === String ? String(message.houseids[j]) : message.houseids[j];
                    else
                        object.houseids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.houseids[j]) : options.longs === Number ? new $util.LongBits(message.houseids[j].low >>> 0, message.houseids[j].high >>> 0).toNumber(true) : message.houseids[j];
            }
            return object;
        };

        /**
         * Converts this C2GW_ReqParkingInfoByType to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqParkingInfoByType
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqParkingInfoByType.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqParkingInfoByType;
    })();

    msg.GW2C_ResParkingInfo = (function() {

        /**
         * Properties of a GW2C_ResParkingInfo.
         * @memberof msg
         * @interface IGW2C_ResParkingInfo
         * @property {Array.<msg.IParkingData>|null} [parkingdatas] GW2C_ResParkingInfo parkingdatas
         */

        /**
         * Constructs a new GW2C_ResParkingInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_ResParkingInfo.
         * @implements IGW2C_ResParkingInfo
         * @constructor
         * @param {msg.IGW2C_ResParkingInfo=} [properties] Properties to set
         */
        function GW2C_ResParkingInfo(properties) {
            this.parkingdatas = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_ResParkingInfo parkingdatas.
         * @member {Array.<msg.IParkingData>} parkingdatas
         * @memberof msg.GW2C_ResParkingInfo
         * @instance
         */
        GW2C_ResParkingInfo.prototype.parkingdatas = $util.emptyArray;

        /**
         * Creates a new GW2C_ResParkingInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {msg.IGW2C_ResParkingInfo=} [properties] Properties to set
         * @returns {msg.GW2C_ResParkingInfo} GW2C_ResParkingInfo instance
         */
        GW2C_ResParkingInfo.create = function create(properties) {
            return new GW2C_ResParkingInfo(properties);
        };

        /**
         * Encodes the specified GW2C_ResParkingInfo message. Does not implicitly {@link msg.GW2C_ResParkingInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {msg.IGW2C_ResParkingInfo} message GW2C_ResParkingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ResParkingInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.parkingdatas != null && message.parkingdatas.length)
                for (var i = 0; i < message.parkingdatas.length; ++i)
                    $root.msg.ParkingData.encode(message.parkingdatas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_ResParkingInfo message, length delimited. Does not implicitly {@link msg.GW2C_ResParkingInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {msg.IGW2C_ResParkingInfo} message GW2C_ResParkingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ResParkingInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_ResParkingInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_ResParkingInfo} GW2C_ResParkingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ResParkingInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_ResParkingInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.parkingdatas && message.parkingdatas.length))
                        message.parkingdatas = [];
                    message.parkingdatas.push($root.msg.ParkingData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_ResParkingInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_ResParkingInfo} GW2C_ResParkingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ResParkingInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_ResParkingInfo message.
         * @function verify
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_ResParkingInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.parkingdatas != null && message.hasOwnProperty("parkingdatas")) {
                if (!Array.isArray(message.parkingdatas))
                    return "parkingdatas: array expected";
                for (var i = 0; i < message.parkingdatas.length; ++i) {
                    var error = $root.msg.ParkingData.verify(message.parkingdatas[i]);
                    if (error)
                        return "parkingdatas." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_ResParkingInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_ResParkingInfo} GW2C_ResParkingInfo
         */
        GW2C_ResParkingInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_ResParkingInfo)
                return object;
            var message = new $root.msg.GW2C_ResParkingInfo();
            if (object.parkingdatas) {
                if (!Array.isArray(object.parkingdatas))
                    throw TypeError(".msg.GW2C_ResParkingInfo.parkingdatas: array expected");
                message.parkingdatas = [];
                for (var i = 0; i < object.parkingdatas.length; ++i) {
                    if (typeof object.parkingdatas[i] !== "object")
                        throw TypeError(".msg.GW2C_ResParkingInfo.parkingdatas: object expected");
                    message.parkingdatas[i] = $root.msg.ParkingData.fromObject(object.parkingdatas[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_ResParkingInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_ResParkingInfo
         * @static
         * @param {msg.GW2C_ResParkingInfo} message GW2C_ResParkingInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_ResParkingInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.parkingdatas = [];
            if (message.parkingdatas && message.parkingdatas.length) {
                object.parkingdatas = [];
                for (var j = 0; j < message.parkingdatas.length; ++j)
                    object.parkingdatas[j] = $root.msg.ParkingData.toObject(message.parkingdatas[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_ResParkingInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_ResParkingInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_ResParkingInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_ResParkingInfo;
    })();

    msg.C2GW_ParkCar = (function() {

        /**
         * Properties of a C2GW_ParkCar.
         * @memberof msg
         * @interface IC2GW_ParkCar
         * @property {number|Long|null} [carid] C2GW_ParkCar carid
         * @property {number|Long|null} [parkingid] C2GW_ParkCar parkingid
         */

        /**
         * Constructs a new C2GW_ParkCar.
         * @memberof msg
         * @classdesc Represents a C2GW_ParkCar.
         * @implements IC2GW_ParkCar
         * @constructor
         * @param {msg.IC2GW_ParkCar=} [properties] Properties to set
         */
        function C2GW_ParkCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ParkCar carid.
         * @member {number|Long} carid
         * @memberof msg.C2GW_ParkCar
         * @instance
         */
        C2GW_ParkCar.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_ParkCar parkingid.
         * @member {number|Long} parkingid
         * @memberof msg.C2GW_ParkCar
         * @instance
         */
        C2GW_ParkCar.prototype.parkingid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ParkCar instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {msg.IC2GW_ParkCar=} [properties] Properties to set
         * @returns {msg.C2GW_ParkCar} C2GW_ParkCar instance
         */
        C2GW_ParkCar.create = function create(properties) {
            return new C2GW_ParkCar(properties);
        };

        /**
         * Encodes the specified C2GW_ParkCar message. Does not implicitly {@link msg.C2GW_ParkCar.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {msg.IC2GW_ParkCar} message C2GW_ParkCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ParkCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.parkingid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ParkCar message, length delimited. Does not implicitly {@link msg.C2GW_ParkCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {msg.IC2GW_ParkCar} message C2GW_ParkCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ParkCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ParkCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ParkCar} C2GW_ParkCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ParkCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ParkCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                case 2:
                    message.parkingid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ParkCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ParkCar} C2GW_ParkCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ParkCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ParkCar message.
         * @function verify
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ParkCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                if (!$util.isInteger(message.parkingid) && !(message.parkingid && $util.isInteger(message.parkingid.low) && $util.isInteger(message.parkingid.high)))
                    return "parkingid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ParkCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ParkCar} C2GW_ParkCar
         */
        C2GW_ParkCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ParkCar)
                return object;
            var message = new $root.msg.C2GW_ParkCar();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            if (object.parkingid != null)
                if ($util.Long)
                    (message.parkingid = $util.Long.fromValue(object.parkingid)).unsigned = true;
                else if (typeof object.parkingid === "string")
                    message.parkingid = parseInt(object.parkingid, 10);
                else if (typeof object.parkingid === "number")
                    message.parkingid = object.parkingid;
                else if (typeof object.parkingid === "object")
                    message.parkingid = new $util.LongBits(object.parkingid.low >>> 0, object.parkingid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ParkCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ParkCar
         * @static
         * @param {msg.C2GW_ParkCar} message C2GW_ParkCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ParkCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.parkingid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.parkingid = options.longs === String ? "0" : 0;
            }
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                if (typeof message.parkingid === "number")
                    object.parkingid = options.longs === String ? String(message.parkingid) : message.parkingid;
                else
                    object.parkingid = options.longs === String ? $util.Long.prototype.toString.call(message.parkingid) : options.longs === Number ? new $util.LongBits(message.parkingid.low >>> 0, message.parkingid.high >>> 0).toNumber(true) : message.parkingid;
            return object;
        };

        /**
         * Converts this C2GW_ParkCar to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ParkCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ParkCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ParkCar;
    })();

    msg.GW2C_ParkCarResult = (function() {

        /**
         * Properties of a GW2C_ParkCarResult.
         * @memberof msg
         * @interface IGW2C_ParkCarResult
         * @property {number|null} [result] GW2C_ParkCarResult result
         */

        /**
         * Constructs a new GW2C_ParkCarResult.
         * @memberof msg
         * @classdesc Represents a GW2C_ParkCarResult.
         * @implements IGW2C_ParkCarResult
         * @constructor
         * @param {msg.IGW2C_ParkCarResult=} [properties] Properties to set
         */
        function GW2C_ParkCarResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_ParkCarResult result.
         * @member {number} result
         * @memberof msg.GW2C_ParkCarResult
         * @instance
         */
        GW2C_ParkCarResult.prototype.result = 0;

        /**
         * Creates a new GW2C_ParkCarResult instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {msg.IGW2C_ParkCarResult=} [properties] Properties to set
         * @returns {msg.GW2C_ParkCarResult} GW2C_ParkCarResult instance
         */
        GW2C_ParkCarResult.create = function create(properties) {
            return new GW2C_ParkCarResult(properties);
        };

        /**
         * Encodes the specified GW2C_ParkCarResult message. Does not implicitly {@link msg.GW2C_ParkCarResult.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {msg.IGW2C_ParkCarResult} message GW2C_ParkCarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ParkCarResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified GW2C_ParkCarResult message, length delimited. Does not implicitly {@link msg.GW2C_ParkCarResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {msg.IGW2C_ParkCarResult} message GW2C_ParkCarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_ParkCarResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_ParkCarResult message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_ParkCarResult} GW2C_ParkCarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ParkCarResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_ParkCarResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_ParkCarResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_ParkCarResult} GW2C_ParkCarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_ParkCarResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_ParkCarResult message.
         * @function verify
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_ParkCarResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_ParkCarResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_ParkCarResult} GW2C_ParkCarResult
         */
        GW2C_ParkCarResult.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_ParkCarResult)
                return object;
            var message = new $root.msg.GW2C_ParkCarResult();
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_ParkCarResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_ParkCarResult
         * @static
         * @param {msg.GW2C_ParkCarResult} message GW2C_ParkCarResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_ParkCarResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.result = 0;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this GW2C_ParkCarResult to JSON.
         * @function toJSON
         * @memberof msg.GW2C_ParkCarResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_ParkCarResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_ParkCarResult;
    })();

    msg.C2GW_TakeBackCar = (function() {

        /**
         * Properties of a C2GW_TakeBackCar.
         * @memberof msg
         * @interface IC2GW_TakeBackCar
         * @property {number|Long|null} [carid] C2GW_TakeBackCar carid
         */

        /**
         * Constructs a new C2GW_TakeBackCar.
         * @memberof msg
         * @classdesc Represents a C2GW_TakeBackCar.
         * @implements IC2GW_TakeBackCar
         * @constructor
         * @param {msg.IC2GW_TakeBackCar=} [properties] Properties to set
         */
        function C2GW_TakeBackCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TakeBackCar carid.
         * @member {number|Long} carid
         * @memberof msg.C2GW_TakeBackCar
         * @instance
         */
        C2GW_TakeBackCar.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_TakeBackCar instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {msg.IC2GW_TakeBackCar=} [properties] Properties to set
         * @returns {msg.C2GW_TakeBackCar} C2GW_TakeBackCar instance
         */
        C2GW_TakeBackCar.create = function create(properties) {
            return new C2GW_TakeBackCar(properties);
        };

        /**
         * Encodes the specified C2GW_TakeBackCar message. Does not implicitly {@link msg.C2GW_TakeBackCar.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {msg.IC2GW_TakeBackCar} message C2GW_TakeBackCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TakeBackCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TakeBackCar message, length delimited. Does not implicitly {@link msg.C2GW_TakeBackCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {msg.IC2GW_TakeBackCar} message C2GW_TakeBackCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TakeBackCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TakeBackCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TakeBackCar} C2GW_TakeBackCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TakeBackCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TakeBackCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TakeBackCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TakeBackCar} C2GW_TakeBackCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TakeBackCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TakeBackCar message.
         * @function verify
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TakeBackCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_TakeBackCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TakeBackCar} C2GW_TakeBackCar
         */
        C2GW_TakeBackCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TakeBackCar)
                return object;
            var message = new $root.msg.C2GW_TakeBackCar();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TakeBackCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TakeBackCar
         * @static
         * @param {msg.C2GW_TakeBackCar} message C2GW_TakeBackCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TakeBackCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            return object;
        };

        /**
         * Converts this C2GW_TakeBackCar to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TakeBackCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TakeBackCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TakeBackCar;
    })();

    msg.GW2C_TakeBackCarResult = (function() {

        /**
         * Properties of a GW2C_TakeBackCarResult.
         * @memberof msg
         * @interface IGW2C_TakeBackCarResult
         * @property {number|null} [result] GW2C_TakeBackCarResult result
         * @property {number|null} [reward] GW2C_TakeBackCarResult reward
         */

        /**
         * Constructs a new GW2C_TakeBackCarResult.
         * @memberof msg
         * @classdesc Represents a GW2C_TakeBackCarResult.
         * @implements IGW2C_TakeBackCarResult
         * @constructor
         * @param {msg.IGW2C_TakeBackCarResult=} [properties] Properties to set
         */
        function GW2C_TakeBackCarResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_TakeBackCarResult result.
         * @member {number} result
         * @memberof msg.GW2C_TakeBackCarResult
         * @instance
         */
        GW2C_TakeBackCarResult.prototype.result = 0;

        /**
         * GW2C_TakeBackCarResult reward.
         * @member {number} reward
         * @memberof msg.GW2C_TakeBackCarResult
         * @instance
         */
        GW2C_TakeBackCarResult.prototype.reward = 0;

        /**
         * Creates a new GW2C_TakeBackCarResult instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {msg.IGW2C_TakeBackCarResult=} [properties] Properties to set
         * @returns {msg.GW2C_TakeBackCarResult} GW2C_TakeBackCarResult instance
         */
        GW2C_TakeBackCarResult.create = function create(properties) {
            return new GW2C_TakeBackCarResult(properties);
        };

        /**
         * Encodes the specified GW2C_TakeBackCarResult message. Does not implicitly {@link msg.GW2C_TakeBackCarResult.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {msg.IGW2C_TakeBackCarResult} message GW2C_TakeBackCarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_TakeBackCarResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reward);
            return writer;
        };

        /**
         * Encodes the specified GW2C_TakeBackCarResult message, length delimited. Does not implicitly {@link msg.GW2C_TakeBackCarResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {msg.IGW2C_TakeBackCarResult} message GW2C_TakeBackCarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_TakeBackCarResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_TakeBackCarResult message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_TakeBackCarResult} GW2C_TakeBackCarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_TakeBackCarResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_TakeBackCarResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                case 2:
                    message.reward = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_TakeBackCarResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_TakeBackCarResult} GW2C_TakeBackCarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_TakeBackCarResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_TakeBackCarResult message.
         * @function verify
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_TakeBackCarResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (!$util.isInteger(message.reward))
                    return "reward: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_TakeBackCarResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_TakeBackCarResult} GW2C_TakeBackCarResult
         */
        GW2C_TakeBackCarResult.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_TakeBackCarResult)
                return object;
            var message = new $root.msg.GW2C_TakeBackCarResult();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.reward != null)
                message.reward = object.reward | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_TakeBackCarResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_TakeBackCarResult
         * @static
         * @param {msg.GW2C_TakeBackCarResult} message GW2C_TakeBackCarResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_TakeBackCarResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.reward = 0;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = message.reward;
            return object;
        };

        /**
         * Converts this GW2C_TakeBackCarResult to JSON.
         * @function toJSON
         * @memberof msg.GW2C_TakeBackCarResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_TakeBackCarResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_TakeBackCarResult;
    })();

    msg.C2GW_TicketCar = (function() {

        /**
         * Properties of a C2GW_TicketCar.
         * @memberof msg
         * @interface IC2GW_TicketCar
         * @property {number|Long|null} [parkingid] C2GW_TicketCar parkingid
         */

        /**
         * Constructs a new C2GW_TicketCar.
         * @memberof msg
         * @classdesc Represents a C2GW_TicketCar.
         * @implements IC2GW_TicketCar
         * @constructor
         * @param {msg.IC2GW_TicketCar=} [properties] Properties to set
         */
        function C2GW_TicketCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TicketCar parkingid.
         * @member {number|Long} parkingid
         * @memberof msg.C2GW_TicketCar
         * @instance
         */
        C2GW_TicketCar.prototype.parkingid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_TicketCar instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {msg.IC2GW_TicketCar=} [properties] Properties to set
         * @returns {msg.C2GW_TicketCar} C2GW_TicketCar instance
         */
        C2GW_TicketCar.create = function create(properties) {
            return new C2GW_TicketCar(properties);
        };

        /**
         * Encodes the specified C2GW_TicketCar message. Does not implicitly {@link msg.C2GW_TicketCar.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {msg.IC2GW_TicketCar} message C2GW_TicketCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TicketCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.parkingid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TicketCar message, length delimited. Does not implicitly {@link msg.C2GW_TicketCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {msg.IC2GW_TicketCar} message C2GW_TicketCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TicketCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TicketCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TicketCar} C2GW_TicketCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TicketCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TicketCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.parkingid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TicketCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TicketCar} C2GW_TicketCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TicketCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TicketCar message.
         * @function verify
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TicketCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                if (!$util.isInteger(message.parkingid) && !(message.parkingid && $util.isInteger(message.parkingid.low) && $util.isInteger(message.parkingid.high)))
                    return "parkingid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_TicketCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TicketCar} C2GW_TicketCar
         */
        C2GW_TicketCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TicketCar)
                return object;
            var message = new $root.msg.C2GW_TicketCar();
            if (object.parkingid != null)
                if ($util.Long)
                    (message.parkingid = $util.Long.fromValue(object.parkingid)).unsigned = true;
                else if (typeof object.parkingid === "string")
                    message.parkingid = parseInt(object.parkingid, 10);
                else if (typeof object.parkingid === "number")
                    message.parkingid = object.parkingid;
                else if (typeof object.parkingid === "object")
                    message.parkingid = new $util.LongBits(object.parkingid.low >>> 0, object.parkingid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TicketCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TicketCar
         * @static
         * @param {msg.C2GW_TicketCar} message C2GW_TicketCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TicketCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.parkingid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.parkingid = options.longs === String ? "0" : 0;
            if (message.parkingid != null && message.hasOwnProperty("parkingid"))
                if (typeof message.parkingid === "number")
                    object.parkingid = options.longs === String ? String(message.parkingid) : message.parkingid;
                else
                    object.parkingid = options.longs === String ? $util.Long.prototype.toString.call(message.parkingid) : options.longs === Number ? new $util.LongBits(message.parkingid.low >>> 0, message.parkingid.high >>> 0).toNumber(true) : message.parkingid;
            return object;
        };

        /**
         * Converts this C2GW_TicketCar to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TicketCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TicketCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TicketCar;
    })();

    msg.GW2C_TicketCarResult = (function() {

        /**
         * Properties of a GW2C_TicketCarResult.
         * @memberof msg
         * @interface IGW2C_TicketCarResult
         * @property {number|null} [result] GW2C_TicketCarResult result
         * @property {number|null} [reward] GW2C_TicketCarResult reward
         */

        /**
         * Constructs a new GW2C_TicketCarResult.
         * @memberof msg
         * @classdesc Represents a GW2C_TicketCarResult.
         * @implements IGW2C_TicketCarResult
         * @constructor
         * @param {msg.IGW2C_TicketCarResult=} [properties] Properties to set
         */
        function GW2C_TicketCarResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_TicketCarResult result.
         * @member {number} result
         * @memberof msg.GW2C_TicketCarResult
         * @instance
         */
        GW2C_TicketCarResult.prototype.result = 0;

        /**
         * GW2C_TicketCarResult reward.
         * @member {number} reward
         * @memberof msg.GW2C_TicketCarResult
         * @instance
         */
        GW2C_TicketCarResult.prototype.reward = 0;

        /**
         * Creates a new GW2C_TicketCarResult instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {msg.IGW2C_TicketCarResult=} [properties] Properties to set
         * @returns {msg.GW2C_TicketCarResult} GW2C_TicketCarResult instance
         */
        GW2C_TicketCarResult.create = function create(properties) {
            return new GW2C_TicketCarResult(properties);
        };

        /**
         * Encodes the specified GW2C_TicketCarResult message. Does not implicitly {@link msg.GW2C_TicketCarResult.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {msg.IGW2C_TicketCarResult} message GW2C_TicketCarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_TicketCarResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reward);
            return writer;
        };

        /**
         * Encodes the specified GW2C_TicketCarResult message, length delimited. Does not implicitly {@link msg.GW2C_TicketCarResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {msg.IGW2C_TicketCarResult} message GW2C_TicketCarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_TicketCarResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_TicketCarResult message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_TicketCarResult} GW2C_TicketCarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_TicketCarResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_TicketCarResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                case 2:
                    message.reward = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_TicketCarResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_TicketCarResult} GW2C_TicketCarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_TicketCarResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_TicketCarResult message.
         * @function verify
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_TicketCarResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (!$util.isInteger(message.reward))
                    return "reward: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_TicketCarResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_TicketCarResult} GW2C_TicketCarResult
         */
        GW2C_TicketCarResult.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_TicketCarResult)
                return object;
            var message = new $root.msg.GW2C_TicketCarResult();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.reward != null)
                message.reward = object.reward | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_TicketCarResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_TicketCarResult
         * @static
         * @param {msg.GW2C_TicketCarResult} message GW2C_TicketCarResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_TicketCarResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.reward = 0;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = message.reward;
            return object;
        };

        /**
         * Converts this GW2C_TicketCarResult to JSON.
         * @function toJSON
         * @memberof msg.GW2C_TicketCarResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_TicketCarResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_TicketCarResult;
    })();

    msg.GW2C_SynParkingRecord = (function() {

        /**
         * Properties of a GW2C_SynParkingRecord.
         * @memberof msg
         * @interface IGW2C_SynParkingRecord
         * @property {Array.<string>|null} [records] GW2C_SynParkingRecord records
         */

        /**
         * Constructs a new GW2C_SynParkingRecord.
         * @memberof msg
         * @classdesc Represents a GW2C_SynParkingRecord.
         * @implements IGW2C_SynParkingRecord
         * @constructor
         * @param {msg.IGW2C_SynParkingRecord=} [properties] Properties to set
         */
        function GW2C_SynParkingRecord(properties) {
            this.records = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SynParkingRecord records.
         * @member {Array.<string>} records
         * @memberof msg.GW2C_SynParkingRecord
         * @instance
         */
        GW2C_SynParkingRecord.prototype.records = $util.emptyArray;

        /**
         * Creates a new GW2C_SynParkingRecord instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {msg.IGW2C_SynParkingRecord=} [properties] Properties to set
         * @returns {msg.GW2C_SynParkingRecord} GW2C_SynParkingRecord instance
         */
        GW2C_SynParkingRecord.create = function create(properties) {
            return new GW2C_SynParkingRecord(properties);
        };

        /**
         * Encodes the specified GW2C_SynParkingRecord message. Does not implicitly {@link msg.GW2C_SynParkingRecord.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {msg.IGW2C_SynParkingRecord} message GW2C_SynParkingRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SynParkingRecord.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.records != null && message.records.length)
                for (var i = 0; i < message.records.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.records[i]);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SynParkingRecord message, length delimited. Does not implicitly {@link msg.GW2C_SynParkingRecord.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {msg.IGW2C_SynParkingRecord} message GW2C_SynParkingRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SynParkingRecord.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SynParkingRecord message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SynParkingRecord} GW2C_SynParkingRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SynParkingRecord.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SynParkingRecord();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.records && message.records.length))
                        message.records = [];
                    message.records.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SynParkingRecord message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SynParkingRecord} GW2C_SynParkingRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SynParkingRecord.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SynParkingRecord message.
         * @function verify
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SynParkingRecord.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.records != null && message.hasOwnProperty("records")) {
                if (!Array.isArray(message.records))
                    return "records: array expected";
                for (var i = 0; i < message.records.length; ++i)
                    if (!$util.isString(message.records[i]))
                        return "records: string[] expected";
            }
            return null;
        };

        /**
         * Creates a GW2C_SynParkingRecord message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SynParkingRecord} GW2C_SynParkingRecord
         */
        GW2C_SynParkingRecord.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SynParkingRecord)
                return object;
            var message = new $root.msg.GW2C_SynParkingRecord();
            if (object.records) {
                if (!Array.isArray(object.records))
                    throw TypeError(".msg.GW2C_SynParkingRecord.records: array expected");
                message.records = [];
                for (var i = 0; i < object.records.length; ++i)
                    message.records[i] = String(object.records[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SynParkingRecord message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SynParkingRecord
         * @static
         * @param {msg.GW2C_SynParkingRecord} message GW2C_SynParkingRecord
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SynParkingRecord.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.records = [];
            if (message.records && message.records.length) {
                object.records = [];
                for (var j = 0; j < message.records.length; ++j)
                    object.records[j] = message.records[j];
            }
            return object;
        };

        /**
         * Converts this GW2C_SynParkingRecord to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SynParkingRecord
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SynParkingRecord.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SynParkingRecord;
    })();

    msg.C2GW_ReqTakeCarAutoBackReward = (function() {

        /**
         * Properties of a C2GW_ReqTakeCarAutoBackReward.
         * @memberof msg
         * @interface IC2GW_ReqTakeCarAutoBackReward
         * @property {number|Long|null} [carid] C2GW_ReqTakeCarAutoBackReward carid
         */

        /**
         * Constructs a new C2GW_ReqTakeCarAutoBackReward.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTakeCarAutoBackReward.
         * @implements IC2GW_ReqTakeCarAutoBackReward
         * @constructor
         * @param {msg.IC2GW_ReqTakeCarAutoBackReward=} [properties] Properties to set
         */
        function C2GW_ReqTakeCarAutoBackReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqTakeCarAutoBackReward carid.
         * @member {number|Long} carid
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @instance
         */
        C2GW_ReqTakeCarAutoBackReward.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqTakeCarAutoBackReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {msg.IC2GW_ReqTakeCarAutoBackReward=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTakeCarAutoBackReward} C2GW_ReqTakeCarAutoBackReward instance
         */
        C2GW_ReqTakeCarAutoBackReward.create = function create(properties) {
            return new C2GW_ReqTakeCarAutoBackReward(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTakeCarAutoBackReward message. Does not implicitly {@link msg.C2GW_ReqTakeCarAutoBackReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {msg.IC2GW_ReqTakeCarAutoBackReward} message C2GW_ReqTakeCarAutoBackReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTakeCarAutoBackReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTakeCarAutoBackReward message, length delimited. Does not implicitly {@link msg.C2GW_ReqTakeCarAutoBackReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {msg.IC2GW_ReqTakeCarAutoBackReward} message C2GW_ReqTakeCarAutoBackReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTakeCarAutoBackReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTakeCarAutoBackReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTakeCarAutoBackReward} C2GW_ReqTakeCarAutoBackReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTakeCarAutoBackReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTakeCarAutoBackReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTakeCarAutoBackReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTakeCarAutoBackReward} C2GW_ReqTakeCarAutoBackReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTakeCarAutoBackReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTakeCarAutoBackReward message.
         * @function verify
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTakeCarAutoBackReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTakeCarAutoBackReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTakeCarAutoBackReward} C2GW_ReqTakeCarAutoBackReward
         */
        C2GW_ReqTakeCarAutoBackReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTakeCarAutoBackReward)
                return object;
            var message = new $root.msg.C2GW_ReqTakeCarAutoBackReward();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqTakeCarAutoBackReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @static
         * @param {msg.C2GW_ReqTakeCarAutoBackReward} message C2GW_ReqTakeCarAutoBackReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTakeCarAutoBackReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            return object;
        };

        /**
         * Converts this C2GW_ReqTakeCarAutoBackReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTakeCarAutoBackReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTakeCarAutoBackReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTakeCarAutoBackReward;
    })();

    msg.GW2C_RetTakeCarAutoBackReward = (function() {

        /**
         * Properties of a GW2C_RetTakeCarAutoBackReward.
         * @memberof msg
         * @interface IGW2C_RetTakeCarAutoBackReward
         * @property {number|null} [result] GW2C_RetTakeCarAutoBackReward result
         * @property {number|null} [reward] GW2C_RetTakeCarAutoBackReward reward
         */

        /**
         * Constructs a new GW2C_RetTakeCarAutoBackReward.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTakeCarAutoBackReward.
         * @implements IGW2C_RetTakeCarAutoBackReward
         * @constructor
         * @param {msg.IGW2C_RetTakeCarAutoBackReward=} [properties] Properties to set
         */
        function GW2C_RetTakeCarAutoBackReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTakeCarAutoBackReward result.
         * @member {number} result
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @instance
         */
        GW2C_RetTakeCarAutoBackReward.prototype.result = 0;

        /**
         * GW2C_RetTakeCarAutoBackReward reward.
         * @member {number} reward
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @instance
         */
        GW2C_RetTakeCarAutoBackReward.prototype.reward = 0;

        /**
         * Creates a new GW2C_RetTakeCarAutoBackReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {msg.IGW2C_RetTakeCarAutoBackReward=} [properties] Properties to set
         * @returns {msg.GW2C_RetTakeCarAutoBackReward} GW2C_RetTakeCarAutoBackReward instance
         */
        GW2C_RetTakeCarAutoBackReward.create = function create(properties) {
            return new GW2C_RetTakeCarAutoBackReward(properties);
        };

        /**
         * Encodes the specified GW2C_RetTakeCarAutoBackReward message. Does not implicitly {@link msg.GW2C_RetTakeCarAutoBackReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {msg.IGW2C_RetTakeCarAutoBackReward} message GW2C_RetTakeCarAutoBackReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTakeCarAutoBackReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reward);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTakeCarAutoBackReward message, length delimited. Does not implicitly {@link msg.GW2C_RetTakeCarAutoBackReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {msg.IGW2C_RetTakeCarAutoBackReward} message GW2C_RetTakeCarAutoBackReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTakeCarAutoBackReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTakeCarAutoBackReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTakeCarAutoBackReward} GW2C_RetTakeCarAutoBackReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTakeCarAutoBackReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTakeCarAutoBackReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                case 2:
                    message.reward = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTakeCarAutoBackReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTakeCarAutoBackReward} GW2C_RetTakeCarAutoBackReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTakeCarAutoBackReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTakeCarAutoBackReward message.
         * @function verify
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTakeCarAutoBackReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (!$util.isInteger(message.reward))
                    return "reward: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RetTakeCarAutoBackReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTakeCarAutoBackReward} GW2C_RetTakeCarAutoBackReward
         */
        GW2C_RetTakeCarAutoBackReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTakeCarAutoBackReward)
                return object;
            var message = new $root.msg.GW2C_RetTakeCarAutoBackReward();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.reward != null)
                message.reward = object.reward | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTakeCarAutoBackReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @static
         * @param {msg.GW2C_RetTakeCarAutoBackReward} message GW2C_RetTakeCarAutoBackReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTakeCarAutoBackReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.reward = 0;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = message.reward;
            return object;
        };

        /**
         * Converts this GW2C_RetTakeCarAutoBackReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTakeCarAutoBackReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTakeCarAutoBackReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTakeCarAutoBackReward;
    })();

    msg.GW2C_CarAutoBack = (function() {

        /**
         * Properties of a GW2C_CarAutoBack.
         * @memberof msg
         * @interface IGW2C_CarAutoBack
         * @property {number|Long|null} [carid] GW2C_CarAutoBack carid
         */

        /**
         * Constructs a new GW2C_CarAutoBack.
         * @memberof msg
         * @classdesc Represents a GW2C_CarAutoBack.
         * @implements IGW2C_CarAutoBack
         * @constructor
         * @param {msg.IGW2C_CarAutoBack=} [properties] Properties to set
         */
        function GW2C_CarAutoBack(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_CarAutoBack carid.
         * @member {number|Long} carid
         * @memberof msg.GW2C_CarAutoBack
         * @instance
         */
        GW2C_CarAutoBack.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_CarAutoBack instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {msg.IGW2C_CarAutoBack=} [properties] Properties to set
         * @returns {msg.GW2C_CarAutoBack} GW2C_CarAutoBack instance
         */
        GW2C_CarAutoBack.create = function create(properties) {
            return new GW2C_CarAutoBack(properties);
        };

        /**
         * Encodes the specified GW2C_CarAutoBack message. Does not implicitly {@link msg.GW2C_CarAutoBack.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {msg.IGW2C_CarAutoBack} message GW2C_CarAutoBack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_CarAutoBack.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_CarAutoBack message, length delimited. Does not implicitly {@link msg.GW2C_CarAutoBack.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {msg.IGW2C_CarAutoBack} message GW2C_CarAutoBack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_CarAutoBack.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_CarAutoBack message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_CarAutoBack} GW2C_CarAutoBack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_CarAutoBack.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_CarAutoBack();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_CarAutoBack message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_CarAutoBack} GW2C_CarAutoBack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_CarAutoBack.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_CarAutoBack message.
         * @function verify
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_CarAutoBack.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_CarAutoBack message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_CarAutoBack} GW2C_CarAutoBack
         */
        GW2C_CarAutoBack.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_CarAutoBack)
                return object;
            var message = new $root.msg.GW2C_CarAutoBack();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_CarAutoBack message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_CarAutoBack
         * @static
         * @param {msg.GW2C_CarAutoBack} message GW2C_CarAutoBack
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_CarAutoBack.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            return object;
        };

        /**
         * Converts this GW2C_CarAutoBack to JSON.
         * @function toJSON
         * @memberof msg.GW2C_CarAutoBack
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_CarAutoBack.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_CarAutoBack;
    })();

    msg.GW2C_UpdateCar = (function() {

        /**
         * Properties of a GW2C_UpdateCar.
         * @memberof msg
         * @interface IGW2C_UpdateCar
         * @property {number|Long|null} [carid] GW2C_UpdateCar carid
         * @property {msg.ICarData|null} [data] GW2C_UpdateCar data
         * @property {boolean|null} [isdel] GW2C_UpdateCar isdel
         */

        /**
         * Constructs a new GW2C_UpdateCar.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateCar.
         * @implements IGW2C_UpdateCar
         * @constructor
         * @param {msg.IGW2C_UpdateCar=} [properties] Properties to set
         */
        function GW2C_UpdateCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateCar carid.
         * @member {number|Long} carid
         * @memberof msg.GW2C_UpdateCar
         * @instance
         */
        GW2C_UpdateCar.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_UpdateCar data.
         * @member {msg.ICarData|null|undefined} data
         * @memberof msg.GW2C_UpdateCar
         * @instance
         */
        GW2C_UpdateCar.prototype.data = null;

        /**
         * GW2C_UpdateCar isdel.
         * @member {boolean} isdel
         * @memberof msg.GW2C_UpdateCar
         * @instance
         */
        GW2C_UpdateCar.prototype.isdel = false;

        /**
         * Creates a new GW2C_UpdateCar instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {msg.IGW2C_UpdateCar=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateCar} GW2C_UpdateCar instance
         */
        GW2C_UpdateCar.create = function create(properties) {
            return new GW2C_UpdateCar(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateCar message. Does not implicitly {@link msg.GW2C_UpdateCar.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {msg.IGW2C_UpdateCar} message GW2C_UpdateCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.CarData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.isdel != null && message.hasOwnProperty("isdel"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isdel);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateCar message, length delimited. Does not implicitly {@link msg.GW2C_UpdateCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {msg.IGW2C_UpdateCar} message GW2C_UpdateCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateCar} GW2C_UpdateCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                case 2:
                    message.data = $root.msg.CarData.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.isdel = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateCar} GW2C_UpdateCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateCar message.
         * @function verify
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.CarData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            if (message.isdel != null && message.hasOwnProperty("isdel"))
                if (typeof message.isdel !== "boolean")
                    return "isdel: boolean expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateCar} GW2C_UpdateCar
         */
        GW2C_UpdateCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateCar)
                return object;
            var message = new $root.msg.GW2C_UpdateCar();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_UpdateCar.data: object expected");
                message.data = $root.msg.CarData.fromObject(object.data);
            }
            if (object.isdel != null)
                message.isdel = Boolean(object.isdel);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateCar
         * @static
         * @param {msg.GW2C_UpdateCar} message GW2C_UpdateCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
                object.data = null;
                object.isdel = false;
            }
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.CarData.toObject(message.data, options);
            if (message.isdel != null && message.hasOwnProperty("isdel"))
                object.isdel = message.isdel;
            return object;
        };

        /**
         * Converts this GW2C_UpdateCar to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateCar;
    })();

    msg.GW2C_AddNewCar = (function() {

        /**
         * Properties of a GW2C_AddNewCar.
         * @memberof msg
         * @interface IGW2C_AddNewCar
         * @property {msg.ICarData|null} [car] GW2C_AddNewCar car
         */

        /**
         * Constructs a new GW2C_AddNewCar.
         * @memberof msg
         * @classdesc Represents a GW2C_AddNewCar.
         * @implements IGW2C_AddNewCar
         * @constructor
         * @param {msg.IGW2C_AddNewCar=} [properties] Properties to set
         */
        function GW2C_AddNewCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AddNewCar car.
         * @member {msg.ICarData|null|undefined} car
         * @memberof msg.GW2C_AddNewCar
         * @instance
         */
        GW2C_AddNewCar.prototype.car = null;

        /**
         * Creates a new GW2C_AddNewCar instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {msg.IGW2C_AddNewCar=} [properties] Properties to set
         * @returns {msg.GW2C_AddNewCar} GW2C_AddNewCar instance
         */
        GW2C_AddNewCar.create = function create(properties) {
            return new GW2C_AddNewCar(properties);
        };

        /**
         * Encodes the specified GW2C_AddNewCar message. Does not implicitly {@link msg.GW2C_AddNewCar.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {msg.IGW2C_AddNewCar} message GW2C_AddNewCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddNewCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.car != null && message.hasOwnProperty("car"))
                $root.msg.CarData.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AddNewCar message, length delimited. Does not implicitly {@link msg.GW2C_AddNewCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {msg.IGW2C_AddNewCar} message GW2C_AddNewCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddNewCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AddNewCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AddNewCar} GW2C_AddNewCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddNewCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AddNewCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.car = $root.msg.CarData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AddNewCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AddNewCar} GW2C_AddNewCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddNewCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AddNewCar message.
         * @function verify
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AddNewCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.car != null && message.hasOwnProperty("car")) {
                var error = $root.msg.CarData.verify(message.car);
                if (error)
                    return "car." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_AddNewCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AddNewCar} GW2C_AddNewCar
         */
        GW2C_AddNewCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AddNewCar)
                return object;
            var message = new $root.msg.GW2C_AddNewCar();
            if (object.car != null) {
                if (typeof object.car !== "object")
                    throw TypeError(".msg.GW2C_AddNewCar.car: object expected");
                message.car = $root.msg.CarData.fromObject(object.car);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AddNewCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AddNewCar
         * @static
         * @param {msg.GW2C_AddNewCar} message GW2C_AddNewCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AddNewCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.car = null;
            if (message.car != null && message.hasOwnProperty("car"))
                object.car = $root.msg.CarData.toObject(message.car, options);
            return object;
        };

        /**
         * Converts this GW2C_AddNewCar to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AddNewCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AddNewCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AddNewCar;
    })();

    msg.C2GW_CarPartLevelup = (function() {

        /**
         * Properties of a C2GW_CarPartLevelup.
         * @memberof msg
         * @interface IC2GW_CarPartLevelup
         * @property {number|Long|null} [carid] C2GW_CarPartLevelup carid
         * @property {number|null} [parttype] C2GW_CarPartLevelup parttype
         * @property {Array.<msg.ICarPartPiece>|null} [pieces] C2GW_CarPartLevelup pieces
         */

        /**
         * Constructs a new C2GW_CarPartLevelup.
         * @memberof msg
         * @classdesc Represents a C2GW_CarPartLevelup.
         * @implements IC2GW_CarPartLevelup
         * @constructor
         * @param {msg.IC2GW_CarPartLevelup=} [properties] Properties to set
         */
        function C2GW_CarPartLevelup(properties) {
            this.pieces = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_CarPartLevelup carid.
         * @member {number|Long} carid
         * @memberof msg.C2GW_CarPartLevelup
         * @instance
         */
        C2GW_CarPartLevelup.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_CarPartLevelup parttype.
         * @member {number} parttype
         * @memberof msg.C2GW_CarPartLevelup
         * @instance
         */
        C2GW_CarPartLevelup.prototype.parttype = 0;

        /**
         * C2GW_CarPartLevelup pieces.
         * @member {Array.<msg.ICarPartPiece>} pieces
         * @memberof msg.C2GW_CarPartLevelup
         * @instance
         */
        C2GW_CarPartLevelup.prototype.pieces = $util.emptyArray;

        /**
         * Creates a new C2GW_CarPartLevelup instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {msg.IC2GW_CarPartLevelup=} [properties] Properties to set
         * @returns {msg.C2GW_CarPartLevelup} C2GW_CarPartLevelup instance
         */
        C2GW_CarPartLevelup.create = function create(properties) {
            return new C2GW_CarPartLevelup(properties);
        };

        /**
         * Encodes the specified C2GW_CarPartLevelup message. Does not implicitly {@link msg.C2GW_CarPartLevelup.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {msg.IC2GW_CarPartLevelup} message C2GW_CarPartLevelup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CarPartLevelup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            if (message.parttype != null && message.hasOwnProperty("parttype"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.parttype);
            if (message.pieces != null && message.pieces.length)
                for (var i = 0; i < message.pieces.length; ++i)
                    $root.msg.CarPartPiece.encode(message.pieces[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_CarPartLevelup message, length delimited. Does not implicitly {@link msg.C2GW_CarPartLevelup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {msg.IC2GW_CarPartLevelup} message C2GW_CarPartLevelup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CarPartLevelup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_CarPartLevelup message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_CarPartLevelup} C2GW_CarPartLevelup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CarPartLevelup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_CarPartLevelup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                case 2:
                    message.parttype = reader.uint32();
                    break;
                case 3:
                    if (!(message.pieces && message.pieces.length))
                        message.pieces = [];
                    message.pieces.push($root.msg.CarPartPiece.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_CarPartLevelup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_CarPartLevelup} C2GW_CarPartLevelup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CarPartLevelup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_CarPartLevelup message.
         * @function verify
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_CarPartLevelup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            if (message.parttype != null && message.hasOwnProperty("parttype"))
                if (!$util.isInteger(message.parttype))
                    return "parttype: integer expected";
            if (message.pieces != null && message.hasOwnProperty("pieces")) {
                if (!Array.isArray(message.pieces))
                    return "pieces: array expected";
                for (var i = 0; i < message.pieces.length; ++i) {
                    var error = $root.msg.CarPartPiece.verify(message.pieces[i]);
                    if (error)
                        return "pieces." + error;
                }
            }
            return null;
        };

        /**
         * Creates a C2GW_CarPartLevelup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_CarPartLevelup} C2GW_CarPartLevelup
         */
        C2GW_CarPartLevelup.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_CarPartLevelup)
                return object;
            var message = new $root.msg.C2GW_CarPartLevelup();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            if (object.parttype != null)
                message.parttype = object.parttype >>> 0;
            if (object.pieces) {
                if (!Array.isArray(object.pieces))
                    throw TypeError(".msg.C2GW_CarPartLevelup.pieces: array expected");
                message.pieces = [];
                for (var i = 0; i < object.pieces.length; ++i) {
                    if (typeof object.pieces[i] !== "object")
                        throw TypeError(".msg.C2GW_CarPartLevelup.pieces: object expected");
                    message.pieces[i] = $root.msg.CarPartPiece.fromObject(object.pieces[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_CarPartLevelup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_CarPartLevelup
         * @static
         * @param {msg.C2GW_CarPartLevelup} message C2GW_CarPartLevelup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_CarPartLevelup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pieces = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
                object.parttype = 0;
            }
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            if (message.parttype != null && message.hasOwnProperty("parttype"))
                object.parttype = message.parttype;
            if (message.pieces && message.pieces.length) {
                object.pieces = [];
                for (var j = 0; j < message.pieces.length; ++j)
                    object.pieces[j] = $root.msg.CarPartPiece.toObject(message.pieces[j], options);
            }
            return object;
        };

        /**
         * Converts this C2GW_CarPartLevelup to JSON.
         * @function toJSON
         * @memberof msg.C2GW_CarPartLevelup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_CarPartLevelup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_CarPartLevelup;
    })();

    msg.GW2C_RetCarPartLevelup = (function() {

        /**
         * Properties of a GW2C_RetCarPartLevelup.
         * @memberof msg
         * @interface IGW2C_RetCarPartLevelup
         * @property {number|null} [result] GW2C_RetCarPartLevelup result
         * @property {msg.ICarData|null} [car] GW2C_RetCarPartLevelup car
         */

        /**
         * Constructs a new GW2C_RetCarPartLevelup.
         * @memberof msg
         * @classdesc Represents a GW2C_RetCarPartLevelup.
         * @implements IGW2C_RetCarPartLevelup
         * @constructor
         * @param {msg.IGW2C_RetCarPartLevelup=} [properties] Properties to set
         */
        function GW2C_RetCarPartLevelup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetCarPartLevelup result.
         * @member {number} result
         * @memberof msg.GW2C_RetCarPartLevelup
         * @instance
         */
        GW2C_RetCarPartLevelup.prototype.result = 0;

        /**
         * GW2C_RetCarPartLevelup car.
         * @member {msg.ICarData|null|undefined} car
         * @memberof msg.GW2C_RetCarPartLevelup
         * @instance
         */
        GW2C_RetCarPartLevelup.prototype.car = null;

        /**
         * Creates a new GW2C_RetCarPartLevelup instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {msg.IGW2C_RetCarPartLevelup=} [properties] Properties to set
         * @returns {msg.GW2C_RetCarPartLevelup} GW2C_RetCarPartLevelup instance
         */
        GW2C_RetCarPartLevelup.create = function create(properties) {
            return new GW2C_RetCarPartLevelup(properties);
        };

        /**
         * Encodes the specified GW2C_RetCarPartLevelup message. Does not implicitly {@link msg.GW2C_RetCarPartLevelup.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {msg.IGW2C_RetCarPartLevelup} message GW2C_RetCarPartLevelup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCarPartLevelup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result);
            if (message.car != null && message.hasOwnProperty("car"))
                $root.msg.CarData.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetCarPartLevelup message, length delimited. Does not implicitly {@link msg.GW2C_RetCarPartLevelup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {msg.IGW2C_RetCarPartLevelup} message GW2C_RetCarPartLevelup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCarPartLevelup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetCarPartLevelup message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetCarPartLevelup} GW2C_RetCarPartLevelup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCarPartLevelup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetCarPartLevelup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.uint32();
                    break;
                case 2:
                    message.car = $root.msg.CarData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetCarPartLevelup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetCarPartLevelup} GW2C_RetCarPartLevelup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCarPartLevelup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetCarPartLevelup message.
         * @function verify
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetCarPartLevelup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.car != null && message.hasOwnProperty("car")) {
                var error = $root.msg.CarData.verify(message.car);
                if (error)
                    return "car." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_RetCarPartLevelup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetCarPartLevelup} GW2C_RetCarPartLevelup
         */
        GW2C_RetCarPartLevelup.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetCarPartLevelup)
                return object;
            var message = new $root.msg.GW2C_RetCarPartLevelup();
            if (object.result != null)
                message.result = object.result >>> 0;
            if (object.car != null) {
                if (typeof object.car !== "object")
                    throw TypeError(".msg.GW2C_RetCarPartLevelup.car: object expected");
                message.car = $root.msg.CarData.fromObject(object.car);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetCarPartLevelup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetCarPartLevelup
         * @static
         * @param {msg.GW2C_RetCarPartLevelup} message GW2C_RetCarPartLevelup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetCarPartLevelup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.car = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.car != null && message.hasOwnProperty("car"))
                object.car = $root.msg.CarData.toObject(message.car, options);
            return object;
        };

        /**
         * Converts this GW2C_RetCarPartLevelup to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetCarPartLevelup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetCarPartLevelup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetCarPartLevelup;
    })();

    msg.C2GW_CarStarup = (function() {

        /**
         * Properties of a C2GW_CarStarup.
         * @memberof msg
         * @interface IC2GW_CarStarup
         * @property {number|Long|null} [carid] C2GW_CarStarup carid
         */

        /**
         * Constructs a new C2GW_CarStarup.
         * @memberof msg
         * @classdesc Represents a C2GW_CarStarup.
         * @implements IC2GW_CarStarup
         * @constructor
         * @param {msg.IC2GW_CarStarup=} [properties] Properties to set
         */
        function C2GW_CarStarup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_CarStarup carid.
         * @member {number|Long} carid
         * @memberof msg.C2GW_CarStarup
         * @instance
         */
        C2GW_CarStarup.prototype.carid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_CarStarup instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {msg.IC2GW_CarStarup=} [properties] Properties to set
         * @returns {msg.C2GW_CarStarup} C2GW_CarStarup instance
         */
        C2GW_CarStarup.create = function create(properties) {
            return new C2GW_CarStarup(properties);
        };

        /**
         * Encodes the specified C2GW_CarStarup message. Does not implicitly {@link msg.C2GW_CarStarup.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {msg.IC2GW_CarStarup} message C2GW_CarStarup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CarStarup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carid != null && message.hasOwnProperty("carid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.carid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_CarStarup message, length delimited. Does not implicitly {@link msg.C2GW_CarStarup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {msg.IC2GW_CarStarup} message C2GW_CarStarup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CarStarup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_CarStarup message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_CarStarup} C2GW_CarStarup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CarStarup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_CarStarup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_CarStarup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_CarStarup} C2GW_CarStarup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CarStarup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_CarStarup message.
         * @function verify
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_CarStarup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (!$util.isInteger(message.carid) && !(message.carid && $util.isInteger(message.carid.low) && $util.isInteger(message.carid.high)))
                    return "carid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_CarStarup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_CarStarup} C2GW_CarStarup
         */
        C2GW_CarStarup.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_CarStarup)
                return object;
            var message = new $root.msg.C2GW_CarStarup();
            if (object.carid != null)
                if ($util.Long)
                    (message.carid = $util.Long.fromValue(object.carid)).unsigned = true;
                else if (typeof object.carid === "string")
                    message.carid = parseInt(object.carid, 10);
                else if (typeof object.carid === "number")
                    message.carid = object.carid;
                else if (typeof object.carid === "object")
                    message.carid = new $util.LongBits(object.carid.low >>> 0, object.carid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_CarStarup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_CarStarup
         * @static
         * @param {msg.C2GW_CarStarup} message C2GW_CarStarup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_CarStarup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.carid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.carid = options.longs === String ? "0" : 0;
            if (message.carid != null && message.hasOwnProperty("carid"))
                if (typeof message.carid === "number")
                    object.carid = options.longs === String ? String(message.carid) : message.carid;
                else
                    object.carid = options.longs === String ? $util.Long.prototype.toString.call(message.carid) : options.longs === Number ? new $util.LongBits(message.carid.low >>> 0, message.carid.high >>> 0).toNumber(true) : message.carid;
            return object;
        };

        /**
         * Converts this C2GW_CarStarup to JSON.
         * @function toJSON
         * @memberof msg.C2GW_CarStarup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_CarStarup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_CarStarup;
    })();

    msg.GW2C_RetCarStarup = (function() {

        /**
         * Properties of a GW2C_RetCarStarup.
         * @memberof msg
         * @interface IGW2C_RetCarStarup
         * @property {number|null} [result] GW2C_RetCarStarup result
         * @property {msg.ICarData|null} [car] GW2C_RetCarStarup car
         */

        /**
         * Constructs a new GW2C_RetCarStarup.
         * @memberof msg
         * @classdesc Represents a GW2C_RetCarStarup.
         * @implements IGW2C_RetCarStarup
         * @constructor
         * @param {msg.IGW2C_RetCarStarup=} [properties] Properties to set
         */
        function GW2C_RetCarStarup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetCarStarup result.
         * @member {number} result
         * @memberof msg.GW2C_RetCarStarup
         * @instance
         */
        GW2C_RetCarStarup.prototype.result = 0;

        /**
         * GW2C_RetCarStarup car.
         * @member {msg.ICarData|null|undefined} car
         * @memberof msg.GW2C_RetCarStarup
         * @instance
         */
        GW2C_RetCarStarup.prototype.car = null;

        /**
         * Creates a new GW2C_RetCarStarup instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {msg.IGW2C_RetCarStarup=} [properties] Properties to set
         * @returns {msg.GW2C_RetCarStarup} GW2C_RetCarStarup instance
         */
        GW2C_RetCarStarup.create = function create(properties) {
            return new GW2C_RetCarStarup(properties);
        };

        /**
         * Encodes the specified GW2C_RetCarStarup message. Does not implicitly {@link msg.GW2C_RetCarStarup.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {msg.IGW2C_RetCarStarup} message GW2C_RetCarStarup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCarStarup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result);
            if (message.car != null && message.hasOwnProperty("car"))
                $root.msg.CarData.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetCarStarup message, length delimited. Does not implicitly {@link msg.GW2C_RetCarStarup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {msg.IGW2C_RetCarStarup} message GW2C_RetCarStarup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCarStarup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetCarStarup message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetCarStarup} GW2C_RetCarStarup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCarStarup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetCarStarup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.uint32();
                    break;
                case 2:
                    message.car = $root.msg.CarData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetCarStarup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetCarStarup} GW2C_RetCarStarup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCarStarup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetCarStarup message.
         * @function verify
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetCarStarup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.car != null && message.hasOwnProperty("car")) {
                var error = $root.msg.CarData.verify(message.car);
                if (error)
                    return "car." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_RetCarStarup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetCarStarup} GW2C_RetCarStarup
         */
        GW2C_RetCarStarup.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetCarStarup)
                return object;
            var message = new $root.msg.GW2C_RetCarStarup();
            if (object.result != null)
                message.result = object.result >>> 0;
            if (object.car != null) {
                if (typeof object.car !== "object")
                    throw TypeError(".msg.GW2C_RetCarStarup.car: object expected");
                message.car = $root.msg.CarData.fromObject(object.car);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetCarStarup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetCarStarup
         * @static
         * @param {msg.GW2C_RetCarStarup} message GW2C_RetCarStarup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetCarStarup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.car = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.car != null && message.hasOwnProperty("car"))
                object.car = $root.msg.CarData.toObject(message.car, options);
            return object;
        };

        /**
         * Converts this GW2C_RetCarStarup to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetCarStarup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetCarStarup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetCarStarup;
    })();

    msg.C2GW_ReqCarShopInfo = (function() {

        /**
         * Properties of a C2GW_ReqCarShopInfo.
         * @memberof msg
         * @interface IC2GW_ReqCarShopInfo
         * @property {number|null} [shopid] C2GW_ReqCarShopInfo shopid
         */

        /**
         * Constructs a new C2GW_ReqCarShopInfo.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqCarShopInfo.
         * @implements IC2GW_ReqCarShopInfo
         * @constructor
         * @param {msg.IC2GW_ReqCarShopInfo=} [properties] Properties to set
         */
        function C2GW_ReqCarShopInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqCarShopInfo shopid.
         * @member {number} shopid
         * @memberof msg.C2GW_ReqCarShopInfo
         * @instance
         */
        C2GW_ReqCarShopInfo.prototype.shopid = 0;

        /**
         * Creates a new C2GW_ReqCarShopInfo instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {msg.IC2GW_ReqCarShopInfo=} [properties] Properties to set
         * @returns {msg.C2GW_ReqCarShopInfo} C2GW_ReqCarShopInfo instance
         */
        C2GW_ReqCarShopInfo.create = function create(properties) {
            return new C2GW_ReqCarShopInfo(properties);
        };

        /**
         * Encodes the specified C2GW_ReqCarShopInfo message. Does not implicitly {@link msg.C2GW_ReqCarShopInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {msg.IC2GW_ReqCarShopInfo} message C2GW_ReqCarShopInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarShopInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.shopid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqCarShopInfo message, length delimited. Does not implicitly {@link msg.C2GW_ReqCarShopInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {msg.IC2GW_ReqCarShopInfo} message C2GW_ReqCarShopInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarShopInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqCarShopInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqCarShopInfo} C2GW_ReqCarShopInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarShopInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqCarShopInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.shopid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqCarShopInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqCarShopInfo} C2GW_ReqCarShopInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarShopInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqCarShopInfo message.
         * @function verify
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqCarShopInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqCarShopInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqCarShopInfo} C2GW_ReqCarShopInfo
         */
        C2GW_ReqCarShopInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqCarShopInfo)
                return object;
            var message = new $root.msg.C2GW_ReqCarShopInfo();
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqCarShopInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqCarShopInfo
         * @static
         * @param {msg.C2GW_ReqCarShopInfo} message C2GW_ReqCarShopInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqCarShopInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.shopid = 0;
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            return object;
        };

        /**
         * Converts this C2GW_ReqCarShopInfo to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqCarShopInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqCarShopInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqCarShopInfo;
    })();

    msg.GW2C_SendCarShopInfo = (function() {

        /**
         * Properties of a GW2C_SendCarShopInfo.
         * @memberof msg
         * @interface IGW2C_SendCarShopInfo
         * @property {Array.<msg.ICarProductData>|null} [products] GW2C_SendCarShopInfo products
         */

        /**
         * Constructs a new GW2C_SendCarShopInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendCarShopInfo.
         * @implements IGW2C_SendCarShopInfo
         * @constructor
         * @param {msg.IGW2C_SendCarShopInfo=} [properties] Properties to set
         */
        function GW2C_SendCarShopInfo(properties) {
            this.products = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendCarShopInfo products.
         * @member {Array.<msg.ICarProductData>} products
         * @memberof msg.GW2C_SendCarShopInfo
         * @instance
         */
        GW2C_SendCarShopInfo.prototype.products = $util.emptyArray;

        /**
         * Creates a new GW2C_SendCarShopInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {msg.IGW2C_SendCarShopInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendCarShopInfo} GW2C_SendCarShopInfo instance
         */
        GW2C_SendCarShopInfo.create = function create(properties) {
            return new GW2C_SendCarShopInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendCarShopInfo message. Does not implicitly {@link msg.GW2C_SendCarShopInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {msg.IGW2C_SendCarShopInfo} message GW2C_SendCarShopInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendCarShopInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.products != null && message.products.length)
                for (var i = 0; i < message.products.length; ++i)
                    $root.msg.CarProductData.encode(message.products[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendCarShopInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendCarShopInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {msg.IGW2C_SendCarShopInfo} message GW2C_SendCarShopInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendCarShopInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendCarShopInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendCarShopInfo} GW2C_SendCarShopInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendCarShopInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendCarShopInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.products && message.products.length))
                        message.products = [];
                    message.products.push($root.msg.CarProductData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendCarShopInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendCarShopInfo} GW2C_SendCarShopInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendCarShopInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendCarShopInfo message.
         * @function verify
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendCarShopInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.products != null && message.hasOwnProperty("products")) {
                if (!Array.isArray(message.products))
                    return "products: array expected";
                for (var i = 0; i < message.products.length; ++i) {
                    var error = $root.msg.CarProductData.verify(message.products[i]);
                    if (error)
                        return "products." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendCarShopInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendCarShopInfo} GW2C_SendCarShopInfo
         */
        GW2C_SendCarShopInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendCarShopInfo)
                return object;
            var message = new $root.msg.GW2C_SendCarShopInfo();
            if (object.products) {
                if (!Array.isArray(object.products))
                    throw TypeError(".msg.GW2C_SendCarShopInfo.products: array expected");
                message.products = [];
                for (var i = 0; i < object.products.length; ++i) {
                    if (typeof object.products[i] !== "object")
                        throw TypeError(".msg.GW2C_SendCarShopInfo.products: object expected");
                    message.products[i] = $root.msg.CarProductData.fromObject(object.products[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendCarShopInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendCarShopInfo
         * @static
         * @param {msg.GW2C_SendCarShopInfo} message GW2C_SendCarShopInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendCarShopInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.products = [];
            if (message.products && message.products.length) {
                object.products = [];
                for (var j = 0; j < message.products.length; ++j)
                    object.products[j] = $root.msg.CarProductData.toObject(message.products[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendCarShopInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendCarShopInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendCarShopInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendCarShopInfo;
    })();

    msg.C2GW_BuyCarFromShop = (function() {

        /**
         * Properties of a C2GW_BuyCarFromShop.
         * @memberof msg
         * @interface IC2GW_BuyCarFromShop
         * @property {number|null} [shopid] C2GW_BuyCarFromShop shopid
         * @property {number|null} [pid] C2GW_BuyCarFromShop pid
         */

        /**
         * Constructs a new C2GW_BuyCarFromShop.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyCarFromShop.
         * @implements IC2GW_BuyCarFromShop
         * @constructor
         * @param {msg.IC2GW_BuyCarFromShop=} [properties] Properties to set
         */
        function C2GW_BuyCarFromShop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyCarFromShop shopid.
         * @member {number} shopid
         * @memberof msg.C2GW_BuyCarFromShop
         * @instance
         */
        C2GW_BuyCarFromShop.prototype.shopid = 0;

        /**
         * C2GW_BuyCarFromShop pid.
         * @member {number} pid
         * @memberof msg.C2GW_BuyCarFromShop
         * @instance
         */
        C2GW_BuyCarFromShop.prototype.pid = 0;

        /**
         * Creates a new C2GW_BuyCarFromShop instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {msg.IC2GW_BuyCarFromShop=} [properties] Properties to set
         * @returns {msg.C2GW_BuyCarFromShop} C2GW_BuyCarFromShop instance
         */
        C2GW_BuyCarFromShop.create = function create(properties) {
            return new C2GW_BuyCarFromShop(properties);
        };

        /**
         * Encodes the specified C2GW_BuyCarFromShop message. Does not implicitly {@link msg.C2GW_BuyCarFromShop.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {msg.IC2GW_BuyCarFromShop} message C2GW_BuyCarFromShop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyCarFromShop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.shopid);
            if (message.pid != null && message.hasOwnProperty("pid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyCarFromShop message, length delimited. Does not implicitly {@link msg.C2GW_BuyCarFromShop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {msg.IC2GW_BuyCarFromShop} message C2GW_BuyCarFromShop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyCarFromShop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyCarFromShop message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyCarFromShop} C2GW_BuyCarFromShop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyCarFromShop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyCarFromShop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.shopid = reader.uint32();
                    break;
                case 2:
                    message.pid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyCarFromShop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyCarFromShop} C2GW_BuyCarFromShop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyCarFromShop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyCarFromShop message.
         * @function verify
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyCarFromShop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            if (message.pid != null && message.hasOwnProperty("pid"))
                if (!$util.isInteger(message.pid))
                    return "pid: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyCarFromShop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyCarFromShop} C2GW_BuyCarFromShop
         */
        C2GW_BuyCarFromShop.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyCarFromShop)
                return object;
            var message = new $root.msg.C2GW_BuyCarFromShop();
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            if (object.pid != null)
                message.pid = object.pid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyCarFromShop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyCarFromShop
         * @static
         * @param {msg.C2GW_BuyCarFromShop} message C2GW_BuyCarFromShop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyCarFromShop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.shopid = 0;
                object.pid = 0;
            }
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            if (message.pid != null && message.hasOwnProperty("pid"))
                object.pid = message.pid;
            return object;
        };

        /**
         * Converts this C2GW_BuyCarFromShop to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyCarFromShop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyCarFromShop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyCarFromShop;
    })();

    msg.GW2C_UpdateCarShopProduct = (function() {

        /**
         * Properties of a GW2C_UpdateCarShopProduct.
         * @memberof msg
         * @interface IGW2C_UpdateCarShopProduct
         * @property {msg.ICarProductData|null} [product] GW2C_UpdateCarShopProduct product
         */

        /**
         * Constructs a new GW2C_UpdateCarShopProduct.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateCarShopProduct.
         * @implements IGW2C_UpdateCarShopProduct
         * @constructor
         * @param {msg.IGW2C_UpdateCarShopProduct=} [properties] Properties to set
         */
        function GW2C_UpdateCarShopProduct(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateCarShopProduct product.
         * @member {msg.ICarProductData|null|undefined} product
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @instance
         */
        GW2C_UpdateCarShopProduct.prototype.product = null;

        /**
         * Creates a new GW2C_UpdateCarShopProduct instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {msg.IGW2C_UpdateCarShopProduct=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateCarShopProduct} GW2C_UpdateCarShopProduct instance
         */
        GW2C_UpdateCarShopProduct.create = function create(properties) {
            return new GW2C_UpdateCarShopProduct(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateCarShopProduct message. Does not implicitly {@link msg.GW2C_UpdateCarShopProduct.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {msg.IGW2C_UpdateCarShopProduct} message GW2C_UpdateCarShopProduct message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateCarShopProduct.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.product != null && message.hasOwnProperty("product"))
                $root.msg.CarProductData.encode(message.product, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateCarShopProduct message, length delimited. Does not implicitly {@link msg.GW2C_UpdateCarShopProduct.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {msg.IGW2C_UpdateCarShopProduct} message GW2C_UpdateCarShopProduct message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateCarShopProduct.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateCarShopProduct message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateCarShopProduct} GW2C_UpdateCarShopProduct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateCarShopProduct.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateCarShopProduct();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.product = $root.msg.CarProductData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateCarShopProduct message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateCarShopProduct} GW2C_UpdateCarShopProduct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateCarShopProduct.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateCarShopProduct message.
         * @function verify
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateCarShopProduct.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.product != null && message.hasOwnProperty("product")) {
                var error = $root.msg.CarProductData.verify(message.product);
                if (error)
                    return "product." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_UpdateCarShopProduct message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateCarShopProduct} GW2C_UpdateCarShopProduct
         */
        GW2C_UpdateCarShopProduct.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateCarShopProduct)
                return object;
            var message = new $root.msg.GW2C_UpdateCarShopProduct();
            if (object.product != null) {
                if (typeof object.product !== "object")
                    throw TypeError(".msg.GW2C_UpdateCarShopProduct.product: object expected");
                message.product = $root.msg.CarProductData.fromObject(object.product);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateCarShopProduct message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @static
         * @param {msg.GW2C_UpdateCarShopProduct} message GW2C_UpdateCarShopProduct
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateCarShopProduct.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.product = null;
            if (message.product != null && message.hasOwnProperty("product"))
                object.product = $root.msg.CarProductData.toObject(message.product, options);
            return object;
        };

        /**
         * Converts this GW2C_UpdateCarShopProduct to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateCarShopProduct
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateCarShopProduct.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateCarShopProduct;
    })();

    msg.IpHost = (function() {

        /**
         * Properties of an IpHost.
         * @memberof msg
         * @interface IIpHost
         * @property {string|null} [ip] IpHost ip
         * @property {number|null} [port] IpHost port
         */

        /**
         * Constructs a new IpHost.
         * @memberof msg
         * @classdesc Represents an IpHost.
         * @implements IIpHost
         * @constructor
         * @param {msg.IIpHost=} [properties] Properties to set
         */
        function IpHost(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IpHost ip.
         * @member {string} ip
         * @memberof msg.IpHost
         * @instance
         */
        IpHost.prototype.ip = "";

        /**
         * IpHost port.
         * @member {number} port
         * @memberof msg.IpHost
         * @instance
         */
        IpHost.prototype.port = 0;

        /**
         * Creates a new IpHost instance using the specified properties.
         * @function create
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost=} [properties] Properties to set
         * @returns {msg.IpHost} IpHost instance
         */
        IpHost.create = function create(properties) {
            return new IpHost(properties);
        };

        /**
         * Encodes the specified IpHost message. Does not implicitly {@link msg.IpHost.verify|verify} messages.
         * @function encode
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost} message IpHost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpHost.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            if (message.port != null && message.hasOwnProperty("port"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
            return writer;
        };

        /**
         * Encodes the specified IpHost message, length delimited. Does not implicitly {@link msg.IpHost.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.IpHost
         * @static
         * @param {msg.IIpHost} message IpHost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpHost.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an IpHost message from the specified reader or buffer.
         * @function decode
         * @memberof msg.IpHost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.IpHost} IpHost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpHost.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.IpHost();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                case 2:
                    message.port = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an IpHost message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.IpHost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.IpHost} IpHost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpHost.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an IpHost message.
         * @function verify
         * @memberof msg.IpHost
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IpHost.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            return null;
        };

        /**
         * Creates an IpHost message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.IpHost
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.IpHost} IpHost
         */
        IpHost.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.IpHost)
                return object;
            var message = new $root.msg.IpHost();
            if (object.ip != null)
                message.ip = String(object.ip);
            if (object.port != null)
                message.port = object.port | 0;
            return message;
        };

        /**
         * Creates a plain object from an IpHost message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.IpHost
         * @static
         * @param {msg.IpHost} message IpHost
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IpHost.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = "";
                object.port = 0;
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            return object;
        };

        /**
         * Converts this IpHost to JSON.
         * @function toJSON
         * @memberof msg.IpHost
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IpHost.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IpHost;
    })();

    /**
     * ItemId enum.
     * @name msg.ItemId
     * @enum {string}
     * @property {number} YuanBao=60001 YuanBao value
     * @property {number} Diamond=60002 Diamond value
     * @property {number} Gold=60003 Gold value
     * @property {number} FreeStep=60005 FreeStep value
     * @property {number} Strength=60006 Strength value
     * @property {number} RedDiamond=100001 RedDiamond value
     * @property {number} RedDiamondParts=100002 RedDiamondParts value
     */
    msg.ItemId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[60001] = "YuanBao"] = 60001;
        values[valuesById[60002] = "Diamond"] = 60002;
        values[valuesById[60003] = "Gold"] = 60003;
        values[valuesById[60005] = "FreeStep"] = 60005;
        values[valuesById[60006] = "Strength"] = 60006;
        values[valuesById[100001] = "RedDiamond"] = 100001;
        values[valuesById[100002] = "RedDiamondParts"] = 100002;
        return values;
    })();

    /**
     * ItemType enum.
     * @name msg.ItemType
     * @enum {string}
     * @property {number} Normal=0 Normal value
     * @property {number} Digital=1 Digital value
     * @property {number} ShoppingCard=2 ShoppingCard value
     * @property {number} DailyUse=3 DailyUse value
     * @property {number} Toy=4 Toy value
     * @property {number} MobileCard=5 MobileCard value
     * @property {number} Currency=6 Currency value
     * @property {number} CarAccessory=7 CarAccessory value
     * @property {number} Advertisement=8 Advertisement value
     * @property {number} Smallware=9 Smallware value
     * @property {number} DiamondItem=10 DiamondItem value
     * @property {number} ClothesParts=11 ClothesParts value
     * @property {number} HouseParts=12 HouseParts value
     * @property {number} CarParts=13 CarParts value
     * @property {number} MaidParts=14 MaidParts value
     * @property {number} ClothesItem=15 ClothesItem value
     */
    msg.ItemType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Normal"] = 0;
        values[valuesById[1] = "Digital"] = 1;
        values[valuesById[2] = "ShoppingCard"] = 2;
        values[valuesById[3] = "DailyUse"] = 3;
        values[valuesById[4] = "Toy"] = 4;
        values[valuesById[5] = "MobileCard"] = 5;
        values[valuesById[6] = "Currency"] = 6;
        values[valuesById[7] = "CarAccessory"] = 7;
        values[valuesById[8] = "Advertisement"] = 8;
        values[valuesById[9] = "Smallware"] = 9;
        values[valuesById[10] = "DiamondItem"] = 10;
        values[valuesById[11] = "ClothesParts"] = 11;
        values[valuesById[12] = "HouseParts"] = 12;
        values[valuesById[13] = "CarParts"] = 13;
        values[valuesById[14] = "MaidParts"] = 14;
        values[valuesById[15] = "ClothesItem"] = 15;
        return values;
    })();

    msg.PairNumItem = (function() {

        /**
         * Properties of a PairNumItem.
         * @memberof msg
         * @interface IPairNumItem
         * @property {number|null} [itemid] PairNumItem itemid
         * @property {number|null} [num] PairNumItem num
         */

        /**
         * Constructs a new PairNumItem.
         * @memberof msg
         * @classdesc Represents a PairNumItem.
         * @implements IPairNumItem
         * @constructor
         * @param {msg.IPairNumItem=} [properties] Properties to set
         */
        function PairNumItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PairNumItem itemid.
         * @member {number} itemid
         * @memberof msg.PairNumItem
         * @instance
         */
        PairNumItem.prototype.itemid = 0;

        /**
         * PairNumItem num.
         * @member {number} num
         * @memberof msg.PairNumItem
         * @instance
         */
        PairNumItem.prototype.num = 0;

        /**
         * Creates a new PairNumItem instance using the specified properties.
         * @function create
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem=} [properties] Properties to set
         * @returns {msg.PairNumItem} PairNumItem instance
         */
        PairNumItem.create = function create(properties) {
            return new PairNumItem(properties);
        };

        /**
         * Encodes the specified PairNumItem message. Does not implicitly {@link msg.PairNumItem.verify|verify} messages.
         * @function encode
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem} message PairNumItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PairNumItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified PairNumItem message, length delimited. Does not implicitly {@link msg.PairNumItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.IPairNumItem} message PairNumItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PairNumItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PairNumItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.PairNumItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.PairNumItem} PairNumItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PairNumItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.PairNumItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PairNumItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.PairNumItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.PairNumItem} PairNumItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PairNumItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PairNumItem message.
         * @function verify
         * @memberof msg.PairNumItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PairNumItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a PairNumItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.PairNumItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.PairNumItem} PairNumItem
         */
        PairNumItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.PairNumItem)
                return object;
            var message = new $root.msg.PairNumItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a PairNumItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.PairNumItem
         * @static
         * @param {msg.PairNumItem} message PairNumItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PairNumItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this PairNumItem to JSON.
         * @function toJSON
         * @memberof msg.PairNumItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PairNumItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PairNumItem;
    })();

    /**
     * TaskId enum.
     * @name msg.TaskId
     * @enum {string}
     * @property {number} RegistAccount=1001 RegistAccount value
     * @property {number} RegisterTopScore=1002 RegisterTopScore value
     * @property {number} InviteeTopScore=1003 InviteeTopScore value
     * @property {number} InviteRegist=1004 InviteRegist value
     */
    msg.TaskId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1001] = "RegistAccount"] = 1001;
        values[valuesById[1002] = "RegisterTopScore"] = 1002;
        values[valuesById[1003] = "InviteeTopScore"] = 1003;
        values[valuesById[1004] = "InviteRegist"] = 1004;
        return values;
    })();

    /**
     * ItemPos enum.
     * @name msg.ItemPos
     * @enum {string}
     * @property {number} Bag=0 Bag value
     * @property {number} Helmet=1 Helmet value
     * @property {number} Clothes=2 Clothes value
     * @property {number} Pants=3 Pants value
     * @property {number} Shoe=4 Shoe value
     * @property {number} Hand=5 Hand value
     * @property {number} Wing=6 Wing value
     * @property {number} Suit=7 Suit value
     * @property {number} LongClothes=8 LongClothes value
     */
    msg.ItemPos = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Bag"] = 0;
        values[valuesById[1] = "Helmet"] = 1;
        values[valuesById[2] = "Clothes"] = 2;
        values[valuesById[3] = "Pants"] = 3;
        values[valuesById[4] = "Shoe"] = 4;
        values[valuesById[5] = "Hand"] = 5;
        values[valuesById[6] = "Wing"] = 6;
        values[valuesById[7] = "Suit"] = 7;
        values[valuesById[8] = "LongClothes"] = 8;
        return values;
    })();

    /**
     * HouseVisitType enum.
     * @name msg.HouseVisitType
     * @enum {string}
     * @property {number} TakeMoney=1 TakeMoney value
     * @property {number} RobMoney=2 RobMoney value
     * @property {number} RobMaid=5 RobMaid value
     * @property {number} TakeBackMaid=6 TakeBackMaid value
     */
    msg.HouseVisitType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "TakeMoney"] = 1;
        values[valuesById[2] = "RobMoney"] = 2;
        values[valuesById[5] = "RobMaid"] = 5;
        values[valuesById[6] = "TakeBackMaid"] = 6;
        return values;
    })();

    /**
     * MapEventType enum.
     * @name msg.MapEventType
     * @enum {string}
     * @property {number} Game=1 Game value
     * @property {number} Bonus=2 Bonus value
     * @property {number} Building=3 Building value
     */
    msg.MapEventType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Game"] = 1;
        values[valuesById[2] = "Bonus"] = 2;
        values[valuesById[3] = "Building"] = 3;
        return values;
    })();

    /**
     * MapEventId enum.
     * @name msg.MapEventId
     * @enum {string}
     * @property {number} GameTanTanLe=1001 GameTanTanLe value
     * @property {number} GameSuperMarket=1002 GameSuperMarket value
     * @property {number} GameFanFanLe=1003 GameFanFanLe value
     * @property {number} BonusGold=2001 BonusGold value
     * @property {number} BonusStrength=2002 BonusStrength value
     * @property {number} BuildingMaidShop=3001 BuildingMaidShop value
     * @property {number} BuildingCarShop=3002 BuildingCarShop value
     * @property {number} BuildingHouseShop=3003 BuildingHouseShop value
     */
    msg.MapEventId = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1001] = "GameTanTanLe"] = 1001;
        values[valuesById[1002] = "GameSuperMarket"] = 1002;
        values[valuesById[1003] = "GameFanFanLe"] = 1003;
        values[valuesById[2001] = "BonusGold"] = 2001;
        values[valuesById[2002] = "BonusStrength"] = 2002;
        values[valuesById[3001] = "BuildingMaidShop"] = 3001;
        values[valuesById[3002] = "BuildingCarShop"] = 3002;
        values[valuesById[3003] = "BuildingHouseShop"] = 3003;
        return values;
    })();

    /**
     * Sex enum.
     * @name msg.Sex
     * @enum {string}
     * @property {number} Female=0 Female value
     * @property {number} Male=1 Male value
     * @property {number} Neutral=2 Neutral value
     */
    msg.Sex = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Female"] = 0;
        values[valuesById[1] = "Male"] = 1;
        values[valuesById[2] = "Neutral"] = 2;
        return values;
    })();

    /**
     * MoneyType enum.
     * @name msg.MoneyType
     * @enum {string}
     * @property {number} _Gold=1 _Gold value
     * @property {number} _Diamond=2 _Diamond value
     * @property {number} _Strength=3 _Strength value
     * @property {number} _Item=4 _Item value
     */
    msg.MoneyType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "_Gold"] = 1;
        values[valuesById[2] = "_Diamond"] = 2;
        values[valuesById[3] = "_Strength"] = 3;
        values[valuesById[4] = "_Item"] = 4;
        return values;
    })();

    /**
     * CarOperatorType enum.
     * @name msg.CarOperatorType
     * @enum {string}
     * @property {number} Park=1 Park value
     * @property {number} TakeBack=2 TakeBack value
     * @property {number} Ticket=3 Ticket value
     * @property {number} AutoBack=4 AutoBack value
     */
    msg.CarOperatorType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Park"] = 1;
        values[valuesById[2] = "TakeBack"] = 2;
        values[valuesById[3] = "Ticket"] = 3;
        values[valuesById[4] = "AutoBack"] = 4;
        return values;
    })();

    /**
     * ParkingType enum.
     * @name msg.ParkingType
     * @enum {string}
     * @property {number} Public=1 Public value
     * @property {number} Private=2 Private value
     */
    msg.ParkingType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Public"] = 1;
        values[valuesById[2] = "Private"] = 2;
        return values;
    })();

    /**
     * CarPartType enum.
     * @name msg.CarPartType
     * @enum {string}
     * @property {number} Tyre=1 Tyre value
     * @property {number} Tank=2 Tank value
     * @property {number} Trunk=3 Trunk value
     * @property {number} Engine=4 Engine value
     * @property {number} Battery=5 Battery value
     */
    msg.CarPartType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Tyre"] = 1;
        values[valuesById[2] = "Tank"] = 2;
        values[valuesById[3] = "Trunk"] = 3;
        values[valuesById[4] = "Engine"] = 4;
        values[valuesById[5] = "Battery"] = 5;
        return values;
    })();

    /**
     * CarState enum.
     * @name msg.CarState
     * @enum {string}
     * @property {number} Ready=2 Ready value
     * @property {number} Parking=3 Parking value
     * @property {number} Exped=4 Exped value
     * @property {number} Robbing=5 Robbing value
     * @property {number} Back=6 Back value
     */
    msg.CarState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2] = "Ready"] = 2;
        values[valuesById[3] = "Parking"] = 3;
        values[valuesById[4] = "Exped"] = 4;
        values[valuesById[5] = "Robbing"] = 5;
        values[valuesById[6] = "Back"] = 6;
        return values;
    })();

    msg.PersonSocialInfo = (function() {

        /**
         * Properties of a PersonSocialInfo.
         * @memberof msg
         * @interface IPersonSocialInfo
         * @property {number|Long|null} [id] PersonSocialInfo id
         * @property {string|null} [face] PersonSocialInfo face
         * @property {string|null} [name] PersonSocialInfo name
         * @property {number|null} [sex] PersonSocialInfo sex
         * @property {number|null} [level] PersonSocialInfo level
         * @property {number|null} [age] PersonSocialInfo age
         * @property {number|null} [constellation] PersonSocialInfo constellation
         * @property {number|null} [lng] PersonSocialInfo lng
         * @property {number|null} [lat] PersonSocialInfo lat
         * @property {string|null} [sign] PersonSocialInfo sign
         * @property {number|null} [province] PersonSocialInfo province
         * @property {number|null} [city] PersonSocialInfo city
         */

        /**
         * Constructs a new PersonSocialInfo.
         * @memberof msg
         * @classdesc Represents a PersonSocialInfo.
         * @implements IPersonSocialInfo
         * @constructor
         * @param {msg.IPersonSocialInfo=} [properties] Properties to set
         */
        function PersonSocialInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PersonSocialInfo id.
         * @member {number|Long} id
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * PersonSocialInfo face.
         * @member {string} face
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.face = "";

        /**
         * PersonSocialInfo name.
         * @member {string} name
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.name = "";

        /**
         * PersonSocialInfo sex.
         * @member {number} sex
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.sex = 0;

        /**
         * PersonSocialInfo level.
         * @member {number} level
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.level = 0;

        /**
         * PersonSocialInfo age.
         * @member {number} age
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.age = 0;

        /**
         * PersonSocialInfo constellation.
         * @member {number} constellation
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.constellation = 0;

        /**
         * PersonSocialInfo lng.
         * @member {number} lng
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.lng = 0;

        /**
         * PersonSocialInfo lat.
         * @member {number} lat
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.lat = 0;

        /**
         * PersonSocialInfo sign.
         * @member {string} sign
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.sign = "";

        /**
         * PersonSocialInfo province.
         * @member {number} province
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.province = 0;

        /**
         * PersonSocialInfo city.
         * @member {number} city
         * @memberof msg.PersonSocialInfo
         * @instance
         */
        PersonSocialInfo.prototype.city = 0;

        /**
         * Creates a new PersonSocialInfo instance using the specified properties.
         * @function create
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {msg.IPersonSocialInfo=} [properties] Properties to set
         * @returns {msg.PersonSocialInfo} PersonSocialInfo instance
         */
        PersonSocialInfo.create = function create(properties) {
            return new PersonSocialInfo(properties);
        };

        /**
         * Encodes the specified PersonSocialInfo message. Does not implicitly {@link msg.PersonSocialInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {msg.IPersonSocialInfo} message PersonSocialInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PersonSocialInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.face);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sex);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.level);
            if (message.age != null && message.hasOwnProperty("age"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.age);
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.constellation);
            if (message.lng != null && message.hasOwnProperty("lng"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.lng);
            if (message.lat != null && message.hasOwnProperty("lat"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.lat);
            if (message.sign != null && message.hasOwnProperty("sign"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.sign);
            if (message.province != null && message.hasOwnProperty("province"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.province);
            if (message.city != null && message.hasOwnProperty("city"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.city);
            return writer;
        };

        /**
         * Encodes the specified PersonSocialInfo message, length delimited. Does not implicitly {@link msg.PersonSocialInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {msg.IPersonSocialInfo} message PersonSocialInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PersonSocialInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PersonSocialInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.PersonSocialInfo} PersonSocialInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PersonSocialInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.PersonSocialInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.face = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.sex = reader.int32();
                    break;
                case 5:
                    message.level = reader.uint32();
                    break;
                case 6:
                    message.age = reader.uint32();
                    break;
                case 7:
                    message.constellation = reader.uint32();
                    break;
                case 8:
                    message.lng = reader.float();
                    break;
                case 9:
                    message.lat = reader.float();
                    break;
                case 10:
                    message.sign = reader.string();
                    break;
                case 11:
                    message.province = reader.uint32();
                    break;
                case 12:
                    message.city = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PersonSocialInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.PersonSocialInfo} PersonSocialInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PersonSocialInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PersonSocialInfo message.
         * @function verify
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PersonSocialInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.age != null && message.hasOwnProperty("age"))
                if (!$util.isInteger(message.age))
                    return "age: integer expected";
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                if (!$util.isInteger(message.constellation))
                    return "constellation: integer expected";
            if (message.lng != null && message.hasOwnProperty("lng"))
                if (typeof message.lng !== "number")
                    return "lng: number expected";
            if (message.lat != null && message.hasOwnProperty("lat"))
                if (typeof message.lat !== "number")
                    return "lat: number expected";
            if (message.sign != null && message.hasOwnProperty("sign"))
                if (!$util.isString(message.sign))
                    return "sign: string expected";
            if (message.province != null && message.hasOwnProperty("province"))
                if (!$util.isInteger(message.province))
                    return "province: integer expected";
            if (message.city != null && message.hasOwnProperty("city"))
                if (!$util.isInteger(message.city))
                    return "city: integer expected";
            return null;
        };

        /**
         * Creates a PersonSocialInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.PersonSocialInfo} PersonSocialInfo
         */
        PersonSocialInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.PersonSocialInfo)
                return object;
            var message = new $root.msg.PersonSocialInfo();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.face != null)
                message.face = String(object.face);
            if (object.name != null)
                message.name = String(object.name);
            if (object.sex != null)
                message.sex = object.sex | 0;
            if (object.level != null)
                message.level = object.level >>> 0;
            if (object.age != null)
                message.age = object.age >>> 0;
            if (object.constellation != null)
                message.constellation = object.constellation >>> 0;
            if (object.lng != null)
                message.lng = Number(object.lng);
            if (object.lat != null)
                message.lat = Number(object.lat);
            if (object.sign != null)
                message.sign = String(object.sign);
            if (object.province != null)
                message.province = object.province >>> 0;
            if (object.city != null)
                message.city = object.city >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a PersonSocialInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.PersonSocialInfo
         * @static
         * @param {msg.PersonSocialInfo} message PersonSocialInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PersonSocialInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.face = "";
                object.name = "";
                object.sex = 0;
                object.level = 0;
                object.age = 0;
                object.constellation = 0;
                object.lng = 0;
                object.lat = 0;
                object.sign = "";
                object.province = 0;
                object.city = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.age != null && message.hasOwnProperty("age"))
                object.age = message.age;
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                object.constellation = message.constellation;
            if (message.lng != null && message.hasOwnProperty("lng"))
                object.lng = options.json && !isFinite(message.lng) ? String(message.lng) : message.lng;
            if (message.lat != null && message.hasOwnProperty("lat"))
                object.lat = options.json && !isFinite(message.lat) ? String(message.lat) : message.lat;
            if (message.sign != null && message.hasOwnProperty("sign"))
                object.sign = message.sign;
            if (message.province != null && message.hasOwnProperty("province"))
                object.province = message.province;
            if (message.city != null && message.hasOwnProperty("city"))
                object.city = message.city;
            return object;
        };

        /**
         * Converts this PersonSocialInfo to JSON.
         * @function toJSON
         * @memberof msg.PersonSocialInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PersonSocialInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PersonSocialInfo;
    })();

    msg.CommonKeyValue = (function() {

        /**
         * Properties of a CommonKeyValue.
         * @memberof msg
         * @interface ICommonKeyValue
         * @property {number|null} [key] CommonKeyValue key
         * @property {number|null} [value] CommonKeyValue value
         */

        /**
         * Constructs a new CommonKeyValue.
         * @memberof msg
         * @classdesc Represents a CommonKeyValue.
         * @implements ICommonKeyValue
         * @constructor
         * @param {msg.ICommonKeyValue=} [properties] Properties to set
         */
        function CommonKeyValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CommonKeyValue key.
         * @member {number} key
         * @memberof msg.CommonKeyValue
         * @instance
         */
        CommonKeyValue.prototype.key = 0;

        /**
         * CommonKeyValue value.
         * @member {number} value
         * @memberof msg.CommonKeyValue
         * @instance
         */
        CommonKeyValue.prototype.value = 0;

        /**
         * Creates a new CommonKeyValue instance using the specified properties.
         * @function create
         * @memberof msg.CommonKeyValue
         * @static
         * @param {msg.ICommonKeyValue=} [properties] Properties to set
         * @returns {msg.CommonKeyValue} CommonKeyValue instance
         */
        CommonKeyValue.create = function create(properties) {
            return new CommonKeyValue(properties);
        };

        /**
         * Encodes the specified CommonKeyValue message. Does not implicitly {@link msg.CommonKeyValue.verify|verify} messages.
         * @function encode
         * @memberof msg.CommonKeyValue
         * @static
         * @param {msg.ICommonKeyValue} message CommonKeyValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommonKeyValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.key);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.value);
            return writer;
        };

        /**
         * Encodes the specified CommonKeyValue message, length delimited. Does not implicitly {@link msg.CommonKeyValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CommonKeyValue
         * @static
         * @param {msg.ICommonKeyValue} message CommonKeyValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommonKeyValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CommonKeyValue message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CommonKeyValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CommonKeyValue} CommonKeyValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommonKeyValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CommonKeyValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.uint32();
                    break;
                case 2:
                    message.value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CommonKeyValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CommonKeyValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CommonKeyValue} CommonKeyValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommonKeyValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CommonKeyValue message.
         * @function verify
         * @memberof msg.CommonKeyValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CommonKeyValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!$util.isInteger(message.key))
                    return "key: integer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isInteger(message.value))
                    return "value: integer expected";
            return null;
        };

        /**
         * Creates a CommonKeyValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CommonKeyValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CommonKeyValue} CommonKeyValue
         */
        CommonKeyValue.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CommonKeyValue)
                return object;
            var message = new $root.msg.CommonKeyValue();
            if (object.key != null)
                message.key = object.key >>> 0;
            if (object.value != null)
                message.value = object.value >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CommonKeyValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CommonKeyValue
         * @static
         * @param {msg.CommonKeyValue} message CommonKeyValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CommonKeyValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = 0;
                object.value = 0;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };

        /**
         * Converts this CommonKeyValue to JSON.
         * @function toJSON
         * @memberof msg.CommonKeyValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CommonKeyValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CommonKeyValue;
    })();

    msg.GW2C_SendUserEvents = (function() {

        /**
         * Properties of a GW2C_SendUserEvents.
         * @memberof msg
         * @interface IGW2C_SendUserEvents
         * @property {msg.IUserMapEvent|null} [event] GW2C_SendUserEvents event
         */

        /**
         * Constructs a new GW2C_SendUserEvents.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserEvents.
         * @implements IGW2C_SendUserEvents
         * @constructor
         * @param {msg.IGW2C_SendUserEvents=} [properties] Properties to set
         */
        function GW2C_SendUserEvents(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserEvents event.
         * @member {msg.IUserMapEvent|null|undefined} event
         * @memberof msg.GW2C_SendUserEvents
         * @instance
         */
        GW2C_SendUserEvents.prototype.event = null;

        /**
         * Creates a new GW2C_SendUserEvents instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.IGW2C_SendUserEvents=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents instance
         */
        GW2C_SendUserEvents.create = function create(properties) {
            return new GW2C_SendUserEvents(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserEvents message. Does not implicitly {@link msg.GW2C_SendUserEvents.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.IGW2C_SendUserEvents} message GW2C_SendUserEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserEvents.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event != null && message.hasOwnProperty("event"))
                $root.msg.UserMapEvent.encode(message.event, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserEvents message, length delimited. Does not implicitly {@link msg.GW2C_SendUserEvents.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.IGW2C_SendUserEvents} message GW2C_SendUserEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserEvents.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserEvents message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserEvents.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserEvents();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event = $root.msg.UserMapEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserEvents message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserEvents.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserEvents message.
         * @function verify
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserEvents.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event != null && message.hasOwnProperty("event")) {
                var error = $root.msg.UserMapEvent.verify(message.event);
                if (error)
                    return "event." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendUserEvents message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserEvents} GW2C_SendUserEvents
         */
        GW2C_SendUserEvents.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserEvents)
                return object;
            var message = new $root.msg.GW2C_SendUserEvents();
            if (object.event != null) {
                if (typeof object.event !== "object")
                    throw TypeError(".msg.GW2C_SendUserEvents.event: object expected");
                message.event = $root.msg.UserMapEvent.fromObject(object.event);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserEvents message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserEvents
         * @static
         * @param {msg.GW2C_SendUserEvents} message GW2C_SendUserEvents
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserEvents.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.event = null;
            if (message.event != null && message.hasOwnProperty("event"))
                object.event = $root.msg.UserMapEvent.toObject(message.event, options);
            return object;
        };

        /**
         * Converts this GW2C_SendUserEvents to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserEvents
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserEvents.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserEvents;
    })();

    msg.C2GW_ReqEnterEvents = (function() {

        /**
         * Properties of a C2GW_ReqEnterEvents.
         * @memberof msg
         * @interface IC2GW_ReqEnterEvents
         * @property {number|Long|null} [uid] C2GW_ReqEnterEvents uid
         */

        /**
         * Constructs a new C2GW_ReqEnterEvents.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqEnterEvents.
         * @implements IC2GW_ReqEnterEvents
         * @constructor
         * @param {msg.IC2GW_ReqEnterEvents=} [properties] Properties to set
         */
        function C2GW_ReqEnterEvents(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqEnterEvents uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_ReqEnterEvents
         * @instance
         */
        C2GW_ReqEnterEvents.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqEnterEvents instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.IC2GW_ReqEnterEvents=} [properties] Properties to set
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents instance
         */
        C2GW_ReqEnterEvents.create = function create(properties) {
            return new C2GW_ReqEnterEvents(properties);
        };

        /**
         * Encodes the specified C2GW_ReqEnterEvents message. Does not implicitly {@link msg.C2GW_ReqEnterEvents.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.IC2GW_ReqEnterEvents} message C2GW_ReqEnterEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqEnterEvents.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqEnterEvents message, length delimited. Does not implicitly {@link msg.C2GW_ReqEnterEvents.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.IC2GW_ReqEnterEvents} message C2GW_ReqEnterEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqEnterEvents.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqEnterEvents message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqEnterEvents.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqEnterEvents();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqEnterEvents message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqEnterEvents.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqEnterEvents message.
         * @function verify
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqEnterEvents.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqEnterEvents message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqEnterEvents} C2GW_ReqEnterEvents
         */
        C2GW_ReqEnterEvents.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqEnterEvents)
                return object;
            var message = new $root.msg.C2GW_ReqEnterEvents();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqEnterEvents message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqEnterEvents
         * @static
         * @param {msg.C2GW_ReqEnterEvents} message C2GW_ReqEnterEvents
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqEnterEvents.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            return object;
        };

        /**
         * Converts this C2GW_ReqEnterEvents to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqEnterEvents
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqEnterEvents.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqEnterEvents;
    })();

    msg.GW2C_RemoveEvent = (function() {

        /**
         * Properties of a GW2C_RemoveEvent.
         * @memberof msg
         * @interface IGW2C_RemoveEvent
         * @property {number|Long|null} [uid] GW2C_RemoveEvent uid
         */

        /**
         * Constructs a new GW2C_RemoveEvent.
         * @memberof msg
         * @classdesc Represents a GW2C_RemoveEvent.
         * @implements IGW2C_RemoveEvent
         * @constructor
         * @param {msg.IGW2C_RemoveEvent=} [properties] Properties to set
         */
        function GW2C_RemoveEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RemoveEvent uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_RemoveEvent
         * @instance
         */
        GW2C_RemoveEvent.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RemoveEvent instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.IGW2C_RemoveEvent=} [properties] Properties to set
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent instance
         */
        GW2C_RemoveEvent.create = function create(properties) {
            return new GW2C_RemoveEvent(properties);
        };

        /**
         * Encodes the specified GW2C_RemoveEvent message. Does not implicitly {@link msg.GW2C_RemoveEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.IGW2C_RemoveEvent} message GW2C_RemoveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemoveEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RemoveEvent message, length delimited. Does not implicitly {@link msg.GW2C_RemoveEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.IGW2C_RemoveEvent} message GW2C_RemoveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemoveEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RemoveEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemoveEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RemoveEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RemoveEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemoveEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RemoveEvent message.
         * @function verify
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RemoveEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RemoveEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RemoveEvent} GW2C_RemoveEvent
         */
        GW2C_RemoveEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RemoveEvent)
                return object;
            var message = new $root.msg.GW2C_RemoveEvent();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RemoveEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RemoveEvent
         * @static
         * @param {msg.GW2C_RemoveEvent} message GW2C_RemoveEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RemoveEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            return object;
        };

        /**
         * Converts this GW2C_RemoveEvent to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RemoveEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RemoveEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RemoveEvent;
    })();

    msg.C2GW_LeaveEvent = (function() {

        /**
         * Properties of a C2GW_LeaveEvent.
         * @memberof msg
         * @interface IC2GW_LeaveEvent
         * @property {number|Long|null} [uid] C2GW_LeaveEvent uid
         */

        /**
         * Constructs a new C2GW_LeaveEvent.
         * @memberof msg
         * @classdesc Represents a C2GW_LeaveEvent.
         * @implements IC2GW_LeaveEvent
         * @constructor
         * @param {msg.IC2GW_LeaveEvent=} [properties] Properties to set
         */
        function C2GW_LeaveEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_LeaveEvent uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_LeaveEvent
         * @instance
         */
        C2GW_LeaveEvent.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_LeaveEvent instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.IC2GW_LeaveEvent=} [properties] Properties to set
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent instance
         */
        C2GW_LeaveEvent.create = function create(properties) {
            return new C2GW_LeaveEvent(properties);
        };

        /**
         * Encodes the specified C2GW_LeaveEvent message. Does not implicitly {@link msg.C2GW_LeaveEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.IC2GW_LeaveEvent} message C2GW_LeaveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_LeaveEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_LeaveEvent message, length delimited. Does not implicitly {@link msg.C2GW_LeaveEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.IC2GW_LeaveEvent} message C2GW_LeaveEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_LeaveEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_LeaveEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_LeaveEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_LeaveEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_LeaveEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_LeaveEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_LeaveEvent message.
         * @function verify
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_LeaveEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_LeaveEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_LeaveEvent} C2GW_LeaveEvent
         */
        C2GW_LeaveEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_LeaveEvent)
                return object;
            var message = new $root.msg.C2GW_LeaveEvent();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_LeaveEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_LeaveEvent
         * @static
         * @param {msg.C2GW_LeaveEvent} message C2GW_LeaveEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_LeaveEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            return object;
        };

        /**
         * Converts this C2GW_LeaveEvent to JSON.
         * @function toJSON
         * @memberof msg.C2GW_LeaveEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_LeaveEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_LeaveEvent;
    })();

    msg.GW2C_EnterGameEvent = (function() {

        /**
         * Properties of a GW2C_EnterGameEvent.
         * @memberof msg
         * @interface IGW2C_EnterGameEvent
         * @property {number|Long|null} [uid] GW2C_EnterGameEvent uid
         */

        /**
         * Constructs a new GW2C_EnterGameEvent.
         * @memberof msg
         * @classdesc Represents a GW2C_EnterGameEvent.
         * @implements IGW2C_EnterGameEvent
         * @constructor
         * @param {msg.IGW2C_EnterGameEvent=} [properties] Properties to set
         */
        function GW2C_EnterGameEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_EnterGameEvent uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_EnterGameEvent
         * @instance
         */
        GW2C_EnterGameEvent.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_EnterGameEvent instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.IGW2C_EnterGameEvent=} [properties] Properties to set
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent instance
         */
        GW2C_EnterGameEvent.create = function create(properties) {
            return new GW2C_EnterGameEvent(properties);
        };

        /**
         * Encodes the specified GW2C_EnterGameEvent message. Does not implicitly {@link msg.GW2C_EnterGameEvent.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.IGW2C_EnterGameEvent} message GW2C_EnterGameEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_EnterGameEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_EnterGameEvent message, length delimited. Does not implicitly {@link msg.GW2C_EnterGameEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.IGW2C_EnterGameEvent} message GW2C_EnterGameEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_EnterGameEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_EnterGameEvent message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_EnterGameEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_EnterGameEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_EnterGameEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_EnterGameEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_EnterGameEvent message.
         * @function verify
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_EnterGameEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_EnterGameEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_EnterGameEvent} GW2C_EnterGameEvent
         */
        GW2C_EnterGameEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_EnterGameEvent)
                return object;
            var message = new $root.msg.GW2C_EnterGameEvent();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_EnterGameEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_EnterGameEvent
         * @static
         * @param {msg.GW2C_EnterGameEvent} message GW2C_EnterGameEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_EnterGameEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            return object;
        };

        /**
         * Converts this GW2C_EnterGameEvent to JSON.
         * @function toJSON
         * @memberof msg.GW2C_EnterGameEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_EnterGameEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_EnterGameEvent;
    })();

    msg.C2GW_ReqHouseData = (function() {

        /**
         * Properties of a C2GW_ReqHouseData.
         * @memberof msg
         * @interface IC2GW_ReqHouseData
         */

        /**
         * Constructs a new C2GW_ReqHouseData.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqHouseData.
         * @implements IC2GW_ReqHouseData
         * @constructor
         * @param {msg.IC2GW_ReqHouseData=} [properties] Properties to set
         */
        function C2GW_ReqHouseData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqHouseData instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {msg.IC2GW_ReqHouseData=} [properties] Properties to set
         * @returns {msg.C2GW_ReqHouseData} C2GW_ReqHouseData instance
         */
        C2GW_ReqHouseData.create = function create(properties) {
            return new C2GW_ReqHouseData(properties);
        };

        /**
         * Encodes the specified C2GW_ReqHouseData message. Does not implicitly {@link msg.C2GW_ReqHouseData.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {msg.IC2GW_ReqHouseData} message C2GW_ReqHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqHouseData message, length delimited. Does not implicitly {@link msg.C2GW_ReqHouseData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {msg.IC2GW_ReqHouseData} message C2GW_ReqHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqHouseData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqHouseData} C2GW_ReqHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqHouseData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqHouseData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqHouseData} C2GW_ReqHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqHouseData message.
         * @function verify
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqHouseData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqHouseData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqHouseData} C2GW_ReqHouseData
         */
        C2GW_ReqHouseData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqHouseData)
                return object;
            return new $root.msg.C2GW_ReqHouseData();
        };

        /**
         * Creates a plain object from a C2GW_ReqHouseData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqHouseData
         * @static
         * @param {msg.C2GW_ReqHouseData} message C2GW_ReqHouseData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqHouseData.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqHouseData to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqHouseData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqHouseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqHouseData;
    })();

    msg.GW2C_AckHouseData = (function() {

        /**
         * Properties of a GW2C_AckHouseData.
         * @memberof msg
         * @interface IGW2C_AckHouseData
         * @property {Array.<msg.IHouseData>|null} [datas] GW2C_AckHouseData datas
         */

        /**
         * Constructs a new GW2C_AckHouseData.
         * @memberof msg
         * @classdesc Represents a GW2C_AckHouseData.
         * @implements IGW2C_AckHouseData
         * @constructor
         * @param {msg.IGW2C_AckHouseData=} [properties] Properties to set
         */
        function GW2C_AckHouseData(properties) {
            this.datas = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckHouseData datas.
         * @member {Array.<msg.IHouseData>} datas
         * @memberof msg.GW2C_AckHouseData
         * @instance
         */
        GW2C_AckHouseData.prototype.datas = $util.emptyArray;

        /**
         * Creates a new GW2C_AckHouseData instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {msg.IGW2C_AckHouseData=} [properties] Properties to set
         * @returns {msg.GW2C_AckHouseData} GW2C_AckHouseData instance
         */
        GW2C_AckHouseData.create = function create(properties) {
            return new GW2C_AckHouseData(properties);
        };

        /**
         * Encodes the specified GW2C_AckHouseData message. Does not implicitly {@link msg.GW2C_AckHouseData.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {msg.IGW2C_AckHouseData} message GW2C_AckHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.datas != null && message.datas.length)
                for (var i = 0; i < message.datas.length; ++i)
                    $root.msg.HouseData.encode(message.datas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckHouseData message, length delimited. Does not implicitly {@link msg.GW2C_AckHouseData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {msg.IGW2C_AckHouseData} message GW2C_AckHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckHouseData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckHouseData} GW2C_AckHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckHouseData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.datas && message.datas.length))
                        message.datas = [];
                    message.datas.push($root.msg.HouseData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckHouseData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckHouseData} GW2C_AckHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckHouseData message.
         * @function verify
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckHouseData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.datas != null && message.hasOwnProperty("datas")) {
                if (!Array.isArray(message.datas))
                    return "datas: array expected";
                for (var i = 0; i < message.datas.length; ++i) {
                    var error = $root.msg.HouseData.verify(message.datas[i]);
                    if (error)
                        return "datas." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckHouseData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckHouseData} GW2C_AckHouseData
         */
        GW2C_AckHouseData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckHouseData)
                return object;
            var message = new $root.msg.GW2C_AckHouseData();
            if (object.datas) {
                if (!Array.isArray(object.datas))
                    throw TypeError(".msg.GW2C_AckHouseData.datas: array expected");
                message.datas = [];
                for (var i = 0; i < object.datas.length; ++i) {
                    if (typeof object.datas[i] !== "object")
                        throw TypeError(".msg.GW2C_AckHouseData.datas: object expected");
                    message.datas[i] = $root.msg.HouseData.fromObject(object.datas[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckHouseData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckHouseData
         * @static
         * @param {msg.GW2C_AckHouseData} message GW2C_AckHouseData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckHouseData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.datas = [];
            if (message.datas && message.datas.length) {
                object.datas = [];
                for (var j = 0; j < message.datas.length; ++j)
                    object.datas[j] = $root.msg.HouseData.toObject(message.datas[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckHouseData to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckHouseData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckHouseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckHouseData;
    })();

    msg.GW2C_UpdateHouseDataOne = (function() {

        /**
         * Properties of a GW2C_UpdateHouseDataOne.
         * @memberof msg
         * @interface IGW2C_UpdateHouseDataOne
         * @property {number|Long|null} [houseuid] GW2C_UpdateHouseDataOne houseuid
         * @property {msg.IHouseData|null} [data] GW2C_UpdateHouseDataOne data
         * @property {boolean|null} [isdel] GW2C_UpdateHouseDataOne isdel
         */

        /**
         * Constructs a new GW2C_UpdateHouseDataOne.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateHouseDataOne.
         * @implements IGW2C_UpdateHouseDataOne
         * @constructor
         * @param {msg.IGW2C_UpdateHouseDataOne=} [properties] Properties to set
         */
        function GW2C_UpdateHouseDataOne(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateHouseDataOne houseuid.
         * @member {number|Long} houseuid
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @instance
         */
        GW2C_UpdateHouseDataOne.prototype.houseuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_UpdateHouseDataOne data.
         * @member {msg.IHouseData|null|undefined} data
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @instance
         */
        GW2C_UpdateHouseDataOne.prototype.data = null;

        /**
         * GW2C_UpdateHouseDataOne isdel.
         * @member {boolean} isdel
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @instance
         */
        GW2C_UpdateHouseDataOne.prototype.isdel = false;

        /**
         * Creates a new GW2C_UpdateHouseDataOne instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {msg.IGW2C_UpdateHouseDataOne=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateHouseDataOne} GW2C_UpdateHouseDataOne instance
         */
        GW2C_UpdateHouseDataOne.create = function create(properties) {
            return new GW2C_UpdateHouseDataOne(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateHouseDataOne message. Does not implicitly {@link msg.GW2C_UpdateHouseDataOne.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {msg.IGW2C_UpdateHouseDataOne} message GW2C_UpdateHouseDataOne message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateHouseDataOne.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseuid);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.HouseData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.isdel != null && message.hasOwnProperty("isdel"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isdel);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateHouseDataOne message, length delimited. Does not implicitly {@link msg.GW2C_UpdateHouseDataOne.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {msg.IGW2C_UpdateHouseDataOne} message GW2C_UpdateHouseDataOne message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateHouseDataOne.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateHouseDataOne message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateHouseDataOne} GW2C_UpdateHouseDataOne
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateHouseDataOne.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateHouseDataOne();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseuid = reader.uint64();
                    break;
                case 2:
                    message.data = $root.msg.HouseData.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.isdel = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateHouseDataOne message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateHouseDataOne} GW2C_UpdateHouseDataOne
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateHouseDataOne.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateHouseDataOne message.
         * @function verify
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateHouseDataOne.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (!$util.isInteger(message.houseuid) && !(message.houseuid && $util.isInteger(message.houseuid.low) && $util.isInteger(message.houseuid.high)))
                    return "houseuid: integer|Long expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.HouseData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            if (message.isdel != null && message.hasOwnProperty("isdel"))
                if (typeof message.isdel !== "boolean")
                    return "isdel: boolean expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateHouseDataOne message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateHouseDataOne} GW2C_UpdateHouseDataOne
         */
        GW2C_UpdateHouseDataOne.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateHouseDataOne)
                return object;
            var message = new $root.msg.GW2C_UpdateHouseDataOne();
            if (object.houseuid != null)
                if ($util.Long)
                    (message.houseuid = $util.Long.fromValue(object.houseuid)).unsigned = true;
                else if (typeof object.houseuid === "string")
                    message.houseuid = parseInt(object.houseuid, 10);
                else if (typeof object.houseuid === "number")
                    message.houseuid = object.houseuid;
                else if (typeof object.houseuid === "object")
                    message.houseuid = new $util.LongBits(object.houseuid.low >>> 0, object.houseuid.high >>> 0).toNumber(true);
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_UpdateHouseDataOne.data: object expected");
                message.data = $root.msg.HouseData.fromObject(object.data);
            }
            if (object.isdel != null)
                message.isdel = Boolean(object.isdel);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateHouseDataOne message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @static
         * @param {msg.GW2C_UpdateHouseDataOne} message GW2C_UpdateHouseDataOne
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateHouseDataOne.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseuid = options.longs === String ? "0" : 0;
                object.data = null;
                object.isdel = false;
            }
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (typeof message.houseuid === "number")
                    object.houseuid = options.longs === String ? String(message.houseuid) : message.houseuid;
                else
                    object.houseuid = options.longs === String ? $util.Long.prototype.toString.call(message.houseuid) : options.longs === Number ? new $util.LongBits(message.houseuid.low >>> 0, message.houseuid.high >>> 0).toNumber(true) : message.houseuid;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.HouseData.toObject(message.data, options);
            if (message.isdel != null && message.hasOwnProperty("isdel"))
                object.isdel = message.isdel;
            return object;
        };

        /**
         * Converts this GW2C_UpdateHouseDataOne to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateHouseDataOne
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateHouseDataOne.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateHouseDataOne;
    })();

    msg.GW2C_UpdateHouseVisitInfo = (function() {

        /**
         * Properties of a GW2C_UpdateHouseVisitInfo.
         * @memberof msg
         * @interface IGW2C_UpdateHouseVisitInfo
         * @property {number|Long|null} [houseid] GW2C_UpdateHouseVisitInfo houseid
         * @property {msg.IHouseVisitInfo|null} [info] GW2C_UpdateHouseVisitInfo info
         */

        /**
         * Constructs a new GW2C_UpdateHouseVisitInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateHouseVisitInfo.
         * @implements IGW2C_UpdateHouseVisitInfo
         * @constructor
         * @param {msg.IGW2C_UpdateHouseVisitInfo=} [properties] Properties to set
         */
        function GW2C_UpdateHouseVisitInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateHouseVisitInfo houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @instance
         */
        GW2C_UpdateHouseVisitInfo.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_UpdateHouseVisitInfo info.
         * @member {msg.IHouseVisitInfo|null|undefined} info
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @instance
         */
        GW2C_UpdateHouseVisitInfo.prototype.info = null;

        /**
         * Creates a new GW2C_UpdateHouseVisitInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {msg.IGW2C_UpdateHouseVisitInfo=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateHouseVisitInfo} GW2C_UpdateHouseVisitInfo instance
         */
        GW2C_UpdateHouseVisitInfo.create = function create(properties) {
            return new GW2C_UpdateHouseVisitInfo(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateHouseVisitInfo message. Does not implicitly {@link msg.GW2C_UpdateHouseVisitInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {msg.IGW2C_UpdateHouseVisitInfo} message GW2C_UpdateHouseVisitInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateHouseVisitInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.HouseVisitInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateHouseVisitInfo message, length delimited. Does not implicitly {@link msg.GW2C_UpdateHouseVisitInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {msg.IGW2C_UpdateHouseVisitInfo} message GW2C_UpdateHouseVisitInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateHouseVisitInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateHouseVisitInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateHouseVisitInfo} GW2C_UpdateHouseVisitInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateHouseVisitInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateHouseVisitInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.info = $root.msg.HouseVisitInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateHouseVisitInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateHouseVisitInfo} GW2C_UpdateHouseVisitInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateHouseVisitInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateHouseVisitInfo message.
         * @function verify
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateHouseVisitInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.HouseVisitInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_UpdateHouseVisitInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateHouseVisitInfo} GW2C_UpdateHouseVisitInfo
         */
        GW2C_UpdateHouseVisitInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateHouseVisitInfo)
                return object;
            var message = new $root.msg.GW2C_UpdateHouseVisitInfo();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.GW2C_UpdateHouseVisitInfo.info: object expected");
                message.info = $root.msg.HouseVisitInfo.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateHouseVisitInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @static
         * @param {msg.GW2C_UpdateHouseVisitInfo} message GW2C_UpdateHouseVisitInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateHouseVisitInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.info = null;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.HouseVisitInfo.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this GW2C_UpdateHouseVisitInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateHouseVisitInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateHouseVisitInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateHouseVisitInfo;
    })();

    msg.C2GW_ReqSetNewPlayerStep = (function() {

        /**
         * Properties of a C2GW_ReqSetNewPlayerStep.
         * @memberof msg
         * @interface IC2GW_ReqSetNewPlayerStep
         * @property {number|null} [step] C2GW_ReqSetNewPlayerStep step
         */

        /**
         * Constructs a new C2GW_ReqSetNewPlayerStep.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetNewPlayerStep.
         * @implements IC2GW_ReqSetNewPlayerStep
         * @constructor
         * @param {msg.IC2GW_ReqSetNewPlayerStep=} [properties] Properties to set
         */
        function C2GW_ReqSetNewPlayerStep(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetNewPlayerStep step.
         * @member {number} step
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @instance
         */
        C2GW_ReqSetNewPlayerStep.prototype.step = 0;

        /**
         * Creates a new C2GW_ReqSetNewPlayerStep instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {msg.IC2GW_ReqSetNewPlayerStep=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetNewPlayerStep} C2GW_ReqSetNewPlayerStep instance
         */
        C2GW_ReqSetNewPlayerStep.create = function create(properties) {
            return new C2GW_ReqSetNewPlayerStep(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetNewPlayerStep message. Does not implicitly {@link msg.C2GW_ReqSetNewPlayerStep.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {msg.IC2GW_ReqSetNewPlayerStep} message C2GW_ReqSetNewPlayerStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetNewPlayerStep.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.step != null && message.hasOwnProperty("step"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.step);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetNewPlayerStep message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetNewPlayerStep.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {msg.IC2GW_ReqSetNewPlayerStep} message C2GW_ReqSetNewPlayerStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetNewPlayerStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetNewPlayerStep message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetNewPlayerStep} C2GW_ReqSetNewPlayerStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetNewPlayerStep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetNewPlayerStep();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.step = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetNewPlayerStep message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetNewPlayerStep} C2GW_ReqSetNewPlayerStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetNewPlayerStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetNewPlayerStep message.
         * @function verify
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetNewPlayerStep.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.step != null && message.hasOwnProperty("step"))
                if (!$util.isInteger(message.step))
                    return "step: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetNewPlayerStep message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetNewPlayerStep} C2GW_ReqSetNewPlayerStep
         */
        C2GW_ReqSetNewPlayerStep.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetNewPlayerStep)
                return object;
            var message = new $root.msg.C2GW_ReqSetNewPlayerStep();
            if (object.step != null)
                message.step = object.step >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetNewPlayerStep message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @static
         * @param {msg.C2GW_ReqSetNewPlayerStep} message C2GW_ReqSetNewPlayerStep
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetNewPlayerStep.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.step = 0;
            if (message.step != null && message.hasOwnProperty("step"))
                object.step = message.step;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetNewPlayerStep to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetNewPlayerStep
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetNewPlayerStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetNewPlayerStep;
    })();

    msg.GW2C_AckNewPlayerStep = (function() {

        /**
         * Properties of a GW2C_AckNewPlayerStep.
         * @memberof msg
         * @interface IGW2C_AckNewPlayerStep
         * @property {number|null} [step] GW2C_AckNewPlayerStep step
         */

        /**
         * Constructs a new GW2C_AckNewPlayerStep.
         * @memberof msg
         * @classdesc Represents a GW2C_AckNewPlayerStep.
         * @implements IGW2C_AckNewPlayerStep
         * @constructor
         * @param {msg.IGW2C_AckNewPlayerStep=} [properties] Properties to set
         */
        function GW2C_AckNewPlayerStep(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckNewPlayerStep step.
         * @member {number} step
         * @memberof msg.GW2C_AckNewPlayerStep
         * @instance
         */
        GW2C_AckNewPlayerStep.prototype.step = 0;

        /**
         * Creates a new GW2C_AckNewPlayerStep instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {msg.IGW2C_AckNewPlayerStep=} [properties] Properties to set
         * @returns {msg.GW2C_AckNewPlayerStep} GW2C_AckNewPlayerStep instance
         */
        GW2C_AckNewPlayerStep.create = function create(properties) {
            return new GW2C_AckNewPlayerStep(properties);
        };

        /**
         * Encodes the specified GW2C_AckNewPlayerStep message. Does not implicitly {@link msg.GW2C_AckNewPlayerStep.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {msg.IGW2C_AckNewPlayerStep} message GW2C_AckNewPlayerStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckNewPlayerStep.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.step != null && message.hasOwnProperty("step"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.step);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckNewPlayerStep message, length delimited. Does not implicitly {@link msg.GW2C_AckNewPlayerStep.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {msg.IGW2C_AckNewPlayerStep} message GW2C_AckNewPlayerStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckNewPlayerStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckNewPlayerStep message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckNewPlayerStep} GW2C_AckNewPlayerStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckNewPlayerStep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckNewPlayerStep();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.step = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckNewPlayerStep message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckNewPlayerStep} GW2C_AckNewPlayerStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckNewPlayerStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckNewPlayerStep message.
         * @function verify
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckNewPlayerStep.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.step != null && message.hasOwnProperty("step"))
                if (!$util.isInteger(message.step))
                    return "step: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_AckNewPlayerStep message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckNewPlayerStep} GW2C_AckNewPlayerStep
         */
        GW2C_AckNewPlayerStep.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckNewPlayerStep)
                return object;
            var message = new $root.msg.GW2C_AckNewPlayerStep();
            if (object.step != null)
                message.step = object.step >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckNewPlayerStep message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckNewPlayerStep
         * @static
         * @param {msg.GW2C_AckNewPlayerStep} message GW2C_AckNewPlayerStep
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckNewPlayerStep.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.step = 0;
            if (message.step != null && message.hasOwnProperty("step"))
                object.step = message.step;
            return object;
        };

        /**
         * Converts this GW2C_AckNewPlayerStep to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckNewPlayerStep
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckNewPlayerStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckNewPlayerStep;
    })();

    msg.C2GW_ReqHouseLevelUp = (function() {

        /**
         * Properties of a C2GW_ReqHouseLevelUp.
         * @memberof msg
         * @interface IC2GW_ReqHouseLevelUp
         * @property {number|Long|null} [houseid] C2GW_ReqHouseLevelUp houseid
         */

        /**
         * Constructs a new C2GW_ReqHouseLevelUp.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqHouseLevelUp.
         * @implements IC2GW_ReqHouseLevelUp
         * @constructor
         * @param {msg.IC2GW_ReqHouseLevelUp=} [properties] Properties to set
         */
        function C2GW_ReqHouseLevelUp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqHouseLevelUp houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @instance
         */
        C2GW_ReqHouseLevelUp.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqHouseLevelUp instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {msg.IC2GW_ReqHouseLevelUp=} [properties] Properties to set
         * @returns {msg.C2GW_ReqHouseLevelUp} C2GW_ReqHouseLevelUp instance
         */
        C2GW_ReqHouseLevelUp.create = function create(properties) {
            return new C2GW_ReqHouseLevelUp(properties);
        };

        /**
         * Encodes the specified C2GW_ReqHouseLevelUp message. Does not implicitly {@link msg.C2GW_ReqHouseLevelUp.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {msg.IC2GW_ReqHouseLevelUp} message C2GW_ReqHouseLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseLevelUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqHouseLevelUp message, length delimited. Does not implicitly {@link msg.C2GW_ReqHouseLevelUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {msg.IC2GW_ReqHouseLevelUp} message C2GW_ReqHouseLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseLevelUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqHouseLevelUp message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqHouseLevelUp} C2GW_ReqHouseLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseLevelUp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqHouseLevelUp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqHouseLevelUp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqHouseLevelUp} C2GW_ReqHouseLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseLevelUp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqHouseLevelUp message.
         * @function verify
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqHouseLevelUp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqHouseLevelUp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqHouseLevelUp} C2GW_ReqHouseLevelUp
         */
        C2GW_ReqHouseLevelUp.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqHouseLevelUp)
                return object;
            var message = new $root.msg.C2GW_ReqHouseLevelUp();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqHouseLevelUp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @static
         * @param {msg.C2GW_ReqHouseLevelUp} message C2GW_ReqHouseLevelUp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqHouseLevelUp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            return object;
        };

        /**
         * Converts this C2GW_ReqHouseLevelUp to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqHouseLevelUp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqHouseLevelUp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqHouseLevelUp;
    })();

    msg.GW2C_AckHouseLevelUp = (function() {

        /**
         * Properties of a GW2C_AckHouseLevelUp.
         * @memberof msg
         * @interface IGW2C_AckHouseLevelUp
         * @property {number|Long|null} [houseid] GW2C_AckHouseLevelUp houseid
         * @property {number|null} [ret] GW2C_AckHouseLevelUp ret
         * @property {msg.IHouseData|null} [data] GW2C_AckHouseLevelUp data
         */

        /**
         * Constructs a new GW2C_AckHouseLevelUp.
         * @memberof msg
         * @classdesc Represents a GW2C_AckHouseLevelUp.
         * @implements IGW2C_AckHouseLevelUp
         * @constructor
         * @param {msg.IGW2C_AckHouseLevelUp=} [properties] Properties to set
         */
        function GW2C_AckHouseLevelUp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckHouseLevelUp houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_AckHouseLevelUp
         * @instance
         */
        GW2C_AckHouseLevelUp.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_AckHouseLevelUp ret.
         * @member {number} ret
         * @memberof msg.GW2C_AckHouseLevelUp
         * @instance
         */
        GW2C_AckHouseLevelUp.prototype.ret = 0;

        /**
         * GW2C_AckHouseLevelUp data.
         * @member {msg.IHouseData|null|undefined} data
         * @memberof msg.GW2C_AckHouseLevelUp
         * @instance
         */
        GW2C_AckHouseLevelUp.prototype.data = null;

        /**
         * Creates a new GW2C_AckHouseLevelUp instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {msg.IGW2C_AckHouseLevelUp=} [properties] Properties to set
         * @returns {msg.GW2C_AckHouseLevelUp} GW2C_AckHouseLevelUp instance
         */
        GW2C_AckHouseLevelUp.create = function create(properties) {
            return new GW2C_AckHouseLevelUp(properties);
        };

        /**
         * Encodes the specified GW2C_AckHouseLevelUp message. Does not implicitly {@link msg.GW2C_AckHouseLevelUp.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {msg.IGW2C_AckHouseLevelUp} message GW2C_AckHouseLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseLevelUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ret);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.HouseData.encode(message.data, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckHouseLevelUp message, length delimited. Does not implicitly {@link msg.GW2C_AckHouseLevelUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {msg.IGW2C_AckHouseLevelUp} message GW2C_AckHouseLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseLevelUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckHouseLevelUp message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckHouseLevelUp} GW2C_AckHouseLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseLevelUp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckHouseLevelUp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.ret = reader.uint32();
                    break;
                case 3:
                    message.data = $root.msg.HouseData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckHouseLevelUp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckHouseLevelUp} GW2C_AckHouseLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseLevelUp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckHouseLevelUp message.
         * @function verify
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckHouseLevelUp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.HouseData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_AckHouseLevelUp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckHouseLevelUp} GW2C_AckHouseLevelUp
         */
        GW2C_AckHouseLevelUp.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckHouseLevelUp)
                return object;
            var message = new $root.msg.GW2C_AckHouseLevelUp();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_AckHouseLevelUp.data: object expected");
                message.data = $root.msg.HouseData.fromObject(object.data);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckHouseLevelUp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckHouseLevelUp
         * @static
         * @param {msg.GW2C_AckHouseLevelUp} message GW2C_AckHouseLevelUp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckHouseLevelUp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.ret = 0;
                object.data = null;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.HouseData.toObject(message.data, options);
            return object;
        };

        /**
         * Converts this GW2C_AckHouseLevelUp to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckHouseLevelUp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckHouseLevelUp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckHouseLevelUp;
    })();

    msg.C2GW_ReqHouseCellLevelUp = (function() {

        /**
         * Properties of a C2GW_ReqHouseCellLevelUp.
         * @memberof msg
         * @interface IC2GW_ReqHouseCellLevelUp
         * @property {number|Long|null} [houseid] C2GW_ReqHouseCellLevelUp houseid
         * @property {number|null} [index] C2GW_ReqHouseCellLevelUp index
         */

        /**
         * Constructs a new C2GW_ReqHouseCellLevelUp.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqHouseCellLevelUp.
         * @implements IC2GW_ReqHouseCellLevelUp
         * @constructor
         * @param {msg.IC2GW_ReqHouseCellLevelUp=} [properties] Properties to set
         */
        function C2GW_ReqHouseCellLevelUp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqHouseCellLevelUp houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @instance
         */
        C2GW_ReqHouseCellLevelUp.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_ReqHouseCellLevelUp index.
         * @member {number} index
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @instance
         */
        C2GW_ReqHouseCellLevelUp.prototype.index = 0;

        /**
         * Creates a new C2GW_ReqHouseCellLevelUp instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {msg.IC2GW_ReqHouseCellLevelUp=} [properties] Properties to set
         * @returns {msg.C2GW_ReqHouseCellLevelUp} C2GW_ReqHouseCellLevelUp instance
         */
        C2GW_ReqHouseCellLevelUp.create = function create(properties) {
            return new C2GW_ReqHouseCellLevelUp(properties);
        };

        /**
         * Encodes the specified C2GW_ReqHouseCellLevelUp message. Does not implicitly {@link msg.C2GW_ReqHouseCellLevelUp.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {msg.IC2GW_ReqHouseCellLevelUp} message C2GW_ReqHouseCellLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseCellLevelUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqHouseCellLevelUp message, length delimited. Does not implicitly {@link msg.C2GW_ReqHouseCellLevelUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {msg.IC2GW_ReqHouseCellLevelUp} message C2GW_ReqHouseCellLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseCellLevelUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqHouseCellLevelUp message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqHouseCellLevelUp} C2GW_ReqHouseCellLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseCellLevelUp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqHouseCellLevelUp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqHouseCellLevelUp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqHouseCellLevelUp} C2GW_ReqHouseCellLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseCellLevelUp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqHouseCellLevelUp message.
         * @function verify
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqHouseCellLevelUp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqHouseCellLevelUp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqHouseCellLevelUp} C2GW_ReqHouseCellLevelUp
         */
        C2GW_ReqHouseCellLevelUp.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqHouseCellLevelUp)
                return object;
            var message = new $root.msg.C2GW_ReqHouseCellLevelUp();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqHouseCellLevelUp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @static
         * @param {msg.C2GW_ReqHouseCellLevelUp} message C2GW_ReqHouseCellLevelUp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqHouseCellLevelUp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.index = 0;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_ReqHouseCellLevelUp to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqHouseCellLevelUp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqHouseCellLevelUp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqHouseCellLevelUp;
    })();

    msg.GW2C_AckHouseCellLevelUp = (function() {

        /**
         * Properties of a GW2C_AckHouseCellLevelUp.
         * @memberof msg
         * @interface IGW2C_AckHouseCellLevelUp
         * @property {number|Long|null} [houseid] GW2C_AckHouseCellLevelUp houseid
         * @property {number|null} [index] GW2C_AckHouseCellLevelUp index
         * @property {number|null} [ret] GW2C_AckHouseCellLevelUp ret
         * @property {msg.IHouseData|null} [data] GW2C_AckHouseCellLevelUp data
         */

        /**
         * Constructs a new GW2C_AckHouseCellLevelUp.
         * @memberof msg
         * @classdesc Represents a GW2C_AckHouseCellLevelUp.
         * @implements IGW2C_AckHouseCellLevelUp
         * @constructor
         * @param {msg.IGW2C_AckHouseCellLevelUp=} [properties] Properties to set
         */
        function GW2C_AckHouseCellLevelUp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckHouseCellLevelUp houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @instance
         */
        GW2C_AckHouseCellLevelUp.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_AckHouseCellLevelUp index.
         * @member {number} index
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @instance
         */
        GW2C_AckHouseCellLevelUp.prototype.index = 0;

        /**
         * GW2C_AckHouseCellLevelUp ret.
         * @member {number} ret
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @instance
         */
        GW2C_AckHouseCellLevelUp.prototype.ret = 0;

        /**
         * GW2C_AckHouseCellLevelUp data.
         * @member {msg.IHouseData|null|undefined} data
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @instance
         */
        GW2C_AckHouseCellLevelUp.prototype.data = null;

        /**
         * Creates a new GW2C_AckHouseCellLevelUp instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {msg.IGW2C_AckHouseCellLevelUp=} [properties] Properties to set
         * @returns {msg.GW2C_AckHouseCellLevelUp} GW2C_AckHouseCellLevelUp instance
         */
        GW2C_AckHouseCellLevelUp.create = function create(properties) {
            return new GW2C_AckHouseCellLevelUp(properties);
        };

        /**
         * Encodes the specified GW2C_AckHouseCellLevelUp message. Does not implicitly {@link msg.GW2C_AckHouseCellLevelUp.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {msg.IGW2C_AckHouseCellLevelUp} message GW2C_AckHouseCellLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseCellLevelUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ret);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.HouseData.encode(message.data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckHouseCellLevelUp message, length delimited. Does not implicitly {@link msg.GW2C_AckHouseCellLevelUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {msg.IGW2C_AckHouseCellLevelUp} message GW2C_AckHouseCellLevelUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseCellLevelUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckHouseCellLevelUp message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckHouseCellLevelUp} GW2C_AckHouseCellLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseCellLevelUp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckHouseCellLevelUp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                case 3:
                    message.ret = reader.uint32();
                    break;
                case 4:
                    message.data = $root.msg.HouseData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckHouseCellLevelUp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckHouseCellLevelUp} GW2C_AckHouseCellLevelUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseCellLevelUp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckHouseCellLevelUp message.
         * @function verify
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckHouseCellLevelUp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.HouseData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_AckHouseCellLevelUp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckHouseCellLevelUp} GW2C_AckHouseCellLevelUp
         */
        GW2C_AckHouseCellLevelUp.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckHouseCellLevelUp)
                return object;
            var message = new $root.msg.GW2C_AckHouseCellLevelUp();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_AckHouseCellLevelUp.data: object expected");
                message.data = $root.msg.HouseData.fromObject(object.data);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckHouseCellLevelUp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @static
         * @param {msg.GW2C_AckHouseCellLevelUp} message GW2C_AckHouseCellLevelUp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckHouseCellLevelUp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.index = 0;
                object.ret = 0;
                object.data = null;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.HouseData.toObject(message.data, options);
            return object;
        };

        /**
         * Converts this GW2C_AckHouseCellLevelUp to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckHouseCellLevelUp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckHouseCellLevelUp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckHouseCellLevelUp;
    })();

    msg.C2GW_ReqTakeSelfHouseGold = (function() {

        /**
         * Properties of a C2GW_ReqTakeSelfHouseGold.
         * @memberof msg
         * @interface IC2GW_ReqTakeSelfHouseGold
         * @property {number|Long|null} [houseid] C2GW_ReqTakeSelfHouseGold houseid
         * @property {number|null} [index] C2GW_ReqTakeSelfHouseGold index
         */

        /**
         * Constructs a new C2GW_ReqTakeSelfHouseGold.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTakeSelfHouseGold.
         * @implements IC2GW_ReqTakeSelfHouseGold
         * @constructor
         * @param {msg.IC2GW_ReqTakeSelfHouseGold=} [properties] Properties to set
         */
        function C2GW_ReqTakeSelfHouseGold(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqTakeSelfHouseGold houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @instance
         */
        C2GW_ReqTakeSelfHouseGold.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_ReqTakeSelfHouseGold index.
         * @member {number} index
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @instance
         */
        C2GW_ReqTakeSelfHouseGold.prototype.index = 0;

        /**
         * Creates a new C2GW_ReqTakeSelfHouseGold instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {msg.IC2GW_ReqTakeSelfHouseGold=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTakeSelfHouseGold} C2GW_ReqTakeSelfHouseGold instance
         */
        C2GW_ReqTakeSelfHouseGold.create = function create(properties) {
            return new C2GW_ReqTakeSelfHouseGold(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTakeSelfHouseGold message. Does not implicitly {@link msg.C2GW_ReqTakeSelfHouseGold.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {msg.IC2GW_ReqTakeSelfHouseGold} message C2GW_ReqTakeSelfHouseGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTakeSelfHouseGold.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTakeSelfHouseGold message, length delimited. Does not implicitly {@link msg.C2GW_ReqTakeSelfHouseGold.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {msg.IC2GW_ReqTakeSelfHouseGold} message C2GW_ReqTakeSelfHouseGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTakeSelfHouseGold.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTakeSelfHouseGold message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTakeSelfHouseGold} C2GW_ReqTakeSelfHouseGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTakeSelfHouseGold.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTakeSelfHouseGold();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTakeSelfHouseGold message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTakeSelfHouseGold} C2GW_ReqTakeSelfHouseGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTakeSelfHouseGold.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTakeSelfHouseGold message.
         * @function verify
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTakeSelfHouseGold.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTakeSelfHouseGold message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTakeSelfHouseGold} C2GW_ReqTakeSelfHouseGold
         */
        C2GW_ReqTakeSelfHouseGold.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTakeSelfHouseGold)
                return object;
            var message = new $root.msg.C2GW_ReqTakeSelfHouseGold();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqTakeSelfHouseGold message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @static
         * @param {msg.C2GW_ReqTakeSelfHouseGold} message C2GW_ReqTakeSelfHouseGold
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTakeSelfHouseGold.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.index = 0;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_ReqTakeSelfHouseGold to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTakeSelfHouseGold
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTakeSelfHouseGold.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTakeSelfHouseGold;
    })();

    msg.GW2C_AckTakeSelfHouseGoldRet = (function() {

        /**
         * Properties of a GW2C_AckTakeSelfHouseGoldRet.
         * @memberof msg
         * @interface IGW2C_AckTakeSelfHouseGoldRet
         * @property {number|Long|null} [houseid] GW2C_AckTakeSelfHouseGoldRet houseid
         * @property {number|null} [index] GW2C_AckTakeSelfHouseGoldRet index
         * @property {number|null} [gold] GW2C_AckTakeSelfHouseGoldRet gold
         * @property {msg.IHouseData|null} [data] GW2C_AckTakeSelfHouseGoldRet data
         * @property {Array.<msg.IPairNumItem>|null} [items] GW2C_AckTakeSelfHouseGoldRet items
         */

        /**
         * Constructs a new GW2C_AckTakeSelfHouseGoldRet.
         * @memberof msg
         * @classdesc Represents a GW2C_AckTakeSelfHouseGoldRet.
         * @implements IGW2C_AckTakeSelfHouseGoldRet
         * @constructor
         * @param {msg.IGW2C_AckTakeSelfHouseGoldRet=} [properties] Properties to set
         */
        function GW2C_AckTakeSelfHouseGoldRet(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckTakeSelfHouseGoldRet houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @instance
         */
        GW2C_AckTakeSelfHouseGoldRet.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_AckTakeSelfHouseGoldRet index.
         * @member {number} index
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @instance
         */
        GW2C_AckTakeSelfHouseGoldRet.prototype.index = 0;

        /**
         * GW2C_AckTakeSelfHouseGoldRet gold.
         * @member {number} gold
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @instance
         */
        GW2C_AckTakeSelfHouseGoldRet.prototype.gold = 0;

        /**
         * GW2C_AckTakeSelfHouseGoldRet data.
         * @member {msg.IHouseData|null|undefined} data
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @instance
         */
        GW2C_AckTakeSelfHouseGoldRet.prototype.data = null;

        /**
         * GW2C_AckTakeSelfHouseGoldRet items.
         * @member {Array.<msg.IPairNumItem>} items
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @instance
         */
        GW2C_AckTakeSelfHouseGoldRet.prototype.items = $util.emptyArray;

        /**
         * Creates a new GW2C_AckTakeSelfHouseGoldRet instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {msg.IGW2C_AckTakeSelfHouseGoldRet=} [properties] Properties to set
         * @returns {msg.GW2C_AckTakeSelfHouseGoldRet} GW2C_AckTakeSelfHouseGoldRet instance
         */
        GW2C_AckTakeSelfHouseGoldRet.create = function create(properties) {
            return new GW2C_AckTakeSelfHouseGoldRet(properties);
        };

        /**
         * Encodes the specified GW2C_AckTakeSelfHouseGoldRet message. Does not implicitly {@link msg.GW2C_AckTakeSelfHouseGoldRet.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {msg.IGW2C_AckTakeSelfHouseGoldRet} message GW2C_AckTakeSelfHouseGoldRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckTakeSelfHouseGoldRet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gold);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.HouseData.encode(message.data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.PairNumItem.encode(message.items[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckTakeSelfHouseGoldRet message, length delimited. Does not implicitly {@link msg.GW2C_AckTakeSelfHouseGoldRet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {msg.IGW2C_AckTakeSelfHouseGoldRet} message GW2C_AckTakeSelfHouseGoldRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckTakeSelfHouseGoldRet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckTakeSelfHouseGoldRet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckTakeSelfHouseGoldRet} GW2C_AckTakeSelfHouseGoldRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckTakeSelfHouseGoldRet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckTakeSelfHouseGoldRet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                case 3:
                    message.gold = reader.uint32();
                    break;
                case 4:
                    message.data = $root.msg.HouseData.decode(reader, reader.uint32());
                    break;
                case 5:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.PairNumItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckTakeSelfHouseGoldRet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckTakeSelfHouseGoldRet} GW2C_AckTakeSelfHouseGoldRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckTakeSelfHouseGoldRet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckTakeSelfHouseGoldRet message.
         * @function verify
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckTakeSelfHouseGoldRet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.HouseData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.PairNumItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckTakeSelfHouseGoldRet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckTakeSelfHouseGoldRet} GW2C_AckTakeSelfHouseGoldRet
         */
        GW2C_AckTakeSelfHouseGoldRet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckTakeSelfHouseGoldRet)
                return object;
            var message = new $root.msg.GW2C_AckTakeSelfHouseGoldRet();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_AckTakeSelfHouseGoldRet.data: object expected");
                message.data = $root.msg.HouseData.fromObject(object.data);
            }
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.GW2C_AckTakeSelfHouseGoldRet.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.GW2C_AckTakeSelfHouseGoldRet.items: object expected");
                    message.items[i] = $root.msg.PairNumItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckTakeSelfHouseGoldRet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @static
         * @param {msg.GW2C_AckTakeSelfHouseGoldRet} message GW2C_AckTakeSelfHouseGoldRet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckTakeSelfHouseGoldRet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.index = 0;
                object.gold = 0;
                object.data = null;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.HouseData.toObject(message.data, options);
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.PairNumItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckTakeSelfHouseGoldRet to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckTakeSelfHouseGoldRet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckTakeSelfHouseGoldRet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckTakeSelfHouseGoldRet;
    })();

    msg.C2GW_ReqTakeOtherHouseGold = (function() {

        /**
         * Properties of a C2GW_ReqTakeOtherHouseGold.
         * @memberof msg
         * @interface IC2GW_ReqTakeOtherHouseGold
         * @property {number|Long|null} [houseid] C2GW_ReqTakeOtherHouseGold houseid
         * @property {number|null} [index] C2GW_ReqTakeOtherHouseGold index
         */

        /**
         * Constructs a new C2GW_ReqTakeOtherHouseGold.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTakeOtherHouseGold.
         * @implements IC2GW_ReqTakeOtherHouseGold
         * @constructor
         * @param {msg.IC2GW_ReqTakeOtherHouseGold=} [properties] Properties to set
         */
        function C2GW_ReqTakeOtherHouseGold(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqTakeOtherHouseGold houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @instance
         */
        C2GW_ReqTakeOtherHouseGold.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_ReqTakeOtherHouseGold index.
         * @member {number} index
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @instance
         */
        C2GW_ReqTakeOtherHouseGold.prototype.index = 0;

        /**
         * Creates a new C2GW_ReqTakeOtherHouseGold instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {msg.IC2GW_ReqTakeOtherHouseGold=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTakeOtherHouseGold} C2GW_ReqTakeOtherHouseGold instance
         */
        C2GW_ReqTakeOtherHouseGold.create = function create(properties) {
            return new C2GW_ReqTakeOtherHouseGold(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTakeOtherHouseGold message. Does not implicitly {@link msg.C2GW_ReqTakeOtherHouseGold.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {msg.IC2GW_ReqTakeOtherHouseGold} message C2GW_ReqTakeOtherHouseGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTakeOtherHouseGold.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTakeOtherHouseGold message, length delimited. Does not implicitly {@link msg.C2GW_ReqTakeOtherHouseGold.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {msg.IC2GW_ReqTakeOtherHouseGold} message C2GW_ReqTakeOtherHouseGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTakeOtherHouseGold.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTakeOtherHouseGold message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTakeOtherHouseGold} C2GW_ReqTakeOtherHouseGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTakeOtherHouseGold.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTakeOtherHouseGold();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTakeOtherHouseGold message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTakeOtherHouseGold} C2GW_ReqTakeOtherHouseGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTakeOtherHouseGold.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTakeOtherHouseGold message.
         * @function verify
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTakeOtherHouseGold.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTakeOtherHouseGold message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTakeOtherHouseGold} C2GW_ReqTakeOtherHouseGold
         */
        C2GW_ReqTakeOtherHouseGold.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTakeOtherHouseGold)
                return object;
            var message = new $root.msg.C2GW_ReqTakeOtherHouseGold();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqTakeOtherHouseGold message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @static
         * @param {msg.C2GW_ReqTakeOtherHouseGold} message C2GW_ReqTakeOtherHouseGold
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTakeOtherHouseGold.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.index = 0;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_ReqTakeOtherHouseGold to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTakeOtherHouseGold
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTakeOtherHouseGold.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTakeOtherHouseGold;
    })();

    msg.GW2C_AckTakeOtherHouseGoldRet = (function() {

        /**
         * Properties of a GW2C_AckTakeOtherHouseGoldRet.
         * @memberof msg
         * @interface IGW2C_AckTakeOtherHouseGoldRet
         * @property {number|Long|null} [houseid] GW2C_AckTakeOtherHouseGoldRet houseid
         * @property {number|null} [index] GW2C_AckTakeOtherHouseGoldRet index
         * @property {number|null} [gold] GW2C_AckTakeOtherHouseGoldRet gold
         * @property {msg.IHouseData|null} [data] GW2C_AckTakeOtherHouseGoldRet data
         * @property {Array.<msg.IPairNumItem>|null} [items] GW2C_AckTakeOtherHouseGoldRet items
         */

        /**
         * Constructs a new GW2C_AckTakeOtherHouseGoldRet.
         * @memberof msg
         * @classdesc Represents a GW2C_AckTakeOtherHouseGoldRet.
         * @implements IGW2C_AckTakeOtherHouseGoldRet
         * @constructor
         * @param {msg.IGW2C_AckTakeOtherHouseGoldRet=} [properties] Properties to set
         */
        function GW2C_AckTakeOtherHouseGoldRet(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckTakeOtherHouseGoldRet houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @instance
         */
        GW2C_AckTakeOtherHouseGoldRet.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_AckTakeOtherHouseGoldRet index.
         * @member {number} index
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @instance
         */
        GW2C_AckTakeOtherHouseGoldRet.prototype.index = 0;

        /**
         * GW2C_AckTakeOtherHouseGoldRet gold.
         * @member {number} gold
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @instance
         */
        GW2C_AckTakeOtherHouseGoldRet.prototype.gold = 0;

        /**
         * GW2C_AckTakeOtherHouseGoldRet data.
         * @member {msg.IHouseData|null|undefined} data
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @instance
         */
        GW2C_AckTakeOtherHouseGoldRet.prototype.data = null;

        /**
         * GW2C_AckTakeOtherHouseGoldRet items.
         * @member {Array.<msg.IPairNumItem>} items
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @instance
         */
        GW2C_AckTakeOtherHouseGoldRet.prototype.items = $util.emptyArray;

        /**
         * Creates a new GW2C_AckTakeOtherHouseGoldRet instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {msg.IGW2C_AckTakeOtherHouseGoldRet=} [properties] Properties to set
         * @returns {msg.GW2C_AckTakeOtherHouseGoldRet} GW2C_AckTakeOtherHouseGoldRet instance
         */
        GW2C_AckTakeOtherHouseGoldRet.create = function create(properties) {
            return new GW2C_AckTakeOtherHouseGoldRet(properties);
        };

        /**
         * Encodes the specified GW2C_AckTakeOtherHouseGoldRet message. Does not implicitly {@link msg.GW2C_AckTakeOtherHouseGoldRet.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {msg.IGW2C_AckTakeOtherHouseGoldRet} message GW2C_AckTakeOtherHouseGoldRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckTakeOtherHouseGoldRet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gold);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.HouseData.encode(message.data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.PairNumItem.encode(message.items[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckTakeOtherHouseGoldRet message, length delimited. Does not implicitly {@link msg.GW2C_AckTakeOtherHouseGoldRet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {msg.IGW2C_AckTakeOtherHouseGoldRet} message GW2C_AckTakeOtherHouseGoldRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckTakeOtherHouseGoldRet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckTakeOtherHouseGoldRet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckTakeOtherHouseGoldRet} GW2C_AckTakeOtherHouseGoldRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckTakeOtherHouseGoldRet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckTakeOtherHouseGoldRet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                case 3:
                    message.gold = reader.uint32();
                    break;
                case 4:
                    message.data = $root.msg.HouseData.decode(reader, reader.uint32());
                    break;
                case 5:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.PairNumItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckTakeOtherHouseGoldRet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckTakeOtherHouseGoldRet} GW2C_AckTakeOtherHouseGoldRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckTakeOtherHouseGoldRet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckTakeOtherHouseGoldRet message.
         * @function verify
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckTakeOtherHouseGoldRet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.HouseData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.PairNumItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckTakeOtherHouseGoldRet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckTakeOtherHouseGoldRet} GW2C_AckTakeOtherHouseGoldRet
         */
        GW2C_AckTakeOtherHouseGoldRet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckTakeOtherHouseGoldRet)
                return object;
            var message = new $root.msg.GW2C_AckTakeOtherHouseGoldRet();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_AckTakeOtherHouseGoldRet.data: object expected");
                message.data = $root.msg.HouseData.fromObject(object.data);
            }
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.GW2C_AckTakeOtherHouseGoldRet.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.GW2C_AckTakeOtherHouseGoldRet.items: object expected");
                    message.items[i] = $root.msg.PairNumItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckTakeOtherHouseGoldRet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @static
         * @param {msg.GW2C_AckTakeOtherHouseGoldRet} message GW2C_AckTakeOtherHouseGoldRet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckTakeOtherHouseGoldRet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.index = 0;
                object.gold = 0;
                object.data = null;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.HouseData.toObject(message.data, options);
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.PairNumItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckTakeOtherHouseGoldRet to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckTakeOtherHouseGoldRet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckTakeOtherHouseGoldRet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckTakeOtherHouseGoldRet;
    })();

    msg.C2GW_ReqRandHouseList = (function() {

        /**
         * Properties of a C2GW_ReqRandHouseList.
         * @memberof msg
         * @interface IC2GW_ReqRandHouseList
         * @property {number|null} [carflag] C2GW_ReqRandHouseList carflag
         * @property {number|null} [buildingid] C2GW_ReqRandHouseList buildingid
         * @property {number|null} [bgetall] C2GW_ReqRandHouseList bgetall
         */

        /**
         * Constructs a new C2GW_ReqRandHouseList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqRandHouseList.
         * @implements IC2GW_ReqRandHouseList
         * @constructor
         * @param {msg.IC2GW_ReqRandHouseList=} [properties] Properties to set
         */
        function C2GW_ReqRandHouseList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqRandHouseList carflag.
         * @member {number} carflag
         * @memberof msg.C2GW_ReqRandHouseList
         * @instance
         */
        C2GW_ReqRandHouseList.prototype.carflag = 0;

        /**
         * C2GW_ReqRandHouseList buildingid.
         * @member {number} buildingid
         * @memberof msg.C2GW_ReqRandHouseList
         * @instance
         */
        C2GW_ReqRandHouseList.prototype.buildingid = 0;

        /**
         * C2GW_ReqRandHouseList bgetall.
         * @member {number} bgetall
         * @memberof msg.C2GW_ReqRandHouseList
         * @instance
         */
        C2GW_ReqRandHouseList.prototype.bgetall = 0;

        /**
         * Creates a new C2GW_ReqRandHouseList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {msg.IC2GW_ReqRandHouseList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqRandHouseList} C2GW_ReqRandHouseList instance
         */
        C2GW_ReqRandHouseList.create = function create(properties) {
            return new C2GW_ReqRandHouseList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqRandHouseList message. Does not implicitly {@link msg.C2GW_ReqRandHouseList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {msg.IC2GW_ReqRandHouseList} message C2GW_ReqRandHouseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRandHouseList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.carflag != null && message.hasOwnProperty("carflag"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carflag);
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.buildingid);
            if (message.bgetall != null && message.hasOwnProperty("bgetall"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bgetall);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqRandHouseList message, length delimited. Does not implicitly {@link msg.C2GW_ReqRandHouseList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {msg.IC2GW_ReqRandHouseList} message C2GW_ReqRandHouseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRandHouseList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqRandHouseList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqRandHouseList} C2GW_ReqRandHouseList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRandHouseList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqRandHouseList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.carflag = reader.uint32();
                    break;
                case 2:
                    message.buildingid = reader.uint32();
                    break;
                case 3:
                    message.bgetall = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqRandHouseList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqRandHouseList} C2GW_ReqRandHouseList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRandHouseList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqRandHouseList message.
         * @function verify
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqRandHouseList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.carflag != null && message.hasOwnProperty("carflag"))
                if (!$util.isInteger(message.carflag))
                    return "carflag: integer expected";
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                if (!$util.isInteger(message.buildingid))
                    return "buildingid: integer expected";
            if (message.bgetall != null && message.hasOwnProperty("bgetall"))
                if (!$util.isInteger(message.bgetall))
                    return "bgetall: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqRandHouseList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqRandHouseList} C2GW_ReqRandHouseList
         */
        C2GW_ReqRandHouseList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqRandHouseList)
                return object;
            var message = new $root.msg.C2GW_ReqRandHouseList();
            if (object.carflag != null)
                message.carflag = object.carflag >>> 0;
            if (object.buildingid != null)
                message.buildingid = object.buildingid >>> 0;
            if (object.bgetall != null)
                message.bgetall = object.bgetall >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqRandHouseList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqRandHouseList
         * @static
         * @param {msg.C2GW_ReqRandHouseList} message C2GW_ReqRandHouseList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqRandHouseList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.carflag = 0;
                object.buildingid = 0;
                object.bgetall = 0;
            }
            if (message.carflag != null && message.hasOwnProperty("carflag"))
                object.carflag = message.carflag;
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                object.buildingid = message.buildingid;
            if (message.bgetall != null && message.hasOwnProperty("bgetall"))
                object.bgetall = message.bgetall;
            return object;
        };

        /**
         * Converts this C2GW_ReqRandHouseList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqRandHouseList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqRandHouseList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqRandHouseList;
    })();

    msg.GW2C_AckRandHouseList = (function() {

        /**
         * Properties of a GW2C_AckRandHouseList.
         * @memberof msg
         * @interface IGW2C_AckRandHouseList
         * @property {Array.<msg.IHouseData>|null} [datas] GW2C_AckRandHouseList datas
         * @property {Array.<msg.IHouseData>|null} [datas2] GW2C_AckRandHouseList datas2
         */

        /**
         * Constructs a new GW2C_AckRandHouseList.
         * @memberof msg
         * @classdesc Represents a GW2C_AckRandHouseList.
         * @implements IGW2C_AckRandHouseList
         * @constructor
         * @param {msg.IGW2C_AckRandHouseList=} [properties] Properties to set
         */
        function GW2C_AckRandHouseList(properties) {
            this.datas = [];
            this.datas2 = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckRandHouseList datas.
         * @member {Array.<msg.IHouseData>} datas
         * @memberof msg.GW2C_AckRandHouseList
         * @instance
         */
        GW2C_AckRandHouseList.prototype.datas = $util.emptyArray;

        /**
         * GW2C_AckRandHouseList datas2.
         * @member {Array.<msg.IHouseData>} datas2
         * @memberof msg.GW2C_AckRandHouseList
         * @instance
         */
        GW2C_AckRandHouseList.prototype.datas2 = $util.emptyArray;

        /**
         * Creates a new GW2C_AckRandHouseList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {msg.IGW2C_AckRandHouseList=} [properties] Properties to set
         * @returns {msg.GW2C_AckRandHouseList} GW2C_AckRandHouseList instance
         */
        GW2C_AckRandHouseList.create = function create(properties) {
            return new GW2C_AckRandHouseList(properties);
        };

        /**
         * Encodes the specified GW2C_AckRandHouseList message. Does not implicitly {@link msg.GW2C_AckRandHouseList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {msg.IGW2C_AckRandHouseList} message GW2C_AckRandHouseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckRandHouseList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.datas != null && message.datas.length)
                for (var i = 0; i < message.datas.length; ++i)
                    $root.msg.HouseData.encode(message.datas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.datas2 != null && message.datas2.length)
                for (var i = 0; i < message.datas2.length; ++i)
                    $root.msg.HouseData.encode(message.datas2[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckRandHouseList message, length delimited. Does not implicitly {@link msg.GW2C_AckRandHouseList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {msg.IGW2C_AckRandHouseList} message GW2C_AckRandHouseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckRandHouseList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckRandHouseList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckRandHouseList} GW2C_AckRandHouseList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckRandHouseList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckRandHouseList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.datas && message.datas.length))
                        message.datas = [];
                    message.datas.push($root.msg.HouseData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.datas2 && message.datas2.length))
                        message.datas2 = [];
                    message.datas2.push($root.msg.HouseData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckRandHouseList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckRandHouseList} GW2C_AckRandHouseList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckRandHouseList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckRandHouseList message.
         * @function verify
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckRandHouseList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.datas != null && message.hasOwnProperty("datas")) {
                if (!Array.isArray(message.datas))
                    return "datas: array expected";
                for (var i = 0; i < message.datas.length; ++i) {
                    var error = $root.msg.HouseData.verify(message.datas[i]);
                    if (error)
                        return "datas." + error;
                }
            }
            if (message.datas2 != null && message.hasOwnProperty("datas2")) {
                if (!Array.isArray(message.datas2))
                    return "datas2: array expected";
                for (var i = 0; i < message.datas2.length; ++i) {
                    var error = $root.msg.HouseData.verify(message.datas2[i]);
                    if (error)
                        return "datas2." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckRandHouseList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckRandHouseList} GW2C_AckRandHouseList
         */
        GW2C_AckRandHouseList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckRandHouseList)
                return object;
            var message = new $root.msg.GW2C_AckRandHouseList();
            if (object.datas) {
                if (!Array.isArray(object.datas))
                    throw TypeError(".msg.GW2C_AckRandHouseList.datas: array expected");
                message.datas = [];
                for (var i = 0; i < object.datas.length; ++i) {
                    if (typeof object.datas[i] !== "object")
                        throw TypeError(".msg.GW2C_AckRandHouseList.datas: object expected");
                    message.datas[i] = $root.msg.HouseData.fromObject(object.datas[i]);
                }
            }
            if (object.datas2) {
                if (!Array.isArray(object.datas2))
                    throw TypeError(".msg.GW2C_AckRandHouseList.datas2: array expected");
                message.datas2 = [];
                for (var i = 0; i < object.datas2.length; ++i) {
                    if (typeof object.datas2[i] !== "object")
                        throw TypeError(".msg.GW2C_AckRandHouseList.datas2: object expected");
                    message.datas2[i] = $root.msg.HouseData.fromObject(object.datas2[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckRandHouseList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckRandHouseList
         * @static
         * @param {msg.GW2C_AckRandHouseList} message GW2C_AckRandHouseList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckRandHouseList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.datas = [];
                object.datas2 = [];
            }
            if (message.datas && message.datas.length) {
                object.datas = [];
                for (var j = 0; j < message.datas.length; ++j)
                    object.datas[j] = $root.msg.HouseData.toObject(message.datas[j], options);
            }
            if (message.datas2 && message.datas2.length) {
                object.datas2 = [];
                for (var j = 0; j < message.datas2.length; ++j)
                    object.datas2[j] = $root.msg.HouseData.toObject(message.datas2[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckRandHouseList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckRandHouseList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckRandHouseList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckRandHouseList;
    })();

    msg.GW2C_NotifyRobCount = (function() {

        /**
         * Properties of a GW2C_NotifyRobCount.
         * @memberof msg
         * @interface IGW2C_NotifyRobCount
         * @property {number|null} [value] GW2C_NotifyRobCount value
         */

        /**
         * Constructs a new GW2C_NotifyRobCount.
         * @memberof msg
         * @classdesc Represents a GW2C_NotifyRobCount.
         * @implements IGW2C_NotifyRobCount
         * @constructor
         * @param {msg.IGW2C_NotifyRobCount=} [properties] Properties to set
         */
        function GW2C_NotifyRobCount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_NotifyRobCount value.
         * @member {number} value
         * @memberof msg.GW2C_NotifyRobCount
         * @instance
         */
        GW2C_NotifyRobCount.prototype.value = 0;

        /**
         * Creates a new GW2C_NotifyRobCount instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {msg.IGW2C_NotifyRobCount=} [properties] Properties to set
         * @returns {msg.GW2C_NotifyRobCount} GW2C_NotifyRobCount instance
         */
        GW2C_NotifyRobCount.create = function create(properties) {
            return new GW2C_NotifyRobCount(properties);
        };

        /**
         * Encodes the specified GW2C_NotifyRobCount message. Does not implicitly {@link msg.GW2C_NotifyRobCount.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {msg.IGW2C_NotifyRobCount} message GW2C_NotifyRobCount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_NotifyRobCount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
            return writer;
        };

        /**
         * Encodes the specified GW2C_NotifyRobCount message, length delimited. Does not implicitly {@link msg.GW2C_NotifyRobCount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {msg.IGW2C_NotifyRobCount} message GW2C_NotifyRobCount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_NotifyRobCount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_NotifyRobCount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_NotifyRobCount} GW2C_NotifyRobCount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_NotifyRobCount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_NotifyRobCount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_NotifyRobCount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_NotifyRobCount} GW2C_NotifyRobCount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_NotifyRobCount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_NotifyRobCount message.
         * @function verify
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_NotifyRobCount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isInteger(message.value))
                    return "value: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_NotifyRobCount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_NotifyRobCount} GW2C_NotifyRobCount
         */
        GW2C_NotifyRobCount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_NotifyRobCount)
                return object;
            var message = new $root.msg.GW2C_NotifyRobCount();
            if (object.value != null)
                message.value = object.value >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_NotifyRobCount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_NotifyRobCount
         * @static
         * @param {msg.GW2C_NotifyRobCount} message GW2C_NotifyRobCount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_NotifyRobCount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };

        /**
         * Converts this GW2C_NotifyRobCount to JSON.
         * @function toJSON
         * @memberof msg.GW2C_NotifyRobCount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_NotifyRobCount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_NotifyRobCount;
    })();

    msg.C2GW_ReqOtherUserHouseData = (function() {

        /**
         * Properties of a C2GW_ReqOtherUserHouseData.
         * @memberof msg
         * @interface IC2GW_ReqOtherUserHouseData
         * @property {number|Long|null} [userid] C2GW_ReqOtherUserHouseData userid
         */

        /**
         * Constructs a new C2GW_ReqOtherUserHouseData.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqOtherUserHouseData.
         * @implements IC2GW_ReqOtherUserHouseData
         * @constructor
         * @param {msg.IC2GW_ReqOtherUserHouseData=} [properties] Properties to set
         */
        function C2GW_ReqOtherUserHouseData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqOtherUserHouseData userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @instance
         */
        C2GW_ReqOtherUserHouseData.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqOtherUserHouseData instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {msg.IC2GW_ReqOtherUserHouseData=} [properties] Properties to set
         * @returns {msg.C2GW_ReqOtherUserHouseData} C2GW_ReqOtherUserHouseData instance
         */
        C2GW_ReqOtherUserHouseData.create = function create(properties) {
            return new C2GW_ReqOtherUserHouseData(properties);
        };

        /**
         * Encodes the specified C2GW_ReqOtherUserHouseData message. Does not implicitly {@link msg.C2GW_ReqOtherUserHouseData.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {msg.IC2GW_ReqOtherUserHouseData} message C2GW_ReqOtherUserHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqOtherUserHouseData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqOtherUserHouseData message, length delimited. Does not implicitly {@link msg.C2GW_ReqOtherUserHouseData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {msg.IC2GW_ReqOtherUserHouseData} message C2GW_ReqOtherUserHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqOtherUserHouseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqOtherUserHouseData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqOtherUserHouseData} C2GW_ReqOtherUserHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqOtherUserHouseData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqOtherUserHouseData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqOtherUserHouseData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqOtherUserHouseData} C2GW_ReqOtherUserHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqOtherUserHouseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqOtherUserHouseData message.
         * @function verify
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqOtherUserHouseData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqOtherUserHouseData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqOtherUserHouseData} C2GW_ReqOtherUserHouseData
         */
        C2GW_ReqOtherUserHouseData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqOtherUserHouseData)
                return object;
            var message = new $root.msg.C2GW_ReqOtherUserHouseData();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqOtherUserHouseData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @static
         * @param {msg.C2GW_ReqOtherUserHouseData} message C2GW_ReqOtherUserHouseData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqOtherUserHouseData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_ReqOtherUserHouseData to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqOtherUserHouseData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqOtherUserHouseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqOtherUserHouseData;
    })();

    msg.GW2C_AckOtherUserHouseData = (function() {

        /**
         * Properties of a GW2C_AckOtherUserHouseData.
         * @memberof msg
         * @interface IGW2C_AckOtherUserHouseData
         * @property {Array.<msg.IHouseData>|null} [datas] GW2C_AckOtherUserHouseData datas
         */

        /**
         * Constructs a new GW2C_AckOtherUserHouseData.
         * @memberof msg
         * @classdesc Represents a GW2C_AckOtherUserHouseData.
         * @implements IGW2C_AckOtherUserHouseData
         * @constructor
         * @param {msg.IGW2C_AckOtherUserHouseData=} [properties] Properties to set
         */
        function GW2C_AckOtherUserHouseData(properties) {
            this.datas = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckOtherUserHouseData datas.
         * @member {Array.<msg.IHouseData>} datas
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @instance
         */
        GW2C_AckOtherUserHouseData.prototype.datas = $util.emptyArray;

        /**
         * Creates a new GW2C_AckOtherUserHouseData instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {msg.IGW2C_AckOtherUserHouseData=} [properties] Properties to set
         * @returns {msg.GW2C_AckOtherUserHouseData} GW2C_AckOtherUserHouseData instance
         */
        GW2C_AckOtherUserHouseData.create = function create(properties) {
            return new GW2C_AckOtherUserHouseData(properties);
        };

        /**
         * Encodes the specified GW2C_AckOtherUserHouseData message. Does not implicitly {@link msg.GW2C_AckOtherUserHouseData.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {msg.IGW2C_AckOtherUserHouseData} message GW2C_AckOtherUserHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckOtherUserHouseData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.datas != null && message.datas.length)
                for (var i = 0; i < message.datas.length; ++i)
                    $root.msg.HouseData.encode(message.datas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckOtherUserHouseData message, length delimited. Does not implicitly {@link msg.GW2C_AckOtherUserHouseData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {msg.IGW2C_AckOtherUserHouseData} message GW2C_AckOtherUserHouseData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckOtherUserHouseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckOtherUserHouseData message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckOtherUserHouseData} GW2C_AckOtherUserHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckOtherUserHouseData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckOtherUserHouseData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.datas && message.datas.length))
                        message.datas = [];
                    message.datas.push($root.msg.HouseData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckOtherUserHouseData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckOtherUserHouseData} GW2C_AckOtherUserHouseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckOtherUserHouseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckOtherUserHouseData message.
         * @function verify
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckOtherUserHouseData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.datas != null && message.hasOwnProperty("datas")) {
                if (!Array.isArray(message.datas))
                    return "datas: array expected";
                for (var i = 0; i < message.datas.length; ++i) {
                    var error = $root.msg.HouseData.verify(message.datas[i]);
                    if (error)
                        return "datas." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckOtherUserHouseData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckOtherUserHouseData} GW2C_AckOtherUserHouseData
         */
        GW2C_AckOtherUserHouseData.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckOtherUserHouseData)
                return object;
            var message = new $root.msg.GW2C_AckOtherUserHouseData();
            if (object.datas) {
                if (!Array.isArray(object.datas))
                    throw TypeError(".msg.GW2C_AckOtherUserHouseData.datas: array expected");
                message.datas = [];
                for (var i = 0; i < object.datas.length; ++i) {
                    if (typeof object.datas[i] !== "object")
                        throw TypeError(".msg.GW2C_AckOtherUserHouseData.datas: object expected");
                    message.datas[i] = $root.msg.HouseData.fromObject(object.datas[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckOtherUserHouseData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @static
         * @param {msg.GW2C_AckOtherUserHouseData} message GW2C_AckOtherUserHouseData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckOtherUserHouseData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.datas = [];
            if (message.datas && message.datas.length) {
                object.datas = [];
                for (var j = 0; j < message.datas.length; ++j)
                    object.datas[j] = $root.msg.HouseData.toObject(message.datas[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckOtherUserHouseData to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckOtherUserHouseData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckOtherUserHouseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckOtherUserHouseData;
    })();

    msg.GW2C_NotifyTimeStamp = (function() {

        /**
         * Properties of a GW2C_NotifyTimeStamp.
         * @memberof msg
         * @interface IGW2C_NotifyTimeStamp
         * @property {number|Long|null} [timestamp] GW2C_NotifyTimeStamp timestamp
         */

        /**
         * Constructs a new GW2C_NotifyTimeStamp.
         * @memberof msg
         * @classdesc Represents a GW2C_NotifyTimeStamp.
         * @implements IGW2C_NotifyTimeStamp
         * @constructor
         * @param {msg.IGW2C_NotifyTimeStamp=} [properties] Properties to set
         */
        function GW2C_NotifyTimeStamp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_NotifyTimeStamp timestamp.
         * @member {number|Long} timestamp
         * @memberof msg.GW2C_NotifyTimeStamp
         * @instance
         */
        GW2C_NotifyTimeStamp.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_NotifyTimeStamp instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {msg.IGW2C_NotifyTimeStamp=} [properties] Properties to set
         * @returns {msg.GW2C_NotifyTimeStamp} GW2C_NotifyTimeStamp instance
         */
        GW2C_NotifyTimeStamp.create = function create(properties) {
            return new GW2C_NotifyTimeStamp(properties);
        };

        /**
         * Encodes the specified GW2C_NotifyTimeStamp message. Does not implicitly {@link msg.GW2C_NotifyTimeStamp.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {msg.IGW2C_NotifyTimeStamp} message GW2C_NotifyTimeStamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_NotifyTimeStamp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.timestamp);
            return writer;
        };

        /**
         * Encodes the specified GW2C_NotifyTimeStamp message, length delimited. Does not implicitly {@link msg.GW2C_NotifyTimeStamp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {msg.IGW2C_NotifyTimeStamp} message GW2C_NotifyTimeStamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_NotifyTimeStamp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_NotifyTimeStamp message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_NotifyTimeStamp} GW2C_NotifyTimeStamp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_NotifyTimeStamp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_NotifyTimeStamp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.timestamp = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_NotifyTimeStamp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_NotifyTimeStamp} GW2C_NotifyTimeStamp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_NotifyTimeStamp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_NotifyTimeStamp message.
         * @function verify
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_NotifyTimeStamp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_NotifyTimeStamp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_NotifyTimeStamp} GW2C_NotifyTimeStamp
         */
        GW2C_NotifyTimeStamp.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_NotifyTimeStamp)
                return object;
            var message = new $root.msg.GW2C_NotifyTimeStamp();
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_NotifyTimeStamp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_NotifyTimeStamp
         * @static
         * @param {msg.GW2C_NotifyTimeStamp} message GW2C_NotifyTimeStamp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_NotifyTimeStamp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
            return object;
        };

        /**
         * Converts this GW2C_NotifyTimeStamp to JSON.
         * @function toJSON
         * @memberof msg.GW2C_NotifyTimeStamp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_NotifyTimeStamp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_NotifyTimeStamp;
    })();

    msg.C2GW_ReqResetRobCheckFlag = (function() {

        /**
         * Properties of a C2GW_ReqResetRobCheckFlag.
         * @memberof msg
         * @interface IC2GW_ReqResetRobCheckFlag
         * @property {number|Long|null} [houseid] C2GW_ReqResetRobCheckFlag houseid
         */

        /**
         * Constructs a new C2GW_ReqResetRobCheckFlag.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqResetRobCheckFlag.
         * @implements IC2GW_ReqResetRobCheckFlag
         * @constructor
         * @param {msg.IC2GW_ReqResetRobCheckFlag=} [properties] Properties to set
         */
        function C2GW_ReqResetRobCheckFlag(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqResetRobCheckFlag houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @instance
         */
        C2GW_ReqResetRobCheckFlag.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqResetRobCheckFlag instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {msg.IC2GW_ReqResetRobCheckFlag=} [properties] Properties to set
         * @returns {msg.C2GW_ReqResetRobCheckFlag} C2GW_ReqResetRobCheckFlag instance
         */
        C2GW_ReqResetRobCheckFlag.create = function create(properties) {
            return new C2GW_ReqResetRobCheckFlag(properties);
        };

        /**
         * Encodes the specified C2GW_ReqResetRobCheckFlag message. Does not implicitly {@link msg.C2GW_ReqResetRobCheckFlag.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {msg.IC2GW_ReqResetRobCheckFlag} message C2GW_ReqResetRobCheckFlag message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqResetRobCheckFlag.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqResetRobCheckFlag message, length delimited. Does not implicitly {@link msg.C2GW_ReqResetRobCheckFlag.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {msg.IC2GW_ReqResetRobCheckFlag} message C2GW_ReqResetRobCheckFlag message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqResetRobCheckFlag.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqResetRobCheckFlag message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqResetRobCheckFlag} C2GW_ReqResetRobCheckFlag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqResetRobCheckFlag.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqResetRobCheckFlag();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqResetRobCheckFlag message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqResetRobCheckFlag} C2GW_ReqResetRobCheckFlag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqResetRobCheckFlag.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqResetRobCheckFlag message.
         * @function verify
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqResetRobCheckFlag.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqResetRobCheckFlag message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqResetRobCheckFlag} C2GW_ReqResetRobCheckFlag
         */
        C2GW_ReqResetRobCheckFlag.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqResetRobCheckFlag)
                return object;
            var message = new $root.msg.C2GW_ReqResetRobCheckFlag();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqResetRobCheckFlag message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @static
         * @param {msg.C2GW_ReqResetRobCheckFlag} message C2GW_ReqResetRobCheckFlag
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqResetRobCheckFlag.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            return object;
        };

        /**
         * Converts this C2GW_ReqResetRobCheckFlag to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqResetRobCheckFlag
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqResetRobCheckFlag.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqResetRobCheckFlag;
    })();

    msg.GW2C_NotifyAddRobCountTime = (function() {

        /**
         * Properties of a GW2C_NotifyAddRobCountTime.
         * @memberof msg
         * @interface IGW2C_NotifyAddRobCountTime
         * @property {number|Long|null} [time] GW2C_NotifyAddRobCountTime time
         */

        /**
         * Constructs a new GW2C_NotifyAddRobCountTime.
         * @memberof msg
         * @classdesc Represents a GW2C_NotifyAddRobCountTime.
         * @implements IGW2C_NotifyAddRobCountTime
         * @constructor
         * @param {msg.IGW2C_NotifyAddRobCountTime=} [properties] Properties to set
         */
        function GW2C_NotifyAddRobCountTime(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_NotifyAddRobCountTime time.
         * @member {number|Long} time
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @instance
         */
        GW2C_NotifyAddRobCountTime.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GW2C_NotifyAddRobCountTime instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {msg.IGW2C_NotifyAddRobCountTime=} [properties] Properties to set
         * @returns {msg.GW2C_NotifyAddRobCountTime} GW2C_NotifyAddRobCountTime instance
         */
        GW2C_NotifyAddRobCountTime.create = function create(properties) {
            return new GW2C_NotifyAddRobCountTime(properties);
        };

        /**
         * Encodes the specified GW2C_NotifyAddRobCountTime message. Does not implicitly {@link msg.GW2C_NotifyAddRobCountTime.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {msg.IGW2C_NotifyAddRobCountTime} message GW2C_NotifyAddRobCountTime message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_NotifyAddRobCountTime.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            return writer;
        };

        /**
         * Encodes the specified GW2C_NotifyAddRobCountTime message, length delimited. Does not implicitly {@link msg.GW2C_NotifyAddRobCountTime.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {msg.IGW2C_NotifyAddRobCountTime} message GW2C_NotifyAddRobCountTime message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_NotifyAddRobCountTime.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_NotifyAddRobCountTime message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_NotifyAddRobCountTime} GW2C_NotifyAddRobCountTime
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_NotifyAddRobCountTime.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_NotifyAddRobCountTime();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_NotifyAddRobCountTime message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_NotifyAddRobCountTime} GW2C_NotifyAddRobCountTime
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_NotifyAddRobCountTime.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_NotifyAddRobCountTime message.
         * @function verify
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_NotifyAddRobCountTime.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_NotifyAddRobCountTime message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_NotifyAddRobCountTime} GW2C_NotifyAddRobCountTime
         */
        GW2C_NotifyAddRobCountTime.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_NotifyAddRobCountTime)
                return object;
            var message = new $root.msg.GW2C_NotifyAddRobCountTime();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GW2C_NotifyAddRobCountTime message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @static
         * @param {msg.GW2C_NotifyAddRobCountTime} message GW2C_NotifyAddRobCountTime
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_NotifyAddRobCountTime.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            return object;
        };

        /**
         * Converts this GW2C_NotifyAddRobCountTime to JSON.
         * @function toJSON
         * @memberof msg.GW2C_NotifyAddRobCountTime
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_NotifyAddRobCountTime.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_NotifyAddRobCountTime;
    })();

    msg.C2GW_ReqHouseDataByHouseId = (function() {

        /**
         * Properties of a C2GW_ReqHouseDataByHouseId.
         * @memberof msg
         * @interface IC2GW_ReqHouseDataByHouseId
         * @property {number|Long|null} [houseid] C2GW_ReqHouseDataByHouseId houseid
         */

        /**
         * Constructs a new C2GW_ReqHouseDataByHouseId.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqHouseDataByHouseId.
         * @implements IC2GW_ReqHouseDataByHouseId
         * @constructor
         * @param {msg.IC2GW_ReqHouseDataByHouseId=} [properties] Properties to set
         */
        function C2GW_ReqHouseDataByHouseId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqHouseDataByHouseId houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @instance
         */
        C2GW_ReqHouseDataByHouseId.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqHouseDataByHouseId instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {msg.IC2GW_ReqHouseDataByHouseId=} [properties] Properties to set
         * @returns {msg.C2GW_ReqHouseDataByHouseId} C2GW_ReqHouseDataByHouseId instance
         */
        C2GW_ReqHouseDataByHouseId.create = function create(properties) {
            return new C2GW_ReqHouseDataByHouseId(properties);
        };

        /**
         * Encodes the specified C2GW_ReqHouseDataByHouseId message. Does not implicitly {@link msg.C2GW_ReqHouseDataByHouseId.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {msg.IC2GW_ReqHouseDataByHouseId} message C2GW_ReqHouseDataByHouseId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseDataByHouseId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqHouseDataByHouseId message, length delimited. Does not implicitly {@link msg.C2GW_ReqHouseDataByHouseId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {msg.IC2GW_ReqHouseDataByHouseId} message C2GW_ReqHouseDataByHouseId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseDataByHouseId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqHouseDataByHouseId message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqHouseDataByHouseId} C2GW_ReqHouseDataByHouseId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseDataByHouseId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqHouseDataByHouseId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqHouseDataByHouseId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqHouseDataByHouseId} C2GW_ReqHouseDataByHouseId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseDataByHouseId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqHouseDataByHouseId message.
         * @function verify
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqHouseDataByHouseId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqHouseDataByHouseId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqHouseDataByHouseId} C2GW_ReqHouseDataByHouseId
         */
        C2GW_ReqHouseDataByHouseId.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqHouseDataByHouseId)
                return object;
            var message = new $root.msg.C2GW_ReqHouseDataByHouseId();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqHouseDataByHouseId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @static
         * @param {msg.C2GW_ReqHouseDataByHouseId} message C2GW_ReqHouseDataByHouseId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqHouseDataByHouseId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            return object;
        };

        /**
         * Converts this C2GW_ReqHouseDataByHouseId to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqHouseDataByHouseId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqHouseDataByHouseId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqHouseDataByHouseId;
    })();

    msg.GW2C_AckHouseDataByHouseId = (function() {

        /**
         * Properties of a GW2C_AckHouseDataByHouseId.
         * @memberof msg
         * @interface IGW2C_AckHouseDataByHouseId
         * @property {number|Long|null} [houseid] GW2C_AckHouseDataByHouseId houseid
         * @property {msg.IHouseData|null} [data] GW2C_AckHouseDataByHouseId data
         */

        /**
         * Constructs a new GW2C_AckHouseDataByHouseId.
         * @memberof msg
         * @classdesc Represents a GW2C_AckHouseDataByHouseId.
         * @implements IGW2C_AckHouseDataByHouseId
         * @constructor
         * @param {msg.IGW2C_AckHouseDataByHouseId=} [properties] Properties to set
         */
        function GW2C_AckHouseDataByHouseId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckHouseDataByHouseId houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @instance
         */
        GW2C_AckHouseDataByHouseId.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_AckHouseDataByHouseId data.
         * @member {msg.IHouseData|null|undefined} data
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @instance
         */
        GW2C_AckHouseDataByHouseId.prototype.data = null;

        /**
         * Creates a new GW2C_AckHouseDataByHouseId instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {msg.IGW2C_AckHouseDataByHouseId=} [properties] Properties to set
         * @returns {msg.GW2C_AckHouseDataByHouseId} GW2C_AckHouseDataByHouseId instance
         */
        GW2C_AckHouseDataByHouseId.create = function create(properties) {
            return new GW2C_AckHouseDataByHouseId(properties);
        };

        /**
         * Encodes the specified GW2C_AckHouseDataByHouseId message. Does not implicitly {@link msg.GW2C_AckHouseDataByHouseId.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {msg.IGW2C_AckHouseDataByHouseId} message GW2C_AckHouseDataByHouseId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseDataByHouseId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.data != null && message.hasOwnProperty("data"))
                $root.msg.HouseData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckHouseDataByHouseId message, length delimited. Does not implicitly {@link msg.GW2C_AckHouseDataByHouseId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {msg.IGW2C_AckHouseDataByHouseId} message GW2C_AckHouseDataByHouseId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckHouseDataByHouseId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckHouseDataByHouseId message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckHouseDataByHouseId} GW2C_AckHouseDataByHouseId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseDataByHouseId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckHouseDataByHouseId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.data = $root.msg.HouseData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckHouseDataByHouseId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckHouseDataByHouseId} GW2C_AckHouseDataByHouseId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckHouseDataByHouseId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckHouseDataByHouseId message.
         * @function verify
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckHouseDataByHouseId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.msg.HouseData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_AckHouseDataByHouseId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckHouseDataByHouseId} GW2C_AckHouseDataByHouseId
         */
        GW2C_AckHouseDataByHouseId.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckHouseDataByHouseId)
                return object;
            var message = new $root.msg.GW2C_AckHouseDataByHouseId();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".msg.GW2C_AckHouseDataByHouseId.data: object expected");
                message.data = $root.msg.HouseData.fromObject(object.data);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckHouseDataByHouseId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @static
         * @param {msg.GW2C_AckHouseDataByHouseId} message GW2C_AckHouseDataByHouseId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckHouseDataByHouseId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                object.data = null;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.msg.HouseData.toObject(message.data, options);
            return object;
        };

        /**
         * Converts this GW2C_AckHouseDataByHouseId to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckHouseDataByHouseId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckHouseDataByHouseId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckHouseDataByHouseId;
    })();

    msg.C2GW_ReqBuyHouseFromBuilding = (function() {

        /**
         * Properties of a C2GW_ReqBuyHouseFromBuilding.
         * @memberof msg
         * @interface IC2GW_ReqBuyHouseFromBuilding
         * @property {number|null} [buildingid] C2GW_ReqBuyHouseFromBuilding buildingid
         * @property {number|null} [index] C2GW_ReqBuyHouseFromBuilding index
         */

        /**
         * Constructs a new C2GW_ReqBuyHouseFromBuilding.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqBuyHouseFromBuilding.
         * @implements IC2GW_ReqBuyHouseFromBuilding
         * @constructor
         * @param {msg.IC2GW_ReqBuyHouseFromBuilding=} [properties] Properties to set
         */
        function C2GW_ReqBuyHouseFromBuilding(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqBuyHouseFromBuilding buildingid.
         * @member {number} buildingid
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @instance
         */
        C2GW_ReqBuyHouseFromBuilding.prototype.buildingid = 0;

        /**
         * C2GW_ReqBuyHouseFromBuilding index.
         * @member {number} index
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @instance
         */
        C2GW_ReqBuyHouseFromBuilding.prototype.index = 0;

        /**
         * Creates a new C2GW_ReqBuyHouseFromBuilding instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {msg.IC2GW_ReqBuyHouseFromBuilding=} [properties] Properties to set
         * @returns {msg.C2GW_ReqBuyHouseFromBuilding} C2GW_ReqBuyHouseFromBuilding instance
         */
        C2GW_ReqBuyHouseFromBuilding.create = function create(properties) {
            return new C2GW_ReqBuyHouseFromBuilding(properties);
        };

        /**
         * Encodes the specified C2GW_ReqBuyHouseFromBuilding message. Does not implicitly {@link msg.C2GW_ReqBuyHouseFromBuilding.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {msg.IC2GW_ReqBuyHouseFromBuilding} message C2GW_ReqBuyHouseFromBuilding message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqBuyHouseFromBuilding.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.buildingid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqBuyHouseFromBuilding message, length delimited. Does not implicitly {@link msg.C2GW_ReqBuyHouseFromBuilding.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {msg.IC2GW_ReqBuyHouseFromBuilding} message C2GW_ReqBuyHouseFromBuilding message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqBuyHouseFromBuilding.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqBuyHouseFromBuilding message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqBuyHouseFromBuilding} C2GW_ReqBuyHouseFromBuilding
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqBuyHouseFromBuilding.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqBuyHouseFromBuilding();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.buildingid = reader.uint32();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqBuyHouseFromBuilding message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqBuyHouseFromBuilding} C2GW_ReqBuyHouseFromBuilding
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqBuyHouseFromBuilding.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqBuyHouseFromBuilding message.
         * @function verify
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqBuyHouseFromBuilding.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                if (!$util.isInteger(message.buildingid))
                    return "buildingid: integer expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqBuyHouseFromBuilding message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqBuyHouseFromBuilding} C2GW_ReqBuyHouseFromBuilding
         */
        C2GW_ReqBuyHouseFromBuilding.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqBuyHouseFromBuilding)
                return object;
            var message = new $root.msg.C2GW_ReqBuyHouseFromBuilding();
            if (object.buildingid != null)
                message.buildingid = object.buildingid >>> 0;
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqBuyHouseFromBuilding message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @static
         * @param {msg.C2GW_ReqBuyHouseFromBuilding} message C2GW_ReqBuyHouseFromBuilding
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqBuyHouseFromBuilding.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.buildingid = 0;
                object.index = 0;
            }
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                object.buildingid = message.buildingid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_ReqBuyHouseFromBuilding to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqBuyHouseFromBuilding
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqBuyHouseFromBuilding.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqBuyHouseFromBuilding;
    })();

    msg.GW2C_AckBuyHouseFromBuilding = (function() {

        /**
         * Properties of a GW2C_AckBuyHouseFromBuilding.
         * @memberof msg
         * @interface IGW2C_AckBuyHouseFromBuilding
         * @property {number|null} [buildingid] GW2C_AckBuyHouseFromBuilding buildingid
         * @property {number|null} [index] GW2C_AckBuyHouseFromBuilding index
         * @property {number|null} [ret] GW2C_AckBuyHouseFromBuilding ret
         * @property {number|Long|null} [houseid] GW2C_AckBuyHouseFromBuilding houseid
         */

        /**
         * Constructs a new GW2C_AckBuyHouseFromBuilding.
         * @memberof msg
         * @classdesc Represents a GW2C_AckBuyHouseFromBuilding.
         * @implements IGW2C_AckBuyHouseFromBuilding
         * @constructor
         * @param {msg.IGW2C_AckBuyHouseFromBuilding=} [properties] Properties to set
         */
        function GW2C_AckBuyHouseFromBuilding(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckBuyHouseFromBuilding buildingid.
         * @member {number} buildingid
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @instance
         */
        GW2C_AckBuyHouseFromBuilding.prototype.buildingid = 0;

        /**
         * GW2C_AckBuyHouseFromBuilding index.
         * @member {number} index
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @instance
         */
        GW2C_AckBuyHouseFromBuilding.prototype.index = 0;

        /**
         * GW2C_AckBuyHouseFromBuilding ret.
         * @member {number} ret
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @instance
         */
        GW2C_AckBuyHouseFromBuilding.prototype.ret = 0;

        /**
         * GW2C_AckBuyHouseFromBuilding houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @instance
         */
        GW2C_AckBuyHouseFromBuilding.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_AckBuyHouseFromBuilding instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {msg.IGW2C_AckBuyHouseFromBuilding=} [properties] Properties to set
         * @returns {msg.GW2C_AckBuyHouseFromBuilding} GW2C_AckBuyHouseFromBuilding instance
         */
        GW2C_AckBuyHouseFromBuilding.create = function create(properties) {
            return new GW2C_AckBuyHouseFromBuilding(properties);
        };

        /**
         * Encodes the specified GW2C_AckBuyHouseFromBuilding message. Does not implicitly {@link msg.GW2C_AckBuyHouseFromBuilding.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {msg.IGW2C_AckBuyHouseFromBuilding} message GW2C_AckBuyHouseFromBuilding message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckBuyHouseFromBuilding.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.buildingid);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ret);
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.houseid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckBuyHouseFromBuilding message, length delimited. Does not implicitly {@link msg.GW2C_AckBuyHouseFromBuilding.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {msg.IGW2C_AckBuyHouseFromBuilding} message GW2C_AckBuyHouseFromBuilding message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckBuyHouseFromBuilding.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckBuyHouseFromBuilding message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckBuyHouseFromBuilding} GW2C_AckBuyHouseFromBuilding
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckBuyHouseFromBuilding.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckBuyHouseFromBuilding();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.buildingid = reader.uint32();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                case 3:
                    message.ret = reader.uint32();
                    break;
                case 4:
                    message.houseid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckBuyHouseFromBuilding message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckBuyHouseFromBuilding} GW2C_AckBuyHouseFromBuilding
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckBuyHouseFromBuilding.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckBuyHouseFromBuilding message.
         * @function verify
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckBuyHouseFromBuilding.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                if (!$util.isInteger(message.buildingid))
                    return "buildingid: integer expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_AckBuyHouseFromBuilding message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckBuyHouseFromBuilding} GW2C_AckBuyHouseFromBuilding
         */
        GW2C_AckBuyHouseFromBuilding.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckBuyHouseFromBuilding)
                return object;
            var message = new $root.msg.GW2C_AckBuyHouseFromBuilding();
            if (object.buildingid != null)
                message.buildingid = object.buildingid >>> 0;
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckBuyHouseFromBuilding message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @static
         * @param {msg.GW2C_AckBuyHouseFromBuilding} message GW2C_AckBuyHouseFromBuilding
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckBuyHouseFromBuilding.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.buildingid = 0;
                object.index = 0;
                object.ret = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
            }
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                object.buildingid = message.buildingid;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            return object;
        };

        /**
         * Converts this GW2C_AckBuyHouseFromBuilding to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckBuyHouseFromBuilding
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckBuyHouseFromBuilding.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckBuyHouseFromBuilding;
    })();

    msg.C2GW_ReqBuildingCanBuyInfo = (function() {

        /**
         * Properties of a C2GW_ReqBuildingCanBuyInfo.
         * @memberof msg
         * @interface IC2GW_ReqBuildingCanBuyInfo
         * @property {number|null} [buildingid] C2GW_ReqBuildingCanBuyInfo buildingid
         */

        /**
         * Constructs a new C2GW_ReqBuildingCanBuyInfo.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqBuildingCanBuyInfo.
         * @implements IC2GW_ReqBuildingCanBuyInfo
         * @constructor
         * @param {msg.IC2GW_ReqBuildingCanBuyInfo=} [properties] Properties to set
         */
        function C2GW_ReqBuildingCanBuyInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqBuildingCanBuyInfo buildingid.
         * @member {number} buildingid
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @instance
         */
        C2GW_ReqBuildingCanBuyInfo.prototype.buildingid = 0;

        /**
         * Creates a new C2GW_ReqBuildingCanBuyInfo instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {msg.IC2GW_ReqBuildingCanBuyInfo=} [properties] Properties to set
         * @returns {msg.C2GW_ReqBuildingCanBuyInfo} C2GW_ReqBuildingCanBuyInfo instance
         */
        C2GW_ReqBuildingCanBuyInfo.create = function create(properties) {
            return new C2GW_ReqBuildingCanBuyInfo(properties);
        };

        /**
         * Encodes the specified C2GW_ReqBuildingCanBuyInfo message. Does not implicitly {@link msg.C2GW_ReqBuildingCanBuyInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {msg.IC2GW_ReqBuildingCanBuyInfo} message C2GW_ReqBuildingCanBuyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqBuildingCanBuyInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.buildingid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqBuildingCanBuyInfo message, length delimited. Does not implicitly {@link msg.C2GW_ReqBuildingCanBuyInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {msg.IC2GW_ReqBuildingCanBuyInfo} message C2GW_ReqBuildingCanBuyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqBuildingCanBuyInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqBuildingCanBuyInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqBuildingCanBuyInfo} C2GW_ReqBuildingCanBuyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqBuildingCanBuyInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqBuildingCanBuyInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.buildingid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqBuildingCanBuyInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqBuildingCanBuyInfo} C2GW_ReqBuildingCanBuyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqBuildingCanBuyInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqBuildingCanBuyInfo message.
         * @function verify
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqBuildingCanBuyInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                if (!$util.isInteger(message.buildingid))
                    return "buildingid: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqBuildingCanBuyInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqBuildingCanBuyInfo} C2GW_ReqBuildingCanBuyInfo
         */
        C2GW_ReqBuildingCanBuyInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqBuildingCanBuyInfo)
                return object;
            var message = new $root.msg.C2GW_ReqBuildingCanBuyInfo();
            if (object.buildingid != null)
                message.buildingid = object.buildingid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqBuildingCanBuyInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @static
         * @param {msg.C2GW_ReqBuildingCanBuyInfo} message C2GW_ReqBuildingCanBuyInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqBuildingCanBuyInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.buildingid = 0;
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                object.buildingid = message.buildingid;
            return object;
        };

        /**
         * Converts this C2GW_ReqBuildingCanBuyInfo to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqBuildingCanBuyInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqBuildingCanBuyInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqBuildingCanBuyInfo;
    })();

    msg.CanBuyInfo = (function() {

        /**
         * Properties of a CanBuyInfo.
         * @memberof msg
         * @interface ICanBuyInfo
         * @property {number|null} [index] CanBuyInfo index
         * @property {number|null} [count] CanBuyInfo count
         */

        /**
         * Constructs a new CanBuyInfo.
         * @memberof msg
         * @classdesc Represents a CanBuyInfo.
         * @implements ICanBuyInfo
         * @constructor
         * @param {msg.ICanBuyInfo=} [properties] Properties to set
         */
        function CanBuyInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CanBuyInfo index.
         * @member {number} index
         * @memberof msg.CanBuyInfo
         * @instance
         */
        CanBuyInfo.prototype.index = 0;

        /**
         * CanBuyInfo count.
         * @member {number} count
         * @memberof msg.CanBuyInfo
         * @instance
         */
        CanBuyInfo.prototype.count = 0;

        /**
         * Creates a new CanBuyInfo instance using the specified properties.
         * @function create
         * @memberof msg.CanBuyInfo
         * @static
         * @param {msg.ICanBuyInfo=} [properties] Properties to set
         * @returns {msg.CanBuyInfo} CanBuyInfo instance
         */
        CanBuyInfo.create = function create(properties) {
            return new CanBuyInfo(properties);
        };

        /**
         * Encodes the specified CanBuyInfo message. Does not implicitly {@link msg.CanBuyInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.CanBuyInfo
         * @static
         * @param {msg.ICanBuyInfo} message CanBuyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanBuyInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.count);
            return writer;
        };

        /**
         * Encodes the specified CanBuyInfo message, length delimited. Does not implicitly {@link msg.CanBuyInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.CanBuyInfo
         * @static
         * @param {msg.ICanBuyInfo} message CanBuyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanBuyInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CanBuyInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.CanBuyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.CanBuyInfo} CanBuyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanBuyInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.CanBuyInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                case 2:
                    message.count = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CanBuyInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.CanBuyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.CanBuyInfo} CanBuyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanBuyInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CanBuyInfo message.
         * @function verify
         * @memberof msg.CanBuyInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CanBuyInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            return null;
        };

        /**
         * Creates a CanBuyInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.CanBuyInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.CanBuyInfo} CanBuyInfo
         */
        CanBuyInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.CanBuyInfo)
                return object;
            var message = new $root.msg.CanBuyInfo();
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.count != null)
                message.count = object.count >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CanBuyInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.CanBuyInfo
         * @static
         * @param {msg.CanBuyInfo} message CanBuyInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CanBuyInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.count = 0;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            return object;
        };

        /**
         * Converts this CanBuyInfo to JSON.
         * @function toJSON
         * @memberof msg.CanBuyInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CanBuyInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CanBuyInfo;
    })();

    msg.GW2C_AckBuildingCanBuyInfo = (function() {

        /**
         * Properties of a GW2C_AckBuildingCanBuyInfo.
         * @memberof msg
         * @interface IGW2C_AckBuildingCanBuyInfo
         * @property {number|null} [buildingid] GW2C_AckBuildingCanBuyInfo buildingid
         * @property {Array.<msg.ICanBuyInfo>|null} [data] GW2C_AckBuildingCanBuyInfo data
         */

        /**
         * Constructs a new GW2C_AckBuildingCanBuyInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_AckBuildingCanBuyInfo.
         * @implements IGW2C_AckBuildingCanBuyInfo
         * @constructor
         * @param {msg.IGW2C_AckBuildingCanBuyInfo=} [properties] Properties to set
         */
        function GW2C_AckBuildingCanBuyInfo(properties) {
            this.data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckBuildingCanBuyInfo buildingid.
         * @member {number} buildingid
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @instance
         */
        GW2C_AckBuildingCanBuyInfo.prototype.buildingid = 0;

        /**
         * GW2C_AckBuildingCanBuyInfo data.
         * @member {Array.<msg.ICanBuyInfo>} data
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @instance
         */
        GW2C_AckBuildingCanBuyInfo.prototype.data = $util.emptyArray;

        /**
         * Creates a new GW2C_AckBuildingCanBuyInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {msg.IGW2C_AckBuildingCanBuyInfo=} [properties] Properties to set
         * @returns {msg.GW2C_AckBuildingCanBuyInfo} GW2C_AckBuildingCanBuyInfo instance
         */
        GW2C_AckBuildingCanBuyInfo.create = function create(properties) {
            return new GW2C_AckBuildingCanBuyInfo(properties);
        };

        /**
         * Encodes the specified GW2C_AckBuildingCanBuyInfo message. Does not implicitly {@link msg.GW2C_AckBuildingCanBuyInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {msg.IGW2C_AckBuildingCanBuyInfo} message GW2C_AckBuildingCanBuyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckBuildingCanBuyInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.buildingid);
            if (message.data != null && message.data.length)
                for (var i = 0; i < message.data.length; ++i)
                    $root.msg.CanBuyInfo.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckBuildingCanBuyInfo message, length delimited. Does not implicitly {@link msg.GW2C_AckBuildingCanBuyInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {msg.IGW2C_AckBuildingCanBuyInfo} message GW2C_AckBuildingCanBuyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckBuildingCanBuyInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckBuildingCanBuyInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckBuildingCanBuyInfo} GW2C_AckBuildingCanBuyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckBuildingCanBuyInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckBuildingCanBuyInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.buildingid = reader.uint32();
                    break;
                case 2:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.msg.CanBuyInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckBuildingCanBuyInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckBuildingCanBuyInfo} GW2C_AckBuildingCanBuyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckBuildingCanBuyInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckBuildingCanBuyInfo message.
         * @function verify
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckBuildingCanBuyInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                if (!$util.isInteger(message.buildingid))
                    return "buildingid: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (var i = 0; i < message.data.length; ++i) {
                    var error = $root.msg.CanBuyInfo.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckBuildingCanBuyInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckBuildingCanBuyInfo} GW2C_AckBuildingCanBuyInfo
         */
        GW2C_AckBuildingCanBuyInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckBuildingCanBuyInfo)
                return object;
            var message = new $root.msg.GW2C_AckBuildingCanBuyInfo();
            if (object.buildingid != null)
                message.buildingid = object.buildingid >>> 0;
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".msg.GW2C_AckBuildingCanBuyInfo.data: array expected");
                message.data = [];
                for (var i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".msg.GW2C_AckBuildingCanBuyInfo.data: object expected");
                    message.data[i] = $root.msg.CanBuyInfo.fromObject(object.data[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckBuildingCanBuyInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @static
         * @param {msg.GW2C_AckBuildingCanBuyInfo} message GW2C_AckBuildingCanBuyInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckBuildingCanBuyInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (options.defaults)
                object.buildingid = 0;
            if (message.buildingid != null && message.hasOwnProperty("buildingid"))
                object.buildingid = message.buildingid;
            if (message.data && message.data.length) {
                object.data = [];
                for (var j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.msg.CanBuyInfo.toObject(message.data[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckBuildingCanBuyInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckBuildingCanBuyInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckBuildingCanBuyInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckBuildingCanBuyInfo;
    })();

    msg.C2GW_BuyItem = (function() {

        /**
         * Properties of a C2GW_BuyItem.
         * @memberof msg
         * @interface IC2GW_BuyItem
         * @property {number|null} [productid] C2GW_BuyItem productid
         * @property {number|null} [num] C2GW_BuyItem num
         */

        /**
         * Constructs a new C2GW_BuyItem.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyItem.
         * @implements IC2GW_BuyItem
         * @constructor
         * @param {msg.IC2GW_BuyItem=} [properties] Properties to set
         */
        function C2GW_BuyItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyItem productid.
         * @member {number} productid
         * @memberof msg.C2GW_BuyItem
         * @instance
         */
        C2GW_BuyItem.prototype.productid = 0;

        /**
         * C2GW_BuyItem num.
         * @member {number} num
         * @memberof msg.C2GW_BuyItem
         * @instance
         */
        C2GW_BuyItem.prototype.num = 0;

        /**
         * Creates a new C2GW_BuyItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem=} [properties] Properties to set
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem instance
         */
        C2GW_BuyItem.create = function create(properties) {
            return new C2GW_BuyItem(properties);
        };

        /**
         * Encodes the specified C2GW_BuyItem message. Does not implicitly {@link msg.C2GW_BuyItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem} message C2GW_BuyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.productid != null && message.hasOwnProperty("productid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.productid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyItem message, length delimited. Does not implicitly {@link msg.C2GW_BuyItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.IC2GW_BuyItem} message C2GW_BuyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.productid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyItem message.
         * @function verify
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.productid != null && message.hasOwnProperty("productid"))
                if (!$util.isInteger(message.productid))
                    return "productid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyItem} C2GW_BuyItem
         */
        C2GW_BuyItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyItem)
                return object;
            var message = new $root.msg.C2GW_BuyItem();
            if (object.productid != null)
                message.productid = object.productid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyItem
         * @static
         * @param {msg.C2GW_BuyItem} message C2GW_BuyItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.productid = 0;
                object.num = 0;
            }
            if (message.productid != null && message.hasOwnProperty("productid"))
                object.productid = message.productid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_BuyItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyItem;
    })();

    msg.GW2C_AddPackageItem = (function() {

        /**
         * Properties of a GW2C_AddPackageItem.
         * @memberof msg
         * @interface IGW2C_AddPackageItem
         * @property {number|null} [itemid] GW2C_AddPackageItem itemid
         * @property {number|null} [num] GW2C_AddPackageItem num
         */

        /**
         * Constructs a new GW2C_AddPackageItem.
         * @memberof msg
         * @classdesc Represents a GW2C_AddPackageItem.
         * @implements IGW2C_AddPackageItem
         * @constructor
         * @param {msg.IGW2C_AddPackageItem=} [properties] Properties to set
         */
        function GW2C_AddPackageItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AddPackageItem itemid.
         * @member {number} itemid
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         */
        GW2C_AddPackageItem.prototype.itemid = 0;

        /**
         * GW2C_AddPackageItem num.
         * @member {number} num
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         */
        GW2C_AddPackageItem.prototype.num = 0;

        /**
         * Creates a new GW2C_AddPackageItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem=} [properties] Properties to set
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem instance
         */
        GW2C_AddPackageItem.create = function create(properties) {
            return new GW2C_AddPackageItem(properties);
        };

        /**
         * Encodes the specified GW2C_AddPackageItem message. Does not implicitly {@link msg.GW2C_AddPackageItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem} message GW2C_AddPackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddPackageItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AddPackageItem message, length delimited. Does not implicitly {@link msg.GW2C_AddPackageItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.IGW2C_AddPackageItem} message GW2C_AddPackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AddPackageItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AddPackageItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddPackageItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AddPackageItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AddPackageItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AddPackageItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AddPackageItem message.
         * @function verify
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AddPackageItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_AddPackageItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AddPackageItem} GW2C_AddPackageItem
         */
        GW2C_AddPackageItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AddPackageItem)
                return object;
            var message = new $root.msg.GW2C_AddPackageItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AddPackageItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AddPackageItem
         * @static
         * @param {msg.GW2C_AddPackageItem} message GW2C_AddPackageItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AddPackageItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_AddPackageItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AddPackageItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AddPackageItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AddPackageItem;
    })();

    msg.GW2C_RemovePackageItem = (function() {

        /**
         * Properties of a GW2C_RemovePackageItem.
         * @memberof msg
         * @interface IGW2C_RemovePackageItem
         * @property {number|null} [itemid] GW2C_RemovePackageItem itemid
         * @property {number|null} [num] GW2C_RemovePackageItem num
         */

        /**
         * Constructs a new GW2C_RemovePackageItem.
         * @memberof msg
         * @classdesc Represents a GW2C_RemovePackageItem.
         * @implements IGW2C_RemovePackageItem
         * @constructor
         * @param {msg.IGW2C_RemovePackageItem=} [properties] Properties to set
         */
        function GW2C_RemovePackageItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RemovePackageItem itemid.
         * @member {number} itemid
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         */
        GW2C_RemovePackageItem.prototype.itemid = 0;

        /**
         * GW2C_RemovePackageItem num.
         * @member {number} num
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         */
        GW2C_RemovePackageItem.prototype.num = 0;

        /**
         * Creates a new GW2C_RemovePackageItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem=} [properties] Properties to set
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem instance
         */
        GW2C_RemovePackageItem.create = function create(properties) {
            return new GW2C_RemovePackageItem(properties);
        };

        /**
         * Encodes the specified GW2C_RemovePackageItem message. Does not implicitly {@link msg.GW2C_RemovePackageItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem} message GW2C_RemovePackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemovePackageItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RemovePackageItem message, length delimited. Does not implicitly {@link msg.GW2C_RemovePackageItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.IGW2C_RemovePackageItem} message GW2C_RemovePackageItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RemovePackageItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RemovePackageItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemovePackageItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RemovePackageItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RemovePackageItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RemovePackageItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RemovePackageItem message.
         * @function verify
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RemovePackageItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RemovePackageItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RemovePackageItem} GW2C_RemovePackageItem
         */
        GW2C_RemovePackageItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RemovePackageItem)
                return object;
            var message = new $root.msg.GW2C_RemovePackageItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RemovePackageItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RemovePackageItem
         * @static
         * @param {msg.GW2C_RemovePackageItem} message GW2C_RemovePackageItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RemovePackageItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_RemovePackageItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RemovePackageItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RemovePackageItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RemovePackageItem;
    })();

    msg.GW2C_UpdateGold = (function() {

        /**
         * Properties of a GW2C_UpdateGold.
         * @memberof msg
         * @interface IGW2C_UpdateGold
         * @property {number|null} [num] GW2C_UpdateGold num
         */

        /**
         * Constructs a new GW2C_UpdateGold.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateGold.
         * @implements IGW2C_UpdateGold
         * @constructor
         * @param {msg.IGW2C_UpdateGold=} [properties] Properties to set
         */
        function GW2C_UpdateGold(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateGold num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateGold
         * @instance
         */
        GW2C_UpdateGold.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateGold instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold instance
         */
        GW2C_UpdateGold.create = function create(properties) {
            return new GW2C_UpdateGold(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateGold message. Does not implicitly {@link msg.GW2C_UpdateGold.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold} message GW2C_UpdateGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateGold.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateGold message, length delimited. Does not implicitly {@link msg.GW2C_UpdateGold.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.IGW2C_UpdateGold} message GW2C_UpdateGold message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateGold.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateGold message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateGold.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateGold();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateGold message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateGold.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateGold message.
         * @function verify
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateGold.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateGold message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateGold} GW2C_UpdateGold
         */
        GW2C_UpdateGold.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateGold)
                return object;
            var message = new $root.msg.GW2C_UpdateGold();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateGold message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateGold
         * @static
         * @param {msg.GW2C_UpdateGold} message GW2C_UpdateGold
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateGold.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateGold to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateGold
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateGold.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateGold;
    })();

    msg.GW2C_UpdateYuanbao = (function() {

        /**
         * Properties of a GW2C_UpdateYuanbao.
         * @memberof msg
         * @interface IGW2C_UpdateYuanbao
         * @property {number|null} [num] GW2C_UpdateYuanbao num
         */

        /**
         * Constructs a new GW2C_UpdateYuanbao.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateYuanbao.
         * @implements IGW2C_UpdateYuanbao
         * @constructor
         * @param {msg.IGW2C_UpdateYuanbao=} [properties] Properties to set
         */
        function GW2C_UpdateYuanbao(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateYuanbao num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateYuanbao
         * @instance
         */
        GW2C_UpdateYuanbao.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateYuanbao instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao instance
         */
        GW2C_UpdateYuanbao.create = function create(properties) {
            return new GW2C_UpdateYuanbao(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateYuanbao message. Does not implicitly {@link msg.GW2C_UpdateYuanbao.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao} message GW2C_UpdateYuanbao message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateYuanbao.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateYuanbao message, length delimited. Does not implicitly {@link msg.GW2C_UpdateYuanbao.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.IGW2C_UpdateYuanbao} message GW2C_UpdateYuanbao message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateYuanbao.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateYuanbao message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateYuanbao.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateYuanbao();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateYuanbao message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateYuanbao.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateYuanbao message.
         * @function verify
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateYuanbao.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateYuanbao message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateYuanbao} GW2C_UpdateYuanbao
         */
        GW2C_UpdateYuanbao.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateYuanbao)
                return object;
            var message = new $root.msg.GW2C_UpdateYuanbao();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateYuanbao message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateYuanbao
         * @static
         * @param {msg.GW2C_UpdateYuanbao} message GW2C_UpdateYuanbao
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateYuanbao.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateYuanbao to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateYuanbao
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateYuanbao.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateYuanbao;
    })();

    msg.GW2C_UpdateDiamond = (function() {

        /**
         * Properties of a GW2C_UpdateDiamond.
         * @memberof msg
         * @interface IGW2C_UpdateDiamond
         * @property {number|null} [num] GW2C_UpdateDiamond num
         */

        /**
         * Constructs a new GW2C_UpdateDiamond.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateDiamond.
         * @implements IGW2C_UpdateDiamond
         * @constructor
         * @param {msg.IGW2C_UpdateDiamond=} [properties] Properties to set
         */
        function GW2C_UpdateDiamond(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateDiamond num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateDiamond
         * @instance
         */
        GW2C_UpdateDiamond.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateDiamond instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.IGW2C_UpdateDiamond=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond instance
         */
        GW2C_UpdateDiamond.create = function create(properties) {
            return new GW2C_UpdateDiamond(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateDiamond message. Does not implicitly {@link msg.GW2C_UpdateDiamond.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.IGW2C_UpdateDiamond} message GW2C_UpdateDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateDiamond.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateDiamond message, length delimited. Does not implicitly {@link msg.GW2C_UpdateDiamond.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.IGW2C_UpdateDiamond} message GW2C_UpdateDiamond message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateDiamond.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateDiamond message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateDiamond.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateDiamond();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateDiamond message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateDiamond.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateDiamond message.
         * @function verify
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateDiamond.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateDiamond message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateDiamond} GW2C_UpdateDiamond
         */
        GW2C_UpdateDiamond.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateDiamond)
                return object;
            var message = new $root.msg.GW2C_UpdateDiamond();
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateDiamond message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateDiamond
         * @static
         * @param {msg.GW2C_UpdateDiamond} message GW2C_UpdateDiamond
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateDiamond.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateDiamond to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateDiamond
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateDiamond.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateDiamond;
    })();

    msg.GW2C_UpdateFreeStep = (function() {

        /**
         * Properties of a GW2C_UpdateFreeStep.
         * @memberof msg
         * @interface IGW2C_UpdateFreeStep
         * @property {number|null} [num] GW2C_UpdateFreeStep num
         */

        /**
         * Constructs a new GW2C_UpdateFreeStep.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateFreeStep.
         * @implements IGW2C_UpdateFreeStep
         * @constructor
         * @param {msg.IGW2C_UpdateFreeStep=} [properties] Properties to set
         */
        function GW2C_UpdateFreeStep(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateFreeStep num.
         * @member {number} num
         * @memberof msg.GW2C_UpdateFreeStep
         * @instance
         */
        GW2C_UpdateFreeStep.prototype.num = 0;

        /**
         * Creates a new GW2C_UpdateFreeStep instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.IGW2C_UpdateFreeStep=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep instance
         */
        GW2C_UpdateFreeStep.create = function create(properties) {
            return new GW2C_UpdateFreeStep(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateFreeStep message. Does not implicitly {@link msg.GW2C_UpdateFreeStep.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.IGW2C_UpdateFreeStep} message GW2C_UpdateFreeStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateFreeStep.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateFreeStep message, length delimited. Does not implicitly {@link msg.GW2C_UpdateFreeStep.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.IGW2C_UpdateFreeStep} message GW2C_UpdateFreeStep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateFreeStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateFreeStep message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateFreeStep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateFreeStep();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateFreeStep message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateFreeStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateFreeStep message.
         * @function verify
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateFreeStep.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_UpdateFreeStep message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateFreeStep} GW2C_UpdateFreeStep
         */
        GW2C_UpdateFreeStep.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateFreeStep)
                return object;
            var message = new $root.msg.GW2C_UpdateFreeStep();
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateFreeStep message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateFreeStep
         * @static
         * @param {msg.GW2C_UpdateFreeStep} message GW2C_UpdateFreeStep
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateFreeStep.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.num = 0;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this GW2C_UpdateFreeStep to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateFreeStep
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateFreeStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateFreeStep;
    })();

    msg.DeliveryGoods = (function() {

        /**
         * Properties of a DeliveryGoods.
         * @memberof msg
         * @interface IDeliveryGoods
         * @property {number|null} [itemid] DeliveryGoods itemid
         * @property {number|null} [num] DeliveryGoods num
         */

        /**
         * Constructs a new DeliveryGoods.
         * @memberof msg
         * @classdesc Represents a DeliveryGoods.
         * @implements IDeliveryGoods
         * @constructor
         * @param {msg.IDeliveryGoods=} [properties] Properties to set
         */
        function DeliveryGoods(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeliveryGoods itemid.
         * @member {number} itemid
         * @memberof msg.DeliveryGoods
         * @instance
         */
        DeliveryGoods.prototype.itemid = 0;

        /**
         * DeliveryGoods num.
         * @member {number} num
         * @memberof msg.DeliveryGoods
         * @instance
         */
        DeliveryGoods.prototype.num = 0;

        /**
         * Creates a new DeliveryGoods instance using the specified properties.
         * @function create
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods=} [properties] Properties to set
         * @returns {msg.DeliveryGoods} DeliveryGoods instance
         */
        DeliveryGoods.create = function create(properties) {
            return new DeliveryGoods(properties);
        };

        /**
         * Encodes the specified DeliveryGoods message. Does not implicitly {@link msg.DeliveryGoods.verify|verify} messages.
         * @function encode
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods} message DeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeliveryGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified DeliveryGoods message, length delimited. Does not implicitly {@link msg.DeliveryGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.IDeliveryGoods} message DeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeliveryGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeliveryGoods message from the specified reader or buffer.
         * @function decode
         * @memberof msg.DeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.DeliveryGoods} DeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeliveryGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.DeliveryGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeliveryGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.DeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.DeliveryGoods} DeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeliveryGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeliveryGoods message.
         * @function verify
         * @memberof msg.DeliveryGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeliveryGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a DeliveryGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.DeliveryGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.DeliveryGoods} DeliveryGoods
         */
        DeliveryGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.DeliveryGoods)
                return object;
            var message = new $root.msg.DeliveryGoods();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a DeliveryGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.DeliveryGoods
         * @static
         * @param {msg.DeliveryGoods} message DeliveryGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeliveryGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this DeliveryGoods to JSON.
         * @function toJSON
         * @memberof msg.DeliveryGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeliveryGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeliveryGoods;
    })();

    msg.C2GW_ReqDeliveryGoods = (function() {

        /**
         * Properties of a C2GW_ReqDeliveryGoods.
         * @memberof msg
         * @interface IC2GW_ReqDeliveryGoods
         * @property {Array.<msg.IDeliveryGoods>|null} [list] C2GW_ReqDeliveryGoods list
         * @property {string|null} [token] C2GW_ReqDeliveryGoods token
         */

        /**
         * Constructs a new C2GW_ReqDeliveryGoods.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqDeliveryGoods.
         * @implements IC2GW_ReqDeliveryGoods
         * @constructor
         * @param {msg.IC2GW_ReqDeliveryGoods=} [properties] Properties to set
         */
        function C2GW_ReqDeliveryGoods(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqDeliveryGoods list.
         * @member {Array.<msg.IDeliveryGoods>} list
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         */
        C2GW_ReqDeliveryGoods.prototype.list = $util.emptyArray;

        /**
         * C2GW_ReqDeliveryGoods token.
         * @member {string} token
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         */
        C2GW_ReqDeliveryGoods.prototype.token = "";

        /**
         * Creates a new C2GW_ReqDeliveryGoods instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods=} [properties] Properties to set
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods instance
         */
        C2GW_ReqDeliveryGoods.create = function create(properties) {
            return new C2GW_ReqDeliveryGoods(properties);
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryGoods message. Does not implicitly {@link msg.C2GW_ReqDeliveryGoods.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.DeliveryGoods.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqDeliveryGoods message, length delimited. Does not implicitly {@link msg.C2GW_ReqDeliveryGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.IC2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqDeliveryGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqDeliveryGoods message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqDeliveryGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.DeliveryGoods.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqDeliveryGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqDeliveryGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqDeliveryGoods message.
         * @function verify
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqDeliveryGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.DeliveryGoods.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqDeliveryGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqDeliveryGoods} C2GW_ReqDeliveryGoods
         */
        C2GW_ReqDeliveryGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqDeliveryGoods)
                return object;
            var message = new $root.msg.C2GW_ReqDeliveryGoods();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.C2GW_ReqDeliveryGoods.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.C2GW_ReqDeliveryGoods.list: object expected");
                    message.list[i] = $root.msg.DeliveryGoods.fromObject(object.list[i]);
                }
            }
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqDeliveryGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @static
         * @param {msg.C2GW_ReqDeliveryGoods} message C2GW_ReqDeliveryGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqDeliveryGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (options.defaults)
                object.token = "";
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.DeliveryGoods.toObject(message.list[j], options);
            }
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this C2GW_ReqDeliveryGoods to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqDeliveryGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqDeliveryGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqDeliveryGoods;
    })();

    msg.BigRewardItem = (function() {

        /**
         * Properties of a BigRewardItem.
         * @memberof msg
         * @interface IBigRewardItem
         * @property {number|null} [id] BigRewardItem id
         * @property {number|null} [num] BigRewardItem num
         */

        /**
         * Constructs a new BigRewardItem.
         * @memberof msg
         * @classdesc Represents a BigRewardItem.
         * @implements IBigRewardItem
         * @constructor
         * @param {msg.IBigRewardItem=} [properties] Properties to set
         */
        function BigRewardItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BigRewardItem id.
         * @member {number} id
         * @memberof msg.BigRewardItem
         * @instance
         */
        BigRewardItem.prototype.id = 0;

        /**
         * BigRewardItem num.
         * @member {number} num
         * @memberof msg.BigRewardItem
         * @instance
         */
        BigRewardItem.prototype.num = 0;

        /**
         * Creates a new BigRewardItem instance using the specified properties.
         * @function create
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.IBigRewardItem=} [properties] Properties to set
         * @returns {msg.BigRewardItem} BigRewardItem instance
         */
        BigRewardItem.create = function create(properties) {
            return new BigRewardItem(properties);
        };

        /**
         * Encodes the specified BigRewardItem message. Does not implicitly {@link msg.BigRewardItem.verify|verify} messages.
         * @function encode
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.IBigRewardItem} message BigRewardItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BigRewardItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified BigRewardItem message, length delimited. Does not implicitly {@link msg.BigRewardItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.IBigRewardItem} message BigRewardItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BigRewardItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BigRewardItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.BigRewardItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.BigRewardItem} BigRewardItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BigRewardItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.BigRewardItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BigRewardItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.BigRewardItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.BigRewardItem} BigRewardItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BigRewardItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BigRewardItem message.
         * @function verify
         * @memberof msg.BigRewardItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BigRewardItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a BigRewardItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.BigRewardItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.BigRewardItem} BigRewardItem
         */
        BigRewardItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.BigRewardItem)
                return object;
            var message = new $root.msg.BigRewardItem();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BigRewardItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.BigRewardItem
         * @static
         * @param {msg.BigRewardItem} message BigRewardItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BigRewardItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.num = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this BigRewardItem to JSON.
         * @function toJSON
         * @memberof msg.BigRewardItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BigRewardItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BigRewardItem;
    })();

    msg.Sync_BigRewardPickNum = (function() {

        /**
         * Properties of a Sync_BigRewardPickNum.
         * @memberof msg
         * @interface ISync_BigRewardPickNum
         * @property {Array.<msg.IBigRewardItem>|null} [list] Sync_BigRewardPickNum list
         */

        /**
         * Constructs a new Sync_BigRewardPickNum.
         * @memberof msg
         * @classdesc Represents a Sync_BigRewardPickNum.
         * @implements ISync_BigRewardPickNum
         * @constructor
         * @param {msg.ISync_BigRewardPickNum=} [properties] Properties to set
         */
        function Sync_BigRewardPickNum(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Sync_BigRewardPickNum list.
         * @member {Array.<msg.IBigRewardItem>} list
         * @memberof msg.Sync_BigRewardPickNum
         * @instance
         */
        Sync_BigRewardPickNum.prototype.list = $util.emptyArray;

        /**
         * Creates a new Sync_BigRewardPickNum instance using the specified properties.
         * @function create
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.ISync_BigRewardPickNum=} [properties] Properties to set
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum instance
         */
        Sync_BigRewardPickNum.create = function create(properties) {
            return new Sync_BigRewardPickNum(properties);
        };

        /**
         * Encodes the specified Sync_BigRewardPickNum message. Does not implicitly {@link msg.Sync_BigRewardPickNum.verify|verify} messages.
         * @function encode
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.ISync_BigRewardPickNum} message Sync_BigRewardPickNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Sync_BigRewardPickNum.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.BigRewardItem.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Sync_BigRewardPickNum message, length delimited. Does not implicitly {@link msg.Sync_BigRewardPickNum.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.ISync_BigRewardPickNum} message Sync_BigRewardPickNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Sync_BigRewardPickNum.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Sync_BigRewardPickNum message from the specified reader or buffer.
         * @function decode
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Sync_BigRewardPickNum.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.Sync_BigRewardPickNum();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.BigRewardItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Sync_BigRewardPickNum message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Sync_BigRewardPickNum.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Sync_BigRewardPickNum message.
         * @function verify
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Sync_BigRewardPickNum.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.BigRewardItem.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Sync_BigRewardPickNum message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.Sync_BigRewardPickNum} Sync_BigRewardPickNum
         */
        Sync_BigRewardPickNum.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.Sync_BigRewardPickNum)
                return object;
            var message = new $root.msg.Sync_BigRewardPickNum();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.Sync_BigRewardPickNum.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.Sync_BigRewardPickNum.list: object expected");
                    message.list[i] = $root.msg.BigRewardItem.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a Sync_BigRewardPickNum message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.Sync_BigRewardPickNum
         * @static
         * @param {msg.Sync_BigRewardPickNum} message Sync_BigRewardPickNum
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Sync_BigRewardPickNum.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.BigRewardItem.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this Sync_BigRewardPickNum to JSON.
         * @function toJSON
         * @memberof msg.Sync_BigRewardPickNum
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Sync_BigRewardPickNum.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Sync_BigRewardPickNum;
    })();

    msg.C2GW_UseBagItem = (function() {

        /**
         * Properties of a C2GW_UseBagItem.
         * @memberof msg
         * @interface IC2GW_UseBagItem
         * @property {number|null} [itemid] C2GW_UseBagItem itemid
         * @property {number|null} [num] C2GW_UseBagItem num
         */

        /**
         * Constructs a new C2GW_UseBagItem.
         * @memberof msg
         * @classdesc Represents a C2GW_UseBagItem.
         * @implements IC2GW_UseBagItem
         * @constructor
         * @param {msg.IC2GW_UseBagItem=} [properties] Properties to set
         */
        function C2GW_UseBagItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_UseBagItem itemid.
         * @member {number} itemid
         * @memberof msg.C2GW_UseBagItem
         * @instance
         */
        C2GW_UseBagItem.prototype.itemid = 0;

        /**
         * C2GW_UseBagItem num.
         * @member {number} num
         * @memberof msg.C2GW_UseBagItem
         * @instance
         */
        C2GW_UseBagItem.prototype.num = 0;

        /**
         * Creates a new C2GW_UseBagItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem=} [properties] Properties to set
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem instance
         */
        C2GW_UseBagItem.create = function create(properties) {
            return new C2GW_UseBagItem(properties);
        };

        /**
         * Encodes the specified C2GW_UseBagItem message. Does not implicitly {@link msg.C2GW_UseBagItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem} message C2GW_UseBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UseBagItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_UseBagItem message, length delimited. Does not implicitly {@link msg.C2GW_UseBagItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.IC2GW_UseBagItem} message C2GW_UseBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UseBagItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_UseBagItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UseBagItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_UseBagItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_UseBagItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UseBagItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_UseBagItem message.
         * @function verify
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_UseBagItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_UseBagItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_UseBagItem} C2GW_UseBagItem
         */
        C2GW_UseBagItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_UseBagItem)
                return object;
            var message = new $root.msg.C2GW_UseBagItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_UseBagItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_UseBagItem
         * @static
         * @param {msg.C2GW_UseBagItem} message C2GW_UseBagItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_UseBagItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.num = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_UseBagItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_UseBagItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_UseBagItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_UseBagItem;
    })();

    msg.C2GW_SellBagItem = (function() {

        /**
         * Properties of a C2GW_SellBagItem.
         * @memberof msg
         * @interface IC2GW_SellBagItem
         * @property {Array.<msg.IPairNumItem>|null} [list] C2GW_SellBagItem list
         */

        /**
         * Constructs a new C2GW_SellBagItem.
         * @memberof msg
         * @classdesc Represents a C2GW_SellBagItem.
         * @implements IC2GW_SellBagItem
         * @constructor
         * @param {msg.IC2GW_SellBagItem=} [properties] Properties to set
         */
        function C2GW_SellBagItem(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_SellBagItem list.
         * @member {Array.<msg.IPairNumItem>} list
         * @memberof msg.C2GW_SellBagItem
         * @instance
         */
        C2GW_SellBagItem.prototype.list = $util.emptyArray;

        /**
         * Creates a new C2GW_SellBagItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.IC2GW_SellBagItem=} [properties] Properties to set
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem instance
         */
        C2GW_SellBagItem.create = function create(properties) {
            return new C2GW_SellBagItem(properties);
        };

        /**
         * Encodes the specified C2GW_SellBagItem message. Does not implicitly {@link msg.C2GW_SellBagItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.IC2GW_SellBagItem} message C2GW_SellBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SellBagItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.PairNumItem.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_SellBagItem message, length delimited. Does not implicitly {@link msg.C2GW_SellBagItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.IC2GW_SellBagItem} message C2GW_SellBagItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SellBagItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_SellBagItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SellBagItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_SellBagItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.PairNumItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_SellBagItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SellBagItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_SellBagItem message.
         * @function verify
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_SellBagItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.PairNumItem.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a C2GW_SellBagItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_SellBagItem} C2GW_SellBagItem
         */
        C2GW_SellBagItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_SellBagItem)
                return object;
            var message = new $root.msg.C2GW_SellBagItem();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.C2GW_SellBagItem.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.C2GW_SellBagItem.list: object expected");
                    message.list[i] = $root.msg.PairNumItem.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_SellBagItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_SellBagItem
         * @static
         * @param {msg.C2GW_SellBagItem} message C2GW_SellBagItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_SellBagItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.PairNumItem.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this C2GW_SellBagItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_SellBagItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_SellBagItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_SellBagItem;
    })();

    msg.GW2C_UpdateItemPos = (function() {

        /**
         * Properties of a GW2C_UpdateItemPos.
         * @memberof msg
         * @interface IGW2C_UpdateItemPos
         * @property {Array.<msg.IItemData>|null} [items] GW2C_UpdateItemPos items
         */

        /**
         * Constructs a new GW2C_UpdateItemPos.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateItemPos.
         * @implements IGW2C_UpdateItemPos
         * @constructor
         * @param {msg.IGW2C_UpdateItemPos=} [properties] Properties to set
         */
        function GW2C_UpdateItemPos(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateItemPos items.
         * @member {Array.<msg.IItemData>} items
         * @memberof msg.GW2C_UpdateItemPos
         * @instance
         */
        GW2C_UpdateItemPos.prototype.items = $util.emptyArray;

        /**
         * Creates a new GW2C_UpdateItemPos instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.IGW2C_UpdateItemPos=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos instance
         */
        GW2C_UpdateItemPos.create = function create(properties) {
            return new GW2C_UpdateItemPos(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateItemPos message. Does not implicitly {@link msg.GW2C_UpdateItemPos.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.IGW2C_UpdateItemPos} message GW2C_UpdateItemPos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateItemPos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.msg.ItemData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateItemPos message, length delimited. Does not implicitly {@link msg.GW2C_UpdateItemPos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.IGW2C_UpdateItemPos} message GW2C_UpdateItemPos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateItemPos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateItemPos message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateItemPos.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateItemPos();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.msg.ItemData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateItemPos message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateItemPos.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateItemPos message.
         * @function verify
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateItemPos.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.msg.ItemData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_UpdateItemPos message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateItemPos} GW2C_UpdateItemPos
         */
        GW2C_UpdateItemPos.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateItemPos)
                return object;
            var message = new $root.msg.GW2C_UpdateItemPos();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".msg.GW2C_UpdateItemPos.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".msg.GW2C_UpdateItemPos.items: object expected");
                    message.items[i] = $root.msg.ItemData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateItemPos message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateItemPos
         * @static
         * @param {msg.GW2C_UpdateItemPos} message GW2C_UpdateItemPos
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateItemPos.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.msg.ItemData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_UpdateItemPos to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateItemPos
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateItemPos.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateItemPos;
    })();

    msg.C2L_ReqLogin = (function() {

        /**
         * Properties of a C2L_ReqLogin.
         * @memberof msg
         * @interface IC2L_ReqLogin
         * @property {string|null} [account] C2L_ReqLogin account
         * @property {string|null} [passwd] C2L_ReqLogin passwd
         */

        /**
         * Constructs a new C2L_ReqLogin.
         * @memberof msg
         * @classdesc Represents a C2L_ReqLogin.
         * @implements IC2L_ReqLogin
         * @constructor
         * @param {msg.IC2L_ReqLogin=} [properties] Properties to set
         */
        function C2L_ReqLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqLogin account.
         * @member {string} account
         * @memberof msg.C2L_ReqLogin
         * @instance
         */
        C2L_ReqLogin.prototype.account = "";

        /**
         * C2L_ReqLogin passwd.
         * @member {string} passwd
         * @memberof msg.C2L_ReqLogin
         * @instance
         */
        C2L_ReqLogin.prototype.passwd = "";

        /**
         * Creates a new C2L_ReqLogin instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin=} [properties] Properties to set
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin instance
         */
        C2L_ReqLogin.create = function create(properties) {
            return new C2L_ReqLogin(properties);
        };

        /**
         * Encodes the specified C2L_ReqLogin message. Does not implicitly {@link msg.C2L_ReqLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin} message C2L_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqLogin message, length delimited. Does not implicitly {@link msg.C2L_ReqLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.IC2L_ReqLogin} message C2L_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqLogin message.
         * @function verify
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqLogin} C2L_ReqLogin
         */
        C2L_ReqLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqLogin)
                return object;
            var message = new $root.msg.C2L_ReqLogin();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqLogin
         * @static
         * @param {msg.C2L_ReqLogin} message C2L_ReqLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            return object;
        };

        /**
         * Converts this C2L_ReqLogin to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqLogin;
    })();

    msg.C2L_ReqLoginWechat = (function() {

        /**
         * Properties of a C2L_ReqLoginWechat.
         * @memberof msg
         * @interface IC2L_ReqLoginWechat
         * @property {string|null} [openid] C2L_ReqLoginWechat openid
         * @property {string|null} [face] C2L_ReqLoginWechat face
         * @property {string|null} [nickname] C2L_ReqLoginWechat nickname
         * @property {string|null} [invitationcode] C2L_ReqLoginWechat invitationcode
         */

        /**
         * Constructs a new C2L_ReqLoginWechat.
         * @memberof msg
         * @classdesc Represents a C2L_ReqLoginWechat.
         * @implements IC2L_ReqLoginWechat
         * @constructor
         * @param {msg.IC2L_ReqLoginWechat=} [properties] Properties to set
         */
        function C2L_ReqLoginWechat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqLoginWechat openid.
         * @member {string} openid
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.openid = "";

        /**
         * C2L_ReqLoginWechat face.
         * @member {string} face
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.face = "";

        /**
         * C2L_ReqLoginWechat nickname.
         * @member {string} nickname
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.nickname = "";

        /**
         * C2L_ReqLoginWechat invitationcode.
         * @member {string} invitationcode
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         */
        C2L_ReqLoginWechat.prototype.invitationcode = "";

        /**
         * Creates a new C2L_ReqLoginWechat instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.IC2L_ReqLoginWechat=} [properties] Properties to set
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat instance
         */
        C2L_ReqLoginWechat.create = function create(properties) {
            return new C2L_ReqLoginWechat(properties);
        };

        /**
         * Encodes the specified C2L_ReqLoginWechat message. Does not implicitly {@link msg.C2L_ReqLoginWechat.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.IC2L_ReqLoginWechat} message C2L_ReqLoginWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLoginWechat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.face);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.invitationcode);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqLoginWechat message, length delimited. Does not implicitly {@link msg.C2L_ReqLoginWechat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.IC2L_ReqLoginWechat} message C2L_ReqLoginWechat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqLoginWechat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqLoginWechat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLoginWechat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqLoginWechat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                case 2:
                    message.face = reader.string();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.invitationcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqLoginWechat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqLoginWechat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqLoginWechat message.
         * @function verify
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqLoginWechat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqLoginWechat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqLoginWechat} C2L_ReqLoginWechat
         */
        C2L_ReqLoginWechat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqLoginWechat)
                return object;
            var message = new $root.msg.C2L_ReqLoginWechat();
            if (object.openid != null)
                message.openid = String(object.openid);
            if (object.face != null)
                message.face = String(object.face);
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqLoginWechat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqLoginWechat
         * @static
         * @param {msg.C2L_ReqLoginWechat} message C2L_ReqLoginWechat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqLoginWechat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.openid = "";
                object.face = "";
                object.nickname = "";
                object.invitationcode = "";
            }
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            return object;
        };

        /**
         * Converts this C2L_ReqLoginWechat to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqLoginWechat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqLoginWechat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqLoginWechat;
    })();

    msg.L2C_RetLogin = (function() {

        /**
         * Properties of a L2C_RetLogin.
         * @memberof msg
         * @interface IL2C_RetLogin
         * @property {number|null} [result] L2C_RetLogin result
         * @property {string|null} [reason] L2C_RetLogin reason
         * @property {msg.IIpHost|null} [gatehost] L2C_RetLogin gatehost
         * @property {string|null} [verifykey] L2C_RetLogin verifykey
         */

        /**
         * Constructs a new L2C_RetLogin.
         * @memberof msg
         * @classdesc Represents a L2C_RetLogin.
         * @implements IL2C_RetLogin
         * @constructor
         * @param {msg.IL2C_RetLogin=} [properties] Properties to set
         */
        function L2C_RetLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2C_RetLogin result.
         * @member {number} result
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.result = 0;

        /**
         * L2C_RetLogin reason.
         * @member {string} reason
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.reason = "";

        /**
         * L2C_RetLogin gatehost.
         * @member {msg.IIpHost|null|undefined} gatehost
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.gatehost = null;

        /**
         * L2C_RetLogin verifykey.
         * @member {string} verifykey
         * @memberof msg.L2C_RetLogin
         * @instance
         */
        L2C_RetLogin.prototype.verifykey = "";

        /**
         * Creates a new L2C_RetLogin instance using the specified properties.
         * @function create
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin=} [properties] Properties to set
         * @returns {msg.L2C_RetLogin} L2C_RetLogin instance
         */
        L2C_RetLogin.create = function create(properties) {
            return new L2C_RetLogin(properties);
        };

        /**
         * Encodes the specified L2C_RetLogin message. Does not implicitly {@link msg.L2C_RetLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin} message L2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                $root.msg.IpHost.encode(message.gatehost, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified L2C_RetLogin message, length delimited. Does not implicitly {@link msg.L2C_RetLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.IL2C_RetLogin} message L2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2C_RetLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2C_RetLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result = reader.int32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.gatehost = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2C_RetLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2C_RetLogin message.
         * @function verify
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2C_RetLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost")) {
                var error = $root.msg.IpHost.verify(message.gatehost);
                if (error)
                    return "gatehost." + error;
            }
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a L2C_RetLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2C_RetLogin} L2C_RetLogin
         */
        L2C_RetLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2C_RetLogin)
                return object;
            var message = new $root.msg.L2C_RetLogin();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.gatehost != null) {
                if (typeof object.gatehost !== "object")
                    throw TypeError(".msg.L2C_RetLogin.gatehost: object expected");
                message.gatehost = $root.msg.IpHost.fromObject(object.gatehost);
            }
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a L2C_RetLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2C_RetLogin
         * @static
         * @param {msg.L2C_RetLogin} message L2C_RetLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2C_RetLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.reason = "";
                object.gatehost = null;
                object.verifykey = "";
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = $root.msg.IpHost.toObject(message.gatehost, options);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this L2C_RetLogin to JSON.
         * @function toJSON
         * @memberof msg.L2C_RetLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2C_RetLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2C_RetLogin;
    })();

    msg.C2L_ReqRegistAuthCode = (function() {

        /**
         * Properties of a C2L_ReqRegistAuthCode.
         * @memberof msg
         * @interface IC2L_ReqRegistAuthCode
         * @property {string|null} [phone] C2L_ReqRegistAuthCode phone
         */

        /**
         * Constructs a new C2L_ReqRegistAuthCode.
         * @memberof msg
         * @classdesc Represents a C2L_ReqRegistAuthCode.
         * @implements IC2L_ReqRegistAuthCode
         * @constructor
         * @param {msg.IC2L_ReqRegistAuthCode=} [properties] Properties to set
         */
        function C2L_ReqRegistAuthCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqRegistAuthCode phone.
         * @member {string} phone
         * @memberof msg.C2L_ReqRegistAuthCode
         * @instance
         */
        C2L_ReqRegistAuthCode.prototype.phone = "";

        /**
         * Creates a new C2L_ReqRegistAuthCode instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode=} [properties] Properties to set
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode instance
         */
        C2L_ReqRegistAuthCode.create = function create(properties) {
            return new C2L_ReqRegistAuthCode(properties);
        };

        /**
         * Encodes the specified C2L_ReqRegistAuthCode message. Does not implicitly {@link msg.C2L_ReqRegistAuthCode.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAuthCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.phone);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqRegistAuthCode message, length delimited. Does not implicitly {@link msg.C2L_ReqRegistAuthCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.IC2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAuthCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqRegistAuthCode message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAuthCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqRegistAuthCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phone = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqRegistAuthCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAuthCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqRegistAuthCode message.
         * @function verify
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqRegistAuthCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqRegistAuthCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqRegistAuthCode} C2L_ReqRegistAuthCode
         */
        C2L_ReqRegistAuthCode.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqRegistAuthCode)
                return object;
            var message = new $root.msg.C2L_ReqRegistAuthCode();
            if (object.phone != null)
                message.phone = String(object.phone);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqRegistAuthCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqRegistAuthCode
         * @static
         * @param {msg.C2L_ReqRegistAuthCode} message C2L_ReqRegistAuthCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqRegistAuthCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.phone = "";
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            return object;
        };

        /**
         * Converts this C2L_ReqRegistAuthCode to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqRegistAuthCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqRegistAuthCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqRegistAuthCode;
    })();

    msg.C2L_ReqRegistAccount = (function() {

        /**
         * Properties of a C2L_ReqRegistAccount.
         * @memberof msg
         * @interface IC2L_ReqRegistAccount
         * @property {string|null} [phone] C2L_ReqRegistAccount phone
         * @property {string|null} [passwd] C2L_ReqRegistAccount passwd
         * @property {string|null} [authcode] C2L_ReqRegistAccount authcode
         * @property {string|null} [invitationcode] C2L_ReqRegistAccount invitationcode
         * @property {string|null} [nickname] C2L_ReqRegistAccount nickname
         */

        /**
         * Constructs a new C2L_ReqRegistAccount.
         * @memberof msg
         * @classdesc Represents a C2L_ReqRegistAccount.
         * @implements IC2L_ReqRegistAccount
         * @constructor
         * @param {msg.IC2L_ReqRegistAccount=} [properties] Properties to set
         */
        function C2L_ReqRegistAccount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2L_ReqRegistAccount phone.
         * @member {string} phone
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.phone = "";

        /**
         * C2L_ReqRegistAccount passwd.
         * @member {string} passwd
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.passwd = "";

        /**
         * C2L_ReqRegistAccount authcode.
         * @member {string} authcode
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.authcode = "";

        /**
         * C2L_ReqRegistAccount invitationcode.
         * @member {string} invitationcode
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.invitationcode = "";

        /**
         * C2L_ReqRegistAccount nickname.
         * @member {string} nickname
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         */
        C2L_ReqRegistAccount.prototype.nickname = "";

        /**
         * Creates a new C2L_ReqRegistAccount instance using the specified properties.
         * @function create
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount=} [properties] Properties to set
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount instance
         */
        C2L_ReqRegistAccount.create = function create(properties) {
            return new C2L_ReqRegistAccount(properties);
        };

        /**
         * Encodes the specified C2L_ReqRegistAccount message. Does not implicitly {@link msg.C2L_ReqRegistAccount.verify|verify} messages.
         * @function encode
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount} message C2L_ReqRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAccount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.phone);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.authcode);
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.invitationcode);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.nickname);
            return writer;
        };

        /**
         * Encodes the specified C2L_ReqRegistAccount message, length delimited. Does not implicitly {@link msg.C2L_ReqRegistAccount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.IC2L_ReqRegistAccount} message C2L_ReqRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2L_ReqRegistAccount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2L_ReqRegistAccount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAccount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2L_ReqRegistAccount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phone = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.authcode = reader.string();
                    break;
                case 4:
                    message.invitationcode = reader.string();
                    break;
                case 5:
                    message.nickname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2L_ReqRegistAccount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2L_ReqRegistAccount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2L_ReqRegistAccount message.
         * @function verify
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2L_ReqRegistAccount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                if (!$util.isString(message.authcode))
                    return "authcode: string expected";
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                if (!$util.isString(message.invitationcode))
                    return "invitationcode: string expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            return null;
        };

        /**
         * Creates a C2L_ReqRegistAccount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2L_ReqRegistAccount} C2L_ReqRegistAccount
         */
        C2L_ReqRegistAccount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2L_ReqRegistAccount)
                return object;
            var message = new $root.msg.C2L_ReqRegistAccount();
            if (object.phone != null)
                message.phone = String(object.phone);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.authcode != null)
                message.authcode = String(object.authcode);
            if (object.invitationcode != null)
                message.invitationcode = String(object.invitationcode);
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            return message;
        };

        /**
         * Creates a plain object from a C2L_ReqRegistAccount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2L_ReqRegistAccount
         * @static
         * @param {msg.C2L_ReqRegistAccount} message C2L_ReqRegistAccount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2L_ReqRegistAccount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.phone = "";
                object.passwd = "";
                object.authcode = "";
                object.invitationcode = "";
                object.nickname = "";
            }
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.authcode != null && message.hasOwnProperty("authcode"))
                object.authcode = message.authcode;
            if (message.invitationcode != null && message.hasOwnProperty("invitationcode"))
                object.invitationcode = message.invitationcode;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            return object;
        };

        /**
         * Converts this C2L_ReqRegistAccount to JSON.
         * @function toJSON
         * @memberof msg.C2L_ReqRegistAccount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2L_ReqRegistAccount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2L_ReqRegistAccount;
    })();

    msg.L2C_RetRegistAccount = (function() {

        /**
         * Properties of a L2C_RetRegistAccount.
         * @memberof msg
         * @interface IL2C_RetRegistAccount
         * @property {string|null} [errcode] L2C_RetRegistAccount errcode
         */

        /**
         * Constructs a new L2C_RetRegistAccount.
         * @memberof msg
         * @classdesc Represents a L2C_RetRegistAccount.
         * @implements IL2C_RetRegistAccount
         * @constructor
         * @param {msg.IL2C_RetRegistAccount=} [properties] Properties to set
         */
        function L2C_RetRegistAccount(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2C_RetRegistAccount errcode.
         * @member {string} errcode
         * @memberof msg.L2C_RetRegistAccount
         * @instance
         */
        L2C_RetRegistAccount.prototype.errcode = "";

        /**
         * Creates a new L2C_RetRegistAccount instance using the specified properties.
         * @function create
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount=} [properties] Properties to set
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount instance
         */
        L2C_RetRegistAccount.create = function create(properties) {
            return new L2C_RetRegistAccount(properties);
        };

        /**
         * Encodes the specified L2C_RetRegistAccount message. Does not implicitly {@link msg.L2C_RetRegistAccount.verify|verify} messages.
         * @function encode
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount} message L2C_RetRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetRegistAccount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified L2C_RetRegistAccount message, length delimited. Does not implicitly {@link msg.L2C_RetRegistAccount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.IL2C_RetRegistAccount} message L2C_RetRegistAccount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2C_RetRegistAccount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2C_RetRegistAccount message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetRegistAccount.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2C_RetRegistAccount();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2C_RetRegistAccount message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2C_RetRegistAccount.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2C_RetRegistAccount message.
         * @function verify
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2C_RetRegistAccount.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a L2C_RetRegistAccount message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2C_RetRegistAccount} L2C_RetRegistAccount
         */
        L2C_RetRegistAccount.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2C_RetRegistAccount)
                return object;
            var message = new $root.msg.L2C_RetRegistAccount();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a L2C_RetRegistAccount message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2C_RetRegistAccount
         * @static
         * @param {msg.L2C_RetRegistAccount} message L2C_RetRegistAccount
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2C_RetRegistAccount.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this L2C_RetRegistAccount to JSON.
         * @function toJSON
         * @memberof msg.L2C_RetRegistAccount
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2C_RetRegistAccount.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2C_RetRegistAccount;
    })();

    msg.C2GW_ReqLogin = (function() {

        /**
         * Properties of a C2GW_ReqLogin.
         * @memberof msg
         * @interface IC2GW_ReqLogin
         * @property {string|null} [account] C2GW_ReqLogin account
         * @property {string|null} [verifykey] C2GW_ReqLogin verifykey
         * @property {string|null} [token] C2GW_ReqLogin token
         * @property {string|null} [face] C2GW_ReqLogin face
         */

        /**
         * Constructs a new C2GW_ReqLogin.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqLogin.
         * @implements IC2GW_ReqLogin
         * @constructor
         * @param {msg.IC2GW_ReqLogin=} [properties] Properties to set
         */
        function C2GW_ReqLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqLogin account.
         * @member {string} account
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.account = "";

        /**
         * C2GW_ReqLogin verifykey.
         * @member {string} verifykey
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.verifykey = "";

        /**
         * C2GW_ReqLogin token.
         * @member {string} token
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.token = "";

        /**
         * C2GW_ReqLogin face.
         * @member {string} face
         * @memberof msg.C2GW_ReqLogin
         * @instance
         */
        C2GW_ReqLogin.prototype.face = "";

        /**
         * Creates a new C2GW_ReqLogin instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin=} [properties] Properties to set
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin instance
         */
        C2GW_ReqLogin.create = function create(properties) {
            return new C2GW_ReqLogin(properties);
        };

        /**
         * Encodes the specified C2GW_ReqLogin message. Does not implicitly {@link msg.C2GW_ReqLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin} message C2GW_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.verifykey);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.face);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqLogin message, length delimited. Does not implicitly {@link msg.C2GW_ReqLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.IC2GW_ReqLogin} message C2GW_ReqLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.verifykey = reader.string();
                    break;
                case 3:
                    message.token = reader.string();
                    break;
                case 4:
                    message.face = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqLogin message.
         * @function verify
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqLogin} C2GW_ReqLogin
         */
        C2GW_ReqLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqLogin)
                return object;
            var message = new $root.msg.C2GW_ReqLogin();
            if (object.account != null)
                message.account = String(object.account);
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            if (object.token != null)
                message.token = String(object.token);
            if (object.face != null)
                message.face = String(object.face);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqLogin
         * @static
         * @param {msg.C2GW_ReqLogin} message C2GW_ReqLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.verifykey = "";
                object.token = "";
                object.face = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            return object;
        };

        /**
         * Converts this C2GW_ReqLogin to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqLogin;
    })();

    msg.GW2C_RetLogin = (function() {

        /**
         * Properties of a GW2C_RetLogin.
         * @memberof msg
         * @interface IGW2C_RetLogin
         * @property {string|null} [errcode] GW2C_RetLogin errcode
         */

        /**
         * Constructs a new GW2C_RetLogin.
         * @memberof msg
         * @classdesc Represents a GW2C_RetLogin.
         * @implements IGW2C_RetLogin
         * @constructor
         * @param {msg.IGW2C_RetLogin=} [properties] Properties to set
         */
        function GW2C_RetLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetLogin errcode.
         * @member {string} errcode
         * @memberof msg.GW2C_RetLogin
         * @instance
         */
        GW2C_RetLogin.prototype.errcode = "";

        /**
         * Creates a new GW2C_RetLogin instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin=} [properties] Properties to set
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin instance
         */
        GW2C_RetLogin.create = function create(properties) {
            return new GW2C_RetLogin(properties);
        };

        /**
         * Encodes the specified GW2C_RetLogin message. Does not implicitly {@link msg.GW2C_RetLogin.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin} message GW2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetLogin message, length delimited. Does not implicitly {@link msg.GW2C_RetLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.IGW2C_RetLogin} message GW2C_RetLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetLogin message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetLogin message.
         * @function verify
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetLogin} GW2C_RetLogin
         */
        GW2C_RetLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetLogin)
                return object;
            var message = new $root.msg.GW2C_RetLogin();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetLogin
         * @static
         * @param {msg.GW2C_RetLogin} message GW2C_RetLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this GW2C_RetLogin to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetLogin;
    })();

    msg.GW2C_SendUserInfo = (function() {

        /**
         * Properties of a GW2C_SendUserInfo.
         * @memberof msg
         * @interface IGW2C_SendUserInfo
         * @property {msg.IEntityBase|null} [entity] GW2C_SendUserInfo entity
         * @property {msg.IUserBase|null} [base] GW2C_SendUserInfo base
         * @property {msg.IItemBin|null} [item] GW2C_SendUserInfo item
         */

        /**
         * Constructs a new GW2C_SendUserInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserInfo.
         * @implements IGW2C_SendUserInfo
         * @constructor
         * @param {msg.IGW2C_SendUserInfo=} [properties] Properties to set
         */
        function GW2C_SendUserInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserInfo entity.
         * @member {msg.IEntityBase|null|undefined} entity
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.entity = null;

        /**
         * GW2C_SendUserInfo base.
         * @member {msg.IUserBase|null|undefined} base
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.base = null;

        /**
         * GW2C_SendUserInfo item.
         * @member {msg.IItemBin|null|undefined} item
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         */
        GW2C_SendUserInfo.prototype.item = null;

        /**
         * Creates a new GW2C_SendUserInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo instance
         */
        GW2C_SendUserInfo.create = function create(properties) {
            return new GW2C_SendUserInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserInfo message. Does not implicitly {@link msg.GW2C_SendUserInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo} message GW2C_SendUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entity != null && message.hasOwnProperty("entity"))
                $root.msg.EntityBase.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.base != null && message.hasOwnProperty("base"))
                $root.msg.UserBase.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.item != null && message.hasOwnProperty("item"))
                $root.msg.ItemBin.encode(message.item, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendUserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.IGW2C_SendUserInfo} message GW2C_SendUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entity = $root.msg.EntityBase.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.base = $root.msg.UserBase.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.item = $root.msg.ItemBin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserInfo message.
         * @function verify
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entity != null && message.hasOwnProperty("entity")) {
                var error = $root.msg.EntityBase.verify(message.entity);
                if (error)
                    return "entity." + error;
            }
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.msg.UserBase.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.msg.ItemBin.verify(message.item);
                if (error)
                    return "item." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendUserInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserInfo} GW2C_SendUserInfo
         */
        GW2C_SendUserInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserInfo)
                return object;
            var message = new $root.msg.GW2C_SendUserInfo();
            if (object.entity != null) {
                if (typeof object.entity !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.entity: object expected");
                message.entity = $root.msg.EntityBase.fromObject(object.entity);
            }
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.base: object expected");
                message.base = $root.msg.UserBase.fromObject(object.base);
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".msg.GW2C_SendUserInfo.item: object expected");
                message.item = $root.msg.ItemBin.fromObject(object.item);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserInfo
         * @static
         * @param {msg.GW2C_SendUserInfo} message GW2C_SendUserInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entity = null;
                object.base = null;
                object.item = null;
            }
            if (message.entity != null && message.hasOwnProperty("entity"))
                object.entity = $root.msg.EntityBase.toObject(message.entity, options);
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.msg.UserBase.toObject(message.base, options);
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.msg.ItemBin.toObject(message.item, options);
            return object;
        };

        /**
         * Converts this GW2C_SendUserInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserInfo;
    })();

    msg.GW2C_SendUserPlatformMoney = (function() {

        /**
         * Properties of a GW2C_SendUserPlatformMoney.
         * @memberof msg
         * @interface IGW2C_SendUserPlatformMoney
         * @property {number|null} [coins] GW2C_SendUserPlatformMoney coins
         */

        /**
         * Constructs a new GW2C_SendUserPlatformMoney.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserPlatformMoney.
         * @implements IGW2C_SendUserPlatformMoney
         * @constructor
         * @param {msg.IGW2C_SendUserPlatformMoney=} [properties] Properties to set
         */
        function GW2C_SendUserPlatformMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserPlatformMoney coins.
         * @member {number} coins
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @instance
         */
        GW2C_SendUserPlatformMoney.prototype.coins = 0;

        /**
         * Creates a new GW2C_SendUserPlatformMoney instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney instance
         */
        GW2C_SendUserPlatformMoney.create = function create(properties) {
            return new GW2C_SendUserPlatformMoney(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserPlatformMoney message. Does not implicitly {@link msg.GW2C_SendUserPlatformMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserPlatformMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.coins);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserPlatformMoney message, length delimited. Does not implicitly {@link msg.GW2C_SendUserPlatformMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.IGW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserPlatformMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserPlatformMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserPlatformMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserPlatformMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserPlatformMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserPlatformMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserPlatformMoney message.
         * @function verify
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserPlatformMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (!$util.isInteger(message.coins))
                    return "coins: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_SendUserPlatformMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserPlatformMoney} GW2C_SendUserPlatformMoney
         */
        GW2C_SendUserPlatformMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserPlatformMoney)
                return object;
            var message = new $root.msg.GW2C_SendUserPlatformMoney();
            if (object.coins != null)
                message.coins = object.coins | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserPlatformMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @static
         * @param {msg.GW2C_SendUserPlatformMoney} message GW2C_SendUserPlatformMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserPlatformMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.coins = 0;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = message.coins;
            return object;
        };

        /**
         * Converts this GW2C_SendUserPlatformMoney to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserPlatformMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserPlatformMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserPlatformMoney;
    })();

    msg.C2GW_HeartBeat = (function() {

        /**
         * Properties of a C2GW_HeartBeat.
         * @memberof msg
         * @interface IC2GW_HeartBeat
         * @property {number|Long|null} [uid] C2GW_HeartBeat uid
         * @property {number|Long|null} [time] C2GW_HeartBeat time
         * @property {Array.<string>|null} [test] C2GW_HeartBeat test
         */

        /**
         * Constructs a new C2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a C2GW_HeartBeat.
         * @implements IC2GW_HeartBeat
         * @constructor
         * @param {msg.IC2GW_HeartBeat=} [properties] Properties to set
         */
        function C2GW_HeartBeat(properties) {
            this.test = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_HeartBeat uid.
         * @member {number|Long} uid
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_HeartBeat time.
         * @member {number|Long} time
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * C2GW_HeartBeat test.
         * @member {Array.<string>} test
         * @memberof msg.C2GW_HeartBeat
         * @instance
         */
        C2GW_HeartBeat.prototype.test = $util.emptyArray;

        /**
         * Creates a new C2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat instance
         */
        C2GW_HeartBeat.create = function create(properties) {
            return new C2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified C2GW_HeartBeat message. Does not implicitly {@link msg.C2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat} message C2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
            if (message.test != null && message.test.length)
                for (var i = 0; i < message.test.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.test[i]);
            return writer;
        };

        /**
         * Encodes the specified C2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.C2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.IC2GW_HeartBeat} message C2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.time = reader.int64();
                    break;
                case 3:
                    if (!(message.test && message.test.length))
                        message.test = [];
                    message.test.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_HeartBeat message.
         * @function verify
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.test != null && message.hasOwnProperty("test")) {
                if (!Array.isArray(message.test))
                    return "test: array expected";
                for (var i = 0; i < message.test.length; ++i)
                    if (!$util.isString(message.test[i]))
                        return "test: string[] expected";
            }
            return null;
        };

        /**
         * Creates a C2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_HeartBeat} C2GW_HeartBeat
         */
        C2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_HeartBeat)
                return object;
            var message = new $root.msg.C2GW_HeartBeat();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.test) {
                if (!Array.isArray(object.test))
                    throw TypeError(".msg.C2GW_HeartBeat.test: array expected");
                message.test = [];
                for (var i = 0; i < object.test.length; ++i)
                    message.test[i] = String(object.test[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_HeartBeat
         * @static
         * @param {msg.C2GW_HeartBeat} message C2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_HeartBeat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.test = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.test && message.test.length) {
                object.test = [];
                for (var j = 0; j < message.test.length; ++j)
                    object.test[j] = message.test[j];
            }
            return object;
        };

        /**
         * Converts this C2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.C2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_HeartBeat;
    })();

    msg.GW2C_HeartBeat = (function() {

        /**
         * Properties of a GW2C_HeartBeat.
         * @memberof msg
         * @interface IGW2C_HeartBeat
         * @property {number|Long|null} [uid] GW2C_HeartBeat uid
         * @property {number|Long|null} [time] GW2C_HeartBeat time
         * @property {Array.<string>|null} [test] GW2C_HeartBeat test
         */

        /**
         * Constructs a new GW2C_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2C_HeartBeat.
         * @implements IGW2C_HeartBeat
         * @constructor
         * @param {msg.IGW2C_HeartBeat=} [properties] Properties to set
         */
        function GW2C_HeartBeat(properties) {
            this.test = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_HeartBeat uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_HeartBeat time.
         * @member {number|Long} time
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2C_HeartBeat test.
         * @member {Array.<string>} test
         * @memberof msg.GW2C_HeartBeat
         * @instance
         */
        GW2C_HeartBeat.prototype.test = $util.emptyArray;

        /**
         * Creates a new GW2C_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat instance
         */
        GW2C_HeartBeat.create = function create(properties) {
            return new GW2C_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2C_HeartBeat message. Does not implicitly {@link msg.GW2C_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat} message GW2C_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.uid);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
            if (message.test != null && message.test.length)
                for (var i = 0; i < message.test.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.test[i]);
            return writer;
        };

        /**
         * Encodes the specified GW2C_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2C_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.IGW2C_HeartBeat} message GW2C_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.int64();
                    break;
                case 2:
                    message.time = reader.int64();
                    break;
                case 3:
                    if (!(message.test && message.test.length))
                        message.test = [];
                    message.test.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_HeartBeat message.
         * @function verify
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.test != null && message.hasOwnProperty("test")) {
                if (!Array.isArray(message.test))
                    return "test: array expected";
                for (var i = 0; i < message.test.length; ++i)
                    if (!$util.isString(message.test[i]))
                        return "test: string[] expected";
            }
            return null;
        };

        /**
         * Creates a GW2C_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_HeartBeat} GW2C_HeartBeat
         */
        GW2C_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_HeartBeat)
                return object;
            var message = new $root.msg.GW2C_HeartBeat();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.test) {
                if (!Array.isArray(object.test))
                    throw TypeError(".msg.GW2C_HeartBeat.test: array expected");
                message.test = [];
                for (var i = 0; i < object.test.length; ++i)
                    message.test[i] = String(object.test[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_HeartBeat
         * @static
         * @param {msg.GW2C_HeartBeat} message GW2C_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_HeartBeat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.test = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.test && message.test.length) {
                object.test = [];
                for (var j = 0; j < message.test.length; ++j)
                    object.test[j] = message.test[j];
            }
            return object;
        };

        /**
         * Converts this GW2C_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2C_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_HeartBeat;
    })();

    msg.C2GW_ReqStartGame = (function() {

        /**
         * Properties of a C2GW_ReqStartGame.
         * @memberof msg
         * @interface IC2GW_ReqStartGame
         * @property {number|null} [gamekind] C2GW_ReqStartGame gamekind
         */

        /**
         * Constructs a new C2GW_ReqStartGame.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqStartGame.
         * @implements IC2GW_ReqStartGame
         * @constructor
         * @param {msg.IC2GW_ReqStartGame=} [properties] Properties to set
         */
        function C2GW_ReqStartGame(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqStartGame gamekind.
         * @member {number} gamekind
         * @memberof msg.C2GW_ReqStartGame
         * @instance
         */
        C2GW_ReqStartGame.prototype.gamekind = 0;

        /**
         * Creates a new C2GW_ReqStartGame instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.IC2GW_ReqStartGame=} [properties] Properties to set
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame instance
         */
        C2GW_ReqStartGame.create = function create(properties) {
            return new C2GW_ReqStartGame(properties);
        };

        /**
         * Encodes the specified C2GW_ReqStartGame message. Does not implicitly {@link msg.C2GW_ReqStartGame.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.IC2GW_ReqStartGame} message C2GW_ReqStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqStartGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gamekind);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqStartGame message, length delimited. Does not implicitly {@link msg.C2GW_ReqStartGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.IC2GW_ReqStartGame} message C2GW_ReqStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqStartGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqStartGame message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqStartGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqStartGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gamekind = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqStartGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqStartGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqStartGame message.
         * @function verify
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqStartGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqStartGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqStartGame} C2GW_ReqStartGame
         */
        C2GW_ReqStartGame.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqStartGame)
                return object;
            var message = new $root.msg.C2GW_ReqStartGame();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqStartGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqStartGame
         * @static
         * @param {msg.C2GW_ReqStartGame} message C2GW_ReqStartGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqStartGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gamekind = 0;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            return object;
        };

        /**
         * Converts this C2GW_ReqStartGame to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqStartGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqStartGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqStartGame;
    })();

    msg.GW2C_RetStartGame = (function() {

        /**
         * Properties of a GW2C_RetStartGame.
         * @memberof msg
         * @interface IGW2C_RetStartGame
         * @property {string|null} [errcode] GW2C_RetStartGame errcode
         * @property {number|Long|null} [roomid] GW2C_RetStartGame roomid
         */

        /**
         * Constructs a new GW2C_RetStartGame.
         * @memberof msg
         * @classdesc Represents a GW2C_RetStartGame.
         * @implements IGW2C_RetStartGame
         * @constructor
         * @param {msg.IGW2C_RetStartGame=} [properties] Properties to set
         */
        function GW2C_RetStartGame(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetStartGame errcode.
         * @member {string} errcode
         * @memberof msg.GW2C_RetStartGame
         * @instance
         */
        GW2C_RetStartGame.prototype.errcode = "";

        /**
         * GW2C_RetStartGame roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2C_RetStartGame
         * @instance
         */
        GW2C_RetStartGame.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GW2C_RetStartGame instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.IGW2C_RetStartGame=} [properties] Properties to set
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame instance
         */
        GW2C_RetStartGame.create = function create(properties) {
            return new GW2C_RetStartGame(properties);
        };

        /**
         * Encodes the specified GW2C_RetStartGame message. Does not implicitly {@link msg.GW2C_RetStartGame.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.IGW2C_RetStartGame} message GW2C_RetStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetStartGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetStartGame message, length delimited. Does not implicitly {@link msg.GW2C_RetStartGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.IGW2C_RetStartGame} message GW2C_RetStartGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetStartGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetStartGame message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetStartGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetStartGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetStartGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetStartGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetStartGame message.
         * @function verify
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetStartGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetStartGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetStartGame} GW2C_RetStartGame
         */
        GW2C_RetStartGame.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetStartGame)
                return object;
            var message = new $root.msg.GW2C_RetStartGame();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetStartGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetStartGame
         * @static
         * @param {msg.GW2C_RetStartGame} message GW2C_RetStartGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetStartGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this GW2C_RetStartGame to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetStartGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetStartGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetStartGame;
    })();

    msg.GW2C_Ret7DayReward = (function() {

        /**
         * Properties of a GW2C_Ret7DayReward.
         * @memberof msg
         * @interface IGW2C_Ret7DayReward
         * @property {number|null} [day] GW2C_Ret7DayReward day
         */

        /**
         * Constructs a new GW2C_Ret7DayReward.
         * @memberof msg
         * @classdesc Represents a GW2C_Ret7DayReward.
         * @implements IGW2C_Ret7DayReward
         * @constructor
         * @param {msg.IGW2C_Ret7DayReward=} [properties] Properties to set
         */
        function GW2C_Ret7DayReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_Ret7DayReward day.
         * @member {number} day
         * @memberof msg.GW2C_Ret7DayReward
         * @instance
         */
        GW2C_Ret7DayReward.prototype.day = 0;

        /**
         * Creates a new GW2C_Ret7DayReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward=} [properties] Properties to set
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward instance
         */
        GW2C_Ret7DayReward.create = function create(properties) {
            return new GW2C_Ret7DayReward(properties);
        };

        /**
         * Encodes the specified GW2C_Ret7DayReward message. Does not implicitly {@link msg.GW2C_Ret7DayReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward} message GW2C_Ret7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_Ret7DayReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.day != null && message.hasOwnProperty("day"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.day);
            return writer;
        };

        /**
         * Encodes the specified GW2C_Ret7DayReward message, length delimited. Does not implicitly {@link msg.GW2C_Ret7DayReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.IGW2C_Ret7DayReward} message GW2C_Ret7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_Ret7DayReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_Ret7DayReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_Ret7DayReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_Ret7DayReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.day = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_Ret7DayReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_Ret7DayReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_Ret7DayReward message.
         * @function verify
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_Ret7DayReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.day != null && message.hasOwnProperty("day"))
                if (!$util.isInteger(message.day))
                    return "day: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_Ret7DayReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_Ret7DayReward} GW2C_Ret7DayReward
         */
        GW2C_Ret7DayReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_Ret7DayReward)
                return object;
            var message = new $root.msg.GW2C_Ret7DayReward();
            if (object.day != null)
                message.day = object.day >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_Ret7DayReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_Ret7DayReward
         * @static
         * @param {msg.GW2C_Ret7DayReward} message GW2C_Ret7DayReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_Ret7DayReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.day = 0;
            if (message.day != null && message.hasOwnProperty("day"))
                object.day = message.day;
            return object;
        };

        /**
         * Converts this GW2C_Ret7DayReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_Ret7DayReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_Ret7DayReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_Ret7DayReward;
    })();

    msg.C2GW_Get7DayReward = (function() {

        /**
         * Properties of a C2GW_Get7DayReward.
         * @memberof msg
         * @interface IC2GW_Get7DayReward
         */

        /**
         * Constructs a new C2GW_Get7DayReward.
         * @memberof msg
         * @classdesc Represents a C2GW_Get7DayReward.
         * @implements IC2GW_Get7DayReward
         * @constructor
         * @param {msg.IC2GW_Get7DayReward=} [properties] Properties to set
         */
        function C2GW_Get7DayReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_Get7DayReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward=} [properties] Properties to set
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward instance
         */
        C2GW_Get7DayReward.create = function create(properties) {
            return new C2GW_Get7DayReward(properties);
        };

        /**
         * Encodes the specified C2GW_Get7DayReward message. Does not implicitly {@link msg.C2GW_Get7DayReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward} message C2GW_Get7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_Get7DayReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_Get7DayReward message, length delimited. Does not implicitly {@link msg.C2GW_Get7DayReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.IC2GW_Get7DayReward} message C2GW_Get7DayReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_Get7DayReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_Get7DayReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_Get7DayReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_Get7DayReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_Get7DayReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_Get7DayReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_Get7DayReward message.
         * @function verify
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_Get7DayReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_Get7DayReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_Get7DayReward} C2GW_Get7DayReward
         */
        C2GW_Get7DayReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_Get7DayReward)
                return object;
            return new $root.msg.C2GW_Get7DayReward();
        };

        /**
         * Creates a plain object from a C2GW_Get7DayReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_Get7DayReward
         * @static
         * @param {msg.C2GW_Get7DayReward} message C2GW_Get7DayReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_Get7DayReward.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_Get7DayReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_Get7DayReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_Get7DayReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_Get7DayReward;
    })();

    msg.C2GW_SendWechatAuthCode = (function() {

        /**
         * Properties of a C2GW_SendWechatAuthCode.
         * @memberof msg
         * @interface IC2GW_SendWechatAuthCode
         * @property {string|null} [code] C2GW_SendWechatAuthCode code
         */

        /**
         * Constructs a new C2GW_SendWechatAuthCode.
         * @memberof msg
         * @classdesc Represents a C2GW_SendWechatAuthCode.
         * @implements IC2GW_SendWechatAuthCode
         * @constructor
         * @param {msg.IC2GW_SendWechatAuthCode=} [properties] Properties to set
         */
        function C2GW_SendWechatAuthCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_SendWechatAuthCode code.
         * @member {string} code
         * @memberof msg.C2GW_SendWechatAuthCode
         * @instance
         */
        C2GW_SendWechatAuthCode.prototype.code = "";

        /**
         * Creates a new C2GW_SendWechatAuthCode instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode=} [properties] Properties to set
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode instance
         */
        C2GW_SendWechatAuthCode.create = function create(properties) {
            return new C2GW_SendWechatAuthCode(properties);
        };

        /**
         * Encodes the specified C2GW_SendWechatAuthCode message. Does not implicitly {@link msg.C2GW_SendWechatAuthCode.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendWechatAuthCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified C2GW_SendWechatAuthCode message, length delimited. Does not implicitly {@link msg.C2GW_SendWechatAuthCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.IC2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendWechatAuthCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_SendWechatAuthCode message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendWechatAuthCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_SendWechatAuthCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_SendWechatAuthCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendWechatAuthCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_SendWechatAuthCode message.
         * @function verify
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_SendWechatAuthCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            return null;
        };

        /**
         * Creates a C2GW_SendWechatAuthCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_SendWechatAuthCode} C2GW_SendWechatAuthCode
         */
        C2GW_SendWechatAuthCode.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_SendWechatAuthCode)
                return object;
            var message = new $root.msg.C2GW_SendWechatAuthCode();
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_SendWechatAuthCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_SendWechatAuthCode
         * @static
         * @param {msg.C2GW_SendWechatAuthCode} message C2GW_SendWechatAuthCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_SendWechatAuthCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.code = "";
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this C2GW_SendWechatAuthCode to JSON.
         * @function toJSON
         * @memberof msg.C2GW_SendWechatAuthCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_SendWechatAuthCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_SendWechatAuthCode;
    })();

    msg.C2GW_GoldExchange = (function() {

        /**
         * Properties of a C2GW_GoldExchange.
         * @memberof msg
         * @interface IC2GW_GoldExchange
         * @property {number|Long|null} [userid] C2GW_GoldExchange userid
         * @property {number|null} [diamonds] C2GW_GoldExchange diamonds
         */

        /**
         * Constructs a new C2GW_GoldExchange.
         * @memberof msg
         * @classdesc Represents a C2GW_GoldExchange.
         * @implements IC2GW_GoldExchange
         * @constructor
         * @param {msg.IC2GW_GoldExchange=} [properties] Properties to set
         */
        function C2GW_GoldExchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_GoldExchange userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_GoldExchange
         * @instance
         */
        C2GW_GoldExchange.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_GoldExchange diamonds.
         * @member {number} diamonds
         * @memberof msg.C2GW_GoldExchange
         * @instance
         */
        C2GW_GoldExchange.prototype.diamonds = 0;

        /**
         * Creates a new C2GW_GoldExchange instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.IC2GW_GoldExchange=} [properties] Properties to set
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange instance
         */
        C2GW_GoldExchange.create = function create(properties) {
            return new C2GW_GoldExchange(properties);
        };

        /**
         * Encodes the specified C2GW_GoldExchange message. Does not implicitly {@link msg.C2GW_GoldExchange.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.IC2GW_GoldExchange} message C2GW_GoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GoldExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.diamonds != null && message.hasOwnProperty("diamonds"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.diamonds);
            return writer;
        };

        /**
         * Encodes the specified C2GW_GoldExchange message, length delimited. Does not implicitly {@link msg.C2GW_GoldExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.IC2GW_GoldExchange} message C2GW_GoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GoldExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_GoldExchange message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GoldExchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_GoldExchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.diamonds = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_GoldExchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GoldExchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_GoldExchange message.
         * @function verify
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_GoldExchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.diamonds != null && message.hasOwnProperty("diamonds"))
                if (!$util.isInteger(message.diamonds))
                    return "diamonds: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_GoldExchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_GoldExchange} C2GW_GoldExchange
         */
        C2GW_GoldExchange.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_GoldExchange)
                return object;
            var message = new $root.msg.C2GW_GoldExchange();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.diamonds != null)
                message.diamonds = object.diamonds >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_GoldExchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_GoldExchange
         * @static
         * @param {msg.C2GW_GoldExchange} message C2GW_GoldExchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_GoldExchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.diamonds = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.diamonds != null && message.hasOwnProperty("diamonds"))
                object.diamonds = message.diamonds;
            return object;
        };

        /**
         * Converts this C2GW_GoldExchange to JSON.
         * @function toJSON
         * @memberof msg.C2GW_GoldExchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_GoldExchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_GoldExchange;
    })();

    msg.GW2C_RetGoldExchange = (function() {

        /**
         * Properties of a GW2C_RetGoldExchange.
         * @memberof msg
         * @interface IGW2C_RetGoldExchange
         * @property {number|null} [gold] GW2C_RetGoldExchange gold
         */

        /**
         * Constructs a new GW2C_RetGoldExchange.
         * @memberof msg
         * @classdesc Represents a GW2C_RetGoldExchange.
         * @implements IGW2C_RetGoldExchange
         * @constructor
         * @param {msg.IGW2C_RetGoldExchange=} [properties] Properties to set
         */
        function GW2C_RetGoldExchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetGoldExchange gold.
         * @member {number} gold
         * @memberof msg.GW2C_RetGoldExchange
         * @instance
         */
        GW2C_RetGoldExchange.prototype.gold = 0;

        /**
         * Creates a new GW2C_RetGoldExchange instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.IGW2C_RetGoldExchange=} [properties] Properties to set
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange instance
         */
        GW2C_RetGoldExchange.create = function create(properties) {
            return new GW2C_RetGoldExchange(properties);
        };

        /**
         * Encodes the specified GW2C_RetGoldExchange message. Does not implicitly {@link msg.GW2C_RetGoldExchange.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.IGW2C_RetGoldExchange} message GW2C_RetGoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGoldExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gold != null && message.hasOwnProperty("gold"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetGoldExchange message, length delimited. Does not implicitly {@link msg.GW2C_RetGoldExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.IGW2C_RetGoldExchange} message GW2C_RetGoldExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGoldExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetGoldExchange message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGoldExchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetGoldExchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetGoldExchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGoldExchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetGoldExchange message.
         * @function verify
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetGoldExchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_RetGoldExchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetGoldExchange} GW2C_RetGoldExchange
         */
        GW2C_RetGoldExchange.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetGoldExchange)
                return object;
            var message = new $root.msg.GW2C_RetGoldExchange();
            if (object.gold != null)
                message.gold = object.gold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetGoldExchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetGoldExchange
         * @static
         * @param {msg.GW2C_RetGoldExchange} message GW2C_RetGoldExchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetGoldExchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gold = 0;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this GW2C_RetGoldExchange to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetGoldExchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetGoldExchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetGoldExchange;
    })();

    msg.C2GW_BuyClothes = (function() {

        /**
         * Properties of a C2GW_BuyClothes.
         * @memberof msg
         * @interface IC2GW_BuyClothes
         * @property {Array.<number>|null} [itemList] C2GW_BuyClothes itemList
         */

        /**
         * Constructs a new C2GW_BuyClothes.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyClothes.
         * @implements IC2GW_BuyClothes
         * @constructor
         * @param {msg.IC2GW_BuyClothes=} [properties] Properties to set
         */
        function C2GW_BuyClothes(properties) {
            this.itemList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyClothes itemList.
         * @member {Array.<number>} itemList
         * @memberof msg.C2GW_BuyClothes
         * @instance
         */
        C2GW_BuyClothes.prototype.itemList = $util.emptyArray;

        /**
         * Creates a new C2GW_BuyClothes instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {msg.IC2GW_BuyClothes=} [properties] Properties to set
         * @returns {msg.C2GW_BuyClothes} C2GW_BuyClothes instance
         */
        C2GW_BuyClothes.create = function create(properties) {
            return new C2GW_BuyClothes(properties);
        };

        /**
         * Encodes the specified C2GW_BuyClothes message. Does not implicitly {@link msg.C2GW_BuyClothes.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {msg.IC2GW_BuyClothes} message C2GW_BuyClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyClothes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemList != null && message.itemList.length)
                for (var i = 0; i < message.itemList.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemList[i]);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyClothes message, length delimited. Does not implicitly {@link msg.C2GW_BuyClothes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {msg.IC2GW_BuyClothes} message C2GW_BuyClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyClothes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyClothes message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyClothes} C2GW_BuyClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyClothes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyClothes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.itemList && message.itemList.length))
                        message.itemList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.itemList.push(reader.int32());
                    } else
                        message.itemList.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyClothes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyClothes} C2GW_BuyClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyClothes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyClothes message.
         * @function verify
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyClothes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemList != null && message.hasOwnProperty("itemList")) {
                if (!Array.isArray(message.itemList))
                    return "itemList: array expected";
                for (var i = 0; i < message.itemList.length; ++i)
                    if (!$util.isInteger(message.itemList[i]))
                        return "itemList: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a C2GW_BuyClothes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyClothes} C2GW_BuyClothes
         */
        C2GW_BuyClothes.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyClothes)
                return object;
            var message = new $root.msg.C2GW_BuyClothes();
            if (object.itemList) {
                if (!Array.isArray(object.itemList))
                    throw TypeError(".msg.C2GW_BuyClothes.itemList: array expected");
                message.itemList = [];
                for (var i = 0; i < object.itemList.length; ++i)
                    message.itemList[i] = object.itemList[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyClothes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyClothes
         * @static
         * @param {msg.C2GW_BuyClothes} message C2GW_BuyClothes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyClothes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.itemList = [];
            if (message.itemList && message.itemList.length) {
                object.itemList = [];
                for (var j = 0; j < message.itemList.length; ++j)
                    object.itemList[j] = message.itemList[j];
            }
            return object;
        };

        /**
         * Converts this C2GW_BuyClothes to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyClothes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyClothes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyClothes;
    })();

    msg.C2GW_DressClothes = (function() {

        /**
         * Properties of a C2GW_DressClothes.
         * @memberof msg
         * @interface IC2GW_DressClothes
         * @property {number|Long|null} [id] C2GW_DressClothes id
         * @property {number|null} [pos] C2GW_DressClothes pos
         * @property {number|null} [itemid] C2GW_DressClothes itemid
         */

        /**
         * Constructs a new C2GW_DressClothes.
         * @memberof msg
         * @classdesc Represents a C2GW_DressClothes.
         * @implements IC2GW_DressClothes
         * @constructor
         * @param {msg.IC2GW_DressClothes=} [properties] Properties to set
         */
        function C2GW_DressClothes(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_DressClothes id.
         * @member {number|Long} id
         * @memberof msg.C2GW_DressClothes
         * @instance
         */
        C2GW_DressClothes.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_DressClothes pos.
         * @member {number} pos
         * @memberof msg.C2GW_DressClothes
         * @instance
         */
        C2GW_DressClothes.prototype.pos = 0;

        /**
         * C2GW_DressClothes itemid.
         * @member {number} itemid
         * @memberof msg.C2GW_DressClothes
         * @instance
         */
        C2GW_DressClothes.prototype.itemid = 0;

        /**
         * Creates a new C2GW_DressClothes instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {msg.IC2GW_DressClothes=} [properties] Properties to set
         * @returns {msg.C2GW_DressClothes} C2GW_DressClothes instance
         */
        C2GW_DressClothes.create = function create(properties) {
            return new C2GW_DressClothes(properties);
        };

        /**
         * Encodes the specified C2GW_DressClothes message. Does not implicitly {@link msg.C2GW_DressClothes.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {msg.IC2GW_DressClothes} message C2GW_DressClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DressClothes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.pos != null && message.hasOwnProperty("pos"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pos);
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.itemid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_DressClothes message, length delimited. Does not implicitly {@link msg.C2GW_DressClothes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {msg.IC2GW_DressClothes} message C2GW_DressClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DressClothes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_DressClothes message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_DressClothes} C2GW_DressClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DressClothes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_DressClothes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.pos = reader.int32();
                    break;
                case 3:
                    message.itemid = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_DressClothes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_DressClothes} C2GW_DressClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DressClothes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_DressClothes message.
         * @function verify
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_DressClothes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_DressClothes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_DressClothes} C2GW_DressClothes
         */
        C2GW_DressClothes.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_DressClothes)
                return object;
            var message = new $root.msg.C2GW_DressClothes();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.pos != null)
                message.pos = object.pos | 0;
            if (object.itemid != null)
                message.itemid = object.itemid | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_DressClothes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_DressClothes
         * @static
         * @param {msg.C2GW_DressClothes} message C2GW_DressClothes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_DressClothes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.pos = 0;
                object.itemid = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            return object;
        };

        /**
         * Converts this C2GW_DressClothes to JSON.
         * @function toJSON
         * @memberof msg.C2GW_DressClothes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_DressClothes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_DressClothes;
    })();

    msg.C2GW_UnDressClothes = (function() {

        /**
         * Properties of a C2GW_UnDressClothes.
         * @memberof msg
         * @interface IC2GW_UnDressClothes
         * @property {number|Long|null} [id] C2GW_UnDressClothes id
         * @property {number|null} [pos] C2GW_UnDressClothes pos
         */

        /**
         * Constructs a new C2GW_UnDressClothes.
         * @memberof msg
         * @classdesc Represents a C2GW_UnDressClothes.
         * @implements IC2GW_UnDressClothes
         * @constructor
         * @param {msg.IC2GW_UnDressClothes=} [properties] Properties to set
         */
        function C2GW_UnDressClothes(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_UnDressClothes id.
         * @member {number|Long} id
         * @memberof msg.C2GW_UnDressClothes
         * @instance
         */
        C2GW_UnDressClothes.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_UnDressClothes pos.
         * @member {number} pos
         * @memberof msg.C2GW_UnDressClothes
         * @instance
         */
        C2GW_UnDressClothes.prototype.pos = 0;

        /**
         * Creates a new C2GW_UnDressClothes instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {msg.IC2GW_UnDressClothes=} [properties] Properties to set
         * @returns {msg.C2GW_UnDressClothes} C2GW_UnDressClothes instance
         */
        C2GW_UnDressClothes.create = function create(properties) {
            return new C2GW_UnDressClothes(properties);
        };

        /**
         * Encodes the specified C2GW_UnDressClothes message. Does not implicitly {@link msg.C2GW_UnDressClothes.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {msg.IC2GW_UnDressClothes} message C2GW_UnDressClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UnDressClothes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.pos != null && message.hasOwnProperty("pos"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pos);
            return writer;
        };

        /**
         * Encodes the specified C2GW_UnDressClothes message, length delimited. Does not implicitly {@link msg.C2GW_UnDressClothes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {msg.IC2GW_UnDressClothes} message C2GW_UnDressClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_UnDressClothes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_UnDressClothes message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_UnDressClothes} C2GW_UnDressClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UnDressClothes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_UnDressClothes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.pos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_UnDressClothes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_UnDressClothes} C2GW_UnDressClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_UnDressClothes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_UnDressClothes message.
         * @function verify
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_UnDressClothes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_UnDressClothes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_UnDressClothes} C2GW_UnDressClothes
         */
        C2GW_UnDressClothes.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_UnDressClothes)
                return object;
            var message = new $root.msg.C2GW_UnDressClothes();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.pos != null)
                message.pos = object.pos | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_UnDressClothes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_UnDressClothes
         * @static
         * @param {msg.C2GW_UnDressClothes} message C2GW_UnDressClothes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_UnDressClothes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.pos = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            return object;
        };

        /**
         * Converts this C2GW_UnDressClothes to JSON.
         * @function toJSON
         * @memberof msg.C2GW_UnDressClothes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_UnDressClothes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_UnDressClothes;
    })();

    msg.GW2C_SendHouseMaidInfo = (function() {

        /**
         * Properties of a GW2C_SendHouseMaidInfo.
         * @memberof msg
         * @interface IGW2C_SendHouseMaidInfo
         * @property {number|Long|null} [houseid] GW2C_SendHouseMaidInfo houseid
         * @property {Array.<msg.IHouseMaidData>|null} [maids] GW2C_SendHouseMaidInfo maids
         */

        /**
         * Constructs a new GW2C_SendHouseMaidInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendHouseMaidInfo.
         * @implements IGW2C_SendHouseMaidInfo
         * @constructor
         * @param {msg.IGW2C_SendHouseMaidInfo=} [properties] Properties to set
         */
        function GW2C_SendHouseMaidInfo(properties) {
            this.maids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendHouseMaidInfo houseid.
         * @member {number|Long} houseid
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @instance
         */
        GW2C_SendHouseMaidInfo.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_SendHouseMaidInfo maids.
         * @member {Array.<msg.IHouseMaidData>} maids
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @instance
         */
        GW2C_SendHouseMaidInfo.prototype.maids = $util.emptyArray;

        /**
         * Creates a new GW2C_SendHouseMaidInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {msg.IGW2C_SendHouseMaidInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendHouseMaidInfo} GW2C_SendHouseMaidInfo instance
         */
        GW2C_SendHouseMaidInfo.create = function create(properties) {
            return new GW2C_SendHouseMaidInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendHouseMaidInfo message. Does not implicitly {@link msg.GW2C_SendHouseMaidInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {msg.IGW2C_SendHouseMaidInfo} message GW2C_SendHouseMaidInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendHouseMaidInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.maids != null && message.maids.length)
                for (var i = 0; i < message.maids.length; ++i)
                    $root.msg.HouseMaidData.encode(message.maids[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendHouseMaidInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendHouseMaidInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {msg.IGW2C_SendHouseMaidInfo} message GW2C_SendHouseMaidInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendHouseMaidInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendHouseMaidInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendHouseMaidInfo} GW2C_SendHouseMaidInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendHouseMaidInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendHouseMaidInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    if (!(message.maids && message.maids.length))
                        message.maids = [];
                    message.maids.push($root.msg.HouseMaidData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendHouseMaidInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendHouseMaidInfo} GW2C_SendHouseMaidInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendHouseMaidInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendHouseMaidInfo message.
         * @function verify
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendHouseMaidInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.maids != null && message.hasOwnProperty("maids")) {
                if (!Array.isArray(message.maids))
                    return "maids: array expected";
                for (var i = 0; i < message.maids.length; ++i) {
                    var error = $root.msg.HouseMaidData.verify(message.maids[i]);
                    if (error)
                        return "maids." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendHouseMaidInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendHouseMaidInfo} GW2C_SendHouseMaidInfo
         */
        GW2C_SendHouseMaidInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendHouseMaidInfo)
                return object;
            var message = new $root.msg.GW2C_SendHouseMaidInfo();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.maids) {
                if (!Array.isArray(object.maids))
                    throw TypeError(".msg.GW2C_SendHouseMaidInfo.maids: array expected");
                message.maids = [];
                for (var i = 0; i < object.maids.length; ++i) {
                    if (typeof object.maids[i] !== "object")
                        throw TypeError(".msg.GW2C_SendHouseMaidInfo.maids: object expected");
                    message.maids[i] = $root.msg.HouseMaidData.fromObject(object.maids[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendHouseMaidInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @static
         * @param {msg.GW2C_SendHouseMaidInfo} message GW2C_SendHouseMaidInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendHouseMaidInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.maids = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.maids && message.maids.length) {
                object.maids = [];
                for (var j = 0; j < message.maids.length; ++j)
                    object.maids[j] = $root.msg.HouseMaidData.toObject(message.maids[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendHouseMaidInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendHouseMaidInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendHouseMaidInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendHouseMaidInfo;
    })();

    msg.GW2C_SendUserMaidInfo = (function() {

        /**
         * Properties of a GW2C_SendUserMaidInfo.
         * @memberof msg
         * @interface IGW2C_SendUserMaidInfo
         * @property {number|Long|null} [userid] GW2C_SendUserMaidInfo userid
         * @property {Array.<msg.IHouseMaidData>|null} [maids] GW2C_SendUserMaidInfo maids
         */

        /**
         * Constructs a new GW2C_SendUserMaidInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendUserMaidInfo.
         * @implements IGW2C_SendUserMaidInfo
         * @constructor
         * @param {msg.IGW2C_SendUserMaidInfo=} [properties] Properties to set
         */
        function GW2C_SendUserMaidInfo(properties) {
            this.maids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendUserMaidInfo userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_SendUserMaidInfo
         * @instance
         */
        GW2C_SendUserMaidInfo.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_SendUserMaidInfo maids.
         * @member {Array.<msg.IHouseMaidData>} maids
         * @memberof msg.GW2C_SendUserMaidInfo
         * @instance
         */
        GW2C_SendUserMaidInfo.prototype.maids = $util.emptyArray;

        /**
         * Creates a new GW2C_SendUserMaidInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {msg.IGW2C_SendUserMaidInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendUserMaidInfo} GW2C_SendUserMaidInfo instance
         */
        GW2C_SendUserMaidInfo.create = function create(properties) {
            return new GW2C_SendUserMaidInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendUserMaidInfo message. Does not implicitly {@link msg.GW2C_SendUserMaidInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {msg.IGW2C_SendUserMaidInfo} message GW2C_SendUserMaidInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserMaidInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.maids != null && message.maids.length)
                for (var i = 0; i < message.maids.length; ++i)
                    $root.msg.HouseMaidData.encode(message.maids[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendUserMaidInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendUserMaidInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {msg.IGW2C_SendUserMaidInfo} message GW2C_SendUserMaidInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendUserMaidInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendUserMaidInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendUserMaidInfo} GW2C_SendUserMaidInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserMaidInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendUserMaidInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    if (!(message.maids && message.maids.length))
                        message.maids = [];
                    message.maids.push($root.msg.HouseMaidData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendUserMaidInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendUserMaidInfo} GW2C_SendUserMaidInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendUserMaidInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendUserMaidInfo message.
         * @function verify
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendUserMaidInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.maids != null && message.hasOwnProperty("maids")) {
                if (!Array.isArray(message.maids))
                    return "maids: array expected";
                for (var i = 0; i < message.maids.length; ++i) {
                    var error = $root.msg.HouseMaidData.verify(message.maids[i]);
                    if (error)
                        return "maids." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendUserMaidInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendUserMaidInfo} GW2C_SendUserMaidInfo
         */
        GW2C_SendUserMaidInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendUserMaidInfo)
                return object;
            var message = new $root.msg.GW2C_SendUserMaidInfo();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.maids) {
                if (!Array.isArray(object.maids))
                    throw TypeError(".msg.GW2C_SendUserMaidInfo.maids: array expected");
                message.maids = [];
                for (var i = 0; i < object.maids.length; ++i) {
                    if (typeof object.maids[i] !== "object")
                        throw TypeError(".msg.GW2C_SendUserMaidInfo.maids: object expected");
                    message.maids[i] = $root.msg.HouseMaidData.fromObject(object.maids[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendUserMaidInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendUserMaidInfo
         * @static
         * @param {msg.GW2C_SendUserMaidInfo} message GW2C_SendUserMaidInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendUserMaidInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.maids = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.maids && message.maids.length) {
                object.maids = [];
                for (var j = 0; j < message.maids.length; ++j)
                    object.maids[j] = $root.msg.HouseMaidData.toObject(message.maids[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendUserMaidInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendUserMaidInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendUserMaidInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendUserMaidInfo;
    })();

    msg.C2GW_MakeClothes = (function() {

        /**
         * Properties of a C2GW_MakeClothes.
         * @memberof msg
         * @interface IC2GW_MakeClothes
         * @property {number|null} [debris] C2GW_MakeClothes debris
         */

        /**
         * Constructs a new C2GW_MakeClothes.
         * @memberof msg
         * @classdesc Represents a C2GW_MakeClothes.
         * @implements IC2GW_MakeClothes
         * @constructor
         * @param {msg.IC2GW_MakeClothes=} [properties] Properties to set
         */
        function C2GW_MakeClothes(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_MakeClothes debris.
         * @member {number} debris
         * @memberof msg.C2GW_MakeClothes
         * @instance
         */
        C2GW_MakeClothes.prototype.debris = 0;

        /**
         * Creates a new C2GW_MakeClothes instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {msg.IC2GW_MakeClothes=} [properties] Properties to set
         * @returns {msg.C2GW_MakeClothes} C2GW_MakeClothes instance
         */
        C2GW_MakeClothes.create = function create(properties) {
            return new C2GW_MakeClothes(properties);
        };

        /**
         * Encodes the specified C2GW_MakeClothes message. Does not implicitly {@link msg.C2GW_MakeClothes.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {msg.IC2GW_MakeClothes} message C2GW_MakeClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_MakeClothes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.debris != null && message.hasOwnProperty("debris"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.debris);
            return writer;
        };

        /**
         * Encodes the specified C2GW_MakeClothes message, length delimited. Does not implicitly {@link msg.C2GW_MakeClothes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {msg.IC2GW_MakeClothes} message C2GW_MakeClothes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_MakeClothes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_MakeClothes message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_MakeClothes} C2GW_MakeClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_MakeClothes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_MakeClothes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.debris = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_MakeClothes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_MakeClothes} C2GW_MakeClothes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_MakeClothes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_MakeClothes message.
         * @function verify
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_MakeClothes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.debris != null && message.hasOwnProperty("debris"))
                if (!$util.isInteger(message.debris))
                    return "debris: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_MakeClothes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_MakeClothes} C2GW_MakeClothes
         */
        C2GW_MakeClothes.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_MakeClothes)
                return object;
            var message = new $root.msg.C2GW_MakeClothes();
            if (object.debris != null)
                message.debris = object.debris >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_MakeClothes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_MakeClothes
         * @static
         * @param {msg.C2GW_MakeClothes} message C2GW_MakeClothes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_MakeClothes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.debris = 0;
            if (message.debris != null && message.hasOwnProperty("debris"))
                object.debris = message.debris;
            return object;
        };

        /**
         * Converts this C2GW_MakeClothes to JSON.
         * @function toJSON
         * @memberof msg.C2GW_MakeClothes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_MakeClothes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_MakeClothes;
    })();

    msg.C2GW_MaidUpgrade = (function() {

        /**
         * Properties of a C2GW_MaidUpgrade.
         * @memberof msg
         * @interface IC2GW_MaidUpgrade
         * @property {number|Long|null} [id] C2GW_MaidUpgrade id
         */

        /**
         * Constructs a new C2GW_MaidUpgrade.
         * @memberof msg
         * @classdesc Represents a C2GW_MaidUpgrade.
         * @implements IC2GW_MaidUpgrade
         * @constructor
         * @param {msg.IC2GW_MaidUpgrade=} [properties] Properties to set
         */
        function C2GW_MaidUpgrade(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_MaidUpgrade id.
         * @member {number|Long} id
         * @memberof msg.C2GW_MaidUpgrade
         * @instance
         */
        C2GW_MaidUpgrade.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_MaidUpgrade instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {msg.IC2GW_MaidUpgrade=} [properties] Properties to set
         * @returns {msg.C2GW_MaidUpgrade} C2GW_MaidUpgrade instance
         */
        C2GW_MaidUpgrade.create = function create(properties) {
            return new C2GW_MaidUpgrade(properties);
        };

        /**
         * Encodes the specified C2GW_MaidUpgrade message. Does not implicitly {@link msg.C2GW_MaidUpgrade.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {msg.IC2GW_MaidUpgrade} message C2GW_MaidUpgrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_MaidUpgrade.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified C2GW_MaidUpgrade message, length delimited. Does not implicitly {@link msg.C2GW_MaidUpgrade.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {msg.IC2GW_MaidUpgrade} message C2GW_MaidUpgrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_MaidUpgrade.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_MaidUpgrade message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_MaidUpgrade} C2GW_MaidUpgrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_MaidUpgrade.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_MaidUpgrade();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_MaidUpgrade message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_MaidUpgrade} C2GW_MaidUpgrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_MaidUpgrade.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_MaidUpgrade message.
         * @function verify
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_MaidUpgrade.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_MaidUpgrade message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_MaidUpgrade} C2GW_MaidUpgrade
         */
        C2GW_MaidUpgrade.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_MaidUpgrade)
                return object;
            var message = new $root.msg.C2GW_MaidUpgrade();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_MaidUpgrade message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_MaidUpgrade
         * @static
         * @param {msg.C2GW_MaidUpgrade} message C2GW_MaidUpgrade
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_MaidUpgrade.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            return object;
        };

        /**
         * Converts this C2GW_MaidUpgrade to JSON.
         * @function toJSON
         * @memberof msg.C2GW_MaidUpgrade
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_MaidUpgrade.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_MaidUpgrade;
    })();

    msg.C2GW_TakeMaidEarning = (function() {

        /**
         * Properties of a C2GW_TakeMaidEarning.
         * @memberof msg
         * @interface IC2GW_TakeMaidEarning
         * @property {number|Long|null} [id] C2GW_TakeMaidEarning id
         */

        /**
         * Constructs a new C2GW_TakeMaidEarning.
         * @memberof msg
         * @classdesc Represents a C2GW_TakeMaidEarning.
         * @implements IC2GW_TakeMaidEarning
         * @constructor
         * @param {msg.IC2GW_TakeMaidEarning=} [properties] Properties to set
         */
        function C2GW_TakeMaidEarning(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TakeMaidEarning id.
         * @member {number|Long} id
         * @memberof msg.C2GW_TakeMaidEarning
         * @instance
         */
        C2GW_TakeMaidEarning.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_TakeMaidEarning instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {msg.IC2GW_TakeMaidEarning=} [properties] Properties to set
         * @returns {msg.C2GW_TakeMaidEarning} C2GW_TakeMaidEarning instance
         */
        C2GW_TakeMaidEarning.create = function create(properties) {
            return new C2GW_TakeMaidEarning(properties);
        };

        /**
         * Encodes the specified C2GW_TakeMaidEarning message. Does not implicitly {@link msg.C2GW_TakeMaidEarning.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {msg.IC2GW_TakeMaidEarning} message C2GW_TakeMaidEarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TakeMaidEarning.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TakeMaidEarning message, length delimited. Does not implicitly {@link msg.C2GW_TakeMaidEarning.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {msg.IC2GW_TakeMaidEarning} message C2GW_TakeMaidEarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TakeMaidEarning.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TakeMaidEarning message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TakeMaidEarning} C2GW_TakeMaidEarning
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TakeMaidEarning.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TakeMaidEarning();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TakeMaidEarning message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TakeMaidEarning} C2GW_TakeMaidEarning
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TakeMaidEarning.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TakeMaidEarning message.
         * @function verify
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TakeMaidEarning.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_TakeMaidEarning message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TakeMaidEarning} C2GW_TakeMaidEarning
         */
        C2GW_TakeMaidEarning.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TakeMaidEarning)
                return object;
            var message = new $root.msg.C2GW_TakeMaidEarning();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TakeMaidEarning message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TakeMaidEarning
         * @static
         * @param {msg.C2GW_TakeMaidEarning} message C2GW_TakeMaidEarning
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TakeMaidEarning.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            return object;
        };

        /**
         * Converts this C2GW_TakeMaidEarning to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TakeMaidEarning
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TakeMaidEarning.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TakeMaidEarning;
    })();

    msg.C2GW_TakeRobMaidEarning = (function() {

        /**
         * Properties of a C2GW_TakeRobMaidEarning.
         * @memberof msg
         * @interface IC2GW_TakeRobMaidEarning
         * @property {number|Long|null} [houseid] C2GW_TakeRobMaidEarning houseid
         * @property {number|Long|null} [id] C2GW_TakeRobMaidEarning id
         */

        /**
         * Constructs a new C2GW_TakeRobMaidEarning.
         * @memberof msg
         * @classdesc Represents a C2GW_TakeRobMaidEarning.
         * @implements IC2GW_TakeRobMaidEarning
         * @constructor
         * @param {msg.IC2GW_TakeRobMaidEarning=} [properties] Properties to set
         */
        function C2GW_TakeRobMaidEarning(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TakeRobMaidEarning houseid.
         * @member {number|Long} houseid
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @instance
         */
        C2GW_TakeRobMaidEarning.prototype.houseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_TakeRobMaidEarning id.
         * @member {number|Long} id
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @instance
         */
        C2GW_TakeRobMaidEarning.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_TakeRobMaidEarning instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {msg.IC2GW_TakeRobMaidEarning=} [properties] Properties to set
         * @returns {msg.C2GW_TakeRobMaidEarning} C2GW_TakeRobMaidEarning instance
         */
        C2GW_TakeRobMaidEarning.create = function create(properties) {
            return new C2GW_TakeRobMaidEarning(properties);
        };

        /**
         * Encodes the specified C2GW_TakeRobMaidEarning message. Does not implicitly {@link msg.C2GW_TakeRobMaidEarning.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {msg.IC2GW_TakeRobMaidEarning} message C2GW_TakeRobMaidEarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TakeRobMaidEarning.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseid);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TakeRobMaidEarning message, length delimited. Does not implicitly {@link msg.C2GW_TakeRobMaidEarning.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {msg.IC2GW_TakeRobMaidEarning} message C2GW_TakeRobMaidEarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TakeRobMaidEarning.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TakeRobMaidEarning message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TakeRobMaidEarning} C2GW_TakeRobMaidEarning
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TakeRobMaidEarning.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TakeRobMaidEarning();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseid = reader.uint64();
                    break;
                case 2:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TakeRobMaidEarning message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TakeRobMaidEarning} C2GW_TakeRobMaidEarning
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TakeRobMaidEarning.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TakeRobMaidEarning message.
         * @function verify
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TakeRobMaidEarning.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (!$util.isInteger(message.houseid) && !(message.houseid && $util.isInteger(message.houseid.low) && $util.isInteger(message.houseid.high)))
                    return "houseid: integer|Long expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_TakeRobMaidEarning message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TakeRobMaidEarning} C2GW_TakeRobMaidEarning
         */
        C2GW_TakeRobMaidEarning.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TakeRobMaidEarning)
                return object;
            var message = new $root.msg.C2GW_TakeRobMaidEarning();
            if (object.houseid != null)
                if ($util.Long)
                    (message.houseid = $util.Long.fromValue(object.houseid)).unsigned = true;
                else if (typeof object.houseid === "string")
                    message.houseid = parseInt(object.houseid, 10);
                else if (typeof object.houseid === "number")
                    message.houseid = object.houseid;
                else if (typeof object.houseid === "object")
                    message.houseid = new $util.LongBits(object.houseid.low >>> 0, object.houseid.high >>> 0).toNumber(true);
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TakeRobMaidEarning message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @static
         * @param {msg.C2GW_TakeRobMaidEarning} message C2GW_TakeRobMaidEarning
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TakeRobMaidEarning.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            }
            if (message.houseid != null && message.hasOwnProperty("houseid"))
                if (typeof message.houseid === "number")
                    object.houseid = options.longs === String ? String(message.houseid) : message.houseid;
                else
                    object.houseid = options.longs === String ? $util.Long.prototype.toString.call(message.houseid) : options.longs === Number ? new $util.LongBits(message.houseid.low >>> 0, message.houseid.high >>> 0).toNumber(true) : message.houseid;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            return object;
        };

        /**
         * Converts this C2GW_TakeRobMaidEarning to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TakeRobMaidEarning
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TakeRobMaidEarning.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TakeRobMaidEarning;
    })();

    msg.C2GW_RobMaid = (function() {

        /**
         * Properties of a C2GW_RobMaid.
         * @memberof msg
         * @interface IC2GW_RobMaid
         * @property {number|Long|null} [id] C2GW_RobMaid id
         * @property {number|Long|null} [dropto] C2GW_RobMaid dropto
         */

        /**
         * Constructs a new C2GW_RobMaid.
         * @memberof msg
         * @classdesc Represents a C2GW_RobMaid.
         * @implements IC2GW_RobMaid
         * @constructor
         * @param {msg.IC2GW_RobMaid=} [properties] Properties to set
         */
        function C2GW_RobMaid(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_RobMaid id.
         * @member {number|Long} id
         * @memberof msg.C2GW_RobMaid
         * @instance
         */
        C2GW_RobMaid.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_RobMaid dropto.
         * @member {number|Long} dropto
         * @memberof msg.C2GW_RobMaid
         * @instance
         */
        C2GW_RobMaid.prototype.dropto = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_RobMaid instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {msg.IC2GW_RobMaid=} [properties] Properties to set
         * @returns {msg.C2GW_RobMaid} C2GW_RobMaid instance
         */
        C2GW_RobMaid.create = function create(properties) {
            return new C2GW_RobMaid(properties);
        };

        /**
         * Encodes the specified C2GW_RobMaid message. Does not implicitly {@link msg.C2GW_RobMaid.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {msg.IC2GW_RobMaid} message C2GW_RobMaid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_RobMaid.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.dropto != null && message.hasOwnProperty("dropto"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.dropto);
            return writer;
        };

        /**
         * Encodes the specified C2GW_RobMaid message, length delimited. Does not implicitly {@link msg.C2GW_RobMaid.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {msg.IC2GW_RobMaid} message C2GW_RobMaid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_RobMaid.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_RobMaid message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_RobMaid} C2GW_RobMaid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_RobMaid.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_RobMaid();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.dropto = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_RobMaid message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_RobMaid} C2GW_RobMaid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_RobMaid.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_RobMaid message.
         * @function verify
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_RobMaid.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.dropto != null && message.hasOwnProperty("dropto"))
                if (!$util.isInteger(message.dropto) && !(message.dropto && $util.isInteger(message.dropto.low) && $util.isInteger(message.dropto.high)))
                    return "dropto: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_RobMaid message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_RobMaid} C2GW_RobMaid
         */
        C2GW_RobMaid.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_RobMaid)
                return object;
            var message = new $root.msg.C2GW_RobMaid();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.dropto != null)
                if ($util.Long)
                    (message.dropto = $util.Long.fromValue(object.dropto)).unsigned = true;
                else if (typeof object.dropto === "string")
                    message.dropto = parseInt(object.dropto, 10);
                else if (typeof object.dropto === "number")
                    message.dropto = object.dropto;
                else if (typeof object.dropto === "object")
                    message.dropto = new $util.LongBits(object.dropto.low >>> 0, object.dropto.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_RobMaid message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_RobMaid
         * @static
         * @param {msg.C2GW_RobMaid} message C2GW_RobMaid
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_RobMaid.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.dropto = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.dropto = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.dropto != null && message.hasOwnProperty("dropto"))
                if (typeof message.dropto === "number")
                    object.dropto = options.longs === String ? String(message.dropto) : message.dropto;
                else
                    object.dropto = options.longs === String ? $util.Long.prototype.toString.call(message.dropto) : options.longs === Number ? new $util.LongBits(message.dropto.low >>> 0, message.dropto.high >>> 0).toNumber(true) : message.dropto;
            return object;
        };

        /**
         * Converts this C2GW_RobMaid to JSON.
         * @function toJSON
         * @memberof msg.C2GW_RobMaid
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_RobMaid.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_RobMaid;
    })();

    msg.GW2C_EnableMaidDropTo = (function() {

        /**
         * Properties of a GW2C_EnableMaidDropTo.
         * @memberof msg
         * @interface IGW2C_EnableMaidDropTo
         * @property {Array.<msg.IHouseData>|null} [houses] GW2C_EnableMaidDropTo houses
         */

        /**
         * Constructs a new GW2C_EnableMaidDropTo.
         * @memberof msg
         * @classdesc Represents a GW2C_EnableMaidDropTo.
         * @implements IGW2C_EnableMaidDropTo
         * @constructor
         * @param {msg.IGW2C_EnableMaidDropTo=} [properties] Properties to set
         */
        function GW2C_EnableMaidDropTo(properties) {
            this.houses = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_EnableMaidDropTo houses.
         * @member {Array.<msg.IHouseData>} houses
         * @memberof msg.GW2C_EnableMaidDropTo
         * @instance
         */
        GW2C_EnableMaidDropTo.prototype.houses = $util.emptyArray;

        /**
         * Creates a new GW2C_EnableMaidDropTo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {msg.IGW2C_EnableMaidDropTo=} [properties] Properties to set
         * @returns {msg.GW2C_EnableMaidDropTo} GW2C_EnableMaidDropTo instance
         */
        GW2C_EnableMaidDropTo.create = function create(properties) {
            return new GW2C_EnableMaidDropTo(properties);
        };

        /**
         * Encodes the specified GW2C_EnableMaidDropTo message. Does not implicitly {@link msg.GW2C_EnableMaidDropTo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {msg.IGW2C_EnableMaidDropTo} message GW2C_EnableMaidDropTo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_EnableMaidDropTo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houses != null && message.houses.length)
                for (var i = 0; i < message.houses.length; ++i)
                    $root.msg.HouseData.encode(message.houses[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_EnableMaidDropTo message, length delimited. Does not implicitly {@link msg.GW2C_EnableMaidDropTo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {msg.IGW2C_EnableMaidDropTo} message GW2C_EnableMaidDropTo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_EnableMaidDropTo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_EnableMaidDropTo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_EnableMaidDropTo} GW2C_EnableMaidDropTo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_EnableMaidDropTo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_EnableMaidDropTo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.houses && message.houses.length))
                        message.houses = [];
                    message.houses.push($root.msg.HouseData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_EnableMaidDropTo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_EnableMaidDropTo} GW2C_EnableMaidDropTo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_EnableMaidDropTo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_EnableMaidDropTo message.
         * @function verify
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_EnableMaidDropTo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houses != null && message.hasOwnProperty("houses")) {
                if (!Array.isArray(message.houses))
                    return "houses: array expected";
                for (var i = 0; i < message.houses.length; ++i) {
                    var error = $root.msg.HouseData.verify(message.houses[i]);
                    if (error)
                        return "houses." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_EnableMaidDropTo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_EnableMaidDropTo} GW2C_EnableMaidDropTo
         */
        GW2C_EnableMaidDropTo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_EnableMaidDropTo)
                return object;
            var message = new $root.msg.GW2C_EnableMaidDropTo();
            if (object.houses) {
                if (!Array.isArray(object.houses))
                    throw TypeError(".msg.GW2C_EnableMaidDropTo.houses: array expected");
                message.houses = [];
                for (var i = 0; i < object.houses.length; ++i) {
                    if (typeof object.houses[i] !== "object")
                        throw TypeError(".msg.GW2C_EnableMaidDropTo.houses: object expected");
                    message.houses[i] = $root.msg.HouseData.fromObject(object.houses[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_EnableMaidDropTo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_EnableMaidDropTo
         * @static
         * @param {msg.GW2C_EnableMaidDropTo} message GW2C_EnableMaidDropTo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_EnableMaidDropTo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.houses = [];
            if (message.houses && message.houses.length) {
                object.houses = [];
                for (var j = 0; j < message.houses.length; ++j)
                    object.houses[j] = $root.msg.HouseData.toObject(message.houses[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_EnableMaidDropTo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_EnableMaidDropTo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_EnableMaidDropTo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_EnableMaidDropTo;
    })();

    msg.C2GW_RobMaidToHouse = (function() {

        /**
         * Properties of a C2GW_RobMaidToHouse.
         * @memberof msg
         * @interface IC2GW_RobMaidToHouse
         * @property {number|Long|null} [id] C2GW_RobMaidToHouse id
         * @property {number|Long|null} [dropto] C2GW_RobMaidToHouse dropto
         */

        /**
         * Constructs a new C2GW_RobMaidToHouse.
         * @memberof msg
         * @classdesc Represents a C2GW_RobMaidToHouse.
         * @implements IC2GW_RobMaidToHouse
         * @constructor
         * @param {msg.IC2GW_RobMaidToHouse=} [properties] Properties to set
         */
        function C2GW_RobMaidToHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_RobMaidToHouse id.
         * @member {number|Long} id
         * @memberof msg.C2GW_RobMaidToHouse
         * @instance
         */
        C2GW_RobMaidToHouse.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_RobMaidToHouse dropto.
         * @member {number|Long} dropto
         * @memberof msg.C2GW_RobMaidToHouse
         * @instance
         */
        C2GW_RobMaidToHouse.prototype.dropto = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_RobMaidToHouse instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {msg.IC2GW_RobMaidToHouse=} [properties] Properties to set
         * @returns {msg.C2GW_RobMaidToHouse} C2GW_RobMaidToHouse instance
         */
        C2GW_RobMaidToHouse.create = function create(properties) {
            return new C2GW_RobMaidToHouse(properties);
        };

        /**
         * Encodes the specified C2GW_RobMaidToHouse message. Does not implicitly {@link msg.C2GW_RobMaidToHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {msg.IC2GW_RobMaidToHouse} message C2GW_RobMaidToHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_RobMaidToHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            if (message.dropto != null && message.hasOwnProperty("dropto"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.dropto);
            return writer;
        };

        /**
         * Encodes the specified C2GW_RobMaidToHouse message, length delimited. Does not implicitly {@link msg.C2GW_RobMaidToHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {msg.IC2GW_RobMaidToHouse} message C2GW_RobMaidToHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_RobMaidToHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_RobMaidToHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_RobMaidToHouse} C2GW_RobMaidToHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_RobMaidToHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_RobMaidToHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.dropto = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_RobMaidToHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_RobMaidToHouse} C2GW_RobMaidToHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_RobMaidToHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_RobMaidToHouse message.
         * @function verify
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_RobMaidToHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.dropto != null && message.hasOwnProperty("dropto"))
                if (!$util.isInteger(message.dropto) && !(message.dropto && $util.isInteger(message.dropto.low) && $util.isInteger(message.dropto.high)))
                    return "dropto: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_RobMaidToHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_RobMaidToHouse} C2GW_RobMaidToHouse
         */
        C2GW_RobMaidToHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_RobMaidToHouse)
                return object;
            var message = new $root.msg.C2GW_RobMaidToHouse();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            if (object.dropto != null)
                if ($util.Long)
                    (message.dropto = $util.Long.fromValue(object.dropto)).unsigned = true;
                else if (typeof object.dropto === "string")
                    message.dropto = parseInt(object.dropto, 10);
                else if (typeof object.dropto === "number")
                    message.dropto = object.dropto;
                else if (typeof object.dropto === "object")
                    message.dropto = new $util.LongBits(object.dropto.low >>> 0, object.dropto.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_RobMaidToHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_RobMaidToHouse
         * @static
         * @param {msg.C2GW_RobMaidToHouse} message C2GW_RobMaidToHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_RobMaidToHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.dropto = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.dropto = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            if (message.dropto != null && message.hasOwnProperty("dropto"))
                if (typeof message.dropto === "number")
                    object.dropto = options.longs === String ? String(message.dropto) : message.dropto;
                else
                    object.dropto = options.longs === String ? $util.Long.prototype.toString.call(message.dropto) : options.longs === Number ? new $util.LongBits(message.dropto.low >>> 0, message.dropto.high >>> 0).toNumber(true) : message.dropto;
            return object;
        };

        /**
         * Converts this C2GW_RobMaidToHouse to JSON.
         * @function toJSON
         * @memberof msg.C2GW_RobMaidToHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_RobMaidToHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_RobMaidToHouse;
    })();

    msg.C2GW_TackBackMaid = (function() {

        /**
         * Properties of a C2GW_TackBackMaid.
         * @memberof msg
         * @interface IC2GW_TackBackMaid
         * @property {number|Long|null} [id] C2GW_TackBackMaid id
         */

        /**
         * Constructs a new C2GW_TackBackMaid.
         * @memberof msg
         * @classdesc Represents a C2GW_TackBackMaid.
         * @implements IC2GW_TackBackMaid
         * @constructor
         * @param {msg.IC2GW_TackBackMaid=} [properties] Properties to set
         */
        function C2GW_TackBackMaid(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TackBackMaid id.
         * @member {number|Long} id
         * @memberof msg.C2GW_TackBackMaid
         * @instance
         */
        C2GW_TackBackMaid.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_TackBackMaid instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {msg.IC2GW_TackBackMaid=} [properties] Properties to set
         * @returns {msg.C2GW_TackBackMaid} C2GW_TackBackMaid instance
         */
        C2GW_TackBackMaid.create = function create(properties) {
            return new C2GW_TackBackMaid(properties);
        };

        /**
         * Encodes the specified C2GW_TackBackMaid message. Does not implicitly {@link msg.C2GW_TackBackMaid.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {msg.IC2GW_TackBackMaid} message C2GW_TackBackMaid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TackBackMaid.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TackBackMaid message, length delimited. Does not implicitly {@link msg.C2GW_TackBackMaid.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {msg.IC2GW_TackBackMaid} message C2GW_TackBackMaid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TackBackMaid.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TackBackMaid message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TackBackMaid} C2GW_TackBackMaid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TackBackMaid.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TackBackMaid();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TackBackMaid message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TackBackMaid} C2GW_TackBackMaid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TackBackMaid.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TackBackMaid message.
         * @function verify
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TackBackMaid.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_TackBackMaid message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TackBackMaid} C2GW_TackBackMaid
         */
        C2GW_TackBackMaid.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TackBackMaid)
                return object;
            var message = new $root.msg.C2GW_TackBackMaid();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TackBackMaid message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TackBackMaid
         * @static
         * @param {msg.C2GW_TackBackMaid} message C2GW_TackBackMaid
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TackBackMaid.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            return object;
        };

        /**
         * Converts this C2GW_TackBackMaid to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TackBackMaid
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TackBackMaid.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TackBackMaid;
    })();

    msg.C2GW_SendBackMaid = (function() {

        /**
         * Properties of a C2GW_SendBackMaid.
         * @memberof msg
         * @interface IC2GW_SendBackMaid
         * @property {number|Long|null} [id] C2GW_SendBackMaid id
         */

        /**
         * Constructs a new C2GW_SendBackMaid.
         * @memberof msg
         * @classdesc Represents a C2GW_SendBackMaid.
         * @implements IC2GW_SendBackMaid
         * @constructor
         * @param {msg.IC2GW_SendBackMaid=} [properties] Properties to set
         */
        function C2GW_SendBackMaid(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_SendBackMaid id.
         * @member {number|Long} id
         * @memberof msg.C2GW_SendBackMaid
         * @instance
         */
        C2GW_SendBackMaid.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_SendBackMaid instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {msg.IC2GW_SendBackMaid=} [properties] Properties to set
         * @returns {msg.C2GW_SendBackMaid} C2GW_SendBackMaid instance
         */
        C2GW_SendBackMaid.create = function create(properties) {
            return new C2GW_SendBackMaid(properties);
        };

        /**
         * Encodes the specified C2GW_SendBackMaid message. Does not implicitly {@link msg.C2GW_SendBackMaid.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {msg.IC2GW_SendBackMaid} message C2GW_SendBackMaid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendBackMaid.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified C2GW_SendBackMaid message, length delimited. Does not implicitly {@link msg.C2GW_SendBackMaid.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {msg.IC2GW_SendBackMaid} message C2GW_SendBackMaid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_SendBackMaid.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_SendBackMaid message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_SendBackMaid} C2GW_SendBackMaid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendBackMaid.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_SendBackMaid();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_SendBackMaid message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_SendBackMaid} C2GW_SendBackMaid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_SendBackMaid.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_SendBackMaid message.
         * @function verify
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_SendBackMaid.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_SendBackMaid message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_SendBackMaid} C2GW_SendBackMaid
         */
        C2GW_SendBackMaid.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_SendBackMaid)
                return object;
            var message = new $root.msg.C2GW_SendBackMaid();
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_SendBackMaid message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_SendBackMaid
         * @static
         * @param {msg.C2GW_SendBackMaid} message C2GW_SendBackMaid
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_SendBackMaid.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
            return object;
        };

        /**
         * Converts this C2GW_SendBackMaid to JSON.
         * @function toJSON
         * @memberof msg.C2GW_SendBackMaid
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_SendBackMaid.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_SendBackMaid;
    })();

    msg.GW2C_MsgNotify = (function() {

        /**
         * Properties of a GW2C_MsgNotify.
         * @memberof msg
         * @interface IGW2C_MsgNotify
         * @property {number|Long|null} [userid] GW2C_MsgNotify userid
         * @property {string|null} [text] GW2C_MsgNotify text
         */

        /**
         * Constructs a new GW2C_MsgNotify.
         * @memberof msg
         * @classdesc Represents a GW2C_MsgNotify.
         * @implements IGW2C_MsgNotify
         * @constructor
         * @param {msg.IGW2C_MsgNotify=} [properties] Properties to set
         */
        function GW2C_MsgNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_MsgNotify userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_MsgNotify
         * @instance
         */
        GW2C_MsgNotify.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_MsgNotify text.
         * @member {string} text
         * @memberof msg.GW2C_MsgNotify
         * @instance
         */
        GW2C_MsgNotify.prototype.text = "";

        /**
         * Creates a new GW2C_MsgNotify instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify=} [properties] Properties to set
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify instance
         */
        GW2C_MsgNotify.create = function create(properties) {
            return new GW2C_MsgNotify(properties);
        };

        /**
         * Encodes the specified GW2C_MsgNotify message. Does not implicitly {@link msg.GW2C_MsgNotify.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify} message GW2C_MsgNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified GW2C_MsgNotify message, length delimited. Does not implicitly {@link msg.GW2C_MsgNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.IGW2C_MsgNotify} message GW2C_MsgNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_MsgNotify message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_MsgNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_MsgNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_MsgNotify message.
         * @function verify
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_MsgNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };

        /**
         * Creates a GW2C_MsgNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_MsgNotify} GW2C_MsgNotify
         */
        GW2C_MsgNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_MsgNotify)
                return object;
            var message = new $root.msg.GW2C_MsgNotify();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_MsgNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_MsgNotify
         * @static
         * @param {msg.GW2C_MsgNotify} message GW2C_MsgNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_MsgNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.text = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this GW2C_MsgNotify to JSON.
         * @function toJSON
         * @memberof msg.GW2C_MsgNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_MsgNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_MsgNotify;
    })();

    /**
     * NoticeType enum.
     * @name msg.NoticeType
     * @enum {string}
     * @property {number} Suspension=1 Suspension value
     * @property {number} Marquee=2 Marquee value
     */
    msg.NoticeType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Suspension"] = 1;
        values[valuesById[2] = "Marquee"] = 2;
        return values;
    })();

    msg.GW2C_MsgNotice = (function() {

        /**
         * Properties of a GW2C_MsgNotice.
         * @memberof msg
         * @interface IGW2C_MsgNotice
         * @property {number|Long|null} [userid] GW2C_MsgNotice userid
         * @property {string|null} [face] GW2C_MsgNotice face
         * @property {string|null} [name] GW2C_MsgNotice name
         * @property {number|null} [type] GW2C_MsgNotice type
         * @property {string|null} [text] GW2C_MsgNotice text
         */

        /**
         * Constructs a new GW2C_MsgNotice.
         * @memberof msg
         * @classdesc Represents a GW2C_MsgNotice.
         * @implements IGW2C_MsgNotice
         * @constructor
         * @param {msg.IGW2C_MsgNotice=} [properties] Properties to set
         */
        function GW2C_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_MsgNotice userid.
         * @member {number|Long} userid
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_MsgNotice face.
         * @member {string} face
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.face = "";

        /**
         * GW2C_MsgNotice name.
         * @member {string} name
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.name = "";

        /**
         * GW2C_MsgNotice type.
         * @member {number} type
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.type = 0;

        /**
         * GW2C_MsgNotice text.
         * @member {string} text
         * @memberof msg.GW2C_MsgNotice
         * @instance
         */
        GW2C_MsgNotice.prototype.text = "";

        /**
         * Creates a new GW2C_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice=} [properties] Properties to set
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice instance
         */
        GW2C_MsgNotice.create = function create(properties) {
            return new GW2C_MsgNotice(properties);
        };

        /**
         * Encodes the specified GW2C_MsgNotice message. Does not implicitly {@link msg.GW2C_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice} message GW2C_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.face);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified GW2C_MsgNotice message, length delimited. Does not implicitly {@link msg.GW2C_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.IGW2C_MsgNotice} message GW2C_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.face = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                case 5:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_MsgNotice message.
         * @function verify
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };

        /**
         * Creates a GW2C_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_MsgNotice} GW2C_MsgNotice
         */
        GW2C_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_MsgNotice)
                return object;
            var message = new $root.msg.GW2C_MsgNotice();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.face != null)
                message.face = String(object.face);
            if (object.name != null)
                message.name = String(object.name);
            if (object.type != null)
                message.type = object.type | 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_MsgNotice
         * @static
         * @param {msg.GW2C_MsgNotice} message GW2C_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.face = "";
                object.name = "";
                object.type = 0;
                object.text = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this GW2C_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.GW2C_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_MsgNotice;
    })();

    msg.GW2MS_MsgNotice = (function() {

        /**
         * Properties of a GW2MS_MsgNotice.
         * @memberof msg
         * @interface IGW2MS_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] GW2MS_MsgNotice notice
         */

        /**
         * Constructs a new GW2MS_MsgNotice.
         * @memberof msg
         * @classdesc Represents a GW2MS_MsgNotice.
         * @implements IGW2MS_MsgNotice
         * @constructor
         * @param {msg.IGW2MS_MsgNotice=} [properties] Properties to set
         */
        function GW2MS_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.GW2MS_MsgNotice
         * @instance
         */
        GW2MS_MsgNotice.prototype.notice = null;

        /**
         * Creates a new GW2MS_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice=} [properties] Properties to set
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice instance
         */
        GW2MS_MsgNotice.create = function create(properties) {
            return new GW2MS_MsgNotice(properties);
        };

        /**
         * Encodes the specified GW2MS_MsgNotice message. Does not implicitly {@link msg.GW2MS_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice} message GW2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_MsgNotice message, length delimited. Does not implicitly {@link msg.GW2MS_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.IGW2MS_MsgNotice} message GW2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_MsgNotice message.
         * @function verify
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_MsgNotice} GW2MS_MsgNotice
         */
        GW2MS_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_MsgNotice)
                return object;
            var message = new $root.msg.GW2MS_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.GW2MS_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_MsgNotice
         * @static
         * @param {msg.GW2MS_MsgNotice} message GW2MS_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this GW2MS_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_MsgNotice;
    })();

    msg.RS2MS_MsgNotice = (function() {

        /**
         * Properties of a RS2MS_MsgNotice.
         * @memberof msg
         * @interface IRS2MS_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] RS2MS_MsgNotice notice
         */

        /**
         * Constructs a new RS2MS_MsgNotice.
         * @memberof msg
         * @classdesc Represents a RS2MS_MsgNotice.
         * @implements IRS2MS_MsgNotice
         * @constructor
         * @param {msg.IRS2MS_MsgNotice=} [properties] Properties to set
         */
        function RS2MS_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.RS2MS_MsgNotice
         * @instance
         */
        RS2MS_MsgNotice.prototype.notice = null;

        /**
         * Creates a new RS2MS_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice=} [properties] Properties to set
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice instance
         */
        RS2MS_MsgNotice.create = function create(properties) {
            return new RS2MS_MsgNotice(properties);
        };

        /**
         * Encodes the specified RS2MS_MsgNotice message. Does not implicitly {@link msg.RS2MS_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice} message RS2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RS2MS_MsgNotice message, length delimited. Does not implicitly {@link msg.RS2MS_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.IRS2MS_MsgNotice} message RS2MS_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_MsgNotice message.
         * @function verify
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a RS2MS_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_MsgNotice} RS2MS_MsgNotice
         */
        RS2MS_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_MsgNotice)
                return object;
            var message = new $root.msg.RS2MS_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.RS2MS_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_MsgNotice
         * @static
         * @param {msg.RS2MS_MsgNotice} message RS2MS_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this RS2MS_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_MsgNotice;
    })();

    msg.MS2GW_MsgNotice = (function() {

        /**
         * Properties of a MS2GW_MsgNotice.
         * @memberof msg
         * @interface IMS2GW_MsgNotice
         * @property {msg.IGW2C_MsgNotice|null} [notice] MS2GW_MsgNotice notice
         */

        /**
         * Constructs a new MS2GW_MsgNotice.
         * @memberof msg
         * @classdesc Represents a MS2GW_MsgNotice.
         * @implements IMS2GW_MsgNotice
         * @constructor
         * @param {msg.IMS2GW_MsgNotice=} [properties] Properties to set
         */
        function MS2GW_MsgNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_MsgNotice notice.
         * @member {msg.IGW2C_MsgNotice|null|undefined} notice
         * @memberof msg.MS2GW_MsgNotice
         * @instance
         */
        MS2GW_MsgNotice.prototype.notice = null;

        /**
         * Creates a new MS2GW_MsgNotice instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice=} [properties] Properties to set
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice instance
         */
        MS2GW_MsgNotice.create = function create(properties) {
            return new MS2GW_MsgNotice(properties);
        };

        /**
         * Encodes the specified MS2GW_MsgNotice message. Does not implicitly {@link msg.MS2GW_MsgNotice.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice} message MS2GW_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_MsgNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.notice != null && message.hasOwnProperty("notice"))
                $root.msg.GW2C_MsgNotice.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_MsgNotice message, length delimited. Does not implicitly {@link msg.MS2GW_MsgNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.IMS2GW_MsgNotice} message MS2GW_MsgNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_MsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_MsgNotice message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_MsgNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_MsgNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.notice = $root.msg.GW2C_MsgNotice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_MsgNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_MsgNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_MsgNotice message.
         * @function verify
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_MsgNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.notice != null && message.hasOwnProperty("notice")) {
                var error = $root.msg.GW2C_MsgNotice.verify(message.notice);
                if (error)
                    return "notice." + error;
            }
            return null;
        };

        /**
         * Creates a MS2GW_MsgNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_MsgNotice} MS2GW_MsgNotice
         */
        MS2GW_MsgNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_MsgNotice)
                return object;
            var message = new $root.msg.MS2GW_MsgNotice();
            if (object.notice != null) {
                if (typeof object.notice !== "object")
                    throw TypeError(".msg.MS2GW_MsgNotice.notice: object expected");
                message.notice = $root.msg.GW2C_MsgNotice.fromObject(object.notice);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_MsgNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_MsgNotice
         * @static
         * @param {msg.MS2GW_MsgNotice} message MS2GW_MsgNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_MsgNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.notice = null;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = $root.msg.GW2C_MsgNotice.toObject(message.notice, options);
            return object;
        };

        /**
         * Converts this MS2GW_MsgNotice to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_MsgNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_MsgNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_MsgNotice;
    })();

    msg.GW2L_ReqRegist = (function() {

        /**
         * Properties of a GW2L_ReqRegist.
         * @memberof msg
         * @interface IGW2L_ReqRegist
         * @property {string|null} [account] GW2L_ReqRegist account
         * @property {string|null} [passwd] GW2L_ReqRegist passwd
         * @property {msg.IIpHost|null} [host] GW2L_ReqRegist host
         * @property {string|null} [name] GW2L_ReqRegist name
         */

        /**
         * Constructs a new GW2L_ReqRegist.
         * @memberof msg
         * @classdesc Represents a GW2L_ReqRegist.
         * @implements IGW2L_ReqRegist
         * @constructor
         * @param {msg.IGW2L_ReqRegist=} [properties] Properties to set
         */
        function GW2L_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2L_ReqRegist account.
         * @member {string} account
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.account = "";

        /**
         * GW2L_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.passwd = "";

        /**
         * GW2L_ReqRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.host = null;

        /**
         * GW2L_ReqRegist name.
         * @member {string} name
         * @memberof msg.GW2L_ReqRegist
         * @instance
         */
        GW2L_ReqRegist.prototype.name = "";

        /**
         * Creates a new GW2L_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist=} [properties] Properties to set
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist instance
         */
        GW2L_ReqRegist.create = function create(properties) {
            return new GW2L_ReqRegist(properties);
        };

        /**
         * Encodes the specified GW2L_ReqRegist message. Does not implicitly {@link msg.GW2L_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist} message GW2L_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified GW2L_ReqRegist message, length delimited. Does not implicitly {@link msg.GW2L_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.IGW2L_ReqRegist} message GW2L_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_ReqRegist message.
         * @function verify
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a GW2L_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_ReqRegist} GW2L_ReqRegist
         */
        GW2L_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_ReqRegist)
                return object;
            var message = new $root.msg.GW2L_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GW2L_ReqRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a GW2L_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_ReqRegist
         * @static
         * @param {msg.GW2L_ReqRegist} message GW2L_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.host = null;
                object.name = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this GW2L_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2L_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_ReqRegist;
    })();

    msg.L2GW_RetRegist = (function() {

        /**
         * Properties of a L2GW_RetRegist.
         * @memberof msg
         * @interface IL2GW_RetRegist
         * @property {string|null} [errocde] L2GW_RetRegist errocde
         * @property {msg.IIpHost|null} [host] L2GW_RetRegist host
         */

        /**
         * Constructs a new L2GW_RetRegist.
         * @memberof msg
         * @classdesc Represents a L2GW_RetRegist.
         * @implements IL2GW_RetRegist
         * @constructor
         * @param {msg.IL2GW_RetRegist=} [properties] Properties to set
         */
        function L2GW_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2GW_RetRegist errocde.
         * @member {string} errocde
         * @memberof msg.L2GW_RetRegist
         * @instance
         */
        L2GW_RetRegist.prototype.errocde = "";

        /**
         * L2GW_RetRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.L2GW_RetRegist
         * @instance
         */
        L2GW_RetRegist.prototype.host = null;

        /**
         * Creates a new L2GW_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist=} [properties] Properties to set
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist instance
         */
        L2GW_RetRegist.create = function create(properties) {
            return new L2GW_RetRegist(properties);
        };

        /**
         * Encodes the specified L2GW_RetRegist message. Does not implicitly {@link msg.L2GW_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist} message L2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errocde);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified L2GW_RetRegist message, length delimited. Does not implicitly {@link msg.L2GW_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.IL2GW_RetRegist} message L2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errocde = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_RetRegist message.
         * @function verify
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                if (!$util.isString(message.errocde))
                    return "errocde: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a L2GW_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_RetRegist} L2GW_RetRegist
         */
        L2GW_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_RetRegist)
                return object;
            var message = new $root.msg.L2GW_RetRegist();
            if (object.errocde != null)
                message.errocde = String(object.errocde);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.L2GW_RetRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a L2GW_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_RetRegist
         * @static
         * @param {msg.L2GW_RetRegist} message L2GW_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errocde = "";
                object.host = null;
            }
            if (message.errocde != null && message.hasOwnProperty("errocde"))
                object.errocde = message.errocde;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this L2GW_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.L2GW_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_RetRegist;
    })();

    msg.GW2L_HeartBeat = (function() {

        /**
         * Properties of a GW2L_HeartBeat.
         * @memberof msg
         * @interface IGW2L_HeartBeat
         */

        /**
         * Constructs a new GW2L_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2L_HeartBeat.
         * @implements IGW2L_HeartBeat
         * @constructor
         * @param {msg.IGW2L_HeartBeat=} [properties] Properties to set
         */
        function GW2L_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2L_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat instance
         */
        GW2L_HeartBeat.create = function create(properties) {
            return new GW2L_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2L_HeartBeat message. Does not implicitly {@link msg.GW2L_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat} message GW2L_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2L_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2L_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.IGW2L_HeartBeat} message GW2L_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_HeartBeat message.
         * @function verify
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2L_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_HeartBeat} GW2L_HeartBeat
         */
        GW2L_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_HeartBeat)
                return object;
            return new $root.msg.GW2L_HeartBeat();
        };

        /**
         * Creates a plain object from a GW2L_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_HeartBeat
         * @static
         * @param {msg.GW2L_HeartBeat} message GW2L_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2L_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2L_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_HeartBeat;
    })();

    msg.L2GW_HeartBeat = (function() {

        /**
         * Properties of a L2GW_HeartBeat.
         * @memberof msg
         * @interface IL2GW_HeartBeat
         */

        /**
         * Constructs a new L2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a L2GW_HeartBeat.
         * @implements IL2GW_HeartBeat
         * @constructor
         * @param {msg.IL2GW_HeartBeat=} [properties] Properties to set
         */
        function L2GW_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new L2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat instance
         */
        L2GW_HeartBeat.create = function create(properties) {
            return new L2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified L2GW_HeartBeat message. Does not implicitly {@link msg.L2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat} message L2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified L2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.L2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.IL2GW_HeartBeat} message L2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_HeartBeat message.
         * @function verify
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a L2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_HeartBeat} L2GW_HeartBeat
         */
        L2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_HeartBeat)
                return object;
            return new $root.msg.L2GW_HeartBeat();
        };

        /**
         * Creates a plain object from a L2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_HeartBeat
         * @static
         * @param {msg.L2GW_HeartBeat} message L2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this L2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.L2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_HeartBeat;
    })();

    msg.L2GW_ReqRegistUser = (function() {

        /**
         * Properties of a L2GW_ReqRegistUser.
         * @memberof msg
         * @interface IL2GW_ReqRegistUser
         * @property {string|null} [account] L2GW_ReqRegistUser account
         * @property {number|Long|null} [expire] L2GW_ReqRegistUser expire
         * @property {string|null} [gatehost] L2GW_ReqRegistUser gatehost
         * @property {number|null} [sid] L2GW_ReqRegistUser sid
         * @property {number|Long|null} [timestamp] L2GW_ReqRegistUser timestamp
         * @property {string|null} [verifykey] L2GW_ReqRegistUser verifykey
         */

        /**
         * Constructs a new L2GW_ReqRegistUser.
         * @memberof msg
         * @classdesc Represents a L2GW_ReqRegistUser.
         * @implements IL2GW_ReqRegistUser
         * @constructor
         * @param {msg.IL2GW_ReqRegistUser=} [properties] Properties to set
         */
        function L2GW_ReqRegistUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * L2GW_ReqRegistUser account.
         * @member {string} account
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.account = "";

        /**
         * L2GW_ReqRegistUser expire.
         * @member {number|Long} expire
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.expire = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * L2GW_ReqRegistUser gatehost.
         * @member {string} gatehost
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.gatehost = "";

        /**
         * L2GW_ReqRegistUser sid.
         * @member {number} sid
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.sid = 0;

        /**
         * L2GW_ReqRegistUser timestamp.
         * @member {number|Long} timestamp
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * L2GW_ReqRegistUser verifykey.
         * @member {string} verifykey
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         */
        L2GW_ReqRegistUser.prototype.verifykey = "";

        /**
         * Creates a new L2GW_ReqRegistUser instance using the specified properties.
         * @function create
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser=} [properties] Properties to set
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser instance
         */
        L2GW_ReqRegistUser.create = function create(properties) {
            return new L2GW_ReqRegistUser(properties);
        };

        /**
         * Encodes the specified L2GW_ReqRegistUser message. Does not implicitly {@link msg.L2GW_ReqRegistUser.verify|verify} messages.
         * @function encode
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser} message L2GW_ReqRegistUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_ReqRegistUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.expire != null && message.hasOwnProperty("expire"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.expire);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatehost);
            if (message.sid != null && message.hasOwnProperty("sid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sid);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timestamp);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified L2GW_ReqRegistUser message, length delimited. Does not implicitly {@link msg.L2GW_ReqRegistUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.IL2GW_ReqRegistUser} message L2GW_ReqRegistUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        L2GW_ReqRegistUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a L2GW_ReqRegistUser message from the specified reader or buffer.
         * @function decode
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_ReqRegistUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.L2GW_ReqRegistUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.expire = reader.int64();
                    break;
                case 3:
                    message.gatehost = reader.string();
                    break;
                case 4:
                    message.sid = reader.int32();
                    break;
                case 5:
                    message.timestamp = reader.int64();
                    break;
                case 6:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a L2GW_ReqRegistUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        L2GW_ReqRegistUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a L2GW_ReqRegistUser message.
         * @function verify
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        L2GW_ReqRegistUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (!$util.isInteger(message.expire) && !(message.expire && $util.isInteger(message.expire.low) && $util.isInteger(message.expire.high)))
                    return "expire: integer|Long expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                if (!$util.isString(message.gatehost))
                    return "gatehost: string expected";
            if (message.sid != null && message.hasOwnProperty("sid"))
                if (!$util.isInteger(message.sid))
                    return "sid: integer expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a L2GW_ReqRegistUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.L2GW_ReqRegistUser} L2GW_ReqRegistUser
         */
        L2GW_ReqRegistUser.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.L2GW_ReqRegistUser)
                return object;
            var message = new $root.msg.L2GW_ReqRegistUser();
            if (object.account != null)
                message.account = String(object.account);
            if (object.expire != null)
                if ($util.Long)
                    (message.expire = $util.Long.fromValue(object.expire)).unsigned = false;
                else if (typeof object.expire === "string")
                    message.expire = parseInt(object.expire, 10);
                else if (typeof object.expire === "number")
                    message.expire = object.expire;
                else if (typeof object.expire === "object")
                    message.expire = new $util.LongBits(object.expire.low >>> 0, object.expire.high >>> 0).toNumber();
            if (object.gatehost != null)
                message.gatehost = String(object.gatehost);
            if (object.sid != null)
                message.sid = object.sid | 0;
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a L2GW_ReqRegistUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.L2GW_ReqRegistUser
         * @static
         * @param {msg.L2GW_ReqRegistUser} message L2GW_ReqRegistUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        L2GW_ReqRegistUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.expire = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.expire = options.longs === String ? "0" : 0;
                object.gatehost = "";
                object.sid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.verifykey = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.expire != null && message.hasOwnProperty("expire"))
                if (typeof message.expire === "number")
                    object.expire = options.longs === String ? String(message.expire) : message.expire;
                else
                    object.expire = options.longs === String ? $util.Long.prototype.toString.call(message.expire) : options.longs === Number ? new $util.LongBits(message.expire.low >>> 0, message.expire.high >>> 0).toNumber() : message.expire;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = message.gatehost;
            if (message.sid != null && message.hasOwnProperty("sid"))
                object.sid = message.sid;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this L2GW_ReqRegistUser to JSON.
         * @function toJSON
         * @memberof msg.L2GW_ReqRegistUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        L2GW_ReqRegistUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return L2GW_ReqRegistUser;
    })();

    msg.GW2L_RegistUserRet = (function() {

        /**
         * Properties of a GW2L_RegistUserRet.
         * @memberof msg
         * @interface IGW2L_RegistUserRet
         * @property {string|null} [account] GW2L_RegistUserRet account
         * @property {string|null} [gatehost] GW2L_RegistUserRet gatehost
         * @property {string|null} [errcode] GW2L_RegistUserRet errcode
         * @property {number|null} [sid] GW2L_RegistUserRet sid
         * @property {string|null} [verifykey] GW2L_RegistUserRet verifykey
         */

        /**
         * Constructs a new GW2L_RegistUserRet.
         * @memberof msg
         * @classdesc Represents a GW2L_RegistUserRet.
         * @implements IGW2L_RegistUserRet
         * @constructor
         * @param {msg.IGW2L_RegistUserRet=} [properties] Properties to set
         */
        function GW2L_RegistUserRet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2L_RegistUserRet account.
         * @member {string} account
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.account = "";

        /**
         * GW2L_RegistUserRet gatehost.
         * @member {string} gatehost
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.gatehost = "";

        /**
         * GW2L_RegistUserRet errcode.
         * @member {string} errcode
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.errcode = "";

        /**
         * GW2L_RegistUserRet sid.
         * @member {number} sid
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.sid = 0;

        /**
         * GW2L_RegistUserRet verifykey.
         * @member {string} verifykey
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         */
        GW2L_RegistUserRet.prototype.verifykey = "";

        /**
         * Creates a new GW2L_RegistUserRet instance using the specified properties.
         * @function create
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet=} [properties] Properties to set
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet instance
         */
        GW2L_RegistUserRet.create = function create(properties) {
            return new GW2L_RegistUserRet(properties);
        };

        /**
         * Encodes the specified GW2L_RegistUserRet message. Does not implicitly {@link msg.GW2L_RegistUserRet.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet} message GW2L_RegistUserRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_RegistUserRet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatehost);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            if (message.sid != null && message.hasOwnProperty("sid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sid);
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.verifykey);
            return writer;
        };

        /**
         * Encodes the specified GW2L_RegistUserRet message, length delimited. Does not implicitly {@link msg.GW2L_RegistUserRet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.IGW2L_RegistUserRet} message GW2L_RegistUserRet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2L_RegistUserRet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2L_RegistUserRet message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_RegistUserRet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2L_RegistUserRet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.gatehost = reader.string();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                case 4:
                    message.sid = reader.int32();
                    break;
                case 5:
                    message.verifykey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2L_RegistUserRet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2L_RegistUserRet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2L_RegistUserRet message.
         * @function verify
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2L_RegistUserRet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                if (!$util.isString(message.gatehost))
                    return "gatehost: string expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.sid != null && message.hasOwnProperty("sid"))
                if (!$util.isInteger(message.sid))
                    return "sid: integer expected";
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                if (!$util.isString(message.verifykey))
                    return "verifykey: string expected";
            return null;
        };

        /**
         * Creates a GW2L_RegistUserRet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2L_RegistUserRet} GW2L_RegistUserRet
         */
        GW2L_RegistUserRet.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2L_RegistUserRet)
                return object;
            var message = new $root.msg.GW2L_RegistUserRet();
            if (object.account != null)
                message.account = String(object.account);
            if (object.gatehost != null)
                message.gatehost = String(object.gatehost);
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.sid != null)
                message.sid = object.sid | 0;
            if (object.verifykey != null)
                message.verifykey = String(object.verifykey);
            return message;
        };

        /**
         * Creates a plain object from a GW2L_RegistUserRet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2L_RegistUserRet
         * @static
         * @param {msg.GW2L_RegistUserRet} message GW2L_RegistUserRet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2L_RegistUserRet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.gatehost = "";
                object.errcode = "";
                object.sid = 0;
                object.verifykey = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.gatehost != null && message.hasOwnProperty("gatehost"))
                object.gatehost = message.gatehost;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.sid != null && message.hasOwnProperty("sid"))
                object.sid = message.sid;
            if (message.verifykey != null && message.hasOwnProperty("verifykey"))
                object.verifykey = message.verifykey;
            return object;
        };

        /**
         * Converts this GW2L_RegistUserRet to JSON.
         * @function toJSON
         * @memberof msg.GW2L_RegistUserRet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2L_RegistUserRet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2L_RegistUserRet;
    })();

    msg.GW2MS_ReqRegist = (function() {

        /**
         * Properties of a GW2MS_ReqRegist.
         * @memberof msg
         * @interface IGW2MS_ReqRegist
         * @property {string|null} [account] GW2MS_ReqRegist account
         * @property {string|null} [passwd] GW2MS_ReqRegist passwd
         * @property {string|null} [agentname] GW2MS_ReqRegist agentname
         * @property {msg.IIpHost|null} [host] GW2MS_ReqRegist host
         */

        /**
         * Constructs a new GW2MS_ReqRegist.
         * @memberof msg
         * @classdesc Represents a GW2MS_ReqRegist.
         * @implements IGW2MS_ReqRegist
         * @constructor
         * @param {msg.IGW2MS_ReqRegist=} [properties] Properties to set
         */
        function GW2MS_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_ReqRegist account.
         * @member {string} account
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.account = "";

        /**
         * GW2MS_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.passwd = "";

        /**
         * GW2MS_ReqRegist agentname.
         * @member {string} agentname
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.agentname = "";

        /**
         * GW2MS_ReqRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         */
        GW2MS_ReqRegist.prototype.host = null;

        /**
         * Creates a new GW2MS_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist=} [properties] Properties to set
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist instance
         */
        GW2MS_ReqRegist.create = function create(properties) {
            return new GW2MS_ReqRegist(properties);
        };

        /**
         * Encodes the specified GW2MS_ReqRegist message. Does not implicitly {@link msg.GW2MS_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist} message GW2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.agentname);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_ReqRegist message, length delimited. Does not implicitly {@link msg.GW2MS_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.IGW2MS_ReqRegist} message GW2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.agentname = reader.string();
                    break;
                case 4:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_ReqRegist message.
         * @function verify
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a GW2MS_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_ReqRegist} GW2MS_ReqRegist
         */
        GW2MS_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_ReqRegist)
                return object;
            var message = new $root.msg.GW2MS_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GW2MS_ReqRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_ReqRegist
         * @static
         * @param {msg.GW2MS_ReqRegist} message GW2MS_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.agentname = "";
                object.host = null;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this GW2MS_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_ReqRegist;
    })();

    msg.MS2GW_RetRegist = (function() {

        /**
         * Properties of a MS2GW_RetRegist.
         * @memberof msg
         * @interface IMS2GW_RetRegist
         * @property {string|null} [errcode] MS2GW_RetRegist errcode
         * @property {msg.IIpHost|null} [host] MS2GW_RetRegist host
         */

        /**
         * Constructs a new MS2GW_RetRegist.
         * @memberof msg
         * @classdesc Represents a MS2GW_RetRegist.
         * @implements IMS2GW_RetRegist
         * @constructor
         * @param {msg.IMS2GW_RetRegist=} [properties] Properties to set
         */
        function MS2GW_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.MS2GW_RetRegist
         * @instance
         */
        MS2GW_RetRegist.prototype.errcode = "";

        /**
         * MS2GW_RetRegist host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.MS2GW_RetRegist
         * @instance
         */
        MS2GW_RetRegist.prototype.host = null;

        /**
         * Creates a new MS2GW_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist=} [properties] Properties to set
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist instance
         */
        MS2GW_RetRegist.create = function create(properties) {
            return new MS2GW_RetRegist(properties);
        };

        /**
         * Encodes the specified MS2GW_RetRegist message. Does not implicitly {@link msg.MS2GW_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist} message MS2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_RetRegist message, length delimited. Does not implicitly {@link msg.MS2GW_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.IMS2GW_RetRegist} message MS2GW_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_RetRegist message.
         * @function verify
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a MS2GW_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_RetRegist} MS2GW_RetRegist
         */
        MS2GW_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_RetRegist)
                return object;
            var message = new $root.msg.MS2GW_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.MS2GW_RetRegist.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_RetRegist
         * @static
         * @param {msg.MS2GW_RetRegist} message MS2GW_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                object.host = null;
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this MS2GW_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_RetRegist;
    })();

    msg.GW2MS_HeartBeat = (function() {

        /**
         * Properties of a GW2MS_HeartBeat.
         * @memberof msg
         * @interface IGW2MS_HeartBeat
         */

        /**
         * Constructs a new GW2MS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a GW2MS_HeartBeat.
         * @implements IGW2MS_HeartBeat
         * @constructor
         * @param {msg.IGW2MS_HeartBeat=} [properties] Properties to set
         */
        function GW2MS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2MS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat=} [properties] Properties to set
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat instance
         */
        GW2MS_HeartBeat.create = function create(properties) {
            return new GW2MS_HeartBeat(properties);
        };

        /**
         * Encodes the specified GW2MS_HeartBeat message. Does not implicitly {@link msg.GW2MS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat} message GW2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2MS_HeartBeat message, length delimited. Does not implicitly {@link msg.GW2MS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.IGW2MS_HeartBeat} message GW2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_HeartBeat message.
         * @function verify
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2MS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_HeartBeat} GW2MS_HeartBeat
         */
        GW2MS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_HeartBeat)
                return object;
            return new $root.msg.GW2MS_HeartBeat();
        };

        /**
         * Creates a plain object from a GW2MS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_HeartBeat
         * @static
         * @param {msg.GW2MS_HeartBeat} message GW2MS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2MS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_HeartBeat;
    })();

    msg.MS2GW_HeartBeat = (function() {

        /**
         * Properties of a MS2GW_HeartBeat.
         * @memberof msg
         * @interface IMS2GW_HeartBeat
         */

        /**
         * Constructs a new MS2GW_HeartBeat.
         * @memberof msg
         * @classdesc Represents a MS2GW_HeartBeat.
         * @implements IMS2GW_HeartBeat
         * @constructor
         * @param {msg.IMS2GW_HeartBeat=} [properties] Properties to set
         */
        function MS2GW_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new MS2GW_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat=} [properties] Properties to set
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat instance
         */
        MS2GW_HeartBeat.create = function create(properties) {
            return new MS2GW_HeartBeat(properties);
        };

        /**
         * Encodes the specified MS2GW_HeartBeat message. Does not implicitly {@link msg.MS2GW_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat} message MS2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified MS2GW_HeartBeat message, length delimited. Does not implicitly {@link msg.MS2GW_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.IMS2GW_HeartBeat} message MS2GW_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_HeartBeat message.
         * @function verify
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a MS2GW_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_HeartBeat} MS2GW_HeartBeat
         */
        MS2GW_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_HeartBeat)
                return object;
            return new $root.msg.MS2GW_HeartBeat();
        };

        /**
         * Creates a plain object from a MS2GW_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_HeartBeat
         * @static
         * @param {msg.MS2GW_HeartBeat} message MS2GW_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this MS2GW_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_HeartBeat;
    })();

    msg.GW2MS_ReqCreateRoom = (function() {

        /**
         * Properties of a GW2MS_ReqCreateRoom.
         * @memberof msg
         * @interface IGW2MS_ReqCreateRoom
         * @property {number|Long|null} [userid] GW2MS_ReqCreateRoom userid
         * @property {number|null} [gamekind] GW2MS_ReqCreateRoom gamekind
         */

        /**
         * Constructs a new GW2MS_ReqCreateRoom.
         * @memberof msg
         * @classdesc Represents a GW2MS_ReqCreateRoom.
         * @implements IGW2MS_ReqCreateRoom
         * @constructor
         * @param {msg.IGW2MS_ReqCreateRoom=} [properties] Properties to set
         */
        function GW2MS_ReqCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2MS_ReqCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2MS_ReqCreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         */
        GW2MS_ReqCreateRoom.prototype.gamekind = 0;

        /**
         * Creates a new GW2MS_ReqCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom=} [properties] Properties to set
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom instance
         */
        GW2MS_ReqCreateRoom.create = function create(properties) {
            return new GW2MS_ReqCreateRoom(properties);
        };

        /**
         * Encodes the specified GW2MS_ReqCreateRoom message. Does not implicitly {@link msg.GW2MS_ReqCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gamekind);
            return writer;
        };

        /**
         * Encodes the specified GW2MS_ReqCreateRoom message, length delimited. Does not implicitly {@link msg.GW2MS_ReqCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.IGW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2MS_ReqCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2MS_ReqCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2MS_ReqCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.gamekind = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2MS_ReqCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2MS_ReqCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2MS_ReqCreateRoom message.
         * @function verify
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2MS_ReqCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            return null;
        };

        /**
         * Creates a GW2MS_ReqCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2MS_ReqCreateRoom} GW2MS_ReqCreateRoom
         */
        GW2MS_ReqCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2MS_ReqCreateRoom)
                return object;
            var message = new $root.msg.GW2MS_ReqCreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2MS_ReqCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2MS_ReqCreateRoom
         * @static
         * @param {msg.GW2MS_ReqCreateRoom} message GW2MS_ReqCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2MS_ReqCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            return object;
        };

        /**
         * Converts this GW2MS_ReqCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.GW2MS_ReqCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2MS_ReqCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2MS_ReqCreateRoom;
    })();

    msg.MS2GW_RetCreateRoom = (function() {

        /**
         * Properties of a MS2GW_RetCreateRoom.
         * @memberof msg
         * @interface IMS2GW_RetCreateRoom
         * @property {number|Long|null} [userid] MS2GW_RetCreateRoom userid
         * @property {number|Long|null} [roomid] MS2GW_RetCreateRoom roomid
         * @property {string|null} [errcode] MS2GW_RetCreateRoom errcode
         * @property {string|null} [roomagent] MS2GW_RetCreateRoom roomagent
         */

        /**
         * Constructs a new MS2GW_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a MS2GW_RetCreateRoom.
         * @implements IMS2GW_RetCreateRoom
         * @constructor
         * @param {msg.IMS2GW_RetCreateRoom=} [properties] Properties to set
         */
        function MS2GW_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2GW_RetCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MS2GW_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2GW_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.errcode = "";

        /**
         * MS2GW_RetCreateRoom roomagent.
         * @member {string} roomagent
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         */
        MS2GW_RetCreateRoom.prototype.roomagent = "";

        /**
         * Creates a new MS2GW_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom instance
         */
        MS2GW_RetCreateRoom.create = function create(properties) {
            return new MS2GW_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified MS2GW_RetCreateRoom message. Does not implicitly {@link msg.MS2GW_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom} message MS2GW_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomagent);
            return writer;
        };

        /**
         * Encodes the specified MS2GW_RetCreateRoom message, length delimited. Does not implicitly {@link msg.MS2GW_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.IMS2GW_RetCreateRoom} message MS2GW_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2GW_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2GW_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2GW_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                case 4:
                    message.roomagent = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2GW_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2GW_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2GW_RetCreateRoom message.
         * @function verify
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2GW_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                if (!$util.isString(message.roomagent))
                    return "roomagent: string expected";
            return null;
        };

        /**
         * Creates a MS2GW_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2GW_RetCreateRoom} MS2GW_RetCreateRoom
         */
        MS2GW_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2GW_RetCreateRoom)
                return object;
            var message = new $root.msg.MS2GW_RetCreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.roomagent != null)
                message.roomagent = String(object.roomagent);
            return message;
        };

        /**
         * Creates a plain object from a MS2GW_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2GW_RetCreateRoom
         * @static
         * @param {msg.MS2GW_RetCreateRoom} message MS2GW_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2GW_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.errcode = "";
                object.roomagent = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.roomagent != null && message.hasOwnProperty("roomagent"))
                object.roomagent = message.roomagent;
            return object;
        };

        /**
         * Converts this MS2GW_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.MS2GW_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2GW_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2GW_RetCreateRoom;
    })();

    msg.RS2GW_ReqRegist = (function() {

        /**
         * Properties of a RS2GW_ReqRegist.
         * @memberof msg
         * @interface IRS2GW_ReqRegist
         * @property {string|null} [account] RS2GW_ReqRegist account
         * @property {string|null} [passwd] RS2GW_ReqRegist passwd
         * @property {string|null} [agentname] RS2GW_ReqRegist agentname
         */

        /**
         * Constructs a new RS2GW_ReqRegist.
         * @memberof msg
         * @classdesc Represents a RS2GW_ReqRegist.
         * @implements IRS2GW_ReqRegist
         * @constructor
         * @param {msg.IRS2GW_ReqRegist=} [properties] Properties to set
         */
        function RS2GW_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_ReqRegist account.
         * @member {string} account
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.account = "";

        /**
         * RS2GW_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.passwd = "";

        /**
         * RS2GW_ReqRegist agentname.
         * @member {string} agentname
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         */
        RS2GW_ReqRegist.prototype.agentname = "";

        /**
         * Creates a new RS2GW_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist=} [properties] Properties to set
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist instance
         */
        RS2GW_ReqRegist.create = function create(properties) {
            return new RS2GW_ReqRegist(properties);
        };

        /**
         * Encodes the specified RS2GW_ReqRegist message. Does not implicitly {@link msg.RS2GW_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist} message RS2GW_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.agentname);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_ReqRegist message, length delimited. Does not implicitly {@link msg.RS2GW_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.IRS2GW_ReqRegist} message RS2GW_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.agentname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_ReqRegist message.
         * @function verify
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            return null;
        };

        /**
         * Creates a RS2GW_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_ReqRegist} RS2GW_ReqRegist
         */
        RS2GW_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_ReqRegist)
                return object;
            var message = new $root.msg.RS2GW_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_ReqRegist
         * @static
         * @param {msg.RS2GW_ReqRegist} message RS2GW_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.agentname = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            return object;
        };

        /**
         * Converts this RS2GW_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_ReqRegist;
    })();

    msg.GW2RS_RetRegist = (function() {

        /**
         * Properties of a GW2RS_RetRegist.
         * @memberof msg
         * @interface IGW2RS_RetRegist
         * @property {string|null} [errcode] GW2RS_RetRegist errcode
         * @property {string|null} [agentname] GW2RS_RetRegist agentname
         */

        /**
         * Constructs a new GW2RS_RetRegist.
         * @memberof msg
         * @classdesc Represents a GW2RS_RetRegist.
         * @implements IGW2RS_RetRegist
         * @constructor
         * @param {msg.IGW2RS_RetRegist=} [properties] Properties to set
         */
        function GW2RS_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.GW2RS_RetRegist
         * @instance
         */
        GW2RS_RetRegist.prototype.errcode = "";

        /**
         * GW2RS_RetRegist agentname.
         * @member {string} agentname
         * @memberof msg.GW2RS_RetRegist
         * @instance
         */
        GW2RS_RetRegist.prototype.agentname = "";

        /**
         * Creates a new GW2RS_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist=} [properties] Properties to set
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist instance
         */
        GW2RS_RetRegist.create = function create(properties) {
            return new GW2RS_RetRegist(properties);
        };

        /**
         * Encodes the specified GW2RS_RetRegist message. Does not implicitly {@link msg.GW2RS_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist} message GW2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.agentname);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_RetRegist message, length delimited. Does not implicitly {@link msg.GW2RS_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.IGW2RS_RetRegist} message GW2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                case 2:
                    message.agentname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_RetRegist message.
         * @function verify
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                if (!$util.isString(message.agentname))
                    return "agentname: string expected";
            return null;
        };

        /**
         * Creates a GW2RS_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_RetRegist} GW2RS_RetRegist
         */
        GW2RS_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_RetRegist)
                return object;
            var message = new $root.msg.GW2RS_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            if (object.agentname != null)
                message.agentname = String(object.agentname);
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_RetRegist
         * @static
         * @param {msg.GW2RS_RetRegist} message GW2RS_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errcode = "";
                object.agentname = "";
            }
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            if (message.agentname != null && message.hasOwnProperty("agentname"))
                object.agentname = message.agentname;
            return object;
        };

        /**
         * Converts this GW2RS_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_RetRegist;
    })();

    msg.GW2RS_UserDisconnect = (function() {

        /**
         * Properties of a GW2RS_UserDisconnect.
         * @memberof msg
         * @interface IGW2RS_UserDisconnect
         * @property {number|Long|null} [roomid] GW2RS_UserDisconnect roomid
         * @property {number|Long|null} [userid] GW2RS_UserDisconnect userid
         */

        /**
         * Constructs a new GW2RS_UserDisconnect.
         * @memberof msg
         * @classdesc Represents a GW2RS_UserDisconnect.
         * @implements IGW2RS_UserDisconnect
         * @constructor
         * @param {msg.IGW2RS_UserDisconnect=} [properties] Properties to set
         */
        function GW2RS_UserDisconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_UserDisconnect roomid.
         * @member {number|Long} roomid
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         */
        GW2RS_UserDisconnect.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GW2RS_UserDisconnect userid.
         * @member {number|Long} userid
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         */
        GW2RS_UserDisconnect.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2RS_UserDisconnect instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect=} [properties] Properties to set
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect instance
         */
        GW2RS_UserDisconnect.create = function create(properties) {
            return new GW2RS_UserDisconnect(properties);
        };

        /**
         * Encodes the specified GW2RS_UserDisconnect message. Does not implicitly {@link msg.GW2RS_UserDisconnect.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect} message GW2RS_UserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UserDisconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_UserDisconnect message, length delimited. Does not implicitly {@link msg.GW2RS_UserDisconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.IGW2RS_UserDisconnect} message GW2RS_UserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_UserDisconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_UserDisconnect message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UserDisconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_UserDisconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_UserDisconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_UserDisconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_UserDisconnect message.
         * @function verify
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_UserDisconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2RS_UserDisconnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_UserDisconnect} GW2RS_UserDisconnect
         */
        GW2RS_UserDisconnect.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_UserDisconnect)
                return object;
            var message = new $root.msg.GW2RS_UserDisconnect();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_UserDisconnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_UserDisconnect
         * @static
         * @param {msg.GW2RS_UserDisconnect} message GW2RS_UserDisconnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_UserDisconnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this GW2RS_UserDisconnect to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_UserDisconnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_UserDisconnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_UserDisconnect;
    })();

    msg.RS2GW_RetUserDisconnect = (function() {

        /**
         * Properties of a RS2GW_RetUserDisconnect.
         * @memberof msg
         * @interface IRS2GW_RetUserDisconnect
         * @property {number|Long|null} [roomid] RS2GW_RetUserDisconnect roomid
         * @property {number|Long|null} [userid] RS2GW_RetUserDisconnect userid
         * @property {string|null} [errcode] RS2GW_RetUserDisconnect errcode
         */

        /**
         * Constructs a new RS2GW_RetUserDisconnect.
         * @memberof msg
         * @classdesc Represents a RS2GW_RetUserDisconnect.
         * @implements IRS2GW_RetUserDisconnect
         * @constructor
         * @param {msg.IRS2GW_RetUserDisconnect=} [properties] Properties to set
         */
        function RS2GW_RetUserDisconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_RetUserDisconnect roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2GW_RetUserDisconnect userid.
         * @member {number|Long} userid
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RS2GW_RetUserDisconnect errcode.
         * @member {string} errcode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         */
        RS2GW_RetUserDisconnect.prototype.errcode = "";

        /**
         * Creates a new RS2GW_RetUserDisconnect instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect=} [properties] Properties to set
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect instance
         */
        RS2GW_RetUserDisconnect.create = function create(properties) {
            return new RS2GW_RetUserDisconnect(properties);
        };

        /**
         * Encodes the specified RS2GW_RetUserDisconnect message. Does not implicitly {@link msg.RS2GW_RetUserDisconnect.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_RetUserDisconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_RetUserDisconnect message, length delimited. Does not implicitly {@link msg.RS2GW_RetUserDisconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.IRS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_RetUserDisconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_RetUserDisconnect message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_RetUserDisconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_RetUserDisconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_RetUserDisconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_RetUserDisconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_RetUserDisconnect message.
         * @function verify
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_RetUserDisconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a RS2GW_RetUserDisconnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_RetUserDisconnect} RS2GW_RetUserDisconnect
         */
        RS2GW_RetUserDisconnect.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_RetUserDisconnect)
                return object;
            var message = new $root.msg.RS2GW_RetUserDisconnect();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_RetUserDisconnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_RetUserDisconnect
         * @static
         * @param {msg.RS2GW_RetUserDisconnect} message RS2GW_RetUserDisconnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_RetUserDisconnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.errcode = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this RS2GW_RetUserDisconnect to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_RetUserDisconnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_RetUserDisconnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_RetUserDisconnect;
    })();

    msg.GW2RS_MsgTransfer = (function() {

        /**
         * Properties of a GW2RS_MsgTransfer.
         * @memberof msg
         * @interface IGW2RS_MsgTransfer
         * @property {number|Long|null} [uid] GW2RS_MsgTransfer uid
         * @property {string|null} [name] GW2RS_MsgTransfer name
         * @property {Uint8Array|null} [buf] GW2RS_MsgTransfer buf
         */

        /**
         * Constructs a new GW2RS_MsgTransfer.
         * @memberof msg
         * @classdesc Represents a GW2RS_MsgTransfer.
         * @implements IGW2RS_MsgTransfer
         * @constructor
         * @param {msg.IGW2RS_MsgTransfer=} [properties] Properties to set
         */
        function GW2RS_MsgTransfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2RS_MsgTransfer uid.
         * @member {number|Long} uid
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         */
        GW2RS_MsgTransfer.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2RS_MsgTransfer name.
         * @member {string} name
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         */
        GW2RS_MsgTransfer.prototype.name = "";

        /**
         * GW2RS_MsgTransfer buf.
         * @member {Uint8Array} buf
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         */
        GW2RS_MsgTransfer.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new GW2RS_MsgTransfer instance using the specified properties.
         * @function create
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.IGW2RS_MsgTransfer=} [properties] Properties to set
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer instance
         */
        GW2RS_MsgTransfer.create = function create(properties) {
            return new GW2RS_MsgTransfer(properties);
        };

        /**
         * Encodes the specified GW2RS_MsgTransfer message. Does not implicitly {@link msg.GW2RS_MsgTransfer.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.IGW2RS_MsgTransfer} message GW2RS_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_MsgTransfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.buf != null && message.hasOwnProperty("buf"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified GW2RS_MsgTransfer message, length delimited. Does not implicitly {@link msg.GW2RS_MsgTransfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.IGW2RS_MsgTransfer} message GW2RS_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2RS_MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2RS_MsgTransfer message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_MsgTransfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2RS_MsgTransfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.buf = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2RS_MsgTransfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2RS_MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2RS_MsgTransfer message.
         * @function verify
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2RS_MsgTransfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a GW2RS_MsgTransfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2RS_MsgTransfer} GW2RS_MsgTransfer
         */
        GW2RS_MsgTransfer.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2RS_MsgTransfer)
                return object;
            var message = new $root.msg.GW2RS_MsgTransfer();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a GW2RS_MsgTransfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2RS_MsgTransfer
         * @static
         * @param {msg.GW2RS_MsgTransfer} message GW2RS_MsgTransfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2RS_MsgTransfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.name = "";
                if (options.bytes === String)
                    object.buf = "";
                else {
                    object.buf = [];
                    if (options.bytes !== Array)
                        object.buf = $util.newBuffer(object.buf);
                }
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this GW2RS_MsgTransfer to JSON.
         * @function toJSON
         * @memberof msg.GW2RS_MsgTransfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2RS_MsgTransfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2RS_MsgTransfer;
    })();

    msg.RS2GW_MsgTransfer = (function() {

        /**
         * Properties of a RS2GW_MsgTransfer.
         * @memberof msg
         * @interface IRS2GW_MsgTransfer
         * @property {number|Long|null} [uid] RS2GW_MsgTransfer uid
         * @property {string|null} [name] RS2GW_MsgTransfer name
         * @property {Uint8Array|null} [buf] RS2GW_MsgTransfer buf
         */

        /**
         * Constructs a new RS2GW_MsgTransfer.
         * @memberof msg
         * @classdesc Represents a RS2GW_MsgTransfer.
         * @implements IRS2GW_MsgTransfer
         * @constructor
         * @param {msg.IRS2GW_MsgTransfer=} [properties] Properties to set
         */
        function RS2GW_MsgTransfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2GW_MsgTransfer uid.
         * @member {number|Long} uid
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RS2GW_MsgTransfer name.
         * @member {string} name
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.name = "";

        /**
         * RS2GW_MsgTransfer buf.
         * @member {Uint8Array} buf
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         */
        RS2GW_MsgTransfer.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new RS2GW_MsgTransfer instance using the specified properties.
         * @function create
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer=} [properties] Properties to set
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer instance
         */
        RS2GW_MsgTransfer.create = function create(properties) {
            return new RS2GW_MsgTransfer(properties);
        };

        /**
         * Encodes the specified RS2GW_MsgTransfer message. Does not implicitly {@link msg.RS2GW_MsgTransfer.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer} message RS2GW_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_MsgTransfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.buf != null && message.hasOwnProperty("buf"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified RS2GW_MsgTransfer message, length delimited. Does not implicitly {@link msg.RS2GW_MsgTransfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.IRS2GW_MsgTransfer} message RS2GW_MsgTransfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2GW_MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2GW_MsgTransfer message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_MsgTransfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2GW_MsgTransfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.buf = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2GW_MsgTransfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2GW_MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2GW_MsgTransfer message.
         * @function verify
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2GW_MsgTransfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a RS2GW_MsgTransfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2GW_MsgTransfer} RS2GW_MsgTransfer
         */
        RS2GW_MsgTransfer.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2GW_MsgTransfer)
                return object;
            var message = new $root.msg.RS2GW_MsgTransfer();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a RS2GW_MsgTransfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2GW_MsgTransfer
         * @static
         * @param {msg.RS2GW_MsgTransfer} message RS2GW_MsgTransfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2GW_MsgTransfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.name = "";
                if (options.bytes === String)
                    object.buf = "";
                else {
                    object.buf = [];
                    if (options.bytes !== Array)
                        object.buf = $util.newBuffer(object.buf);
                }
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this RS2GW_MsgTransfer to JSON.
         * @function toJSON
         * @memberof msg.RS2GW_MsgTransfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2GW_MsgTransfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2GW_MsgTransfer;
    })();

    msg.RS2MS_ReqRegist = (function() {

        /**
         * Properties of a RS2MS_ReqRegist.
         * @memberof msg
         * @interface IRS2MS_ReqRegist
         * @property {string|null} [account] RS2MS_ReqRegist account
         * @property {string|null} [passwd] RS2MS_ReqRegist passwd
         * @property {string|null} [name] RS2MS_ReqRegist name
         */

        /**
         * Constructs a new RS2MS_ReqRegist.
         * @memberof msg
         * @classdesc Represents a RS2MS_ReqRegist.
         * @implements IRS2MS_ReqRegist
         * @constructor
         * @param {msg.IRS2MS_ReqRegist=} [properties] Properties to set
         */
        function RS2MS_ReqRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_ReqRegist account.
         * @member {string} account
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.account = "";

        /**
         * RS2MS_ReqRegist passwd.
         * @member {string} passwd
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.passwd = "";

        /**
         * RS2MS_ReqRegist name.
         * @member {string} name
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         */
        RS2MS_ReqRegist.prototype.name = "";

        /**
         * Creates a new RS2MS_ReqRegist instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist=} [properties] Properties to set
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist instance
         */
        RS2MS_ReqRegist.create = function create(properties) {
            return new RS2MS_ReqRegist(properties);
        };

        /**
         * Encodes the specified RS2MS_ReqRegist message. Does not implicitly {@link msg.RS2MS_ReqRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist} message RS2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_ReqRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && message.hasOwnProperty("account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.passwd);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_ReqRegist message, length delimited. Does not implicitly {@link msg.RS2MS_ReqRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.IRS2MS_ReqRegist} message RS2MS_ReqRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_ReqRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_ReqRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_ReqRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_ReqRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.passwd = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_ReqRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_ReqRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_ReqRegist message.
         * @function verify
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_ReqRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                if (!$util.isString(message.passwd))
                    return "passwd: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a RS2MS_ReqRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_ReqRegist} RS2MS_ReqRegist
         */
        RS2MS_ReqRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_ReqRegist)
                return object;
            var message = new $root.msg.RS2MS_ReqRegist();
            if (object.account != null)
                message.account = String(object.account);
            if (object.passwd != null)
                message.passwd = String(object.passwd);
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_ReqRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_ReqRegist
         * @static
         * @param {msg.RS2MS_ReqRegist} message RS2MS_ReqRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_ReqRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.passwd = "";
                object.name = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.passwd != null && message.hasOwnProperty("passwd"))
                object.passwd = message.passwd;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this RS2MS_ReqRegist to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_ReqRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_ReqRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_ReqRegist;
    })();

    msg.MS2RS_RetRegist = (function() {

        /**
         * Properties of a MS2RS_RetRegist.
         * @memberof msg
         * @interface IMS2RS_RetRegist
         * @property {string|null} [errcode] MS2RS_RetRegist errcode
         */

        /**
         * Constructs a new MS2RS_RetRegist.
         * @memberof msg
         * @classdesc Represents a MS2RS_RetRegist.
         * @implements IMS2RS_RetRegist
         * @constructor
         * @param {msg.IMS2RS_RetRegist=} [properties] Properties to set
         */
        function MS2RS_RetRegist(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_RetRegist errcode.
         * @member {string} errcode
         * @memberof msg.MS2RS_RetRegist
         * @instance
         */
        MS2RS_RetRegist.prototype.errcode = "";

        /**
         * Creates a new MS2RS_RetRegist instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist=} [properties] Properties to set
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist instance
         */
        MS2RS_RetRegist.create = function create(properties) {
            return new MS2RS_RetRegist(properties);
        };

        /**
         * Encodes the specified MS2RS_RetRegist message. Does not implicitly {@link msg.MS2RS_RetRegist.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist} message MS2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_RetRegist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified MS2RS_RetRegist message, length delimited. Does not implicitly {@link msg.MS2RS_RetRegist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.IMS2RS_RetRegist} message MS2RS_RetRegist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_RetRegist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_RetRegist message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_RetRegist.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_RetRegist();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_RetRegist message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_RetRegist.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_RetRegist message.
         * @function verify
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_RetRegist.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a MS2RS_RetRegist message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_RetRegist} MS2RS_RetRegist
         */
        MS2RS_RetRegist.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_RetRegist)
                return object;
            var message = new $root.msg.MS2RS_RetRegist();
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_RetRegist message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_RetRegist
         * @static
         * @param {msg.MS2RS_RetRegist} message MS2RS_RetRegist
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_RetRegist.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.errcode = "";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this MS2RS_RetRegist to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_RetRegist
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_RetRegist.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_RetRegist;
    })();

    msg.RS2MS_HeartBeat = (function() {

        /**
         * Properties of a RS2MS_HeartBeat.
         * @memberof msg
         * @interface IRS2MS_HeartBeat
         */

        /**
         * Constructs a new RS2MS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a RS2MS_HeartBeat.
         * @implements IRS2MS_HeartBeat
         * @constructor
         * @param {msg.IRS2MS_HeartBeat=} [properties] Properties to set
         */
        function RS2MS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RS2MS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat=} [properties] Properties to set
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat instance
         */
        RS2MS_HeartBeat.create = function create(properties) {
            return new RS2MS_HeartBeat(properties);
        };

        /**
         * Encodes the specified RS2MS_HeartBeat message. Does not implicitly {@link msg.RS2MS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat} message RS2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RS2MS_HeartBeat message, length delimited. Does not implicitly {@link msg.RS2MS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.IRS2MS_HeartBeat} message RS2MS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_HeartBeat message.
         * @function verify
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RS2MS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_HeartBeat} RS2MS_HeartBeat
         */
        RS2MS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_HeartBeat)
                return object;
            return new $root.msg.RS2MS_HeartBeat();
        };

        /**
         * Creates a plain object from a RS2MS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_HeartBeat
         * @static
         * @param {msg.RS2MS_HeartBeat} message RS2MS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RS2MS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_HeartBeat;
    })();

    msg.MS2RS_HeartBeat = (function() {

        /**
         * Properties of a MS2RS_HeartBeat.
         * @memberof msg
         * @interface IMS2RS_HeartBeat
         */

        /**
         * Constructs a new MS2RS_HeartBeat.
         * @memberof msg
         * @classdesc Represents a MS2RS_HeartBeat.
         * @implements IMS2RS_HeartBeat
         * @constructor
         * @param {msg.IMS2RS_HeartBeat=} [properties] Properties to set
         */
        function MS2RS_HeartBeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new MS2RS_HeartBeat instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat=} [properties] Properties to set
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat instance
         */
        MS2RS_HeartBeat.create = function create(properties) {
            return new MS2RS_HeartBeat(properties);
        };

        /**
         * Encodes the specified MS2RS_HeartBeat message. Does not implicitly {@link msg.MS2RS_HeartBeat.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat} message MS2RS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_HeartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_HeartBeat message, length delimited. Does not implicitly {@link msg.MS2RS_HeartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.IMS2RS_HeartBeat} message MS2RS_HeartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_HeartBeat message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_HeartBeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_HeartBeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_HeartBeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_HeartBeat message.
         * @function verify
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_HeartBeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a MS2RS_HeartBeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_HeartBeat} MS2RS_HeartBeat
         */
        MS2RS_HeartBeat.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_HeartBeat)
                return object;
            return new $root.msg.MS2RS_HeartBeat();
        };

        /**
         * Creates a plain object from a MS2RS_HeartBeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_HeartBeat
         * @static
         * @param {msg.MS2RS_HeartBeat} message MS2RS_HeartBeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_HeartBeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this MS2RS_HeartBeat to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_HeartBeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_HeartBeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_HeartBeat;
    })();

    msg.GateSimpleInfo = (function() {

        /**
         * Properties of a GateSimpleInfo.
         * @memberof msg
         * @interface IGateSimpleInfo
         * @property {string|null} [name] GateSimpleInfo name
         * @property {msg.IIpHost|null} [host] GateSimpleInfo host
         */

        /**
         * Constructs a new GateSimpleInfo.
         * @memberof msg
         * @classdesc Represents a GateSimpleInfo.
         * @implements IGateSimpleInfo
         * @constructor
         * @param {msg.IGateSimpleInfo=} [properties] Properties to set
         */
        function GateSimpleInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GateSimpleInfo name.
         * @member {string} name
         * @memberof msg.GateSimpleInfo
         * @instance
         */
        GateSimpleInfo.prototype.name = "";

        /**
         * GateSimpleInfo host.
         * @member {msg.IIpHost|null|undefined} host
         * @memberof msg.GateSimpleInfo
         * @instance
         */
        GateSimpleInfo.prototype.host = null;

        /**
         * Creates a new GateSimpleInfo instance using the specified properties.
         * @function create
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo=} [properties] Properties to set
         * @returns {msg.GateSimpleInfo} GateSimpleInfo instance
         */
        GateSimpleInfo.create = function create(properties) {
            return new GateSimpleInfo(properties);
        };

        /**
         * Encodes the specified GateSimpleInfo message. Does not implicitly {@link msg.GateSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo} message GateSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GateSimpleInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.host != null && message.hasOwnProperty("host"))
                $root.msg.IpHost.encode(message.host, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GateSimpleInfo message, length delimited. Does not implicitly {@link msg.GateSimpleInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.IGateSimpleInfo} message GateSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GateSimpleInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GateSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GateSimpleInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GateSimpleInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.host = $root.msg.IpHost.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GateSimpleInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GateSimpleInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GateSimpleInfo message.
         * @function verify
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GateSimpleInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.host != null && message.hasOwnProperty("host")) {
                var error = $root.msg.IpHost.verify(message.host);
                if (error)
                    return "host." + error;
            }
            return null;
        };

        /**
         * Creates a GateSimpleInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GateSimpleInfo} GateSimpleInfo
         */
        GateSimpleInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GateSimpleInfo)
                return object;
            var message = new $root.msg.GateSimpleInfo();
            if (object.name != null)
                message.name = String(object.name);
            if (object.host != null) {
                if (typeof object.host !== "object")
                    throw TypeError(".msg.GateSimpleInfo.host: object expected");
                message.host = $root.msg.IpHost.fromObject(object.host);
            }
            return message;
        };

        /**
         * Creates a plain object from a GateSimpleInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GateSimpleInfo
         * @static
         * @param {msg.GateSimpleInfo} message GateSimpleInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GateSimpleInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.host = null;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = $root.msg.IpHost.toObject(message.host, options);
            return object;
        };

        /**
         * Converts this GateSimpleInfo to JSON.
         * @function toJSON
         * @memberof msg.GateSimpleInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GateSimpleInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GateSimpleInfo;
    })();

    msg.MS2RS_GateInfo = (function() {

        /**
         * Properties of a MS2RS_GateInfo.
         * @memberof msg
         * @interface IMS2RS_GateInfo
         * @property {Array.<msg.IGateSimpleInfo>|null} [gates] MS2RS_GateInfo gates
         */

        /**
         * Constructs a new MS2RS_GateInfo.
         * @memberof msg
         * @classdesc Represents a MS2RS_GateInfo.
         * @implements IMS2RS_GateInfo
         * @constructor
         * @param {msg.IMS2RS_GateInfo=} [properties] Properties to set
         */
        function MS2RS_GateInfo(properties) {
            this.gates = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_GateInfo gates.
         * @member {Array.<msg.IGateSimpleInfo>} gates
         * @memberof msg.MS2RS_GateInfo
         * @instance
         */
        MS2RS_GateInfo.prototype.gates = $util.emptyArray;

        /**
         * Creates a new MS2RS_GateInfo instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo=} [properties] Properties to set
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo instance
         */
        MS2RS_GateInfo.create = function create(properties) {
            return new MS2RS_GateInfo(properties);
        };

        /**
         * Encodes the specified MS2RS_GateInfo message. Does not implicitly {@link msg.MS2RS_GateInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo} message MS2RS_GateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_GateInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gates != null && message.gates.length)
                for (var i = 0; i < message.gates.length; ++i)
                    $root.msg.GateSimpleInfo.encode(message.gates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MS2RS_GateInfo message, length delimited. Does not implicitly {@link msg.MS2RS_GateInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.IMS2RS_GateInfo} message MS2RS_GateInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_GateInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_GateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_GateInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_GateInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.gates && message.gates.length))
                        message.gates = [];
                    message.gates.push($root.msg.GateSimpleInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_GateInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_GateInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_GateInfo message.
         * @function verify
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_GateInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gates != null && message.hasOwnProperty("gates")) {
                if (!Array.isArray(message.gates))
                    return "gates: array expected";
                for (var i = 0; i < message.gates.length; ++i) {
                    var error = $root.msg.GateSimpleInfo.verify(message.gates[i]);
                    if (error)
                        return "gates." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MS2RS_GateInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_GateInfo} MS2RS_GateInfo
         */
        MS2RS_GateInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_GateInfo)
                return object;
            var message = new $root.msg.MS2RS_GateInfo();
            if (object.gates) {
                if (!Array.isArray(object.gates))
                    throw TypeError(".msg.MS2RS_GateInfo.gates: array expected");
                message.gates = [];
                for (var i = 0; i < object.gates.length; ++i) {
                    if (typeof object.gates[i] !== "object")
                        throw TypeError(".msg.MS2RS_GateInfo.gates: object expected");
                    message.gates[i] = $root.msg.GateSimpleInfo.fromObject(object.gates[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_GateInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_GateInfo
         * @static
         * @param {msg.MS2RS_GateInfo} message MS2RS_GateInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_GateInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.gates = [];
            if (message.gates && message.gates.length) {
                object.gates = [];
                for (var j = 0; j < message.gates.length; ++j)
                    object.gates[j] = $root.msg.GateSimpleInfo.toObject(message.gates[j], options);
            }
            return object;
        };

        /**
         * Converts this MS2RS_GateInfo to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_GateInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_GateInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_GateInfo;
    })();

    msg.MS2RS_CreateRoom = (function() {

        /**
         * Properties of a MS2RS_CreateRoom.
         * @memberof msg
         * @interface IMS2RS_CreateRoom
         * @property {number|Long|null} [userid] MS2RS_CreateRoom userid
         * @property {number|Long|null} [roomid] MS2RS_CreateRoom roomid
         * @property {number|null} [gamekind] MS2RS_CreateRoom gamekind
         * @property {number|null} [gridnum] MS2RS_CreateRoom gridnum
         * @property {number|null} [sidgate] MS2RS_CreateRoom sidgate
         * @property {boolean|null} [quotaflag] MS2RS_CreateRoom quotaflag
         */

        /**
         * Constructs a new MS2RS_CreateRoom.
         * @memberof msg
         * @classdesc Represents a MS2RS_CreateRoom.
         * @implements IMS2RS_CreateRoom
         * @constructor
         * @param {msg.IMS2RS_CreateRoom=} [properties] Properties to set
         */
        function MS2RS_CreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2RS_CreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MS2RS_CreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MS2RS_CreateRoom gamekind.
         * @member {number} gamekind
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.gamekind = 0;

        /**
         * MS2RS_CreateRoom gridnum.
         * @member {number} gridnum
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.gridnum = 0;

        /**
         * MS2RS_CreateRoom sidgate.
         * @member {number} sidgate
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.sidgate = 0;

        /**
         * MS2RS_CreateRoom quotaflag.
         * @member {boolean} quotaflag
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         */
        MS2RS_CreateRoom.prototype.quotaflag = false;

        /**
         * Creates a new MS2RS_CreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom=} [properties] Properties to set
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom instance
         */
        MS2RS_CreateRoom.create = function create(properties) {
            return new MS2RS_CreateRoom(properties);
        };

        /**
         * Encodes the specified MS2RS_CreateRoom message. Does not implicitly {@link msg.MS2RS_CreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom} message MS2RS_CreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_CreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roomid);
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamekind);
            if (message.gridnum != null && message.hasOwnProperty("gridnum"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gridnum);
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.sidgate);
            if (message.quotaflag != null && message.hasOwnProperty("quotaflag"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.quotaflag);
            return writer;
        };

        /**
         * Encodes the specified MS2RS_CreateRoom message, length delimited. Does not implicitly {@link msg.MS2RS_CreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.IMS2RS_CreateRoom} message MS2RS_CreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2RS_CreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2RS_CreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_CreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2RS_CreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                case 2:
                    message.roomid = reader.int64();
                    break;
                case 3:
                    message.gamekind = reader.int32();
                    break;
                case 4:
                    message.gridnum = reader.int32();
                    break;
                case 5:
                    message.sidgate = reader.int32();
                    break;
                case 6:
                    message.quotaflag = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2RS_CreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2RS_CreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2RS_CreateRoom message.
         * @function verify
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2RS_CreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                if (!$util.isInteger(message.gamekind))
                    return "gamekind: integer expected";
            if (message.gridnum != null && message.hasOwnProperty("gridnum"))
                if (!$util.isInteger(message.gridnum))
                    return "gridnum: integer expected";
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                if (!$util.isInteger(message.sidgate))
                    return "sidgate: integer expected";
            if (message.quotaflag != null && message.hasOwnProperty("quotaflag"))
                if (typeof message.quotaflag !== "boolean")
                    return "quotaflag: boolean expected";
            return null;
        };

        /**
         * Creates a MS2RS_CreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2RS_CreateRoom} MS2RS_CreateRoom
         */
        MS2RS_CreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2RS_CreateRoom)
                return object;
            var message = new $root.msg.MS2RS_CreateRoom();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.gamekind != null)
                message.gamekind = object.gamekind | 0;
            if (object.gridnum != null)
                message.gridnum = object.gridnum | 0;
            if (object.sidgate != null)
                message.sidgate = object.sidgate | 0;
            if (object.quotaflag != null)
                message.quotaflag = Boolean(object.quotaflag);
            return message;
        };

        /**
         * Creates a plain object from a MS2RS_CreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2RS_CreateRoom
         * @static
         * @param {msg.MS2RS_CreateRoom} message MS2RS_CreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2RS_CreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                object.gamekind = 0;
                object.gridnum = 0;
                object.sidgate = 0;
                object.quotaflag = false;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.gamekind != null && message.hasOwnProperty("gamekind"))
                object.gamekind = message.gamekind;
            if (message.gridnum != null && message.hasOwnProperty("gridnum"))
                object.gridnum = message.gridnum;
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                object.sidgate = message.sidgate;
            if (message.quotaflag != null && message.hasOwnProperty("quotaflag"))
                object.quotaflag = message.quotaflag;
            return object;
        };

        /**
         * Converts this MS2RS_CreateRoom to JSON.
         * @function toJSON
         * @memberof msg.MS2RS_CreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2RS_CreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2RS_CreateRoom;
    })();

    msg.RS2MS_RetCreateRoom = (function() {

        /**
         * Properties of a RS2MS_RetCreateRoom.
         * @memberof msg
         * @interface IRS2MS_RetCreateRoom
         * @property {number|Long|null} [roomid] RS2MS_RetCreateRoom roomid
         * @property {number|Long|null} [userid] RS2MS_RetCreateRoom userid
         * @property {number|null} [sidgate] RS2MS_RetCreateRoom sidgate
         * @property {string|null} [errcode] RS2MS_RetCreateRoom errcode
         */

        /**
         * Constructs a new RS2MS_RetCreateRoom.
         * @memberof msg
         * @classdesc Represents a RS2MS_RetCreateRoom.
         * @implements IRS2MS_RetCreateRoom
         * @constructor
         * @param {msg.IRS2MS_RetCreateRoom=} [properties] Properties to set
         */
        function RS2MS_RetCreateRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_RetCreateRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RS2MS_RetCreateRoom userid.
         * @member {number|Long} userid
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RS2MS_RetCreateRoom sidgate.
         * @member {number} sidgate
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.sidgate = 0;

        /**
         * RS2MS_RetCreateRoom errcode.
         * @member {string} errcode
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         */
        RS2MS_RetCreateRoom.prototype.errcode = "";

        /**
         * Creates a new RS2MS_RetCreateRoom instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom=} [properties] Properties to set
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom instance
         */
        RS2MS_RetCreateRoom.create = function create(properties) {
            return new RS2MS_RetCreateRoom(properties);
        };

        /**
         * Encodes the specified RS2MS_RetCreateRoom message. Does not implicitly {@link msg.RS2MS_RetCreateRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom} message RS2MS_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_RetCreateRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sidgate);
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.errcode);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_RetCreateRoom message, length delimited. Does not implicitly {@link msg.RS2MS_RetCreateRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.IRS2MS_RetCreateRoom} message RS2MS_RetCreateRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_RetCreateRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_RetCreateRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_RetCreateRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_RetCreateRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                case 3:
                    message.sidgate = reader.int32();
                    break;
                case 4:
                    message.errcode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_RetCreateRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_RetCreateRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_RetCreateRoom message.
         * @function verify
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_RetCreateRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                if (!$util.isInteger(message.sidgate))
                    return "sidgate: integer expected";
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                if (!$util.isString(message.errcode))
                    return "errcode: string expected";
            return null;
        };

        /**
         * Creates a RS2MS_RetCreateRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_RetCreateRoom} RS2MS_RetCreateRoom
         */
        RS2MS_RetCreateRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_RetCreateRoom)
                return object;
            var message = new $root.msg.RS2MS_RetCreateRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            if (object.sidgate != null)
                message.sidgate = object.sidgate | 0;
            if (object.errcode != null)
                message.errcode = String(object.errcode);
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_RetCreateRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_RetCreateRoom
         * @static
         * @param {msg.RS2MS_RetCreateRoom} message RS2MS_RetCreateRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_RetCreateRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
                object.sidgate = 0;
                object.errcode = "";
            }
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            if (message.sidgate != null && message.hasOwnProperty("sidgate"))
                object.sidgate = message.sidgate;
            if (message.errcode != null && message.hasOwnProperty("errcode"))
                object.errcode = message.errcode;
            return object;
        };

        /**
         * Converts this RS2MS_RetCreateRoom to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_RetCreateRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_RetCreateRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_RetCreateRoom;
    })();

    msg.RS2MS_DeleteRoom = (function() {

        /**
         * Properties of a RS2MS_DeleteRoom.
         * @memberof msg
         * @interface IRS2MS_DeleteRoom
         * @property {number|Long|null} [roomid] RS2MS_DeleteRoom roomid
         */

        /**
         * Constructs a new RS2MS_DeleteRoom.
         * @memberof msg
         * @classdesc Represents a RS2MS_DeleteRoom.
         * @implements IRS2MS_DeleteRoom
         * @constructor
         * @param {msg.IRS2MS_DeleteRoom=} [properties] Properties to set
         */
        function RS2MS_DeleteRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_DeleteRoom roomid.
         * @member {number|Long} roomid
         * @memberof msg.RS2MS_DeleteRoom
         * @instance
         */
        RS2MS_DeleteRoom.prototype.roomid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new RS2MS_DeleteRoom instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom=} [properties] Properties to set
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom instance
         */
        RS2MS_DeleteRoom.create = function create(properties) {
            return new RS2MS_DeleteRoom(properties);
        };

        /**
         * Encodes the specified RS2MS_DeleteRoom message. Does not implicitly {@link msg.RS2MS_DeleteRoom.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom} message RS2MS_DeleteRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_DeleteRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.roomid);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_DeleteRoom message, length delimited. Does not implicitly {@link msg.RS2MS_DeleteRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.IRS2MS_DeleteRoom} message RS2MS_DeleteRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_DeleteRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_DeleteRoom message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_DeleteRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_DeleteRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomid = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_DeleteRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_DeleteRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_DeleteRoom message.
         * @function verify
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_DeleteRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (!$util.isInteger(message.roomid) && !(message.roomid && $util.isInteger(message.roomid.low) && $util.isInteger(message.roomid.high)))
                    return "roomid: integer|Long expected";
            return null;
        };

        /**
         * Creates a RS2MS_DeleteRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_DeleteRoom} RS2MS_DeleteRoom
         */
        RS2MS_DeleteRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_DeleteRoom)
                return object;
            var message = new $root.msg.RS2MS_DeleteRoom();
            if (object.roomid != null)
                if ($util.Long)
                    (message.roomid = $util.Long.fromValue(object.roomid)).unsigned = false;
                else if (typeof object.roomid === "string")
                    message.roomid = parseInt(object.roomid, 10);
                else if (typeof object.roomid === "number")
                    message.roomid = object.roomid;
                else if (typeof object.roomid === "object")
                    message.roomid = new $util.LongBits(object.roomid.low >>> 0, object.roomid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_DeleteRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_DeleteRoom
         * @static
         * @param {msg.RS2MS_DeleteRoom} message RS2MS_DeleteRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_DeleteRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.roomid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.roomid = options.longs === String ? "0" : 0;
            if (message.roomid != null && message.hasOwnProperty("roomid"))
                if (typeof message.roomid === "number")
                    object.roomid = options.longs === String ? String(message.roomid) : message.roomid;
                else
                    object.roomid = options.longs === String ? $util.Long.prototype.toString.call(message.roomid) : options.longs === Number ? new $util.LongBits(message.roomid.low >>> 0, message.roomid.high >>> 0).toNumber() : message.roomid;
            return object;
        };

        /**
         * Converts this RS2MS_DeleteRoom to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_DeleteRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_DeleteRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_DeleteRoom;
    })();

    msg.RS2MS_UpdateRewardPool = (function() {

        /**
         * Properties of a RS2MS_UpdateRewardPool.
         * @memberof msg
         * @interface IRS2MS_UpdateRewardPool
         * @property {number|null} [mapid] RS2MS_UpdateRewardPool mapid
         * @property {number|null} [cost] RS2MS_UpdateRewardPool cost
         */

        /**
         * Constructs a new RS2MS_UpdateRewardPool.
         * @memberof msg
         * @classdesc Represents a RS2MS_UpdateRewardPool.
         * @implements IRS2MS_UpdateRewardPool
         * @constructor
         * @param {msg.IRS2MS_UpdateRewardPool=} [properties] Properties to set
         */
        function RS2MS_UpdateRewardPool(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RS2MS_UpdateRewardPool mapid.
         * @member {number} mapid
         * @memberof msg.RS2MS_UpdateRewardPool
         * @instance
         */
        RS2MS_UpdateRewardPool.prototype.mapid = 0;

        /**
         * RS2MS_UpdateRewardPool cost.
         * @member {number} cost
         * @memberof msg.RS2MS_UpdateRewardPool
         * @instance
         */
        RS2MS_UpdateRewardPool.prototype.cost = 0;

        /**
         * Creates a new RS2MS_UpdateRewardPool instance using the specified properties.
         * @function create
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.IRS2MS_UpdateRewardPool=} [properties] Properties to set
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool instance
         */
        RS2MS_UpdateRewardPool.create = function create(properties) {
            return new RS2MS_UpdateRewardPool(properties);
        };

        /**
         * Encodes the specified RS2MS_UpdateRewardPool message. Does not implicitly {@link msg.RS2MS_UpdateRewardPool.verify|verify} messages.
         * @function encode
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.IRS2MS_UpdateRewardPool} message RS2MS_UpdateRewardPool message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_UpdateRewardPool.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mapid != null && message.hasOwnProperty("mapid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mapid);
            if (message.cost != null && message.hasOwnProperty("cost"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cost);
            return writer;
        };

        /**
         * Encodes the specified RS2MS_UpdateRewardPool message, length delimited. Does not implicitly {@link msg.RS2MS_UpdateRewardPool.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.IRS2MS_UpdateRewardPool} message RS2MS_UpdateRewardPool message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RS2MS_UpdateRewardPool.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RS2MS_UpdateRewardPool message from the specified reader or buffer.
         * @function decode
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_UpdateRewardPool.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.RS2MS_UpdateRewardPool();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mapid = reader.int32();
                    break;
                case 2:
                    message.cost = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RS2MS_UpdateRewardPool message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RS2MS_UpdateRewardPool.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RS2MS_UpdateRewardPool message.
         * @function verify
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RS2MS_UpdateRewardPool.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mapid != null && message.hasOwnProperty("mapid"))
                if (!$util.isInteger(message.mapid))
                    return "mapid: integer expected";
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (!$util.isInteger(message.cost))
                    return "cost: integer expected";
            return null;
        };

        /**
         * Creates a RS2MS_UpdateRewardPool message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.RS2MS_UpdateRewardPool} RS2MS_UpdateRewardPool
         */
        RS2MS_UpdateRewardPool.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.RS2MS_UpdateRewardPool)
                return object;
            var message = new $root.msg.RS2MS_UpdateRewardPool();
            if (object.mapid != null)
                message.mapid = object.mapid | 0;
            if (object.cost != null)
                message.cost = object.cost | 0;
            return message;
        };

        /**
         * Creates a plain object from a RS2MS_UpdateRewardPool message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.RS2MS_UpdateRewardPool
         * @static
         * @param {msg.RS2MS_UpdateRewardPool} message RS2MS_UpdateRewardPool
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RS2MS_UpdateRewardPool.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mapid = 0;
                object.cost = 0;
            }
            if (message.mapid != null && message.hasOwnProperty("mapid"))
                object.mapid = message.mapid;
            if (message.cost != null && message.hasOwnProperty("cost"))
                object.cost = message.cost;
            return object;
        };

        /**
         * Converts this RS2MS_UpdateRewardPool to JSON.
         * @function toJSON
         * @memberof msg.RS2MS_UpdateRewardPool
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RS2MS_UpdateRewardPool.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RS2MS_UpdateRewardPool;
    })();

    msg.MS2Server_BroadCast = (function() {

        /**
         * Properties of a MS2Server_BroadCast.
         * @memberof msg
         * @interface IMS2Server_BroadCast
         * @property {string|null} [cmd] MS2Server_BroadCast cmd
         */

        /**
         * Constructs a new MS2Server_BroadCast.
         * @memberof msg
         * @classdesc Represents a MS2Server_BroadCast.
         * @implements IMS2Server_BroadCast
         * @constructor
         * @param {msg.IMS2Server_BroadCast=} [properties] Properties to set
         */
        function MS2Server_BroadCast(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MS2Server_BroadCast cmd.
         * @member {string} cmd
         * @memberof msg.MS2Server_BroadCast
         * @instance
         */
        MS2Server_BroadCast.prototype.cmd = "";

        /**
         * Creates a new MS2Server_BroadCast instance using the specified properties.
         * @function create
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast=} [properties] Properties to set
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast instance
         */
        MS2Server_BroadCast.create = function create(properties) {
            return new MS2Server_BroadCast(properties);
        };

        /**
         * Encodes the specified MS2Server_BroadCast message. Does not implicitly {@link msg.MS2Server_BroadCast.verify|verify} messages.
         * @function encode
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast} message MS2Server_BroadCast message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2Server_BroadCast.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cmd);
            return writer;
        };

        /**
         * Encodes the specified MS2Server_BroadCast message, length delimited. Does not implicitly {@link msg.MS2Server_BroadCast.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.IMS2Server_BroadCast} message MS2Server_BroadCast message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MS2Server_BroadCast.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MS2Server_BroadCast message from the specified reader or buffer.
         * @function decode
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2Server_BroadCast.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.MS2Server_BroadCast();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cmd = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MS2Server_BroadCast message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MS2Server_BroadCast.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MS2Server_BroadCast message.
         * @function verify
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MS2Server_BroadCast.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                if (!$util.isString(message.cmd))
                    return "cmd: string expected";
            return null;
        };

        /**
         * Creates a MS2Server_BroadCast message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.MS2Server_BroadCast} MS2Server_BroadCast
         */
        MS2Server_BroadCast.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.MS2Server_BroadCast)
                return object;
            var message = new $root.msg.MS2Server_BroadCast();
            if (object.cmd != null)
                message.cmd = String(object.cmd);
            return message;
        };

        /**
         * Creates a plain object from a MS2Server_BroadCast message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.MS2Server_BroadCast
         * @static
         * @param {msg.MS2Server_BroadCast} message MS2Server_BroadCast
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MS2Server_BroadCast.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cmd = "";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                object.cmd = message.cmd;
            return object;
        };

        /**
         * Converts this MS2Server_BroadCast to JSON.
         * @function toJSON
         * @memberof msg.MS2Server_BroadCast
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MS2Server_BroadCast.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MS2Server_BroadCast;
    })();

    msg.C2GW_ReqMapStoreInfo = (function() {

        /**
         * Properties of a C2GW_ReqMapStoreInfo.
         * @memberof msg
         * @interface IC2GW_ReqMapStoreInfo
         * @property {number|null} [shopid] C2GW_ReqMapStoreInfo shopid
         */

        /**
         * Constructs a new C2GW_ReqMapStoreInfo.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqMapStoreInfo.
         * @implements IC2GW_ReqMapStoreInfo
         * @constructor
         * @param {msg.IC2GW_ReqMapStoreInfo=} [properties] Properties to set
         */
        function C2GW_ReqMapStoreInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqMapStoreInfo shopid.
         * @member {number} shopid
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @instance
         */
        C2GW_ReqMapStoreInfo.prototype.shopid = 0;

        /**
         * Creates a new C2GW_ReqMapStoreInfo instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {msg.IC2GW_ReqMapStoreInfo=} [properties] Properties to set
         * @returns {msg.C2GW_ReqMapStoreInfo} C2GW_ReqMapStoreInfo instance
         */
        C2GW_ReqMapStoreInfo.create = function create(properties) {
            return new C2GW_ReqMapStoreInfo(properties);
        };

        /**
         * Encodes the specified C2GW_ReqMapStoreInfo message. Does not implicitly {@link msg.C2GW_ReqMapStoreInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {msg.IC2GW_ReqMapStoreInfo} message C2GW_ReqMapStoreInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqMapStoreInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.shopid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqMapStoreInfo message, length delimited. Does not implicitly {@link msg.C2GW_ReqMapStoreInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {msg.IC2GW_ReqMapStoreInfo} message C2GW_ReqMapStoreInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqMapStoreInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqMapStoreInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqMapStoreInfo} C2GW_ReqMapStoreInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqMapStoreInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqMapStoreInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.shopid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqMapStoreInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqMapStoreInfo} C2GW_ReqMapStoreInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqMapStoreInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqMapStoreInfo message.
         * @function verify
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqMapStoreInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqMapStoreInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqMapStoreInfo} C2GW_ReqMapStoreInfo
         */
        C2GW_ReqMapStoreInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqMapStoreInfo)
                return object;
            var message = new $root.msg.C2GW_ReqMapStoreInfo();
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqMapStoreInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @static
         * @param {msg.C2GW_ReqMapStoreInfo} message C2GW_ReqMapStoreInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqMapStoreInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.shopid = 0;
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            return object;
        };

        /**
         * Converts this C2GW_ReqMapStoreInfo to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqMapStoreInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqMapStoreInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqMapStoreInfo;
    })();

    msg.GW2C_SendMapStoreInfo = (function() {

        /**
         * Properties of a GW2C_SendMapStoreInfo.
         * @memberof msg
         * @interface IGW2C_SendMapStoreInfo
         * @property {number|Long|null} [uid] GW2C_SendMapStoreInfo uid
         * @property {number|null} [shopid] GW2C_SendMapStoreInfo shopid
         * @property {Array.<msg.IStoreProductData>|null} [products] GW2C_SendMapStoreInfo products
         */

        /**
         * Constructs a new GW2C_SendMapStoreInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendMapStoreInfo.
         * @implements IGW2C_SendMapStoreInfo
         * @constructor
         * @param {msg.IGW2C_SendMapStoreInfo=} [properties] Properties to set
         */
        function GW2C_SendMapStoreInfo(properties) {
            this.products = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendMapStoreInfo uid.
         * @member {number|Long} uid
         * @memberof msg.GW2C_SendMapStoreInfo
         * @instance
         */
        GW2C_SendMapStoreInfo.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * GW2C_SendMapStoreInfo shopid.
         * @member {number} shopid
         * @memberof msg.GW2C_SendMapStoreInfo
         * @instance
         */
        GW2C_SendMapStoreInfo.prototype.shopid = 0;

        /**
         * GW2C_SendMapStoreInfo products.
         * @member {Array.<msg.IStoreProductData>} products
         * @memberof msg.GW2C_SendMapStoreInfo
         * @instance
         */
        GW2C_SendMapStoreInfo.prototype.products = $util.emptyArray;

        /**
         * Creates a new GW2C_SendMapStoreInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {msg.IGW2C_SendMapStoreInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendMapStoreInfo} GW2C_SendMapStoreInfo instance
         */
        GW2C_SendMapStoreInfo.create = function create(properties) {
            return new GW2C_SendMapStoreInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendMapStoreInfo message. Does not implicitly {@link msg.GW2C_SendMapStoreInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {msg.IGW2C_SendMapStoreInfo} message GW2C_SendMapStoreInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendMapStoreInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.shopid);
            if (message.products != null && message.products.length)
                for (var i = 0; i < message.products.length; ++i)
                    $root.msg.StoreProductData.encode(message.products[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendMapStoreInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendMapStoreInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {msg.IGW2C_SendMapStoreInfo} message GW2C_SendMapStoreInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendMapStoreInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendMapStoreInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendMapStoreInfo} GW2C_SendMapStoreInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendMapStoreInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendMapStoreInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.shopid = reader.uint32();
                    break;
                case 3:
                    if (!(message.products && message.products.length))
                        message.products = [];
                    message.products.push($root.msg.StoreProductData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendMapStoreInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendMapStoreInfo} GW2C_SendMapStoreInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendMapStoreInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendMapStoreInfo message.
         * @function verify
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendMapStoreInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            if (message.products != null && message.hasOwnProperty("products")) {
                if (!Array.isArray(message.products))
                    return "products: array expected";
                for (var i = 0; i < message.products.length; ++i) {
                    var error = $root.msg.StoreProductData.verify(message.products[i]);
                    if (error)
                        return "products." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendMapStoreInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendMapStoreInfo} GW2C_SendMapStoreInfo
         */
        GW2C_SendMapStoreInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendMapStoreInfo)
                return object;
            var message = new $root.msg.GW2C_SendMapStoreInfo();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            if (object.products) {
                if (!Array.isArray(object.products))
                    throw TypeError(".msg.GW2C_SendMapStoreInfo.products: array expected");
                message.products = [];
                for (var i = 0; i < object.products.length; ++i) {
                    if (typeof object.products[i] !== "object")
                        throw TypeError(".msg.GW2C_SendMapStoreInfo.products: object expected");
                    message.products[i] = $root.msg.StoreProductData.fromObject(object.products[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendMapStoreInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendMapStoreInfo
         * @static
         * @param {msg.GW2C_SendMapStoreInfo} message GW2C_SendMapStoreInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendMapStoreInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.products = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
                object.shopid = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            if (message.products && message.products.length) {
                object.products = [];
                for (var j = 0; j < message.products.length; ++j)
                    object.products[j] = $root.msg.StoreProductData.toObject(message.products[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendMapStoreInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendMapStoreInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendMapStoreInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendMapStoreInfo;
    })();

    msg.C2GW_BuyFromMapStore = (function() {

        /**
         * Properties of a C2GW_BuyFromMapStore.
         * @memberof msg
         * @interface IC2GW_BuyFromMapStore
         * @property {number|null} [shopid] C2GW_BuyFromMapStore shopid
         * @property {number|null} [pid] C2GW_BuyFromMapStore pid
         * @property {number|null} [num] C2GW_BuyFromMapStore num
         */

        /**
         * Constructs a new C2GW_BuyFromMapStore.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyFromMapStore.
         * @implements IC2GW_BuyFromMapStore
         * @constructor
         * @param {msg.IC2GW_BuyFromMapStore=} [properties] Properties to set
         */
        function C2GW_BuyFromMapStore(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyFromMapStore shopid.
         * @member {number} shopid
         * @memberof msg.C2GW_BuyFromMapStore
         * @instance
         */
        C2GW_BuyFromMapStore.prototype.shopid = 0;

        /**
         * C2GW_BuyFromMapStore pid.
         * @member {number} pid
         * @memberof msg.C2GW_BuyFromMapStore
         * @instance
         */
        C2GW_BuyFromMapStore.prototype.pid = 0;

        /**
         * C2GW_BuyFromMapStore num.
         * @member {number} num
         * @memberof msg.C2GW_BuyFromMapStore
         * @instance
         */
        C2GW_BuyFromMapStore.prototype.num = 0;

        /**
         * Creates a new C2GW_BuyFromMapStore instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {msg.IC2GW_BuyFromMapStore=} [properties] Properties to set
         * @returns {msg.C2GW_BuyFromMapStore} C2GW_BuyFromMapStore instance
         */
        C2GW_BuyFromMapStore.create = function create(properties) {
            return new C2GW_BuyFromMapStore(properties);
        };

        /**
         * Encodes the specified C2GW_BuyFromMapStore message. Does not implicitly {@link msg.C2GW_BuyFromMapStore.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {msg.IC2GW_BuyFromMapStore} message C2GW_BuyFromMapStore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyFromMapStore.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.shopid);
            if (message.pid != null && message.hasOwnProperty("pid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pid);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.num);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyFromMapStore message, length delimited. Does not implicitly {@link msg.C2GW_BuyFromMapStore.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {msg.IC2GW_BuyFromMapStore} message C2GW_BuyFromMapStore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyFromMapStore.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyFromMapStore message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyFromMapStore} C2GW_BuyFromMapStore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyFromMapStore.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyFromMapStore();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.shopid = reader.uint32();
                    break;
                case 2:
                    message.pid = reader.uint32();
                    break;
                case 3:
                    message.num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyFromMapStore message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyFromMapStore} C2GW_BuyFromMapStore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyFromMapStore.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyFromMapStore message.
         * @function verify
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyFromMapStore.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            if (message.pid != null && message.hasOwnProperty("pid"))
                if (!$util.isInteger(message.pid))
                    return "pid: integer expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyFromMapStore message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyFromMapStore} C2GW_BuyFromMapStore
         */
        C2GW_BuyFromMapStore.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyFromMapStore)
                return object;
            var message = new $root.msg.C2GW_BuyFromMapStore();
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            if (object.pid != null)
                message.pid = object.pid >>> 0;
            if (object.num != null)
                message.num = object.num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyFromMapStore message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyFromMapStore
         * @static
         * @param {msg.C2GW_BuyFromMapStore} message C2GW_BuyFromMapStore
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyFromMapStore.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.shopid = 0;
                object.pid = 0;
                object.num = 0;
            }
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            if (message.pid != null && message.hasOwnProperty("pid"))
                object.pid = message.pid;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this C2GW_BuyFromMapStore to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyFromMapStore
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyFromMapStore.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyFromMapStore;
    })();

    msg.GW2C_UpdateMapStoreProduct = (function() {

        /**
         * Properties of a GW2C_UpdateMapStoreProduct.
         * @memberof msg
         * @interface IGW2C_UpdateMapStoreProduct
         * @property {number|null} [shopid] GW2C_UpdateMapStoreProduct shopid
         * @property {msg.IStoreProductData|null} [product] GW2C_UpdateMapStoreProduct product
         */

        /**
         * Constructs a new GW2C_UpdateMapStoreProduct.
         * @memberof msg
         * @classdesc Represents a GW2C_UpdateMapStoreProduct.
         * @implements IGW2C_UpdateMapStoreProduct
         * @constructor
         * @param {msg.IGW2C_UpdateMapStoreProduct=} [properties] Properties to set
         */
        function GW2C_UpdateMapStoreProduct(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_UpdateMapStoreProduct shopid.
         * @member {number} shopid
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @instance
         */
        GW2C_UpdateMapStoreProduct.prototype.shopid = 0;

        /**
         * GW2C_UpdateMapStoreProduct product.
         * @member {msg.IStoreProductData|null|undefined} product
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @instance
         */
        GW2C_UpdateMapStoreProduct.prototype.product = null;

        /**
         * Creates a new GW2C_UpdateMapStoreProduct instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {msg.IGW2C_UpdateMapStoreProduct=} [properties] Properties to set
         * @returns {msg.GW2C_UpdateMapStoreProduct} GW2C_UpdateMapStoreProduct instance
         */
        GW2C_UpdateMapStoreProduct.create = function create(properties) {
            return new GW2C_UpdateMapStoreProduct(properties);
        };

        /**
         * Encodes the specified GW2C_UpdateMapStoreProduct message. Does not implicitly {@link msg.GW2C_UpdateMapStoreProduct.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {msg.IGW2C_UpdateMapStoreProduct} message GW2C_UpdateMapStoreProduct message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateMapStoreProduct.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.shopid);
            if (message.product != null && message.hasOwnProperty("product"))
                $root.msg.StoreProductData.encode(message.product, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_UpdateMapStoreProduct message, length delimited. Does not implicitly {@link msg.GW2C_UpdateMapStoreProduct.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {msg.IGW2C_UpdateMapStoreProduct} message GW2C_UpdateMapStoreProduct message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_UpdateMapStoreProduct.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_UpdateMapStoreProduct message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_UpdateMapStoreProduct} GW2C_UpdateMapStoreProduct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateMapStoreProduct.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_UpdateMapStoreProduct();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.shopid = reader.uint32();
                    break;
                case 2:
                    message.product = $root.msg.StoreProductData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_UpdateMapStoreProduct message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_UpdateMapStoreProduct} GW2C_UpdateMapStoreProduct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_UpdateMapStoreProduct.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_UpdateMapStoreProduct message.
         * @function verify
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_UpdateMapStoreProduct.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                if (!$util.isInteger(message.shopid))
                    return "shopid: integer expected";
            if (message.product != null && message.hasOwnProperty("product")) {
                var error = $root.msg.StoreProductData.verify(message.product);
                if (error)
                    return "product." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_UpdateMapStoreProduct message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_UpdateMapStoreProduct} GW2C_UpdateMapStoreProduct
         */
        GW2C_UpdateMapStoreProduct.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_UpdateMapStoreProduct)
                return object;
            var message = new $root.msg.GW2C_UpdateMapStoreProduct();
            if (object.shopid != null)
                message.shopid = object.shopid >>> 0;
            if (object.product != null) {
                if (typeof object.product !== "object")
                    throw TypeError(".msg.GW2C_UpdateMapStoreProduct.product: object expected");
                message.product = $root.msg.StoreProductData.fromObject(object.product);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_UpdateMapStoreProduct message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @static
         * @param {msg.GW2C_UpdateMapStoreProduct} message GW2C_UpdateMapStoreProduct
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_UpdateMapStoreProduct.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.shopid = 0;
                object.product = null;
            }
            if (message.shopid != null && message.hasOwnProperty("shopid"))
                object.shopid = message.shopid;
            if (message.product != null && message.hasOwnProperty("product"))
                object.product = $root.msg.StoreProductData.toObject(message.product, options);
            return object;
        };

        /**
         * Converts this GW2C_UpdateMapStoreProduct to JSON.
         * @function toJSON
         * @memberof msg.GW2C_UpdateMapStoreProduct
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_UpdateMapStoreProduct.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_UpdateMapStoreProduct;
    })();

    msg.C2GW_StartThrow = (function() {

        /**
         * Properties of a C2GW_StartThrow.
         * @memberof msg
         * @interface IC2GW_StartThrow
         */

        /**
         * Constructs a new C2GW_StartThrow.
         * @memberof msg
         * @classdesc Represents a C2GW_StartThrow.
         * @implements IC2GW_StartThrow
         * @constructor
         * @param {msg.IC2GW_StartThrow=} [properties] Properties to set
         */
        function C2GW_StartThrow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_StartThrow instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {msg.IC2GW_StartThrow=} [properties] Properties to set
         * @returns {msg.C2GW_StartThrow} C2GW_StartThrow instance
         */
        C2GW_StartThrow.create = function create(properties) {
            return new C2GW_StartThrow(properties);
        };

        /**
         * Encodes the specified C2GW_StartThrow message. Does not implicitly {@link msg.C2GW_StartThrow.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {msg.IC2GW_StartThrow} message C2GW_StartThrow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartThrow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_StartThrow message, length delimited. Does not implicitly {@link msg.C2GW_StartThrow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {msg.IC2GW_StartThrow} message C2GW_StartThrow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartThrow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_StartThrow message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_StartThrow} C2GW_StartThrow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartThrow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_StartThrow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_StartThrow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_StartThrow} C2GW_StartThrow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartThrow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_StartThrow message.
         * @function verify
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_StartThrow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_StartThrow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_StartThrow} C2GW_StartThrow
         */
        C2GW_StartThrow.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_StartThrow)
                return object;
            return new $root.msg.C2GW_StartThrow();
        };

        /**
         * Creates a plain object from a C2GW_StartThrow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_StartThrow
         * @static
         * @param {msg.C2GW_StartThrow} message C2GW_StartThrow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_StartThrow.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_StartThrow to JSON.
         * @function toJSON
         * @memberof msg.C2GW_StartThrow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_StartThrow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_StartThrow;
    })();

    msg.GW2C_RetStartThrow = (function() {

        /**
         * Properties of a GW2C_RetStartThrow.
         * @memberof msg
         * @interface IGW2C_RetStartThrow
         */

        /**
         * Constructs a new GW2C_RetStartThrow.
         * @memberof msg
         * @classdesc Represents a GW2C_RetStartThrow.
         * @implements IGW2C_RetStartThrow
         * @constructor
         * @param {msg.IGW2C_RetStartThrow=} [properties] Properties to set
         */
        function GW2C_RetStartThrow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GW2C_RetStartThrow instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {msg.IGW2C_RetStartThrow=} [properties] Properties to set
         * @returns {msg.GW2C_RetStartThrow} GW2C_RetStartThrow instance
         */
        GW2C_RetStartThrow.create = function create(properties) {
            return new GW2C_RetStartThrow(properties);
        };

        /**
         * Encodes the specified GW2C_RetStartThrow message. Does not implicitly {@link msg.GW2C_RetStartThrow.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {msg.IGW2C_RetStartThrow} message GW2C_RetStartThrow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetStartThrow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetStartThrow message, length delimited. Does not implicitly {@link msg.GW2C_RetStartThrow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {msg.IGW2C_RetStartThrow} message GW2C_RetStartThrow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetStartThrow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetStartThrow message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetStartThrow} GW2C_RetStartThrow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetStartThrow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetStartThrow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetStartThrow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetStartThrow} GW2C_RetStartThrow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetStartThrow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetStartThrow message.
         * @function verify
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetStartThrow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GW2C_RetStartThrow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetStartThrow} GW2C_RetStartThrow
         */
        GW2C_RetStartThrow.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetStartThrow)
                return object;
            return new $root.msg.GW2C_RetStartThrow();
        };

        /**
         * Creates a plain object from a GW2C_RetStartThrow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetStartThrow
         * @static
         * @param {msg.GW2C_RetStartThrow} message GW2C_RetStartThrow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetStartThrow.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GW2C_RetStartThrow to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetStartThrow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetStartThrow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetStartThrow;
    })();

    msg.C2GW_TargetItem = (function() {

        /**
         * Properties of a C2GW_TargetItem.
         * @memberof msg
         * @interface IC2GW_TargetItem
         * @property {Array.<number>|null} [itemid] C2GW_TargetItem itemid
         */

        /**
         * Constructs a new C2GW_TargetItem.
         * @memberof msg
         * @classdesc Represents a C2GW_TargetItem.
         * @implements IC2GW_TargetItem
         * @constructor
         * @param {msg.IC2GW_TargetItem=} [properties] Properties to set
         */
        function C2GW_TargetItem(properties) {
            this.itemid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TargetItem itemid.
         * @member {Array.<number>} itemid
         * @memberof msg.C2GW_TargetItem
         * @instance
         */
        C2GW_TargetItem.prototype.itemid = $util.emptyArray;

        /**
         * Creates a new C2GW_TargetItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {msg.IC2GW_TargetItem=} [properties] Properties to set
         * @returns {msg.C2GW_TargetItem} C2GW_TargetItem instance
         */
        C2GW_TargetItem.create = function create(properties) {
            return new C2GW_TargetItem(properties);
        };

        /**
         * Encodes the specified C2GW_TargetItem message. Does not implicitly {@link msg.C2GW_TargetItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {msg.IC2GW_TargetItem} message C2GW_TargetItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TargetItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.itemid.length)
                for (var i = 0; i < message.itemid.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid[i]);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TargetItem message, length delimited. Does not implicitly {@link msg.C2GW_TargetItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {msg.IC2GW_TargetItem} message C2GW_TargetItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TargetItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TargetItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TargetItem} C2GW_TargetItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TargetItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TargetItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.itemid && message.itemid.length))
                        message.itemid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.itemid.push(reader.uint32());
                    } else
                        message.itemid.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TargetItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TargetItem} C2GW_TargetItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TargetItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TargetItem message.
         * @function verify
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TargetItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid")) {
                if (!Array.isArray(message.itemid))
                    return "itemid: array expected";
                for (var i = 0; i < message.itemid.length; ++i)
                    if (!$util.isInteger(message.itemid[i]))
                        return "itemid: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a C2GW_TargetItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TargetItem} C2GW_TargetItem
         */
        C2GW_TargetItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TargetItem)
                return object;
            var message = new $root.msg.C2GW_TargetItem();
            if (object.itemid) {
                if (!Array.isArray(object.itemid))
                    throw TypeError(".msg.C2GW_TargetItem.itemid: array expected");
                message.itemid = [];
                for (var i = 0; i < object.itemid.length; ++i)
                    message.itemid[i] = object.itemid[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TargetItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TargetItem
         * @static
         * @param {msg.C2GW_TargetItem} message C2GW_TargetItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TargetItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.itemid = [];
            if (message.itemid && message.itemid.length) {
                object.itemid = [];
                for (var j = 0; j < message.itemid.length; ++j)
                    object.itemid[j] = message.itemid[j];
            }
            return object;
        };

        /**
         * Converts this C2GW_TargetItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TargetItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TargetItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TargetItem;
    })();

    msg.GW2C_HitTarget = (function() {

        /**
         * Properties of a GW2C_HitTarget.
         * @memberof msg
         * @interface IGW2C_HitTarget
         * @property {Array.<number>|null} [itemid] GW2C_HitTarget itemid
         */

        /**
         * Constructs a new GW2C_HitTarget.
         * @memberof msg
         * @classdesc Represents a GW2C_HitTarget.
         * @implements IGW2C_HitTarget
         * @constructor
         * @param {msg.IGW2C_HitTarget=} [properties] Properties to set
         */
        function GW2C_HitTarget(properties) {
            this.itemid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_HitTarget itemid.
         * @member {Array.<number>} itemid
         * @memberof msg.GW2C_HitTarget
         * @instance
         */
        GW2C_HitTarget.prototype.itemid = $util.emptyArray;

        /**
         * Creates a new GW2C_HitTarget instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {msg.IGW2C_HitTarget=} [properties] Properties to set
         * @returns {msg.GW2C_HitTarget} GW2C_HitTarget instance
         */
        GW2C_HitTarget.create = function create(properties) {
            return new GW2C_HitTarget(properties);
        };

        /**
         * Encodes the specified GW2C_HitTarget message. Does not implicitly {@link msg.GW2C_HitTarget.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {msg.IGW2C_HitTarget} message GW2C_HitTarget message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HitTarget.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.itemid.length)
                for (var i = 0; i < message.itemid.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid[i]);
            return writer;
        };

        /**
         * Encodes the specified GW2C_HitTarget message, length delimited. Does not implicitly {@link msg.GW2C_HitTarget.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {msg.IGW2C_HitTarget} message GW2C_HitTarget message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_HitTarget.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_HitTarget message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_HitTarget} GW2C_HitTarget
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HitTarget.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_HitTarget();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.itemid && message.itemid.length))
                        message.itemid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.itemid.push(reader.uint32());
                    } else
                        message.itemid.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_HitTarget message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_HitTarget} GW2C_HitTarget
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_HitTarget.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_HitTarget message.
         * @function verify
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_HitTarget.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid")) {
                if (!Array.isArray(message.itemid))
                    return "itemid: array expected";
                for (var i = 0; i < message.itemid.length; ++i)
                    if (!$util.isInteger(message.itemid[i]))
                        return "itemid: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a GW2C_HitTarget message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_HitTarget} GW2C_HitTarget
         */
        GW2C_HitTarget.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_HitTarget)
                return object;
            var message = new $root.msg.GW2C_HitTarget();
            if (object.itemid) {
                if (!Array.isArray(object.itemid))
                    throw TypeError(".msg.GW2C_HitTarget.itemid: array expected");
                message.itemid = [];
                for (var i = 0; i < object.itemid.length; ++i)
                    message.itemid[i] = object.itemid[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_HitTarget message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_HitTarget
         * @static
         * @param {msg.GW2C_HitTarget} message GW2C_HitTarget
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_HitTarget.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.itemid = [];
            if (message.itemid && message.itemid.length) {
                object.itemid = [];
                for (var j = 0; j < message.itemid.length; ++j)
                    object.itemid[j] = message.itemid[j];
            }
            return object;
        };

        /**
         * Converts this GW2C_HitTarget to JSON.
         * @function toJSON
         * @memberof msg.GW2C_HitTarget
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_HitTarget.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_HitTarget;
    })();

    /**
     * TradeState enum.
     * @name msg.TradeState
     * @enum {string}
     * @property {number} Tradeing=1 Tradeing value
     * @property {number} CanReward=2 CanReward value
     * @property {number} SellOk=3 SellOk value
     * @property {number} BuyOk=4 BuyOk value
     * @property {number} TradeCancel=5 TradeCancel value
     */
    msg.TradeState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Tradeing"] = 1;
        values[valuesById[2] = "CanReward"] = 2;
        values[valuesById[3] = "SellOk"] = 3;
        values[valuesById[4] = "BuyOk"] = 4;
        values[valuesById[5] = "TradeCancel"] = 5;
        return values;
    })();

    msg.C2GW_ReqHouseTradeList = (function() {

        /**
         * Properties of a C2GW_ReqHouseTradeList.
         * @memberof msg
         * @interface IC2GW_ReqHouseTradeList
         * @property {number|null} [location] C2GW_ReqHouseTradeList location
         * @property {number|null} [sublocation] C2GW_ReqHouseTradeList sublocation
         * @property {number|null} [housetype] C2GW_ReqHouseTradeList housetype
         * @property {number|null} [pricemin] C2GW_ReqHouseTradeList pricemin
         * @property {number|null} [pricemax] C2GW_ReqHouseTradeList pricemax
         * @property {number|null} [houselevel] C2GW_ReqHouseTradeList houselevel
         * @property {string|null} [name] C2GW_ReqHouseTradeList name
         * @property {boolean|null} [pricedec] C2GW_ReqHouseTradeList pricedec
         * @property {number|null} [startnum] C2GW_ReqHouseTradeList startnum
         */

        /**
         * Constructs a new C2GW_ReqHouseTradeList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqHouseTradeList.
         * @implements IC2GW_ReqHouseTradeList
         * @constructor
         * @param {msg.IC2GW_ReqHouseTradeList=} [properties] Properties to set
         */
        function C2GW_ReqHouseTradeList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqHouseTradeList location.
         * @member {number} location
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.location = 0;

        /**
         * C2GW_ReqHouseTradeList sublocation.
         * @member {number} sublocation
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.sublocation = 0;

        /**
         * C2GW_ReqHouseTradeList housetype.
         * @member {number} housetype
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.housetype = 0;

        /**
         * C2GW_ReqHouseTradeList pricemin.
         * @member {number} pricemin
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.pricemin = 0;

        /**
         * C2GW_ReqHouseTradeList pricemax.
         * @member {number} pricemax
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.pricemax = 0;

        /**
         * C2GW_ReqHouseTradeList houselevel.
         * @member {number} houselevel
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.houselevel = 0;

        /**
         * C2GW_ReqHouseTradeList name.
         * @member {string} name
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.name = "";

        /**
         * C2GW_ReqHouseTradeList pricedec.
         * @member {boolean} pricedec
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.pricedec = false;

        /**
         * C2GW_ReqHouseTradeList startnum.
         * @member {number} startnum
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         */
        C2GW_ReqHouseTradeList.prototype.startnum = 0;

        /**
         * Creates a new C2GW_ReqHouseTradeList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {msg.IC2GW_ReqHouseTradeList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqHouseTradeList} C2GW_ReqHouseTradeList instance
         */
        C2GW_ReqHouseTradeList.create = function create(properties) {
            return new C2GW_ReqHouseTradeList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqHouseTradeList message. Does not implicitly {@link msg.C2GW_ReqHouseTradeList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {msg.IC2GW_ReqHouseTradeList} message C2GW_ReqHouseTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseTradeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.location != null && message.hasOwnProperty("location"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.location);
            if (message.sublocation != null && message.hasOwnProperty("sublocation"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sublocation);
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.housetype);
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pricemin);
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pricemax);
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.houselevel);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.pricedec);
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.startnum);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqHouseTradeList message, length delimited. Does not implicitly {@link msg.C2GW_ReqHouseTradeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {msg.IC2GW_ReqHouseTradeList} message C2GW_ReqHouseTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqHouseTradeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqHouseTradeList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqHouseTradeList} C2GW_ReqHouseTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseTradeList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqHouseTradeList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.location = reader.uint32();
                    break;
                case 2:
                    message.sublocation = reader.uint32();
                    break;
                case 3:
                    message.housetype = reader.uint32();
                    break;
                case 4:
                    message.pricemin = reader.uint32();
                    break;
                case 5:
                    message.pricemax = reader.uint32();
                    break;
                case 6:
                    message.houselevel = reader.uint32();
                    break;
                case 7:
                    message.name = reader.string();
                    break;
                case 8:
                    message.pricedec = reader.bool();
                    break;
                case 9:
                    message.startnum = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqHouseTradeList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqHouseTradeList} C2GW_ReqHouseTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqHouseTradeList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqHouseTradeList message.
         * @function verify
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqHouseTradeList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.location != null && message.hasOwnProperty("location"))
                if (!$util.isInteger(message.location))
                    return "location: integer expected";
            if (message.sublocation != null && message.hasOwnProperty("sublocation"))
                if (!$util.isInteger(message.sublocation))
                    return "sublocation: integer expected";
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                if (!$util.isInteger(message.housetype))
                    return "housetype: integer expected";
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                if (!$util.isInteger(message.pricemin))
                    return "pricemin: integer expected";
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                if (!$util.isInteger(message.pricemax))
                    return "pricemax: integer expected";
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                if (!$util.isInteger(message.houselevel))
                    return "houselevel: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                if (typeof message.pricedec !== "boolean")
                    return "pricedec: boolean expected";
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                if (!$util.isInteger(message.startnum))
                    return "startnum: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqHouseTradeList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqHouseTradeList} C2GW_ReqHouseTradeList
         */
        C2GW_ReqHouseTradeList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqHouseTradeList)
                return object;
            var message = new $root.msg.C2GW_ReqHouseTradeList();
            if (object.location != null)
                message.location = object.location >>> 0;
            if (object.sublocation != null)
                message.sublocation = object.sublocation >>> 0;
            if (object.housetype != null)
                message.housetype = object.housetype >>> 0;
            if (object.pricemin != null)
                message.pricemin = object.pricemin >>> 0;
            if (object.pricemax != null)
                message.pricemax = object.pricemax >>> 0;
            if (object.houselevel != null)
                message.houselevel = object.houselevel >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.pricedec != null)
                message.pricedec = Boolean(object.pricedec);
            if (object.startnum != null)
                message.startnum = object.startnum >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqHouseTradeList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqHouseTradeList
         * @static
         * @param {msg.C2GW_ReqHouseTradeList} message C2GW_ReqHouseTradeList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqHouseTradeList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.location = 0;
                object.sublocation = 0;
                object.housetype = 0;
                object.pricemin = 0;
                object.pricemax = 0;
                object.houselevel = 0;
                object.name = "";
                object.pricedec = false;
                object.startnum = 0;
            }
            if (message.location != null && message.hasOwnProperty("location"))
                object.location = message.location;
            if (message.sublocation != null && message.hasOwnProperty("sublocation"))
                object.sublocation = message.sublocation;
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                object.housetype = message.housetype;
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                object.pricemin = message.pricemin;
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                object.pricemax = message.pricemax;
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                object.houselevel = message.houselevel;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                object.pricedec = message.pricedec;
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                object.startnum = message.startnum;
            return object;
        };

        /**
         * Converts this C2GW_ReqHouseTradeList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqHouseTradeList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqHouseTradeList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqHouseTradeList;
    })();

    msg.SimpleHouseTrade = (function() {

        /**
         * Properties of a SimpleHouseTrade.
         * @memberof msg
         * @interface ISimpleHouseTrade
         * @property {number|Long|null} [tradeuid] SimpleHouseTrade tradeuid
         * @property {string|null} [name] SimpleHouseTrade name
         * @property {number|null} [houselevel] SimpleHouseTrade houselevel
         * @property {number|null} [price] SimpleHouseTrade price
         * @property {number|null} [area] SimpleHouseTrade area
         * @property {number|null} [income] SimpleHouseTrade income
         * @property {number|null} [houseuid] SimpleHouseTrade houseuid
         * @property {number|null} [housebaseid] SimpleHouseTrade housebaseid
         * @property {number|null} [endtime] SimpleHouseTrade endtime
         * @property {number|null} [location] SimpleHouseTrade location
         * @property {number|null} [sublocation] SimpleHouseTrade sublocation
         * @property {number|null} [posx] SimpleHouseTrade posx
         * @property {number|null} [posy] SimpleHouseTrade posy
         * @property {number|null} [state] SimpleHouseTrade state
         * @property {number|null} [housetype] SimpleHouseTrade housetype
         * @property {number|null} [buildid] SimpleHouseTrade buildid
         */

        /**
         * Constructs a new SimpleHouseTrade.
         * @memberof msg
         * @classdesc Represents a SimpleHouseTrade.
         * @implements ISimpleHouseTrade
         * @constructor
         * @param {msg.ISimpleHouseTrade=} [properties] Properties to set
         */
        function SimpleHouseTrade(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SimpleHouseTrade tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * SimpleHouseTrade name.
         * @member {string} name
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.name = "";

        /**
         * SimpleHouseTrade houselevel.
         * @member {number} houselevel
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.houselevel = 0;

        /**
         * SimpleHouseTrade price.
         * @member {number} price
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.price = 0;

        /**
         * SimpleHouseTrade area.
         * @member {number} area
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.area = 0;

        /**
         * SimpleHouseTrade income.
         * @member {number} income
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.income = 0;

        /**
         * SimpleHouseTrade houseuid.
         * @member {number} houseuid
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.houseuid = 0;

        /**
         * SimpleHouseTrade housebaseid.
         * @member {number} housebaseid
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.housebaseid = 0;

        /**
         * SimpleHouseTrade endtime.
         * @member {number} endtime
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.endtime = 0;

        /**
         * SimpleHouseTrade location.
         * @member {number} location
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.location = 0;

        /**
         * SimpleHouseTrade sublocation.
         * @member {number} sublocation
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.sublocation = 0;

        /**
         * SimpleHouseTrade posx.
         * @member {number} posx
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.posx = 0;

        /**
         * SimpleHouseTrade posy.
         * @member {number} posy
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.posy = 0;

        /**
         * SimpleHouseTrade state.
         * @member {number} state
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.state = 0;

        /**
         * SimpleHouseTrade housetype.
         * @member {number} housetype
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.housetype = 0;

        /**
         * SimpleHouseTrade buildid.
         * @member {number} buildid
         * @memberof msg.SimpleHouseTrade
         * @instance
         */
        SimpleHouseTrade.prototype.buildid = 0;

        /**
         * Creates a new SimpleHouseTrade instance using the specified properties.
         * @function create
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {msg.ISimpleHouseTrade=} [properties] Properties to set
         * @returns {msg.SimpleHouseTrade} SimpleHouseTrade instance
         */
        SimpleHouseTrade.create = function create(properties) {
            return new SimpleHouseTrade(properties);
        };

        /**
         * Encodes the specified SimpleHouseTrade message. Does not implicitly {@link msg.SimpleHouseTrade.verify|verify} messages.
         * @function encode
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {msg.ISimpleHouseTrade} message SimpleHouseTrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleHouseTrade.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.houselevel);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.price);
            if (message.area != null && message.hasOwnProperty("area"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.area);
            if (message.income != null && message.hasOwnProperty("income"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.income);
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.houseuid);
            if (message.housebaseid != null && message.hasOwnProperty("housebaseid"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.housebaseid);
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.endtime);
            if (message.location != null && message.hasOwnProperty("location"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.location);
            if (message.sublocation != null && message.hasOwnProperty("sublocation"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.sublocation);
            if (message.posx != null && message.hasOwnProperty("posx"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.posx);
            if (message.posy != null && message.hasOwnProperty("posy"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.posy);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.state);
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.housetype);
            if (message.buildid != null && message.hasOwnProperty("buildid"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.buildid);
            return writer;
        };

        /**
         * Encodes the specified SimpleHouseTrade message, length delimited. Does not implicitly {@link msg.SimpleHouseTrade.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {msg.ISimpleHouseTrade} message SimpleHouseTrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleHouseTrade.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SimpleHouseTrade message from the specified reader or buffer.
         * @function decode
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.SimpleHouseTrade} SimpleHouseTrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleHouseTrade.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.SimpleHouseTrade();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.houselevel = reader.uint32();
                    break;
                case 4:
                    message.price = reader.uint32();
                    break;
                case 5:
                    message.area = reader.uint32();
                    break;
                case 6:
                    message.income = reader.uint32();
                    break;
                case 7:
                    message.houseuid = reader.uint32();
                    break;
                case 8:
                    message.housebaseid = reader.uint32();
                    break;
                case 9:
                    message.endtime = reader.uint32();
                    break;
                case 10:
                    message.location = reader.uint32();
                    break;
                case 11:
                    message.sublocation = reader.uint32();
                    break;
                case 12:
                    message.posx = reader.uint32();
                    break;
                case 13:
                    message.posy = reader.uint32();
                    break;
                case 14:
                    message.state = reader.uint32();
                    break;
                case 15:
                    message.housetype = reader.uint32();
                    break;
                case 16:
                    message.buildid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SimpleHouseTrade message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.SimpleHouseTrade} SimpleHouseTrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleHouseTrade.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SimpleHouseTrade message.
         * @function verify
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SimpleHouseTrade.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                if (!$util.isInteger(message.houselevel))
                    return "houselevel: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.area != null && message.hasOwnProperty("area"))
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
            if (message.income != null && message.hasOwnProperty("income"))
                if (!$util.isInteger(message.income))
                    return "income: integer expected";
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (!$util.isInteger(message.houseuid))
                    return "houseuid: integer expected";
            if (message.housebaseid != null && message.hasOwnProperty("housebaseid"))
                if (!$util.isInteger(message.housebaseid))
                    return "housebaseid: integer expected";
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                if (!$util.isInteger(message.endtime))
                    return "endtime: integer expected";
            if (message.location != null && message.hasOwnProperty("location"))
                if (!$util.isInteger(message.location))
                    return "location: integer expected";
            if (message.sublocation != null && message.hasOwnProperty("sublocation"))
                if (!$util.isInteger(message.sublocation))
                    return "sublocation: integer expected";
            if (message.posx != null && message.hasOwnProperty("posx"))
                if (!$util.isInteger(message.posx))
                    return "posx: integer expected";
            if (message.posy != null && message.hasOwnProperty("posy"))
                if (!$util.isInteger(message.posy))
                    return "posy: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                if (!$util.isInteger(message.housetype))
                    return "housetype: integer expected";
            if (message.buildid != null && message.hasOwnProperty("buildid"))
                if (!$util.isInteger(message.buildid))
                    return "buildid: integer expected";
            return null;
        };

        /**
         * Creates a SimpleHouseTrade message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.SimpleHouseTrade} SimpleHouseTrade
         */
        SimpleHouseTrade.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.SimpleHouseTrade)
                return object;
            var message = new $root.msg.SimpleHouseTrade();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.name != null)
                message.name = String(object.name);
            if (object.houselevel != null)
                message.houselevel = object.houselevel >>> 0;
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.area != null)
                message.area = object.area >>> 0;
            if (object.income != null)
                message.income = object.income >>> 0;
            if (object.houseuid != null)
                message.houseuid = object.houseuid >>> 0;
            if (object.housebaseid != null)
                message.housebaseid = object.housebaseid >>> 0;
            if (object.endtime != null)
                message.endtime = object.endtime >>> 0;
            if (object.location != null)
                message.location = object.location >>> 0;
            if (object.sublocation != null)
                message.sublocation = object.sublocation >>> 0;
            if (object.posx != null)
                message.posx = object.posx >>> 0;
            if (object.posy != null)
                message.posy = object.posy >>> 0;
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.housetype != null)
                message.housetype = object.housetype >>> 0;
            if (object.buildid != null)
                message.buildid = object.buildid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a SimpleHouseTrade message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.SimpleHouseTrade
         * @static
         * @param {msg.SimpleHouseTrade} message SimpleHouseTrade
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SimpleHouseTrade.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                object.name = "";
                object.houselevel = 0;
                object.price = 0;
                object.area = 0;
                object.income = 0;
                object.houseuid = 0;
                object.housebaseid = 0;
                object.endtime = 0;
                object.location = 0;
                object.sublocation = 0;
                object.posx = 0;
                object.posy = 0;
                object.state = 0;
                object.housetype = 0;
                object.buildid = 0;
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                object.houselevel = message.houselevel;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.area != null && message.hasOwnProperty("area"))
                object.area = message.area;
            if (message.income != null && message.hasOwnProperty("income"))
                object.income = message.income;
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                object.houseuid = message.houseuid;
            if (message.housebaseid != null && message.hasOwnProperty("housebaseid"))
                object.housebaseid = message.housebaseid;
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                object.endtime = message.endtime;
            if (message.location != null && message.hasOwnProperty("location"))
                object.location = message.location;
            if (message.sublocation != null && message.hasOwnProperty("sublocation"))
                object.sublocation = message.sublocation;
            if (message.posx != null && message.hasOwnProperty("posx"))
                object.posx = message.posx;
            if (message.posy != null && message.hasOwnProperty("posy"))
                object.posy = message.posy;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                object.housetype = message.housetype;
            if (message.buildid != null && message.hasOwnProperty("buildid"))
                object.buildid = message.buildid;
            return object;
        };

        /**
         * Converts this SimpleHouseTrade to JSON.
         * @function toJSON
         * @memberof msg.SimpleHouseTrade
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SimpleHouseTrade.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SimpleHouseTrade;
    })();

    msg.GW2C_RetHouseTradeList = (function() {

        /**
         * Properties of a GW2C_RetHouseTradeList.
         * @memberof msg
         * @interface IGW2C_RetHouseTradeList
         * @property {Array.<msg.ISimpleHouseTrade>|null} [list] GW2C_RetHouseTradeList list
         */

        /**
         * Constructs a new GW2C_RetHouseTradeList.
         * @memberof msg
         * @classdesc Represents a GW2C_RetHouseTradeList.
         * @implements IGW2C_RetHouseTradeList
         * @constructor
         * @param {msg.IGW2C_RetHouseTradeList=} [properties] Properties to set
         */
        function GW2C_RetHouseTradeList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetHouseTradeList list.
         * @member {Array.<msg.ISimpleHouseTrade>} list
         * @memberof msg.GW2C_RetHouseTradeList
         * @instance
         */
        GW2C_RetHouseTradeList.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_RetHouseTradeList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {msg.IGW2C_RetHouseTradeList=} [properties] Properties to set
         * @returns {msg.GW2C_RetHouseTradeList} GW2C_RetHouseTradeList instance
         */
        GW2C_RetHouseTradeList.create = function create(properties) {
            return new GW2C_RetHouseTradeList(properties);
        };

        /**
         * Encodes the specified GW2C_RetHouseTradeList message. Does not implicitly {@link msg.GW2C_RetHouseTradeList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {msg.IGW2C_RetHouseTradeList} message GW2C_RetHouseTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetHouseTradeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.SimpleHouseTrade.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetHouseTradeList message, length delimited. Does not implicitly {@link msg.GW2C_RetHouseTradeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {msg.IGW2C_RetHouseTradeList} message GW2C_RetHouseTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetHouseTradeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetHouseTradeList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetHouseTradeList} GW2C_RetHouseTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetHouseTradeList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetHouseTradeList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.SimpleHouseTrade.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetHouseTradeList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetHouseTradeList} GW2C_RetHouseTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetHouseTradeList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetHouseTradeList message.
         * @function verify
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetHouseTradeList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.SimpleHouseTrade.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_RetHouseTradeList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetHouseTradeList} GW2C_RetHouseTradeList
         */
        GW2C_RetHouseTradeList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetHouseTradeList)
                return object;
            var message = new $root.msg.GW2C_RetHouseTradeList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetHouseTradeList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetHouseTradeList.list: object expected");
                    message.list[i] = $root.msg.SimpleHouseTrade.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetHouseTradeList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetHouseTradeList
         * @static
         * @param {msg.GW2C_RetHouseTradeList} message GW2C_RetHouseTradeList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetHouseTradeList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.SimpleHouseTrade.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_RetHouseTradeList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetHouseTradeList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetHouseTradeList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetHouseTradeList;
    })();

    msg.C2GW_TradeHouse = (function() {

        /**
         * Properties of a C2GW_TradeHouse.
         * @memberof msg
         * @interface IC2GW_TradeHouse
         * @property {number|Long|null} [houseuid] C2GW_TradeHouse houseuid
         * @property {number|null} [price] C2GW_TradeHouse price
         */

        /**
         * Constructs a new C2GW_TradeHouse.
         * @memberof msg
         * @classdesc Represents a C2GW_TradeHouse.
         * @implements IC2GW_TradeHouse
         * @constructor
         * @param {msg.IC2GW_TradeHouse=} [properties] Properties to set
         */
        function C2GW_TradeHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TradeHouse houseuid.
         * @member {number|Long} houseuid
         * @memberof msg.C2GW_TradeHouse
         * @instance
         */
        C2GW_TradeHouse.prototype.houseuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_TradeHouse price.
         * @member {number} price
         * @memberof msg.C2GW_TradeHouse
         * @instance
         */
        C2GW_TradeHouse.prototype.price = 0;

        /**
         * Creates a new C2GW_TradeHouse instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {msg.IC2GW_TradeHouse=} [properties] Properties to set
         * @returns {msg.C2GW_TradeHouse} C2GW_TradeHouse instance
         */
        C2GW_TradeHouse.create = function create(properties) {
            return new C2GW_TradeHouse(properties);
        };

        /**
         * Encodes the specified C2GW_TradeHouse message. Does not implicitly {@link msg.C2GW_TradeHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {msg.IC2GW_TradeHouse} message C2GW_TradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TradeHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseuid);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.price);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TradeHouse message, length delimited. Does not implicitly {@link msg.C2GW_TradeHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {msg.IC2GW_TradeHouse} message C2GW_TradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TradeHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TradeHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TradeHouse} C2GW_TradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TradeHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TradeHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseuid = reader.uint64();
                    break;
                case 2:
                    message.price = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TradeHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TradeHouse} C2GW_TradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TradeHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TradeHouse message.
         * @function verify
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TradeHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (!$util.isInteger(message.houseuid) && !(message.houseuid && $util.isInteger(message.houseuid.low) && $util.isInteger(message.houseuid.high)))
                    return "houseuid: integer|Long expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_TradeHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TradeHouse} C2GW_TradeHouse
         */
        C2GW_TradeHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TradeHouse)
                return object;
            var message = new $root.msg.C2GW_TradeHouse();
            if (object.houseuid != null)
                if ($util.Long)
                    (message.houseuid = $util.Long.fromValue(object.houseuid)).unsigned = true;
                else if (typeof object.houseuid === "string")
                    message.houseuid = parseInt(object.houseuid, 10);
                else if (typeof object.houseuid === "number")
                    message.houseuid = object.houseuid;
                else if (typeof object.houseuid === "object")
                    message.houseuid = new $util.LongBits(object.houseuid.low >>> 0, object.houseuid.high >>> 0).toNumber(true);
            if (object.price != null)
                message.price = object.price >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TradeHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TradeHouse
         * @static
         * @param {msg.C2GW_TradeHouse} message C2GW_TradeHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TradeHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseuid = options.longs === String ? "0" : 0;
                object.price = 0;
            }
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (typeof message.houseuid === "number")
                    object.houseuid = options.longs === String ? String(message.houseuid) : message.houseuid;
                else
                    object.houseuid = options.longs === String ? $util.Long.prototype.toString.call(message.houseuid) : options.longs === Number ? new $util.LongBits(message.houseuid.low >>> 0, message.houseuid.high >>> 0).toNumber(true) : message.houseuid;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            return object;
        };

        /**
         * Converts this C2GW_TradeHouse to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TradeHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TradeHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TradeHouse;
    })();

    msg.GW2C_RetTradeHouse = (function() {

        /**
         * Properties of a GW2C_RetTradeHouse.
         * @memberof msg
         * @interface IGW2C_RetTradeHouse
         * @property {number|Long|null} [tradeuid] GW2C_RetTradeHouse tradeuid
         */

        /**
         * Constructs a new GW2C_RetTradeHouse.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTradeHouse.
         * @implements IGW2C_RetTradeHouse
         * @constructor
         * @param {msg.IGW2C_RetTradeHouse=} [properties] Properties to set
         */
        function GW2C_RetTradeHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTradeHouse tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetTradeHouse
         * @instance
         */
        GW2C_RetTradeHouse.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetTradeHouse instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {msg.IGW2C_RetTradeHouse=} [properties] Properties to set
         * @returns {msg.GW2C_RetTradeHouse} GW2C_RetTradeHouse instance
         */
        GW2C_RetTradeHouse.create = function create(properties) {
            return new GW2C_RetTradeHouse(properties);
        };

        /**
         * Encodes the specified GW2C_RetTradeHouse message. Does not implicitly {@link msg.GW2C_RetTradeHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {msg.IGW2C_RetTradeHouse} message GW2C_RetTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTradeHouse message, length delimited. Does not implicitly {@link msg.GW2C_RetTradeHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {msg.IGW2C_RetTradeHouse} message GW2C_RetTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTradeHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTradeHouse} GW2C_RetTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTradeHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTradeHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTradeHouse} GW2C_RetTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTradeHouse message.
         * @function verify
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTradeHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetTradeHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTradeHouse} GW2C_RetTradeHouse
         */
        GW2C_RetTradeHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTradeHouse)
                return object;
            var message = new $root.msg.GW2C_RetTradeHouse();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTradeHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTradeHouse
         * @static
         * @param {msg.GW2C_RetTradeHouse} message GW2C_RetTradeHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTradeHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetTradeHouse to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTradeHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTradeHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTradeHouse;
    })();

    msg.C2GW_BuyTradeHouse = (function() {

        /**
         * Properties of a C2GW_BuyTradeHouse.
         * @memberof msg
         * @interface IC2GW_BuyTradeHouse
         * @property {number|Long|null} [tradeuid] C2GW_BuyTradeHouse tradeuid
         * @property {number|Long|null} [houseuid] C2GW_BuyTradeHouse houseuid
         */

        /**
         * Constructs a new C2GW_BuyTradeHouse.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyTradeHouse.
         * @implements IC2GW_BuyTradeHouse
         * @constructor
         * @param {msg.IC2GW_BuyTradeHouse=} [properties] Properties to set
         */
        function C2GW_BuyTradeHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyTradeHouse tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_BuyTradeHouse
         * @instance
         */
        C2GW_BuyTradeHouse.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_BuyTradeHouse houseuid.
         * @member {number|Long} houseuid
         * @memberof msg.C2GW_BuyTradeHouse
         * @instance
         */
        C2GW_BuyTradeHouse.prototype.houseuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_BuyTradeHouse instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {msg.IC2GW_BuyTradeHouse=} [properties] Properties to set
         * @returns {msg.C2GW_BuyTradeHouse} C2GW_BuyTradeHouse instance
         */
        C2GW_BuyTradeHouse.create = function create(properties) {
            return new C2GW_BuyTradeHouse(properties);
        };

        /**
         * Encodes the specified C2GW_BuyTradeHouse message. Does not implicitly {@link msg.C2GW_BuyTradeHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {msg.IC2GW_BuyTradeHouse} message C2GW_BuyTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyTradeHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.houseuid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyTradeHouse message, length delimited. Does not implicitly {@link msg.C2GW_BuyTradeHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {msg.IC2GW_BuyTradeHouse} message C2GW_BuyTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyTradeHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyTradeHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyTradeHouse} C2GW_BuyTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyTradeHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyTradeHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.houseuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyTradeHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyTradeHouse} C2GW_BuyTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyTradeHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyTradeHouse message.
         * @function verify
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyTradeHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (!$util.isInteger(message.houseuid) && !(message.houseuid && $util.isInteger(message.houseuid.low) && $util.isInteger(message.houseuid.high)))
                    return "houseuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyTradeHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyTradeHouse} C2GW_BuyTradeHouse
         */
        C2GW_BuyTradeHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyTradeHouse)
                return object;
            var message = new $root.msg.C2GW_BuyTradeHouse();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.houseuid != null)
                if ($util.Long)
                    (message.houseuid = $util.Long.fromValue(object.houseuid)).unsigned = true;
                else if (typeof object.houseuid === "string")
                    message.houseuid = parseInt(object.houseuid, 10);
                else if (typeof object.houseuid === "number")
                    message.houseuid = object.houseuid;
                else if (typeof object.houseuid === "object")
                    message.houseuid = new $util.LongBits(object.houseuid.low >>> 0, object.houseuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyTradeHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyTradeHouse
         * @static
         * @param {msg.C2GW_BuyTradeHouse} message C2GW_BuyTradeHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyTradeHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseuid = options.longs === String ? "0" : 0;
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (typeof message.houseuid === "number")
                    object.houseuid = options.longs === String ? String(message.houseuid) : message.houseuid;
                else
                    object.houseuid = options.longs === String ? $util.Long.prototype.toString.call(message.houseuid) : options.longs === Number ? new $util.LongBits(message.houseuid.low >>> 0, message.houseuid.high >>> 0).toNumber(true) : message.houseuid;
            return object;
        };

        /**
         * Converts this C2GW_BuyTradeHouse to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyTradeHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyTradeHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyTradeHouse;
    })();

    msg.GW2C_RetBuyTradeHouse = (function() {

        /**
         * Properties of a GW2C_RetBuyTradeHouse.
         * @memberof msg
         * @interface IGW2C_RetBuyTradeHouse
         * @property {number|Long|null} [tradeuid] GW2C_RetBuyTradeHouse tradeuid
         */

        /**
         * Constructs a new GW2C_RetBuyTradeHouse.
         * @memberof msg
         * @classdesc Represents a GW2C_RetBuyTradeHouse.
         * @implements IGW2C_RetBuyTradeHouse
         * @constructor
         * @param {msg.IGW2C_RetBuyTradeHouse=} [properties] Properties to set
         */
        function GW2C_RetBuyTradeHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetBuyTradeHouse tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @instance
         */
        GW2C_RetBuyTradeHouse.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetBuyTradeHouse instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {msg.IGW2C_RetBuyTradeHouse=} [properties] Properties to set
         * @returns {msg.GW2C_RetBuyTradeHouse} GW2C_RetBuyTradeHouse instance
         */
        GW2C_RetBuyTradeHouse.create = function create(properties) {
            return new GW2C_RetBuyTradeHouse(properties);
        };

        /**
         * Encodes the specified GW2C_RetBuyTradeHouse message. Does not implicitly {@link msg.GW2C_RetBuyTradeHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {msg.IGW2C_RetBuyTradeHouse} message GW2C_RetBuyTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetBuyTradeHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetBuyTradeHouse message, length delimited. Does not implicitly {@link msg.GW2C_RetBuyTradeHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {msg.IGW2C_RetBuyTradeHouse} message GW2C_RetBuyTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetBuyTradeHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetBuyTradeHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetBuyTradeHouse} GW2C_RetBuyTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetBuyTradeHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetBuyTradeHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetBuyTradeHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetBuyTradeHouse} GW2C_RetBuyTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetBuyTradeHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetBuyTradeHouse message.
         * @function verify
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetBuyTradeHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetBuyTradeHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetBuyTradeHouse} GW2C_RetBuyTradeHouse
         */
        GW2C_RetBuyTradeHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetBuyTradeHouse)
                return object;
            var message = new $root.msg.GW2C_RetBuyTradeHouse();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetBuyTradeHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @static
         * @param {msg.GW2C_RetBuyTradeHouse} message GW2C_RetBuyTradeHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetBuyTradeHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetBuyTradeHouse to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetBuyTradeHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetBuyTradeHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetBuyTradeHouse;
    })();

    msg.C2GW_ReqTradeHouseHistory = (function() {

        /**
         * Properties of a C2GW_ReqTradeHouseHistory.
         * @memberof msg
         * @interface IC2GW_ReqTradeHouseHistory
         */

        /**
         * Constructs a new C2GW_ReqTradeHouseHistory.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTradeHouseHistory.
         * @implements IC2GW_ReqTradeHouseHistory
         * @constructor
         * @param {msg.IC2GW_ReqTradeHouseHistory=} [properties] Properties to set
         */
        function C2GW_ReqTradeHouseHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqTradeHouseHistory instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {msg.IC2GW_ReqTradeHouseHistory=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTradeHouseHistory} C2GW_ReqTradeHouseHistory instance
         */
        C2GW_ReqTradeHouseHistory.create = function create(properties) {
            return new C2GW_ReqTradeHouseHistory(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTradeHouseHistory message. Does not implicitly {@link msg.C2GW_ReqTradeHouseHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {msg.IC2GW_ReqTradeHouseHistory} message C2GW_ReqTradeHouseHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTradeHouseHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTradeHouseHistory message, length delimited. Does not implicitly {@link msg.C2GW_ReqTradeHouseHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {msg.IC2GW_ReqTradeHouseHistory} message C2GW_ReqTradeHouseHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTradeHouseHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTradeHouseHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTradeHouseHistory} C2GW_ReqTradeHouseHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTradeHouseHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTradeHouseHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTradeHouseHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTradeHouseHistory} C2GW_ReqTradeHouseHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTradeHouseHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTradeHouseHistory message.
         * @function verify
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTradeHouseHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTradeHouseHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTradeHouseHistory} C2GW_ReqTradeHouseHistory
         */
        C2GW_ReqTradeHouseHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTradeHouseHistory)
                return object;
            return new $root.msg.C2GW_ReqTradeHouseHistory();
        };

        /**
         * Creates a plain object from a C2GW_ReqTradeHouseHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @static
         * @param {msg.C2GW_ReqTradeHouseHistory} message C2GW_ReqTradeHouseHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTradeHouseHistory.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqTradeHouseHistory to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTradeHouseHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTradeHouseHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTradeHouseHistory;
    })();

    msg.TradeHouseHistory = (function() {

        /**
         * Properties of a TradeHouseHistory.
         * @memberof msg
         * @interface ITradeHouseHistory
         * @property {string|null} [name] TradeHouseHistory name
         * @property {number|null} [houselevel] TradeHouseHistory houselevel
         * @property {number|null} [price] TradeHouseHistory price
         * @property {number|null} [area] TradeHouseHistory area
         * @property {number|null} [income] TradeHouseHistory income
         * @property {number|null} [tradetime] TradeHouseHistory tradetime
         * @property {number|null} [housetype] TradeHouseHistory housetype
         * @property {number|null} [housebaseid] TradeHouseHistory housebaseid
         * @property {number|null} [state] TradeHouseHistory state
         * @property {number|Long|null} [tradeuid] TradeHouseHistory tradeuid
         */

        /**
         * Constructs a new TradeHouseHistory.
         * @memberof msg
         * @classdesc Represents a TradeHouseHistory.
         * @implements ITradeHouseHistory
         * @constructor
         * @param {msg.ITradeHouseHistory=} [properties] Properties to set
         */
        function TradeHouseHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TradeHouseHistory name.
         * @member {string} name
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.name = "";

        /**
         * TradeHouseHistory houselevel.
         * @member {number} houselevel
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.houselevel = 0;

        /**
         * TradeHouseHistory price.
         * @member {number} price
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.price = 0;

        /**
         * TradeHouseHistory area.
         * @member {number} area
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.area = 0;

        /**
         * TradeHouseHistory income.
         * @member {number} income
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.income = 0;

        /**
         * TradeHouseHistory tradetime.
         * @member {number} tradetime
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.tradetime = 0;

        /**
         * TradeHouseHistory housetype.
         * @member {number} housetype
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.housetype = 0;

        /**
         * TradeHouseHistory housebaseid.
         * @member {number} housebaseid
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.housebaseid = 0;

        /**
         * TradeHouseHistory state.
         * @member {number} state
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.state = 0;

        /**
         * TradeHouseHistory tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.TradeHouseHistory
         * @instance
         */
        TradeHouseHistory.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new TradeHouseHistory instance using the specified properties.
         * @function create
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {msg.ITradeHouseHistory=} [properties] Properties to set
         * @returns {msg.TradeHouseHistory} TradeHouseHistory instance
         */
        TradeHouseHistory.create = function create(properties) {
            return new TradeHouseHistory(properties);
        };

        /**
         * Encodes the specified TradeHouseHistory message. Does not implicitly {@link msg.TradeHouseHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {msg.ITradeHouseHistory} message TradeHouseHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TradeHouseHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.houselevel);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.price);
            if (message.area != null && message.hasOwnProperty("area"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.area);
            if (message.income != null && message.hasOwnProperty("income"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.income);
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tradetime);
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.housetype);
            if (message.housebaseid != null && message.hasOwnProperty("housebaseid"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.housebaseid);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.state);
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified TradeHouseHistory message, length delimited. Does not implicitly {@link msg.TradeHouseHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {msg.ITradeHouseHistory} message TradeHouseHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TradeHouseHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TradeHouseHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TradeHouseHistory} TradeHouseHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TradeHouseHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TradeHouseHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.houselevel = reader.uint32();
                    break;
                case 3:
                    message.price = reader.uint32();
                    break;
                case 4:
                    message.area = reader.uint32();
                    break;
                case 5:
                    message.income = reader.uint32();
                    break;
                case 6:
                    message.tradetime = reader.uint32();
                    break;
                case 7:
                    message.housetype = reader.uint32();
                    break;
                case 8:
                    message.housebaseid = reader.uint32();
                    break;
                case 9:
                    message.state = reader.uint32();
                    break;
                case 10:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TradeHouseHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TradeHouseHistory} TradeHouseHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TradeHouseHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TradeHouseHistory message.
         * @function verify
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TradeHouseHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                if (!$util.isInteger(message.houselevel))
                    return "houselevel: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.area != null && message.hasOwnProperty("area"))
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
            if (message.income != null && message.hasOwnProperty("income"))
                if (!$util.isInteger(message.income))
                    return "income: integer expected";
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                if (!$util.isInteger(message.tradetime))
                    return "tradetime: integer expected";
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                if (!$util.isInteger(message.housetype))
                    return "housetype: integer expected";
            if (message.housebaseid != null && message.hasOwnProperty("housebaseid"))
                if (!$util.isInteger(message.housebaseid))
                    return "housebaseid: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a TradeHouseHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TradeHouseHistory} TradeHouseHistory
         */
        TradeHouseHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TradeHouseHistory)
                return object;
            var message = new $root.msg.TradeHouseHistory();
            if (object.name != null)
                message.name = String(object.name);
            if (object.houselevel != null)
                message.houselevel = object.houselevel >>> 0;
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.area != null)
                message.area = object.area >>> 0;
            if (object.income != null)
                message.income = object.income >>> 0;
            if (object.tradetime != null)
                message.tradetime = object.tradetime >>> 0;
            if (object.housetype != null)
                message.housetype = object.housetype >>> 0;
            if (object.housebaseid != null)
                message.housebaseid = object.housebaseid >>> 0;
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a TradeHouseHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TradeHouseHistory
         * @static
         * @param {msg.TradeHouseHistory} message TradeHouseHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TradeHouseHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.houselevel = 0;
                object.price = 0;
                object.area = 0;
                object.income = 0;
                object.tradetime = 0;
                object.housetype = 0;
                object.housebaseid = 0;
                object.state = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.houselevel != null && message.hasOwnProperty("houselevel"))
                object.houselevel = message.houselevel;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.area != null && message.hasOwnProperty("area"))
                object.area = message.area;
            if (message.income != null && message.hasOwnProperty("income"))
                object.income = message.income;
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                object.tradetime = message.tradetime;
            if (message.housetype != null && message.hasOwnProperty("housetype"))
                object.housetype = message.housetype;
            if (message.housebaseid != null && message.hasOwnProperty("housebaseid"))
                object.housebaseid = message.housebaseid;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this TradeHouseHistory to JSON.
         * @function toJSON
         * @memberof msg.TradeHouseHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TradeHouseHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TradeHouseHistory;
    })();

    msg.GW2C_RetTradeHouseHistory = (function() {

        /**
         * Properties of a GW2C_RetTradeHouseHistory.
         * @memberof msg
         * @interface IGW2C_RetTradeHouseHistory
         * @property {Array.<msg.ITradeHouseHistory>|null} [list] GW2C_RetTradeHouseHistory list
         */

        /**
         * Constructs a new GW2C_RetTradeHouseHistory.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTradeHouseHistory.
         * @implements IGW2C_RetTradeHouseHistory
         * @constructor
         * @param {msg.IGW2C_RetTradeHouseHistory=} [properties] Properties to set
         */
        function GW2C_RetTradeHouseHistory(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTradeHouseHistory list.
         * @member {Array.<msg.ITradeHouseHistory>} list
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @instance
         */
        GW2C_RetTradeHouseHistory.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_RetTradeHouseHistory instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {msg.IGW2C_RetTradeHouseHistory=} [properties] Properties to set
         * @returns {msg.GW2C_RetTradeHouseHistory} GW2C_RetTradeHouseHistory instance
         */
        GW2C_RetTradeHouseHistory.create = function create(properties) {
            return new GW2C_RetTradeHouseHistory(properties);
        };

        /**
         * Encodes the specified GW2C_RetTradeHouseHistory message. Does not implicitly {@link msg.GW2C_RetTradeHouseHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {msg.IGW2C_RetTradeHouseHistory} message GW2C_RetTradeHouseHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeHouseHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.TradeHouseHistory.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTradeHouseHistory message, length delimited. Does not implicitly {@link msg.GW2C_RetTradeHouseHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {msg.IGW2C_RetTradeHouseHistory} message GW2C_RetTradeHouseHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeHouseHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTradeHouseHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTradeHouseHistory} GW2C_RetTradeHouseHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeHouseHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTradeHouseHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.TradeHouseHistory.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTradeHouseHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTradeHouseHistory} GW2C_RetTradeHouseHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeHouseHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTradeHouseHistory message.
         * @function verify
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTradeHouseHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.TradeHouseHistory.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_RetTradeHouseHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTradeHouseHistory} GW2C_RetTradeHouseHistory
         */
        GW2C_RetTradeHouseHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTradeHouseHistory)
                return object;
            var message = new $root.msg.GW2C_RetTradeHouseHistory();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetTradeHouseHistory.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetTradeHouseHistory.list: object expected");
                    message.list[i] = $root.msg.TradeHouseHistory.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTradeHouseHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @static
         * @param {msg.GW2C_RetTradeHouseHistory} message GW2C_RetTradeHouseHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTradeHouseHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.TradeHouseHistory.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_RetTradeHouseHistory to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTradeHouseHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTradeHouseHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTradeHouseHistory;
    })();

    msg.C2GW_GetTradeHouseReward = (function() {

        /**
         * Properties of a C2GW_GetTradeHouseReward.
         * @memberof msg
         * @interface IC2GW_GetTradeHouseReward
         * @property {number|Long|null} [tradeuid] C2GW_GetTradeHouseReward tradeuid
         */

        /**
         * Constructs a new C2GW_GetTradeHouseReward.
         * @memberof msg
         * @classdesc Represents a C2GW_GetTradeHouseReward.
         * @implements IC2GW_GetTradeHouseReward
         * @constructor
         * @param {msg.IC2GW_GetTradeHouseReward=} [properties] Properties to set
         */
        function C2GW_GetTradeHouseReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_GetTradeHouseReward tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_GetTradeHouseReward
         * @instance
         */
        C2GW_GetTradeHouseReward.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_GetTradeHouseReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {msg.IC2GW_GetTradeHouseReward=} [properties] Properties to set
         * @returns {msg.C2GW_GetTradeHouseReward} C2GW_GetTradeHouseReward instance
         */
        C2GW_GetTradeHouseReward.create = function create(properties) {
            return new C2GW_GetTradeHouseReward(properties);
        };

        /**
         * Encodes the specified C2GW_GetTradeHouseReward message. Does not implicitly {@link msg.C2GW_GetTradeHouseReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {msg.IC2GW_GetTradeHouseReward} message C2GW_GetTradeHouseReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GetTradeHouseReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_GetTradeHouseReward message, length delimited. Does not implicitly {@link msg.C2GW_GetTradeHouseReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {msg.IC2GW_GetTradeHouseReward} message C2GW_GetTradeHouseReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GetTradeHouseReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_GetTradeHouseReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_GetTradeHouseReward} C2GW_GetTradeHouseReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GetTradeHouseReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_GetTradeHouseReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_GetTradeHouseReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_GetTradeHouseReward} C2GW_GetTradeHouseReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GetTradeHouseReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_GetTradeHouseReward message.
         * @function verify
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_GetTradeHouseReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_GetTradeHouseReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_GetTradeHouseReward} C2GW_GetTradeHouseReward
         */
        C2GW_GetTradeHouseReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_GetTradeHouseReward)
                return object;
            var message = new $root.msg.C2GW_GetTradeHouseReward();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_GetTradeHouseReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_GetTradeHouseReward
         * @static
         * @param {msg.C2GW_GetTradeHouseReward} message C2GW_GetTradeHouseReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_GetTradeHouseReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this C2GW_GetTradeHouseReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_GetTradeHouseReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_GetTradeHouseReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_GetTradeHouseReward;
    })();

    msg.GW2C_RetGetTradeHouseReward = (function() {

        /**
         * Properties of a GW2C_RetGetTradeHouseReward.
         * @memberof msg
         * @interface IGW2C_RetGetTradeHouseReward
         * @property {number|Long|null} [tradeuid] GW2C_RetGetTradeHouseReward tradeuid
         */

        /**
         * Constructs a new GW2C_RetGetTradeHouseReward.
         * @memberof msg
         * @classdesc Represents a GW2C_RetGetTradeHouseReward.
         * @implements IGW2C_RetGetTradeHouseReward
         * @constructor
         * @param {msg.IGW2C_RetGetTradeHouseReward=} [properties] Properties to set
         */
        function GW2C_RetGetTradeHouseReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetGetTradeHouseReward tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @instance
         */
        GW2C_RetGetTradeHouseReward.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetGetTradeHouseReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {msg.IGW2C_RetGetTradeHouseReward=} [properties] Properties to set
         * @returns {msg.GW2C_RetGetTradeHouseReward} GW2C_RetGetTradeHouseReward instance
         */
        GW2C_RetGetTradeHouseReward.create = function create(properties) {
            return new GW2C_RetGetTradeHouseReward(properties);
        };

        /**
         * Encodes the specified GW2C_RetGetTradeHouseReward message. Does not implicitly {@link msg.GW2C_RetGetTradeHouseReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {msg.IGW2C_RetGetTradeHouseReward} message GW2C_RetGetTradeHouseReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGetTradeHouseReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetGetTradeHouseReward message, length delimited. Does not implicitly {@link msg.GW2C_RetGetTradeHouseReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {msg.IGW2C_RetGetTradeHouseReward} message GW2C_RetGetTradeHouseReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGetTradeHouseReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetGetTradeHouseReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetGetTradeHouseReward} GW2C_RetGetTradeHouseReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGetTradeHouseReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetGetTradeHouseReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetGetTradeHouseReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetGetTradeHouseReward} GW2C_RetGetTradeHouseReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGetTradeHouseReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetGetTradeHouseReward message.
         * @function verify
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetGetTradeHouseReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetGetTradeHouseReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetGetTradeHouseReward} GW2C_RetGetTradeHouseReward
         */
        GW2C_RetGetTradeHouseReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetGetTradeHouseReward)
                return object;
            var message = new $root.msg.GW2C_RetGetTradeHouseReward();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetGetTradeHouseReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @static
         * @param {msg.GW2C_RetGetTradeHouseReward} message GW2C_RetGetTradeHouseReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetGetTradeHouseReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetGetTradeHouseReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetGetTradeHouseReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetGetTradeHouseReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetGetTradeHouseReward;
    })();

    msg.C2GW_CancelTradeHouse = (function() {

        /**
         * Properties of a C2GW_CancelTradeHouse.
         * @memberof msg
         * @interface IC2GW_CancelTradeHouse
         * @property {number|Long|null} [houseuid] C2GW_CancelTradeHouse houseuid
         */

        /**
         * Constructs a new C2GW_CancelTradeHouse.
         * @memberof msg
         * @classdesc Represents a C2GW_CancelTradeHouse.
         * @implements IC2GW_CancelTradeHouse
         * @constructor
         * @param {msg.IC2GW_CancelTradeHouse=} [properties] Properties to set
         */
        function C2GW_CancelTradeHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_CancelTradeHouse houseuid.
         * @member {number|Long} houseuid
         * @memberof msg.C2GW_CancelTradeHouse
         * @instance
         */
        C2GW_CancelTradeHouse.prototype.houseuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_CancelTradeHouse instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {msg.IC2GW_CancelTradeHouse=} [properties] Properties to set
         * @returns {msg.C2GW_CancelTradeHouse} C2GW_CancelTradeHouse instance
         */
        C2GW_CancelTradeHouse.create = function create(properties) {
            return new C2GW_CancelTradeHouse(properties);
        };

        /**
         * Encodes the specified C2GW_CancelTradeHouse message. Does not implicitly {@link msg.C2GW_CancelTradeHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {msg.IC2GW_CancelTradeHouse} message C2GW_CancelTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CancelTradeHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.houseuid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_CancelTradeHouse message, length delimited. Does not implicitly {@link msg.C2GW_CancelTradeHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {msg.IC2GW_CancelTradeHouse} message C2GW_CancelTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CancelTradeHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_CancelTradeHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_CancelTradeHouse} C2GW_CancelTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CancelTradeHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_CancelTradeHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.houseuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_CancelTradeHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_CancelTradeHouse} C2GW_CancelTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CancelTradeHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_CancelTradeHouse message.
         * @function verify
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_CancelTradeHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (!$util.isInteger(message.houseuid) && !(message.houseuid && $util.isInteger(message.houseuid.low) && $util.isInteger(message.houseuid.high)))
                    return "houseuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_CancelTradeHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_CancelTradeHouse} C2GW_CancelTradeHouse
         */
        C2GW_CancelTradeHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_CancelTradeHouse)
                return object;
            var message = new $root.msg.C2GW_CancelTradeHouse();
            if (object.houseuid != null)
                if ($util.Long)
                    (message.houseuid = $util.Long.fromValue(object.houseuid)).unsigned = true;
                else if (typeof object.houseuid === "string")
                    message.houseuid = parseInt(object.houseuid, 10);
                else if (typeof object.houseuid === "number")
                    message.houseuid = object.houseuid;
                else if (typeof object.houseuid === "object")
                    message.houseuid = new $util.LongBits(object.houseuid.low >>> 0, object.houseuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_CancelTradeHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_CancelTradeHouse
         * @static
         * @param {msg.C2GW_CancelTradeHouse} message C2GW_CancelTradeHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_CancelTradeHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.houseuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.houseuid = options.longs === String ? "0" : 0;
            if (message.houseuid != null && message.hasOwnProperty("houseuid"))
                if (typeof message.houseuid === "number")
                    object.houseuid = options.longs === String ? String(message.houseuid) : message.houseuid;
                else
                    object.houseuid = options.longs === String ? $util.Long.prototype.toString.call(message.houseuid) : options.longs === Number ? new $util.LongBits(message.houseuid.low >>> 0, message.houseuid.high >>> 0).toNumber(true) : message.houseuid;
            return object;
        };

        /**
         * Converts this C2GW_CancelTradeHouse to JSON.
         * @function toJSON
         * @memberof msg.C2GW_CancelTradeHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_CancelTradeHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_CancelTradeHouse;
    })();

    msg.GW2C_RetCancelTradeHouse = (function() {

        /**
         * Properties of a GW2C_RetCancelTradeHouse.
         * @memberof msg
         * @interface IGW2C_RetCancelTradeHouse
         * @property {number|Long|null} [tradeuid] GW2C_RetCancelTradeHouse tradeuid
         */

        /**
         * Constructs a new GW2C_RetCancelTradeHouse.
         * @memberof msg
         * @classdesc Represents a GW2C_RetCancelTradeHouse.
         * @implements IGW2C_RetCancelTradeHouse
         * @constructor
         * @param {msg.IGW2C_RetCancelTradeHouse=} [properties] Properties to set
         */
        function GW2C_RetCancelTradeHouse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetCancelTradeHouse tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @instance
         */
        GW2C_RetCancelTradeHouse.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetCancelTradeHouse instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {msg.IGW2C_RetCancelTradeHouse=} [properties] Properties to set
         * @returns {msg.GW2C_RetCancelTradeHouse} GW2C_RetCancelTradeHouse instance
         */
        GW2C_RetCancelTradeHouse.create = function create(properties) {
            return new GW2C_RetCancelTradeHouse(properties);
        };

        /**
         * Encodes the specified GW2C_RetCancelTradeHouse message. Does not implicitly {@link msg.GW2C_RetCancelTradeHouse.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {msg.IGW2C_RetCancelTradeHouse} message GW2C_RetCancelTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCancelTradeHouse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetCancelTradeHouse message, length delimited. Does not implicitly {@link msg.GW2C_RetCancelTradeHouse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {msg.IGW2C_RetCancelTradeHouse} message GW2C_RetCancelTradeHouse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCancelTradeHouse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetCancelTradeHouse message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetCancelTradeHouse} GW2C_RetCancelTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCancelTradeHouse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetCancelTradeHouse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetCancelTradeHouse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetCancelTradeHouse} GW2C_RetCancelTradeHouse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCancelTradeHouse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetCancelTradeHouse message.
         * @function verify
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetCancelTradeHouse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetCancelTradeHouse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetCancelTradeHouse} GW2C_RetCancelTradeHouse
         */
        GW2C_RetCancelTradeHouse.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetCancelTradeHouse)
                return object;
            var message = new $root.msg.GW2C_RetCancelTradeHouse();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetCancelTradeHouse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @static
         * @param {msg.GW2C_RetCancelTradeHouse} message GW2C_RetCancelTradeHouse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetCancelTradeHouse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetCancelTradeHouse to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetCancelTradeHouse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetCancelTradeHouse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetCancelTradeHouse;
    })();

    msg.C2GW_ReqCarTradeList = (function() {

        /**
         * Properties of a C2GW_ReqCarTradeList.
         * @memberof msg
         * @interface IC2GW_ReqCarTradeList
         * @property {number|null} [cartype] C2GW_ReqCarTradeList cartype
         * @property {number|null} [carsubtype] C2GW_ReqCarTradeList carsubtype
         * @property {number|null} [pricemin] C2GW_ReqCarTradeList pricemin
         * @property {number|null} [pricemax] C2GW_ReqCarTradeList pricemax
         * @property {number|null} [carlevel] C2GW_ReqCarTradeList carlevel
         * @property {string|null} [name] C2GW_ReqCarTradeList name
         * @property {boolean|null} [pricedec] C2GW_ReqCarTradeList pricedec
         * @property {number|null} [startnum] C2GW_ReqCarTradeList startnum
         */

        /**
         * Constructs a new C2GW_ReqCarTradeList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqCarTradeList.
         * @implements IC2GW_ReqCarTradeList
         * @constructor
         * @param {msg.IC2GW_ReqCarTradeList=} [properties] Properties to set
         */
        function C2GW_ReqCarTradeList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqCarTradeList cartype.
         * @member {number} cartype
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.cartype = 0;

        /**
         * C2GW_ReqCarTradeList carsubtype.
         * @member {number} carsubtype
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.carsubtype = 0;

        /**
         * C2GW_ReqCarTradeList pricemin.
         * @member {number} pricemin
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.pricemin = 0;

        /**
         * C2GW_ReqCarTradeList pricemax.
         * @member {number} pricemax
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.pricemax = 0;

        /**
         * C2GW_ReqCarTradeList carlevel.
         * @member {number} carlevel
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.carlevel = 0;

        /**
         * C2GW_ReqCarTradeList name.
         * @member {string} name
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.name = "";

        /**
         * C2GW_ReqCarTradeList pricedec.
         * @member {boolean} pricedec
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.pricedec = false;

        /**
         * C2GW_ReqCarTradeList startnum.
         * @member {number} startnum
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         */
        C2GW_ReqCarTradeList.prototype.startnum = 0;

        /**
         * Creates a new C2GW_ReqCarTradeList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {msg.IC2GW_ReqCarTradeList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqCarTradeList} C2GW_ReqCarTradeList instance
         */
        C2GW_ReqCarTradeList.create = function create(properties) {
            return new C2GW_ReqCarTradeList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqCarTradeList message. Does not implicitly {@link msg.C2GW_ReqCarTradeList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {msg.IC2GW_ReqCarTradeList} message C2GW_ReqCarTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarTradeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cartype);
            if (message.carsubtype != null && message.hasOwnProperty("carsubtype"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.carsubtype);
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pricemin);
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pricemax);
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.carlevel);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.pricedec);
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.startnum);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqCarTradeList message, length delimited. Does not implicitly {@link msg.C2GW_ReqCarTradeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {msg.IC2GW_ReqCarTradeList} message C2GW_ReqCarTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqCarTradeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqCarTradeList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqCarTradeList} C2GW_ReqCarTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarTradeList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqCarTradeList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.cartype = reader.uint32();
                    break;
                case 3:
                    message.carsubtype = reader.uint32();
                    break;
                case 4:
                    message.pricemin = reader.uint32();
                    break;
                case 5:
                    message.pricemax = reader.uint32();
                    break;
                case 6:
                    message.carlevel = reader.uint32();
                    break;
                case 7:
                    message.name = reader.string();
                    break;
                case 8:
                    message.pricedec = reader.bool();
                    break;
                case 9:
                    message.startnum = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqCarTradeList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqCarTradeList} C2GW_ReqCarTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqCarTradeList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqCarTradeList message.
         * @function verify
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqCarTradeList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                if (!$util.isInteger(message.cartype))
                    return "cartype: integer expected";
            if (message.carsubtype != null && message.hasOwnProperty("carsubtype"))
                if (!$util.isInteger(message.carsubtype))
                    return "carsubtype: integer expected";
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                if (!$util.isInteger(message.pricemin))
                    return "pricemin: integer expected";
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                if (!$util.isInteger(message.pricemax))
                    return "pricemax: integer expected";
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                if (!$util.isInteger(message.carlevel))
                    return "carlevel: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                if (typeof message.pricedec !== "boolean")
                    return "pricedec: boolean expected";
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                if (!$util.isInteger(message.startnum))
                    return "startnum: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqCarTradeList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqCarTradeList} C2GW_ReqCarTradeList
         */
        C2GW_ReqCarTradeList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqCarTradeList)
                return object;
            var message = new $root.msg.C2GW_ReqCarTradeList();
            if (object.cartype != null)
                message.cartype = object.cartype >>> 0;
            if (object.carsubtype != null)
                message.carsubtype = object.carsubtype >>> 0;
            if (object.pricemin != null)
                message.pricemin = object.pricemin >>> 0;
            if (object.pricemax != null)
                message.pricemax = object.pricemax >>> 0;
            if (object.carlevel != null)
                message.carlevel = object.carlevel >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.pricedec != null)
                message.pricedec = Boolean(object.pricedec);
            if (object.startnum != null)
                message.startnum = object.startnum >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqCarTradeList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqCarTradeList
         * @static
         * @param {msg.C2GW_ReqCarTradeList} message C2GW_ReqCarTradeList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqCarTradeList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cartype = 0;
                object.carsubtype = 0;
                object.pricemin = 0;
                object.pricemax = 0;
                object.carlevel = 0;
                object.name = "";
                object.pricedec = false;
                object.startnum = 0;
            }
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                object.cartype = message.cartype;
            if (message.carsubtype != null && message.hasOwnProperty("carsubtype"))
                object.carsubtype = message.carsubtype;
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                object.pricemin = message.pricemin;
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                object.pricemax = message.pricemax;
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                object.carlevel = message.carlevel;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                object.pricedec = message.pricedec;
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                object.startnum = message.startnum;
            return object;
        };

        /**
         * Converts this C2GW_ReqCarTradeList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqCarTradeList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqCarTradeList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqCarTradeList;
    })();

    msg.SimpleCarTrade = (function() {

        /**
         * Properties of a SimpleCarTrade.
         * @memberof msg
         * @interface ISimpleCarTrade
         * @property {number|Long|null} [tradeuid] SimpleCarTrade tradeuid
         * @property {number|null} [caruid] SimpleCarTrade caruid
         * @property {number|null} [price] SimpleCarTrade price
         * @property {number|null} [income] SimpleCarTrade income
         * @property {number|null} [carbaseid] SimpleCarTrade carbaseid
         * @property {number|null} [endtime] SimpleCarTrade endtime
         * @property {number|null} [ownerid] SimpleCarTrade ownerid
         * @property {number|null} [carlevel] SimpleCarTrade carlevel
         * @property {number|null} [cartype] SimpleCarTrade cartype
         * @property {string|null} [name] SimpleCarTrade name
         */

        /**
         * Constructs a new SimpleCarTrade.
         * @memberof msg
         * @classdesc Represents a SimpleCarTrade.
         * @implements ISimpleCarTrade
         * @constructor
         * @param {msg.ISimpleCarTrade=} [properties] Properties to set
         */
        function SimpleCarTrade(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SimpleCarTrade tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * SimpleCarTrade caruid.
         * @member {number} caruid
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.caruid = 0;

        /**
         * SimpleCarTrade price.
         * @member {number} price
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.price = 0;

        /**
         * SimpleCarTrade income.
         * @member {number} income
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.income = 0;

        /**
         * SimpleCarTrade carbaseid.
         * @member {number} carbaseid
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.carbaseid = 0;

        /**
         * SimpleCarTrade endtime.
         * @member {number} endtime
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.endtime = 0;

        /**
         * SimpleCarTrade ownerid.
         * @member {number} ownerid
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.ownerid = 0;

        /**
         * SimpleCarTrade carlevel.
         * @member {number} carlevel
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.carlevel = 0;

        /**
         * SimpleCarTrade cartype.
         * @member {number} cartype
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.cartype = 0;

        /**
         * SimpleCarTrade name.
         * @member {string} name
         * @memberof msg.SimpleCarTrade
         * @instance
         */
        SimpleCarTrade.prototype.name = "";

        /**
         * Creates a new SimpleCarTrade instance using the specified properties.
         * @function create
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {msg.ISimpleCarTrade=} [properties] Properties to set
         * @returns {msg.SimpleCarTrade} SimpleCarTrade instance
         */
        SimpleCarTrade.create = function create(properties) {
            return new SimpleCarTrade(properties);
        };

        /**
         * Encodes the specified SimpleCarTrade message. Does not implicitly {@link msg.SimpleCarTrade.verify|verify} messages.
         * @function encode
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {msg.ISimpleCarTrade} message SimpleCarTrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCarTrade.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.caruid);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.price);
            if (message.income != null && message.hasOwnProperty("income"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.income);
            if (message.carbaseid != null && message.hasOwnProperty("carbaseid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.carbaseid);
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.endtime);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.ownerid);
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.carlevel);
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.cartype);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified SimpleCarTrade message, length delimited. Does not implicitly {@link msg.SimpleCarTrade.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {msg.ISimpleCarTrade} message SimpleCarTrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleCarTrade.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SimpleCarTrade message from the specified reader or buffer.
         * @function decode
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.SimpleCarTrade} SimpleCarTrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCarTrade.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.SimpleCarTrade();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.caruid = reader.uint32();
                    break;
                case 3:
                    message.price = reader.uint32();
                    break;
                case 4:
                    message.income = reader.uint32();
                    break;
                case 5:
                    message.carbaseid = reader.uint32();
                    break;
                case 6:
                    message.endtime = reader.uint32();
                    break;
                case 7:
                    message.ownerid = reader.uint32();
                    break;
                case 8:
                    message.carlevel = reader.uint32();
                    break;
                case 9:
                    message.cartype = reader.uint32();
                    break;
                case 10:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SimpleCarTrade message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.SimpleCarTrade} SimpleCarTrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleCarTrade.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SimpleCarTrade message.
         * @function verify
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SimpleCarTrade.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (!$util.isInteger(message.caruid))
                    return "caruid: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.income != null && message.hasOwnProperty("income"))
                if (!$util.isInteger(message.income))
                    return "income: integer expected";
            if (message.carbaseid != null && message.hasOwnProperty("carbaseid"))
                if (!$util.isInteger(message.carbaseid))
                    return "carbaseid: integer expected";
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                if (!$util.isInteger(message.endtime))
                    return "endtime: integer expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid))
                    return "ownerid: integer expected";
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                if (!$util.isInteger(message.carlevel))
                    return "carlevel: integer expected";
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                if (!$util.isInteger(message.cartype))
                    return "cartype: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a SimpleCarTrade message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.SimpleCarTrade} SimpleCarTrade
         */
        SimpleCarTrade.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.SimpleCarTrade)
                return object;
            var message = new $root.msg.SimpleCarTrade();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.caruid != null)
                message.caruid = object.caruid >>> 0;
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.income != null)
                message.income = object.income >>> 0;
            if (object.carbaseid != null)
                message.carbaseid = object.carbaseid >>> 0;
            if (object.endtime != null)
                message.endtime = object.endtime >>> 0;
            if (object.ownerid != null)
                message.ownerid = object.ownerid >>> 0;
            if (object.carlevel != null)
                message.carlevel = object.carlevel >>> 0;
            if (object.cartype != null)
                message.cartype = object.cartype >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a SimpleCarTrade message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.SimpleCarTrade
         * @static
         * @param {msg.SimpleCarTrade} message SimpleCarTrade
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SimpleCarTrade.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                object.caruid = 0;
                object.price = 0;
                object.income = 0;
                object.carbaseid = 0;
                object.endtime = 0;
                object.ownerid = 0;
                object.carlevel = 0;
                object.cartype = 0;
                object.name = "";
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                object.caruid = message.caruid;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.income != null && message.hasOwnProperty("income"))
                object.income = message.income;
            if (message.carbaseid != null && message.hasOwnProperty("carbaseid"))
                object.carbaseid = message.carbaseid;
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                object.endtime = message.endtime;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                object.ownerid = message.ownerid;
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                object.carlevel = message.carlevel;
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                object.cartype = message.cartype;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this SimpleCarTrade to JSON.
         * @function toJSON
         * @memberof msg.SimpleCarTrade
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SimpleCarTrade.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SimpleCarTrade;
    })();

    msg.GW2C_RetCarTradeList = (function() {

        /**
         * Properties of a GW2C_RetCarTradeList.
         * @memberof msg
         * @interface IGW2C_RetCarTradeList
         * @property {Array.<msg.ISimpleCarTrade>|null} [list] GW2C_RetCarTradeList list
         */

        /**
         * Constructs a new GW2C_RetCarTradeList.
         * @memberof msg
         * @classdesc Represents a GW2C_RetCarTradeList.
         * @implements IGW2C_RetCarTradeList
         * @constructor
         * @param {msg.IGW2C_RetCarTradeList=} [properties] Properties to set
         */
        function GW2C_RetCarTradeList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetCarTradeList list.
         * @member {Array.<msg.ISimpleCarTrade>} list
         * @memberof msg.GW2C_RetCarTradeList
         * @instance
         */
        GW2C_RetCarTradeList.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_RetCarTradeList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {msg.IGW2C_RetCarTradeList=} [properties] Properties to set
         * @returns {msg.GW2C_RetCarTradeList} GW2C_RetCarTradeList instance
         */
        GW2C_RetCarTradeList.create = function create(properties) {
            return new GW2C_RetCarTradeList(properties);
        };

        /**
         * Encodes the specified GW2C_RetCarTradeList message. Does not implicitly {@link msg.GW2C_RetCarTradeList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {msg.IGW2C_RetCarTradeList} message GW2C_RetCarTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCarTradeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.SimpleCarTrade.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetCarTradeList message, length delimited. Does not implicitly {@link msg.GW2C_RetCarTradeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {msg.IGW2C_RetCarTradeList} message GW2C_RetCarTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCarTradeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetCarTradeList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetCarTradeList} GW2C_RetCarTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCarTradeList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetCarTradeList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.SimpleCarTrade.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetCarTradeList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetCarTradeList} GW2C_RetCarTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCarTradeList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetCarTradeList message.
         * @function verify
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetCarTradeList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.SimpleCarTrade.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_RetCarTradeList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetCarTradeList} GW2C_RetCarTradeList
         */
        GW2C_RetCarTradeList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetCarTradeList)
                return object;
            var message = new $root.msg.GW2C_RetCarTradeList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetCarTradeList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetCarTradeList.list: object expected");
                    message.list[i] = $root.msg.SimpleCarTrade.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetCarTradeList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetCarTradeList
         * @static
         * @param {msg.GW2C_RetCarTradeList} message GW2C_RetCarTradeList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetCarTradeList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.SimpleCarTrade.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_RetCarTradeList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetCarTradeList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetCarTradeList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetCarTradeList;
    })();

    msg.C2GW_TradeCar = (function() {

        /**
         * Properties of a C2GW_TradeCar.
         * @memberof msg
         * @interface IC2GW_TradeCar
         * @property {number|Long|null} [caruid] C2GW_TradeCar caruid
         * @property {number|null} [price] C2GW_TradeCar price
         */

        /**
         * Constructs a new C2GW_TradeCar.
         * @memberof msg
         * @classdesc Represents a C2GW_TradeCar.
         * @implements IC2GW_TradeCar
         * @constructor
         * @param {msg.IC2GW_TradeCar=} [properties] Properties to set
         */
        function C2GW_TradeCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TradeCar caruid.
         * @member {number|Long} caruid
         * @memberof msg.C2GW_TradeCar
         * @instance
         */
        C2GW_TradeCar.prototype.caruid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_TradeCar price.
         * @member {number} price
         * @memberof msg.C2GW_TradeCar
         * @instance
         */
        C2GW_TradeCar.prototype.price = 0;

        /**
         * Creates a new C2GW_TradeCar instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {msg.IC2GW_TradeCar=} [properties] Properties to set
         * @returns {msg.C2GW_TradeCar} C2GW_TradeCar instance
         */
        C2GW_TradeCar.create = function create(properties) {
            return new C2GW_TradeCar(properties);
        };

        /**
         * Encodes the specified C2GW_TradeCar message. Does not implicitly {@link msg.C2GW_TradeCar.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {msg.IC2GW_TradeCar} message C2GW_TradeCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TradeCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.caruid);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.price);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TradeCar message, length delimited. Does not implicitly {@link msg.C2GW_TradeCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {msg.IC2GW_TradeCar} message C2GW_TradeCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TradeCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TradeCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TradeCar} C2GW_TradeCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TradeCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TradeCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.caruid = reader.uint64();
                    break;
                case 2:
                    message.price = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TradeCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TradeCar} C2GW_TradeCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TradeCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TradeCar message.
         * @function verify
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TradeCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (!$util.isInteger(message.caruid) && !(message.caruid && $util.isInteger(message.caruid.low) && $util.isInteger(message.caruid.high)))
                    return "caruid: integer|Long expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_TradeCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TradeCar} C2GW_TradeCar
         */
        C2GW_TradeCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TradeCar)
                return object;
            var message = new $root.msg.C2GW_TradeCar();
            if (object.caruid != null)
                if ($util.Long)
                    (message.caruid = $util.Long.fromValue(object.caruid)).unsigned = true;
                else if (typeof object.caruid === "string")
                    message.caruid = parseInt(object.caruid, 10);
                else if (typeof object.caruid === "number")
                    message.caruid = object.caruid;
                else if (typeof object.caruid === "object")
                    message.caruid = new $util.LongBits(object.caruid.low >>> 0, object.caruid.high >>> 0).toNumber(true);
            if (object.price != null)
                message.price = object.price >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TradeCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TradeCar
         * @static
         * @param {msg.C2GW_TradeCar} message C2GW_TradeCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TradeCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caruid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caruid = options.longs === String ? "0" : 0;
                object.price = 0;
            }
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (typeof message.caruid === "number")
                    object.caruid = options.longs === String ? String(message.caruid) : message.caruid;
                else
                    object.caruid = options.longs === String ? $util.Long.prototype.toString.call(message.caruid) : options.longs === Number ? new $util.LongBits(message.caruid.low >>> 0, message.caruid.high >>> 0).toNumber(true) : message.caruid;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            return object;
        };

        /**
         * Converts this C2GW_TradeCar to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TradeCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TradeCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TradeCar;
    })();

    msg.C2GW_BuyTradeCar = (function() {

        /**
         * Properties of a C2GW_BuyTradeCar.
         * @memberof msg
         * @interface IC2GW_BuyTradeCar
         * @property {number|Long|null} [tradeuid] C2GW_BuyTradeCar tradeuid
         * @property {number|Long|null} [caruid] C2GW_BuyTradeCar caruid
         */

        /**
         * Constructs a new C2GW_BuyTradeCar.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyTradeCar.
         * @implements IC2GW_BuyTradeCar
         * @constructor
         * @param {msg.IC2GW_BuyTradeCar=} [properties] Properties to set
         */
        function C2GW_BuyTradeCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyTradeCar tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_BuyTradeCar
         * @instance
         */
        C2GW_BuyTradeCar.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_BuyTradeCar caruid.
         * @member {number|Long} caruid
         * @memberof msg.C2GW_BuyTradeCar
         * @instance
         */
        C2GW_BuyTradeCar.prototype.caruid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_BuyTradeCar instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {msg.IC2GW_BuyTradeCar=} [properties] Properties to set
         * @returns {msg.C2GW_BuyTradeCar} C2GW_BuyTradeCar instance
         */
        C2GW_BuyTradeCar.create = function create(properties) {
            return new C2GW_BuyTradeCar(properties);
        };

        /**
         * Encodes the specified C2GW_BuyTradeCar message. Does not implicitly {@link msg.C2GW_BuyTradeCar.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {msg.IC2GW_BuyTradeCar} message C2GW_BuyTradeCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyTradeCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.caruid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyTradeCar message, length delimited. Does not implicitly {@link msg.C2GW_BuyTradeCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {msg.IC2GW_BuyTradeCar} message C2GW_BuyTradeCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyTradeCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyTradeCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyTradeCar} C2GW_BuyTradeCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyTradeCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyTradeCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.caruid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyTradeCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyTradeCar} C2GW_BuyTradeCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyTradeCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyTradeCar message.
         * @function verify
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyTradeCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (!$util.isInteger(message.caruid) && !(message.caruid && $util.isInteger(message.caruid.low) && $util.isInteger(message.caruid.high)))
                    return "caruid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyTradeCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyTradeCar} C2GW_BuyTradeCar
         */
        C2GW_BuyTradeCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyTradeCar)
                return object;
            var message = new $root.msg.C2GW_BuyTradeCar();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.caruid != null)
                if ($util.Long)
                    (message.caruid = $util.Long.fromValue(object.caruid)).unsigned = true;
                else if (typeof object.caruid === "string")
                    message.caruid = parseInt(object.caruid, 10);
                else if (typeof object.caruid === "number")
                    message.caruid = object.caruid;
                else if (typeof object.caruid === "object")
                    message.caruid = new $util.LongBits(object.caruid.low >>> 0, object.caruid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyTradeCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyTradeCar
         * @static
         * @param {msg.C2GW_BuyTradeCar} message C2GW_BuyTradeCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyTradeCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caruid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caruid = options.longs === String ? "0" : 0;
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (typeof message.caruid === "number")
                    object.caruid = options.longs === String ? String(message.caruid) : message.caruid;
                else
                    object.caruid = options.longs === String ? $util.Long.prototype.toString.call(message.caruid) : options.longs === Number ? new $util.LongBits(message.caruid.low >>> 0, message.caruid.high >>> 0).toNumber(true) : message.caruid;
            return object;
        };

        /**
         * Converts this C2GW_BuyTradeCar to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyTradeCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyTradeCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyTradeCar;
    })();

    msg.C2GW_ReqTradeCarHistory = (function() {

        /**
         * Properties of a C2GW_ReqTradeCarHistory.
         * @memberof msg
         * @interface IC2GW_ReqTradeCarHistory
         */

        /**
         * Constructs a new C2GW_ReqTradeCarHistory.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTradeCarHistory.
         * @implements IC2GW_ReqTradeCarHistory
         * @constructor
         * @param {msg.IC2GW_ReqTradeCarHistory=} [properties] Properties to set
         */
        function C2GW_ReqTradeCarHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqTradeCarHistory instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {msg.IC2GW_ReqTradeCarHistory=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTradeCarHistory} C2GW_ReqTradeCarHistory instance
         */
        C2GW_ReqTradeCarHistory.create = function create(properties) {
            return new C2GW_ReqTradeCarHistory(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTradeCarHistory message. Does not implicitly {@link msg.C2GW_ReqTradeCarHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {msg.IC2GW_ReqTradeCarHistory} message C2GW_ReqTradeCarHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTradeCarHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTradeCarHistory message, length delimited. Does not implicitly {@link msg.C2GW_ReqTradeCarHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {msg.IC2GW_ReqTradeCarHistory} message C2GW_ReqTradeCarHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTradeCarHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTradeCarHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTradeCarHistory} C2GW_ReqTradeCarHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTradeCarHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTradeCarHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTradeCarHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTradeCarHistory} C2GW_ReqTradeCarHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTradeCarHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTradeCarHistory message.
         * @function verify
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTradeCarHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTradeCarHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTradeCarHistory} C2GW_ReqTradeCarHistory
         */
        C2GW_ReqTradeCarHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTradeCarHistory)
                return object;
            return new $root.msg.C2GW_ReqTradeCarHistory();
        };

        /**
         * Creates a plain object from a C2GW_ReqTradeCarHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @static
         * @param {msg.C2GW_ReqTradeCarHistory} message C2GW_ReqTradeCarHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTradeCarHistory.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqTradeCarHistory to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTradeCarHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTradeCarHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTradeCarHistory;
    })();

    msg.TradeCarHistory = (function() {

        /**
         * Properties of a TradeCarHistory.
         * @memberof msg
         * @interface ITradeCarHistory
         * @property {number|Long|null} [tradeuid] TradeCarHistory tradeuid
         * @property {number|Long|null} [caruid] TradeCarHistory caruid
         * @property {number|null} [price] TradeCarHistory price
         * @property {number|null} [income] TradeCarHistory income
         * @property {number|null} [carbaseid] TradeCarHistory carbaseid
         * @property {number|null} [endtime] TradeCarHistory endtime
         * @property {number|null} [carlevel] TradeCarHistory carlevel
         * @property {number|null} [cartype] TradeCarHistory cartype
         * @property {number|null} [state] TradeCarHistory state
         * @property {number|null} [tradetime] TradeCarHistory tradetime
         */

        /**
         * Constructs a new TradeCarHistory.
         * @memberof msg
         * @classdesc Represents a TradeCarHistory.
         * @implements ITradeCarHistory
         * @constructor
         * @param {msg.ITradeCarHistory=} [properties] Properties to set
         */
        function TradeCarHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TradeCarHistory tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * TradeCarHistory caruid.
         * @member {number|Long} caruid
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.caruid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * TradeCarHistory price.
         * @member {number} price
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.price = 0;

        /**
         * TradeCarHistory income.
         * @member {number} income
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.income = 0;

        /**
         * TradeCarHistory carbaseid.
         * @member {number} carbaseid
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.carbaseid = 0;

        /**
         * TradeCarHistory endtime.
         * @member {number} endtime
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.endtime = 0;

        /**
         * TradeCarHistory carlevel.
         * @member {number} carlevel
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.carlevel = 0;

        /**
         * TradeCarHistory cartype.
         * @member {number} cartype
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.cartype = 0;

        /**
         * TradeCarHistory state.
         * @member {number} state
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.state = 0;

        /**
         * TradeCarHistory tradetime.
         * @member {number} tradetime
         * @memberof msg.TradeCarHistory
         * @instance
         */
        TradeCarHistory.prototype.tradetime = 0;

        /**
         * Creates a new TradeCarHistory instance using the specified properties.
         * @function create
         * @memberof msg.TradeCarHistory
         * @static
         * @param {msg.ITradeCarHistory=} [properties] Properties to set
         * @returns {msg.TradeCarHistory} TradeCarHistory instance
         */
        TradeCarHistory.create = function create(properties) {
            return new TradeCarHistory(properties);
        };

        /**
         * Encodes the specified TradeCarHistory message. Does not implicitly {@link msg.TradeCarHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.TradeCarHistory
         * @static
         * @param {msg.ITradeCarHistory} message TradeCarHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TradeCarHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.caruid);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.price);
            if (message.income != null && message.hasOwnProperty("income"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.income);
            if (message.carbaseid != null && message.hasOwnProperty("carbaseid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.carbaseid);
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.endtime);
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.carlevel);
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.cartype);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.state);
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.tradetime);
            return writer;
        };

        /**
         * Encodes the specified TradeCarHistory message, length delimited. Does not implicitly {@link msg.TradeCarHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TradeCarHistory
         * @static
         * @param {msg.ITradeCarHistory} message TradeCarHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TradeCarHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TradeCarHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TradeCarHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TradeCarHistory} TradeCarHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TradeCarHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TradeCarHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.caruid = reader.uint64();
                    break;
                case 3:
                    message.price = reader.uint32();
                    break;
                case 4:
                    message.income = reader.uint32();
                    break;
                case 5:
                    message.carbaseid = reader.uint32();
                    break;
                case 6:
                    message.endtime = reader.uint32();
                    break;
                case 7:
                    message.carlevel = reader.uint32();
                    break;
                case 8:
                    message.cartype = reader.uint32();
                    break;
                case 9:
                    message.state = reader.uint32();
                    break;
                case 10:
                    message.tradetime = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TradeCarHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TradeCarHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TradeCarHistory} TradeCarHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TradeCarHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TradeCarHistory message.
         * @function verify
         * @memberof msg.TradeCarHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TradeCarHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (!$util.isInteger(message.caruid) && !(message.caruid && $util.isInteger(message.caruid.low) && $util.isInteger(message.caruid.high)))
                    return "caruid: integer|Long expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.income != null && message.hasOwnProperty("income"))
                if (!$util.isInteger(message.income))
                    return "income: integer expected";
            if (message.carbaseid != null && message.hasOwnProperty("carbaseid"))
                if (!$util.isInteger(message.carbaseid))
                    return "carbaseid: integer expected";
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                if (!$util.isInteger(message.endtime))
                    return "endtime: integer expected";
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                if (!$util.isInteger(message.carlevel))
                    return "carlevel: integer expected";
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                if (!$util.isInteger(message.cartype))
                    return "cartype: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                if (!$util.isInteger(message.tradetime))
                    return "tradetime: integer expected";
            return null;
        };

        /**
         * Creates a TradeCarHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TradeCarHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TradeCarHistory} TradeCarHistory
         */
        TradeCarHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TradeCarHistory)
                return object;
            var message = new $root.msg.TradeCarHistory();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.caruid != null)
                if ($util.Long)
                    (message.caruid = $util.Long.fromValue(object.caruid)).unsigned = true;
                else if (typeof object.caruid === "string")
                    message.caruid = parseInt(object.caruid, 10);
                else if (typeof object.caruid === "number")
                    message.caruid = object.caruid;
                else if (typeof object.caruid === "object")
                    message.caruid = new $util.LongBits(object.caruid.low >>> 0, object.caruid.high >>> 0).toNumber(true);
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.income != null)
                message.income = object.income >>> 0;
            if (object.carbaseid != null)
                message.carbaseid = object.carbaseid >>> 0;
            if (object.endtime != null)
                message.endtime = object.endtime >>> 0;
            if (object.carlevel != null)
                message.carlevel = object.carlevel >>> 0;
            if (object.cartype != null)
                message.cartype = object.cartype >>> 0;
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.tradetime != null)
                message.tradetime = object.tradetime >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TradeCarHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TradeCarHistory
         * @static
         * @param {msg.TradeCarHistory} message TradeCarHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TradeCarHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caruid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caruid = options.longs === String ? "0" : 0;
                object.price = 0;
                object.income = 0;
                object.carbaseid = 0;
                object.endtime = 0;
                object.carlevel = 0;
                object.cartype = 0;
                object.state = 0;
                object.tradetime = 0;
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (typeof message.caruid === "number")
                    object.caruid = options.longs === String ? String(message.caruid) : message.caruid;
                else
                    object.caruid = options.longs === String ? $util.Long.prototype.toString.call(message.caruid) : options.longs === Number ? new $util.LongBits(message.caruid.low >>> 0, message.caruid.high >>> 0).toNumber(true) : message.caruid;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.income != null && message.hasOwnProperty("income"))
                object.income = message.income;
            if (message.carbaseid != null && message.hasOwnProperty("carbaseid"))
                object.carbaseid = message.carbaseid;
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                object.endtime = message.endtime;
            if (message.carlevel != null && message.hasOwnProperty("carlevel"))
                object.carlevel = message.carlevel;
            if (message.cartype != null && message.hasOwnProperty("cartype"))
                object.cartype = message.cartype;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                object.tradetime = message.tradetime;
            return object;
        };

        /**
         * Converts this TradeCarHistory to JSON.
         * @function toJSON
         * @memberof msg.TradeCarHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TradeCarHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TradeCarHistory;
    })();

    msg.GW2C_RetTradeCarHistory = (function() {

        /**
         * Properties of a GW2C_RetTradeCarHistory.
         * @memberof msg
         * @interface IGW2C_RetTradeCarHistory
         * @property {Array.<msg.ITradeCarHistory>|null} [list] GW2C_RetTradeCarHistory list
         */

        /**
         * Constructs a new GW2C_RetTradeCarHistory.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTradeCarHistory.
         * @implements IGW2C_RetTradeCarHistory
         * @constructor
         * @param {msg.IGW2C_RetTradeCarHistory=} [properties] Properties to set
         */
        function GW2C_RetTradeCarHistory(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTradeCarHistory list.
         * @member {Array.<msg.ITradeCarHistory>} list
         * @memberof msg.GW2C_RetTradeCarHistory
         * @instance
         */
        GW2C_RetTradeCarHistory.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_RetTradeCarHistory instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {msg.IGW2C_RetTradeCarHistory=} [properties] Properties to set
         * @returns {msg.GW2C_RetTradeCarHistory} GW2C_RetTradeCarHistory instance
         */
        GW2C_RetTradeCarHistory.create = function create(properties) {
            return new GW2C_RetTradeCarHistory(properties);
        };

        /**
         * Encodes the specified GW2C_RetTradeCarHistory message. Does not implicitly {@link msg.GW2C_RetTradeCarHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {msg.IGW2C_RetTradeCarHistory} message GW2C_RetTradeCarHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeCarHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.TradeCarHistory.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTradeCarHistory message, length delimited. Does not implicitly {@link msg.GW2C_RetTradeCarHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {msg.IGW2C_RetTradeCarHistory} message GW2C_RetTradeCarHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeCarHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTradeCarHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTradeCarHistory} GW2C_RetTradeCarHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeCarHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTradeCarHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.TradeCarHistory.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTradeCarHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTradeCarHistory} GW2C_RetTradeCarHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeCarHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTradeCarHistory message.
         * @function verify
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTradeCarHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.TradeCarHistory.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_RetTradeCarHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTradeCarHistory} GW2C_RetTradeCarHistory
         */
        GW2C_RetTradeCarHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTradeCarHistory)
                return object;
            var message = new $root.msg.GW2C_RetTradeCarHistory();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetTradeCarHistory.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetTradeCarHistory.list: object expected");
                    message.list[i] = $root.msg.TradeCarHistory.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTradeCarHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTradeCarHistory
         * @static
         * @param {msg.GW2C_RetTradeCarHistory} message GW2C_RetTradeCarHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTradeCarHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.TradeCarHistory.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_RetTradeCarHistory to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTradeCarHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTradeCarHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTradeCarHistory;
    })();

    msg.C2GW_GetTradeCarReward = (function() {

        /**
         * Properties of a C2GW_GetTradeCarReward.
         * @memberof msg
         * @interface IC2GW_GetTradeCarReward
         * @property {number|Long|null} [tradeuid] C2GW_GetTradeCarReward tradeuid
         */

        /**
         * Constructs a new C2GW_GetTradeCarReward.
         * @memberof msg
         * @classdesc Represents a C2GW_GetTradeCarReward.
         * @implements IC2GW_GetTradeCarReward
         * @constructor
         * @param {msg.IC2GW_GetTradeCarReward=} [properties] Properties to set
         */
        function C2GW_GetTradeCarReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_GetTradeCarReward tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_GetTradeCarReward
         * @instance
         */
        C2GW_GetTradeCarReward.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_GetTradeCarReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {msg.IC2GW_GetTradeCarReward=} [properties] Properties to set
         * @returns {msg.C2GW_GetTradeCarReward} C2GW_GetTradeCarReward instance
         */
        C2GW_GetTradeCarReward.create = function create(properties) {
            return new C2GW_GetTradeCarReward(properties);
        };

        /**
         * Encodes the specified C2GW_GetTradeCarReward message. Does not implicitly {@link msg.C2GW_GetTradeCarReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {msg.IC2GW_GetTradeCarReward} message C2GW_GetTradeCarReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GetTradeCarReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_GetTradeCarReward message, length delimited. Does not implicitly {@link msg.C2GW_GetTradeCarReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {msg.IC2GW_GetTradeCarReward} message C2GW_GetTradeCarReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GetTradeCarReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_GetTradeCarReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_GetTradeCarReward} C2GW_GetTradeCarReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GetTradeCarReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_GetTradeCarReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_GetTradeCarReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_GetTradeCarReward} C2GW_GetTradeCarReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GetTradeCarReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_GetTradeCarReward message.
         * @function verify
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_GetTradeCarReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_GetTradeCarReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_GetTradeCarReward} C2GW_GetTradeCarReward
         */
        C2GW_GetTradeCarReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_GetTradeCarReward)
                return object;
            var message = new $root.msg.C2GW_GetTradeCarReward();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_GetTradeCarReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_GetTradeCarReward
         * @static
         * @param {msg.C2GW_GetTradeCarReward} message C2GW_GetTradeCarReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_GetTradeCarReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this C2GW_GetTradeCarReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_GetTradeCarReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_GetTradeCarReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_GetTradeCarReward;
    })();

    msg.GW2C_RetGetTradeCarReward = (function() {

        /**
         * Properties of a GW2C_RetGetTradeCarReward.
         * @memberof msg
         * @interface IGW2C_RetGetTradeCarReward
         * @property {number|Long|null} [tradeuid] GW2C_RetGetTradeCarReward tradeuid
         */

        /**
         * Constructs a new GW2C_RetGetTradeCarReward.
         * @memberof msg
         * @classdesc Represents a GW2C_RetGetTradeCarReward.
         * @implements IGW2C_RetGetTradeCarReward
         * @constructor
         * @param {msg.IGW2C_RetGetTradeCarReward=} [properties] Properties to set
         */
        function GW2C_RetGetTradeCarReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetGetTradeCarReward tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @instance
         */
        GW2C_RetGetTradeCarReward.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetGetTradeCarReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {msg.IGW2C_RetGetTradeCarReward=} [properties] Properties to set
         * @returns {msg.GW2C_RetGetTradeCarReward} GW2C_RetGetTradeCarReward instance
         */
        GW2C_RetGetTradeCarReward.create = function create(properties) {
            return new GW2C_RetGetTradeCarReward(properties);
        };

        /**
         * Encodes the specified GW2C_RetGetTradeCarReward message. Does not implicitly {@link msg.GW2C_RetGetTradeCarReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {msg.IGW2C_RetGetTradeCarReward} message GW2C_RetGetTradeCarReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGetTradeCarReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetGetTradeCarReward message, length delimited. Does not implicitly {@link msg.GW2C_RetGetTradeCarReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {msg.IGW2C_RetGetTradeCarReward} message GW2C_RetGetTradeCarReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGetTradeCarReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetGetTradeCarReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetGetTradeCarReward} GW2C_RetGetTradeCarReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGetTradeCarReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetGetTradeCarReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetGetTradeCarReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetGetTradeCarReward} GW2C_RetGetTradeCarReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGetTradeCarReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetGetTradeCarReward message.
         * @function verify
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetGetTradeCarReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetGetTradeCarReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetGetTradeCarReward} GW2C_RetGetTradeCarReward
         */
        GW2C_RetGetTradeCarReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetGetTradeCarReward)
                return object;
            var message = new $root.msg.GW2C_RetGetTradeCarReward();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetGetTradeCarReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @static
         * @param {msg.GW2C_RetGetTradeCarReward} message GW2C_RetGetTradeCarReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetGetTradeCarReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetGetTradeCarReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetGetTradeCarReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetGetTradeCarReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetGetTradeCarReward;
    })();

    msg.C2GW_CancelTradeCar = (function() {

        /**
         * Properties of a C2GW_CancelTradeCar.
         * @memberof msg
         * @interface IC2GW_CancelTradeCar
         * @property {number|Long|null} [caruid] C2GW_CancelTradeCar caruid
         */

        /**
         * Constructs a new C2GW_CancelTradeCar.
         * @memberof msg
         * @classdesc Represents a C2GW_CancelTradeCar.
         * @implements IC2GW_CancelTradeCar
         * @constructor
         * @param {msg.IC2GW_CancelTradeCar=} [properties] Properties to set
         */
        function C2GW_CancelTradeCar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_CancelTradeCar caruid.
         * @member {number|Long} caruid
         * @memberof msg.C2GW_CancelTradeCar
         * @instance
         */
        C2GW_CancelTradeCar.prototype.caruid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_CancelTradeCar instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {msg.IC2GW_CancelTradeCar=} [properties] Properties to set
         * @returns {msg.C2GW_CancelTradeCar} C2GW_CancelTradeCar instance
         */
        C2GW_CancelTradeCar.create = function create(properties) {
            return new C2GW_CancelTradeCar(properties);
        };

        /**
         * Encodes the specified C2GW_CancelTradeCar message. Does not implicitly {@link msg.C2GW_CancelTradeCar.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {msg.IC2GW_CancelTradeCar} message C2GW_CancelTradeCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CancelTradeCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.caruid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_CancelTradeCar message, length delimited. Does not implicitly {@link msg.C2GW_CancelTradeCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {msg.IC2GW_CancelTradeCar} message C2GW_CancelTradeCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CancelTradeCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_CancelTradeCar message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_CancelTradeCar} C2GW_CancelTradeCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CancelTradeCar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_CancelTradeCar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.caruid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_CancelTradeCar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_CancelTradeCar} C2GW_CancelTradeCar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CancelTradeCar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_CancelTradeCar message.
         * @function verify
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_CancelTradeCar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (!$util.isInteger(message.caruid) && !(message.caruid && $util.isInteger(message.caruid.low) && $util.isInteger(message.caruid.high)))
                    return "caruid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_CancelTradeCar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_CancelTradeCar} C2GW_CancelTradeCar
         */
        C2GW_CancelTradeCar.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_CancelTradeCar)
                return object;
            var message = new $root.msg.C2GW_CancelTradeCar();
            if (object.caruid != null)
                if ($util.Long)
                    (message.caruid = $util.Long.fromValue(object.caruid)).unsigned = true;
                else if (typeof object.caruid === "string")
                    message.caruid = parseInt(object.caruid, 10);
                else if (typeof object.caruid === "number")
                    message.caruid = object.caruid;
                else if (typeof object.caruid === "object")
                    message.caruid = new $util.LongBits(object.caruid.low >>> 0, object.caruid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_CancelTradeCar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_CancelTradeCar
         * @static
         * @param {msg.C2GW_CancelTradeCar} message C2GW_CancelTradeCar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_CancelTradeCar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caruid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caruid = options.longs === String ? "0" : 0;
            if (message.caruid != null && message.hasOwnProperty("caruid"))
                if (typeof message.caruid === "number")
                    object.caruid = options.longs === String ? String(message.caruid) : message.caruid;
                else
                    object.caruid = options.longs === String ? $util.Long.prototype.toString.call(message.caruid) : options.longs === Number ? new $util.LongBits(message.caruid.low >>> 0, message.caruid.high >>> 0).toNumber(true) : message.caruid;
            return object;
        };

        /**
         * Converts this C2GW_CancelTradeCar to JSON.
         * @function toJSON
         * @memberof msg.C2GW_CancelTradeCar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_CancelTradeCar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_CancelTradeCar;
    })();

    msg.C2GW_ReqItemTradeList = (function() {

        /**
         * Properties of a C2GW_ReqItemTradeList.
         * @memberof msg
         * @interface IC2GW_ReqItemTradeList
         * @property {number|null} [itemtype] C2GW_ReqItemTradeList itemtype
         * @property {number|null} [itemsubtype] C2GW_ReqItemTradeList itemsubtype
         * @property {number|null} [pricemin] C2GW_ReqItemTradeList pricemin
         * @property {number|null} [pricemax] C2GW_ReqItemTradeList pricemax
         * @property {string|null} [name] C2GW_ReqItemTradeList name
         * @property {boolean|null} [pricedec] C2GW_ReqItemTradeList pricedec
         * @property {number|null} [startnum] C2GW_ReqItemTradeList startnum
         * @property {number|Long|null} [userid] C2GW_ReqItemTradeList userid
         */

        /**
         * Constructs a new C2GW_ReqItemTradeList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqItemTradeList.
         * @implements IC2GW_ReqItemTradeList
         * @constructor
         * @param {msg.IC2GW_ReqItemTradeList=} [properties] Properties to set
         */
        function C2GW_ReqItemTradeList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqItemTradeList itemtype.
         * @member {number} itemtype
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.itemtype = 0;

        /**
         * C2GW_ReqItemTradeList itemsubtype.
         * @member {number} itemsubtype
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.itemsubtype = 0;

        /**
         * C2GW_ReqItemTradeList pricemin.
         * @member {number} pricemin
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.pricemin = 0;

        /**
         * C2GW_ReqItemTradeList pricemax.
         * @member {number} pricemax
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.pricemax = 0;

        /**
         * C2GW_ReqItemTradeList name.
         * @member {string} name
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.name = "";

        /**
         * C2GW_ReqItemTradeList pricedec.
         * @member {boolean} pricedec
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.pricedec = false;

        /**
         * C2GW_ReqItemTradeList startnum.
         * @member {number} startnum
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.startnum = 0;

        /**
         * C2GW_ReqItemTradeList userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         */
        C2GW_ReqItemTradeList.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_ReqItemTradeList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {msg.IC2GW_ReqItemTradeList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqItemTradeList} C2GW_ReqItemTradeList instance
         */
        C2GW_ReqItemTradeList.create = function create(properties) {
            return new C2GW_ReqItemTradeList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqItemTradeList message. Does not implicitly {@link msg.C2GW_ReqItemTradeList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {msg.IC2GW_ReqItemTradeList} message C2GW_ReqItemTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqItemTradeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemtype != null && message.hasOwnProperty("itemtype"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemtype);
            if (message.itemsubtype != null && message.hasOwnProperty("itemsubtype"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemsubtype);
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pricemin);
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pricemax);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.pricedec);
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.startnum);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqItemTradeList message, length delimited. Does not implicitly {@link msg.C2GW_ReqItemTradeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {msg.IC2GW_ReqItemTradeList} message C2GW_ReqItemTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqItemTradeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqItemTradeList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqItemTradeList} C2GW_ReqItemTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqItemTradeList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqItemTradeList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemtype = reader.uint32();
                    break;
                case 2:
                    message.itemsubtype = reader.uint32();
                    break;
                case 4:
                    message.pricemin = reader.uint32();
                    break;
                case 5:
                    message.pricemax = reader.uint32();
                    break;
                case 7:
                    message.name = reader.string();
                    break;
                case 8:
                    message.pricedec = reader.bool();
                    break;
                case 9:
                    message.startnum = reader.uint32();
                    break;
                case 10:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqItemTradeList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqItemTradeList} C2GW_ReqItemTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqItemTradeList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqItemTradeList message.
         * @function verify
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqItemTradeList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemtype != null && message.hasOwnProperty("itemtype"))
                if (!$util.isInteger(message.itemtype))
                    return "itemtype: integer expected";
            if (message.itemsubtype != null && message.hasOwnProperty("itemsubtype"))
                if (!$util.isInteger(message.itemsubtype))
                    return "itemsubtype: integer expected";
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                if (!$util.isInteger(message.pricemin))
                    return "pricemin: integer expected";
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                if (!$util.isInteger(message.pricemax))
                    return "pricemax: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                if (typeof message.pricedec !== "boolean")
                    return "pricedec: boolean expected";
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                if (!$util.isInteger(message.startnum))
                    return "startnum: integer expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqItemTradeList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqItemTradeList} C2GW_ReqItemTradeList
         */
        C2GW_ReqItemTradeList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqItemTradeList)
                return object;
            var message = new $root.msg.C2GW_ReqItemTradeList();
            if (object.itemtype != null)
                message.itemtype = object.itemtype >>> 0;
            if (object.itemsubtype != null)
                message.itemsubtype = object.itemsubtype >>> 0;
            if (object.pricemin != null)
                message.pricemin = object.pricemin >>> 0;
            if (object.pricemax != null)
                message.pricemax = object.pricemax >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.pricedec != null)
                message.pricedec = Boolean(object.pricedec);
            if (object.startnum != null)
                message.startnum = object.startnum >>> 0;
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqItemTradeList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqItemTradeList
         * @static
         * @param {msg.C2GW_ReqItemTradeList} message C2GW_ReqItemTradeList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqItemTradeList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemtype = 0;
                object.itemsubtype = 0;
                object.pricemin = 0;
                object.pricemax = 0;
                object.name = "";
                object.pricedec = false;
                object.startnum = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.itemtype != null && message.hasOwnProperty("itemtype"))
                object.itemtype = message.itemtype;
            if (message.itemsubtype != null && message.hasOwnProperty("itemsubtype"))
                object.itemsubtype = message.itemsubtype;
            if (message.pricemin != null && message.hasOwnProperty("pricemin"))
                object.pricemin = message.pricemin;
            if (message.pricemax != null && message.hasOwnProperty("pricemax"))
                object.pricemax = message.pricemax;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.pricedec != null && message.hasOwnProperty("pricedec"))
                object.pricedec = message.pricedec;
            if (message.startnum != null && message.hasOwnProperty("startnum"))
                object.startnum = message.startnum;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_ReqItemTradeList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqItemTradeList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqItemTradeList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqItemTradeList;
    })();

    msg.SimpleItemTrade = (function() {

        /**
         * Properties of a SimpleItemTrade.
         * @memberof msg
         * @interface ISimpleItemTrade
         * @property {number|Long|null} [tradeuid] SimpleItemTrade tradeuid
         * @property {number|null} [itemid] SimpleItemTrade itemid
         * @property {number|null} [itemnum] SimpleItemTrade itemnum
         * @property {number|null} [price] SimpleItemTrade price
         * @property {number|null} [endtime] SimpleItemTrade endtime
         * @property {number|null} [ownerid] SimpleItemTrade ownerid
         * @property {number|null} [itemtype] SimpleItemTrade itemtype
         * @property {number|null} [itemsubtype] SimpleItemTrade itemsubtype
         * @property {string|null} [name] SimpleItemTrade name
         */

        /**
         * Constructs a new SimpleItemTrade.
         * @memberof msg
         * @classdesc Represents a SimpleItemTrade.
         * @implements ISimpleItemTrade
         * @constructor
         * @param {msg.ISimpleItemTrade=} [properties] Properties to set
         */
        function SimpleItemTrade(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SimpleItemTrade tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * SimpleItemTrade itemid.
         * @member {number} itemid
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.itemid = 0;

        /**
         * SimpleItemTrade itemnum.
         * @member {number} itemnum
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.itemnum = 0;

        /**
         * SimpleItemTrade price.
         * @member {number} price
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.price = 0;

        /**
         * SimpleItemTrade endtime.
         * @member {number} endtime
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.endtime = 0;

        /**
         * SimpleItemTrade ownerid.
         * @member {number} ownerid
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.ownerid = 0;

        /**
         * SimpleItemTrade itemtype.
         * @member {number} itemtype
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.itemtype = 0;

        /**
         * SimpleItemTrade itemsubtype.
         * @member {number} itemsubtype
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.itemsubtype = 0;

        /**
         * SimpleItemTrade name.
         * @member {string} name
         * @memberof msg.SimpleItemTrade
         * @instance
         */
        SimpleItemTrade.prototype.name = "";

        /**
         * Creates a new SimpleItemTrade instance using the specified properties.
         * @function create
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {msg.ISimpleItemTrade=} [properties] Properties to set
         * @returns {msg.SimpleItemTrade} SimpleItemTrade instance
         */
        SimpleItemTrade.create = function create(properties) {
            return new SimpleItemTrade(properties);
        };

        /**
         * Encodes the specified SimpleItemTrade message. Does not implicitly {@link msg.SimpleItemTrade.verify|verify} messages.
         * @function encode
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {msg.ISimpleItemTrade} message SimpleItemTrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleItemTrade.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemid);
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.itemnum);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.price);
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.endtime);
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ownerid);
            if (message.itemtype != null && message.hasOwnProperty("itemtype"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.itemtype);
            if (message.itemsubtype != null && message.hasOwnProperty("itemsubtype"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.itemsubtype);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified SimpleItemTrade message, length delimited. Does not implicitly {@link msg.SimpleItemTrade.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {msg.ISimpleItemTrade} message SimpleItemTrade message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SimpleItemTrade.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SimpleItemTrade message from the specified reader or buffer.
         * @function decode
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.SimpleItemTrade} SimpleItemTrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleItemTrade.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.SimpleItemTrade();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.itemid = reader.uint32();
                    break;
                case 3:
                    message.itemnum = reader.uint32();
                    break;
                case 4:
                    message.price = reader.uint32();
                    break;
                case 5:
                    message.endtime = reader.uint32();
                    break;
                case 6:
                    message.ownerid = reader.uint32();
                    break;
                case 7:
                    message.itemtype = reader.uint32();
                    break;
                case 8:
                    message.itemsubtype = reader.uint32();
                    break;
                case 9:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SimpleItemTrade message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.SimpleItemTrade} SimpleItemTrade
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SimpleItemTrade.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SimpleItemTrade message.
         * @function verify
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SimpleItemTrade.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                if (!$util.isInteger(message.itemnum))
                    return "itemnum: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                if (!$util.isInteger(message.endtime))
                    return "endtime: integer expected";
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                if (!$util.isInteger(message.ownerid))
                    return "ownerid: integer expected";
            if (message.itemtype != null && message.hasOwnProperty("itemtype"))
                if (!$util.isInteger(message.itemtype))
                    return "itemtype: integer expected";
            if (message.itemsubtype != null && message.hasOwnProperty("itemsubtype"))
                if (!$util.isInteger(message.itemsubtype))
                    return "itemsubtype: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a SimpleItemTrade message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.SimpleItemTrade} SimpleItemTrade
         */
        SimpleItemTrade.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.SimpleItemTrade)
                return object;
            var message = new $root.msg.SimpleItemTrade();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.itemnum != null)
                message.itemnum = object.itemnum >>> 0;
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.endtime != null)
                message.endtime = object.endtime >>> 0;
            if (object.ownerid != null)
                message.ownerid = object.ownerid >>> 0;
            if (object.itemtype != null)
                message.itemtype = object.itemtype >>> 0;
            if (object.itemsubtype != null)
                message.itemsubtype = object.itemsubtype >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a SimpleItemTrade message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.SimpleItemTrade
         * @static
         * @param {msg.SimpleItemTrade} message SimpleItemTrade
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SimpleItemTrade.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                object.itemid = 0;
                object.itemnum = 0;
                object.price = 0;
                object.endtime = 0;
                object.ownerid = 0;
                object.itemtype = 0;
                object.itemsubtype = 0;
                object.name = "";
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                object.itemnum = message.itemnum;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.endtime != null && message.hasOwnProperty("endtime"))
                object.endtime = message.endtime;
            if (message.ownerid != null && message.hasOwnProperty("ownerid"))
                object.ownerid = message.ownerid;
            if (message.itemtype != null && message.hasOwnProperty("itemtype"))
                object.itemtype = message.itemtype;
            if (message.itemsubtype != null && message.hasOwnProperty("itemsubtype"))
                object.itemsubtype = message.itemsubtype;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this SimpleItemTrade to JSON.
         * @function toJSON
         * @memberof msg.SimpleItemTrade
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SimpleItemTrade.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SimpleItemTrade;
    })();

    msg.GW2C_RetItemTradeList = (function() {

        /**
         * Properties of a GW2C_RetItemTradeList.
         * @memberof msg
         * @interface IGW2C_RetItemTradeList
         * @property {Array.<msg.ISimpleItemTrade>|null} [list] GW2C_RetItemTradeList list
         * @property {boolean|null} [ismine] GW2C_RetItemTradeList ismine
         */

        /**
         * Constructs a new GW2C_RetItemTradeList.
         * @memberof msg
         * @classdesc Represents a GW2C_RetItemTradeList.
         * @implements IGW2C_RetItemTradeList
         * @constructor
         * @param {msg.IGW2C_RetItemTradeList=} [properties] Properties to set
         */
        function GW2C_RetItemTradeList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetItemTradeList list.
         * @member {Array.<msg.ISimpleItemTrade>} list
         * @memberof msg.GW2C_RetItemTradeList
         * @instance
         */
        GW2C_RetItemTradeList.prototype.list = $util.emptyArray;

        /**
         * GW2C_RetItemTradeList ismine.
         * @member {boolean} ismine
         * @memberof msg.GW2C_RetItemTradeList
         * @instance
         */
        GW2C_RetItemTradeList.prototype.ismine = false;

        /**
         * Creates a new GW2C_RetItemTradeList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {msg.IGW2C_RetItemTradeList=} [properties] Properties to set
         * @returns {msg.GW2C_RetItemTradeList} GW2C_RetItemTradeList instance
         */
        GW2C_RetItemTradeList.create = function create(properties) {
            return new GW2C_RetItemTradeList(properties);
        };

        /**
         * Encodes the specified GW2C_RetItemTradeList message. Does not implicitly {@link msg.GW2C_RetItemTradeList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {msg.IGW2C_RetItemTradeList} message GW2C_RetItemTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetItemTradeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.SimpleItemTrade.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ismine != null && message.hasOwnProperty("ismine"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.ismine);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetItemTradeList message, length delimited. Does not implicitly {@link msg.GW2C_RetItemTradeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {msg.IGW2C_RetItemTradeList} message GW2C_RetItemTradeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetItemTradeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetItemTradeList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetItemTradeList} GW2C_RetItemTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetItemTradeList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetItemTradeList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.SimpleItemTrade.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.ismine = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetItemTradeList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetItemTradeList} GW2C_RetItemTradeList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetItemTradeList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetItemTradeList message.
         * @function verify
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetItemTradeList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.SimpleItemTrade.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            if (message.ismine != null && message.hasOwnProperty("ismine"))
                if (typeof message.ismine !== "boolean")
                    return "ismine: boolean expected";
            return null;
        };

        /**
         * Creates a GW2C_RetItemTradeList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetItemTradeList} GW2C_RetItemTradeList
         */
        GW2C_RetItemTradeList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetItemTradeList)
                return object;
            var message = new $root.msg.GW2C_RetItemTradeList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetItemTradeList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetItemTradeList.list: object expected");
                    message.list[i] = $root.msg.SimpleItemTrade.fromObject(object.list[i]);
                }
            }
            if (object.ismine != null)
                message.ismine = Boolean(object.ismine);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetItemTradeList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetItemTradeList
         * @static
         * @param {msg.GW2C_RetItemTradeList} message GW2C_RetItemTradeList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetItemTradeList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (options.defaults)
                object.ismine = false;
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.SimpleItemTrade.toObject(message.list[j], options);
            }
            if (message.ismine != null && message.hasOwnProperty("ismine"))
                object.ismine = message.ismine;
            return object;
        };

        /**
         * Converts this GW2C_RetItemTradeList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetItemTradeList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetItemTradeList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetItemTradeList;
    })();

    msg.C2GW_TradeItem = (function() {

        /**
         * Properties of a C2GW_TradeItem.
         * @memberof msg
         * @interface IC2GW_TradeItem
         * @property {number|null} [itemid] C2GW_TradeItem itemid
         * @property {number|null} [itemnum] C2GW_TradeItem itemnum
         * @property {number|null} [price] C2GW_TradeItem price
         */

        /**
         * Constructs a new C2GW_TradeItem.
         * @memberof msg
         * @classdesc Represents a C2GW_TradeItem.
         * @implements IC2GW_TradeItem
         * @constructor
         * @param {msg.IC2GW_TradeItem=} [properties] Properties to set
         */
        function C2GW_TradeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_TradeItem itemid.
         * @member {number} itemid
         * @memberof msg.C2GW_TradeItem
         * @instance
         */
        C2GW_TradeItem.prototype.itemid = 0;

        /**
         * C2GW_TradeItem itemnum.
         * @member {number} itemnum
         * @memberof msg.C2GW_TradeItem
         * @instance
         */
        C2GW_TradeItem.prototype.itemnum = 0;

        /**
         * C2GW_TradeItem price.
         * @member {number} price
         * @memberof msg.C2GW_TradeItem
         * @instance
         */
        C2GW_TradeItem.prototype.price = 0;

        /**
         * Creates a new C2GW_TradeItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {msg.IC2GW_TradeItem=} [properties] Properties to set
         * @returns {msg.C2GW_TradeItem} C2GW_TradeItem instance
         */
        C2GW_TradeItem.create = function create(properties) {
            return new C2GW_TradeItem(properties);
        };

        /**
         * Encodes the specified C2GW_TradeItem message. Does not implicitly {@link msg.C2GW_TradeItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {msg.IC2GW_TradeItem} message C2GW_TradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TradeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemid);
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemnum);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.price);
            return writer;
        };

        /**
         * Encodes the specified C2GW_TradeItem message, length delimited. Does not implicitly {@link msg.C2GW_TradeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {msg.IC2GW_TradeItem} message C2GW_TradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_TradeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_TradeItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_TradeItem} C2GW_TradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TradeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_TradeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint32();
                    break;
                case 2:
                    message.itemnum = reader.uint32();
                    break;
                case 3:
                    message.price = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_TradeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_TradeItem} C2GW_TradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_TradeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_TradeItem message.
         * @function verify
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_TradeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                if (!$util.isInteger(message.itemnum))
                    return "itemnum: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_TradeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_TradeItem} C2GW_TradeItem
         */
        C2GW_TradeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_TradeItem)
                return object;
            var message = new $root.msg.C2GW_TradeItem();
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.itemnum != null)
                message.itemnum = object.itemnum >>> 0;
            if (object.price != null)
                message.price = object.price >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_TradeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_TradeItem
         * @static
         * @param {msg.C2GW_TradeItem} message C2GW_TradeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_TradeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemid = 0;
                object.itemnum = 0;
                object.price = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                object.itemnum = message.itemnum;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            return object;
        };

        /**
         * Converts this C2GW_TradeItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_TradeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_TradeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_TradeItem;
    })();

    msg.GW2C_RetTradeItem = (function() {

        /**
         * Properties of a GW2C_RetTradeItem.
         * @memberof msg
         * @interface IGW2C_RetTradeItem
         * @property {number|Long|null} [tradeuid] GW2C_RetTradeItem tradeuid
         */

        /**
         * Constructs a new GW2C_RetTradeItem.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTradeItem.
         * @implements IGW2C_RetTradeItem
         * @constructor
         * @param {msg.IGW2C_RetTradeItem=} [properties] Properties to set
         */
        function GW2C_RetTradeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTradeItem tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetTradeItem
         * @instance
         */
        GW2C_RetTradeItem.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetTradeItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {msg.IGW2C_RetTradeItem=} [properties] Properties to set
         * @returns {msg.GW2C_RetTradeItem} GW2C_RetTradeItem instance
         */
        GW2C_RetTradeItem.create = function create(properties) {
            return new GW2C_RetTradeItem(properties);
        };

        /**
         * Encodes the specified GW2C_RetTradeItem message. Does not implicitly {@link msg.GW2C_RetTradeItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {msg.IGW2C_RetTradeItem} message GW2C_RetTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTradeItem message, length delimited. Does not implicitly {@link msg.GW2C_RetTradeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {msg.IGW2C_RetTradeItem} message GW2C_RetTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTradeItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTradeItem} GW2C_RetTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTradeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTradeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTradeItem} GW2C_RetTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTradeItem message.
         * @function verify
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTradeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetTradeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTradeItem} GW2C_RetTradeItem
         */
        GW2C_RetTradeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTradeItem)
                return object;
            var message = new $root.msg.GW2C_RetTradeItem();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTradeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTradeItem
         * @static
         * @param {msg.GW2C_RetTradeItem} message GW2C_RetTradeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTradeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetTradeItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTradeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTradeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTradeItem;
    })();

    msg.C2GW_BuyTradeItem = (function() {

        /**
         * Properties of a C2GW_BuyTradeItem.
         * @memberof msg
         * @interface IC2GW_BuyTradeItem
         * @property {number|Long|null} [tradeuid] C2GW_BuyTradeItem tradeuid
         * @property {number|Long|null} [userid] C2GW_BuyTradeItem userid
         */

        /**
         * Constructs a new C2GW_BuyTradeItem.
         * @memberof msg
         * @classdesc Represents a C2GW_BuyTradeItem.
         * @implements IC2GW_BuyTradeItem
         * @constructor
         * @param {msg.IC2GW_BuyTradeItem=} [properties] Properties to set
         */
        function C2GW_BuyTradeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_BuyTradeItem tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_BuyTradeItem
         * @instance
         */
        C2GW_BuyTradeItem.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * C2GW_BuyTradeItem userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_BuyTradeItem
         * @instance
         */
        C2GW_BuyTradeItem.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_BuyTradeItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {msg.IC2GW_BuyTradeItem=} [properties] Properties to set
         * @returns {msg.C2GW_BuyTradeItem} C2GW_BuyTradeItem instance
         */
        C2GW_BuyTradeItem.create = function create(properties) {
            return new C2GW_BuyTradeItem(properties);
        };

        /**
         * Encodes the specified C2GW_BuyTradeItem message. Does not implicitly {@link msg.C2GW_BuyTradeItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {msg.IC2GW_BuyTradeItem} message C2GW_BuyTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyTradeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_BuyTradeItem message, length delimited. Does not implicitly {@link msg.C2GW_BuyTradeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {msg.IC2GW_BuyTradeItem} message C2GW_BuyTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_BuyTradeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_BuyTradeItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_BuyTradeItem} C2GW_BuyTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyTradeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_BuyTradeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_BuyTradeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_BuyTradeItem} C2GW_BuyTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_BuyTradeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_BuyTradeItem message.
         * @function verify
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_BuyTradeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_BuyTradeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_BuyTradeItem} C2GW_BuyTradeItem
         */
        C2GW_BuyTradeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_BuyTradeItem)
                return object;
            var message = new $root.msg.C2GW_BuyTradeItem();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_BuyTradeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_BuyTradeItem
         * @static
         * @param {msg.C2GW_BuyTradeItem} message C2GW_BuyTradeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_BuyTradeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_BuyTradeItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_BuyTradeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_BuyTradeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_BuyTradeItem;
    })();

    msg.GW2C_RetBuyTradeItem = (function() {

        /**
         * Properties of a GW2C_RetBuyTradeItem.
         * @memberof msg
         * @interface IGW2C_RetBuyTradeItem
         * @property {number|Long|null} [tradeuid] GW2C_RetBuyTradeItem tradeuid
         */

        /**
         * Constructs a new GW2C_RetBuyTradeItem.
         * @memberof msg
         * @classdesc Represents a GW2C_RetBuyTradeItem.
         * @implements IGW2C_RetBuyTradeItem
         * @constructor
         * @param {msg.IGW2C_RetBuyTradeItem=} [properties] Properties to set
         */
        function GW2C_RetBuyTradeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetBuyTradeItem tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetBuyTradeItem
         * @instance
         */
        GW2C_RetBuyTradeItem.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetBuyTradeItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {msg.IGW2C_RetBuyTradeItem=} [properties] Properties to set
         * @returns {msg.GW2C_RetBuyTradeItem} GW2C_RetBuyTradeItem instance
         */
        GW2C_RetBuyTradeItem.create = function create(properties) {
            return new GW2C_RetBuyTradeItem(properties);
        };

        /**
         * Encodes the specified GW2C_RetBuyTradeItem message. Does not implicitly {@link msg.GW2C_RetBuyTradeItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {msg.IGW2C_RetBuyTradeItem} message GW2C_RetBuyTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetBuyTradeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetBuyTradeItem message, length delimited. Does not implicitly {@link msg.GW2C_RetBuyTradeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {msg.IGW2C_RetBuyTradeItem} message GW2C_RetBuyTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetBuyTradeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetBuyTradeItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetBuyTradeItem} GW2C_RetBuyTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetBuyTradeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetBuyTradeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetBuyTradeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetBuyTradeItem} GW2C_RetBuyTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetBuyTradeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetBuyTradeItem message.
         * @function verify
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetBuyTradeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetBuyTradeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetBuyTradeItem} GW2C_RetBuyTradeItem
         */
        GW2C_RetBuyTradeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetBuyTradeItem)
                return object;
            var message = new $root.msg.GW2C_RetBuyTradeItem();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetBuyTradeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetBuyTradeItem
         * @static
         * @param {msg.GW2C_RetBuyTradeItem} message GW2C_RetBuyTradeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetBuyTradeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetBuyTradeItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetBuyTradeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetBuyTradeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetBuyTradeItem;
    })();

    msg.C2GW_ReqTradeItemHistory = (function() {

        /**
         * Properties of a C2GW_ReqTradeItemHistory.
         * @memberof msg
         * @interface IC2GW_ReqTradeItemHistory
         */

        /**
         * Constructs a new C2GW_ReqTradeItemHistory.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTradeItemHistory.
         * @implements IC2GW_ReqTradeItemHistory
         * @constructor
         * @param {msg.IC2GW_ReqTradeItemHistory=} [properties] Properties to set
         */
        function C2GW_ReqTradeItemHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqTradeItemHistory instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {msg.IC2GW_ReqTradeItemHistory=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTradeItemHistory} C2GW_ReqTradeItemHistory instance
         */
        C2GW_ReqTradeItemHistory.create = function create(properties) {
            return new C2GW_ReqTradeItemHistory(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTradeItemHistory message. Does not implicitly {@link msg.C2GW_ReqTradeItemHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {msg.IC2GW_ReqTradeItemHistory} message C2GW_ReqTradeItemHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTradeItemHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTradeItemHistory message, length delimited. Does not implicitly {@link msg.C2GW_ReqTradeItemHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {msg.IC2GW_ReqTradeItemHistory} message C2GW_ReqTradeItemHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTradeItemHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTradeItemHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTradeItemHistory} C2GW_ReqTradeItemHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTradeItemHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTradeItemHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTradeItemHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTradeItemHistory} C2GW_ReqTradeItemHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTradeItemHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTradeItemHistory message.
         * @function verify
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTradeItemHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTradeItemHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTradeItemHistory} C2GW_ReqTradeItemHistory
         */
        C2GW_ReqTradeItemHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTradeItemHistory)
                return object;
            return new $root.msg.C2GW_ReqTradeItemHistory();
        };

        /**
         * Creates a plain object from a C2GW_ReqTradeItemHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @static
         * @param {msg.C2GW_ReqTradeItemHistory} message C2GW_ReqTradeItemHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTradeItemHistory.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqTradeItemHistory to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTradeItemHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTradeItemHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTradeItemHistory;
    })();

    msg.TradeItemHistory = (function() {

        /**
         * Properties of a TradeItemHistory.
         * @memberof msg
         * @interface ITradeItemHistory
         * @property {number|Long|null} [tradeuid] TradeItemHistory tradeuid
         * @property {number|null} [itemid] TradeItemHistory itemid
         * @property {number|null} [itemnum] TradeItemHistory itemnum
         * @property {number|null} [price] TradeItemHistory price
         * @property {number|null} [tradetime] TradeItemHistory tradetime
         * @property {number|null} [state] TradeItemHistory state
         */

        /**
         * Constructs a new TradeItemHistory.
         * @memberof msg
         * @classdesc Represents a TradeItemHistory.
         * @implements ITradeItemHistory
         * @constructor
         * @param {msg.ITradeItemHistory=} [properties] Properties to set
         */
        function TradeItemHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TradeItemHistory tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.TradeItemHistory
         * @instance
         */
        TradeItemHistory.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * TradeItemHistory itemid.
         * @member {number} itemid
         * @memberof msg.TradeItemHistory
         * @instance
         */
        TradeItemHistory.prototype.itemid = 0;

        /**
         * TradeItemHistory itemnum.
         * @member {number} itemnum
         * @memberof msg.TradeItemHistory
         * @instance
         */
        TradeItemHistory.prototype.itemnum = 0;

        /**
         * TradeItemHistory price.
         * @member {number} price
         * @memberof msg.TradeItemHistory
         * @instance
         */
        TradeItemHistory.prototype.price = 0;

        /**
         * TradeItemHistory tradetime.
         * @member {number} tradetime
         * @memberof msg.TradeItemHistory
         * @instance
         */
        TradeItemHistory.prototype.tradetime = 0;

        /**
         * TradeItemHistory state.
         * @member {number} state
         * @memberof msg.TradeItemHistory
         * @instance
         */
        TradeItemHistory.prototype.state = 0;

        /**
         * Creates a new TradeItemHistory instance using the specified properties.
         * @function create
         * @memberof msg.TradeItemHistory
         * @static
         * @param {msg.ITradeItemHistory=} [properties] Properties to set
         * @returns {msg.TradeItemHistory} TradeItemHistory instance
         */
        TradeItemHistory.create = function create(properties) {
            return new TradeItemHistory(properties);
        };

        /**
         * Encodes the specified TradeItemHistory message. Does not implicitly {@link msg.TradeItemHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.TradeItemHistory
         * @static
         * @param {msg.ITradeItemHistory} message TradeItemHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TradeItemHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemid);
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.itemnum);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.price);
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tradetime);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.state);
            return writer;
        };

        /**
         * Encodes the specified TradeItemHistory message, length delimited. Does not implicitly {@link msg.TradeItemHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.TradeItemHistory
         * @static
         * @param {msg.ITradeItemHistory} message TradeItemHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TradeItemHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TradeItemHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.TradeItemHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.TradeItemHistory} TradeItemHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TradeItemHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.TradeItemHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                case 2:
                    message.itemid = reader.uint32();
                    break;
                case 3:
                    message.itemnum = reader.uint32();
                    break;
                case 4:
                    message.price = reader.uint32();
                    break;
                case 5:
                    message.tradetime = reader.uint32();
                    break;
                case 9:
                    message.state = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TradeItemHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.TradeItemHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.TradeItemHistory} TradeItemHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TradeItemHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TradeItemHistory message.
         * @function verify
         * @memberof msg.TradeItemHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TradeItemHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid))
                    return "itemid: integer expected";
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                if (!$util.isInteger(message.itemnum))
                    return "itemnum: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (!$util.isInteger(message.price))
                    return "price: integer expected";
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                if (!$util.isInteger(message.tradetime))
                    return "tradetime: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            return null;
        };

        /**
         * Creates a TradeItemHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.TradeItemHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.TradeItemHistory} TradeItemHistory
         */
        TradeItemHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.TradeItemHistory)
                return object;
            var message = new $root.msg.TradeItemHistory();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            if (object.itemid != null)
                message.itemid = object.itemid >>> 0;
            if (object.itemnum != null)
                message.itemnum = object.itemnum >>> 0;
            if (object.price != null)
                message.price = object.price >>> 0;
            if (object.tradetime != null)
                message.tradetime = object.tradetime >>> 0;
            if (object.state != null)
                message.state = object.state >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TradeItemHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.TradeItemHistory
         * @static
         * @param {msg.TradeItemHistory} message TradeItemHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TradeItemHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
                object.itemid = 0;
                object.itemnum = 0;
                object.price = 0;
                object.tradetime = 0;
                object.state = 0;
            }
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                object.itemid = message.itemid;
            if (message.itemnum != null && message.hasOwnProperty("itemnum"))
                object.itemnum = message.itemnum;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = message.price;
            if (message.tradetime != null && message.hasOwnProperty("tradetime"))
                object.tradetime = message.tradetime;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            return object;
        };

        /**
         * Converts this TradeItemHistory to JSON.
         * @function toJSON
         * @memberof msg.TradeItemHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TradeItemHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TradeItemHistory;
    })();

    msg.GW2C_RetTradeItemHistory = (function() {

        /**
         * Properties of a GW2C_RetTradeItemHistory.
         * @memberof msg
         * @interface IGW2C_RetTradeItemHistory
         * @property {Array.<msg.ITradeItemHistory>|null} [list] GW2C_RetTradeItemHistory list
         */

        /**
         * Constructs a new GW2C_RetTradeItemHistory.
         * @memberof msg
         * @classdesc Represents a GW2C_RetTradeItemHistory.
         * @implements IGW2C_RetTradeItemHistory
         * @constructor
         * @param {msg.IGW2C_RetTradeItemHistory=} [properties] Properties to set
         */
        function GW2C_RetTradeItemHistory(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetTradeItemHistory list.
         * @member {Array.<msg.ITradeItemHistory>} list
         * @memberof msg.GW2C_RetTradeItemHistory
         * @instance
         */
        GW2C_RetTradeItemHistory.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_RetTradeItemHistory instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {msg.IGW2C_RetTradeItemHistory=} [properties] Properties to set
         * @returns {msg.GW2C_RetTradeItemHistory} GW2C_RetTradeItemHistory instance
         */
        GW2C_RetTradeItemHistory.create = function create(properties) {
            return new GW2C_RetTradeItemHistory(properties);
        };

        /**
         * Encodes the specified GW2C_RetTradeItemHistory message. Does not implicitly {@link msg.GW2C_RetTradeItemHistory.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {msg.IGW2C_RetTradeItemHistory} message GW2C_RetTradeItemHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeItemHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.TradeItemHistory.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetTradeItemHistory message, length delimited. Does not implicitly {@link msg.GW2C_RetTradeItemHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {msg.IGW2C_RetTradeItemHistory} message GW2C_RetTradeItemHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetTradeItemHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetTradeItemHistory message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetTradeItemHistory} GW2C_RetTradeItemHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeItemHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetTradeItemHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.TradeItemHistory.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetTradeItemHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetTradeItemHistory} GW2C_RetTradeItemHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetTradeItemHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetTradeItemHistory message.
         * @function verify
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetTradeItemHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.TradeItemHistory.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_RetTradeItemHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetTradeItemHistory} GW2C_RetTradeItemHistory
         */
        GW2C_RetTradeItemHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetTradeItemHistory)
                return object;
            var message = new $root.msg.GW2C_RetTradeItemHistory();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_RetTradeItemHistory.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_RetTradeItemHistory.list: object expected");
                    message.list[i] = $root.msg.TradeItemHistory.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetTradeItemHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetTradeItemHistory
         * @static
         * @param {msg.GW2C_RetTradeItemHistory} message GW2C_RetTradeItemHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetTradeItemHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.TradeItemHistory.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_RetTradeItemHistory to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetTradeItemHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetTradeItemHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetTradeItemHistory;
    })();

    msg.C2GW_GetTradeItemReward = (function() {

        /**
         * Properties of a C2GW_GetTradeItemReward.
         * @memberof msg
         * @interface IC2GW_GetTradeItemReward
         * @property {number|Long|null} [tradeuid] C2GW_GetTradeItemReward tradeuid
         */

        /**
         * Constructs a new C2GW_GetTradeItemReward.
         * @memberof msg
         * @classdesc Represents a C2GW_GetTradeItemReward.
         * @implements IC2GW_GetTradeItemReward
         * @constructor
         * @param {msg.IC2GW_GetTradeItemReward=} [properties] Properties to set
         */
        function C2GW_GetTradeItemReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_GetTradeItemReward tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_GetTradeItemReward
         * @instance
         */
        C2GW_GetTradeItemReward.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_GetTradeItemReward instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {msg.IC2GW_GetTradeItemReward=} [properties] Properties to set
         * @returns {msg.C2GW_GetTradeItemReward} C2GW_GetTradeItemReward instance
         */
        C2GW_GetTradeItemReward.create = function create(properties) {
            return new C2GW_GetTradeItemReward(properties);
        };

        /**
         * Encodes the specified C2GW_GetTradeItemReward message. Does not implicitly {@link msg.C2GW_GetTradeItemReward.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {msg.IC2GW_GetTradeItemReward} message C2GW_GetTradeItemReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GetTradeItemReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_GetTradeItemReward message, length delimited. Does not implicitly {@link msg.C2GW_GetTradeItemReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {msg.IC2GW_GetTradeItemReward} message C2GW_GetTradeItemReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_GetTradeItemReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_GetTradeItemReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_GetTradeItemReward} C2GW_GetTradeItemReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GetTradeItemReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_GetTradeItemReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_GetTradeItemReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_GetTradeItemReward} C2GW_GetTradeItemReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_GetTradeItemReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_GetTradeItemReward message.
         * @function verify
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_GetTradeItemReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_GetTradeItemReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_GetTradeItemReward} C2GW_GetTradeItemReward
         */
        C2GW_GetTradeItemReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_GetTradeItemReward)
                return object;
            var message = new $root.msg.C2GW_GetTradeItemReward();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_GetTradeItemReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_GetTradeItemReward
         * @static
         * @param {msg.C2GW_GetTradeItemReward} message C2GW_GetTradeItemReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_GetTradeItemReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this C2GW_GetTradeItemReward to JSON.
         * @function toJSON
         * @memberof msg.C2GW_GetTradeItemReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_GetTradeItemReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_GetTradeItemReward;
    })();

    msg.GW2C_RetGetTradeItemReward = (function() {

        /**
         * Properties of a GW2C_RetGetTradeItemReward.
         * @memberof msg
         * @interface IGW2C_RetGetTradeItemReward
         * @property {number|Long|null} [tradeuid] GW2C_RetGetTradeItemReward tradeuid
         */

        /**
         * Constructs a new GW2C_RetGetTradeItemReward.
         * @memberof msg
         * @classdesc Represents a GW2C_RetGetTradeItemReward.
         * @implements IGW2C_RetGetTradeItemReward
         * @constructor
         * @param {msg.IGW2C_RetGetTradeItemReward=} [properties] Properties to set
         */
        function GW2C_RetGetTradeItemReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetGetTradeItemReward tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @instance
         */
        GW2C_RetGetTradeItemReward.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetGetTradeItemReward instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {msg.IGW2C_RetGetTradeItemReward=} [properties] Properties to set
         * @returns {msg.GW2C_RetGetTradeItemReward} GW2C_RetGetTradeItemReward instance
         */
        GW2C_RetGetTradeItemReward.create = function create(properties) {
            return new GW2C_RetGetTradeItemReward(properties);
        };

        /**
         * Encodes the specified GW2C_RetGetTradeItemReward message. Does not implicitly {@link msg.GW2C_RetGetTradeItemReward.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {msg.IGW2C_RetGetTradeItemReward} message GW2C_RetGetTradeItemReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGetTradeItemReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetGetTradeItemReward message, length delimited. Does not implicitly {@link msg.GW2C_RetGetTradeItemReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {msg.IGW2C_RetGetTradeItemReward} message GW2C_RetGetTradeItemReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetGetTradeItemReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetGetTradeItemReward message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetGetTradeItemReward} GW2C_RetGetTradeItemReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGetTradeItemReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetGetTradeItemReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetGetTradeItemReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetGetTradeItemReward} GW2C_RetGetTradeItemReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetGetTradeItemReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetGetTradeItemReward message.
         * @function verify
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetGetTradeItemReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetGetTradeItemReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetGetTradeItemReward} GW2C_RetGetTradeItemReward
         */
        GW2C_RetGetTradeItemReward.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetGetTradeItemReward)
                return object;
            var message = new $root.msg.GW2C_RetGetTradeItemReward();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetGetTradeItemReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @static
         * @param {msg.GW2C_RetGetTradeItemReward} message GW2C_RetGetTradeItemReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetGetTradeItemReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetGetTradeItemReward to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetGetTradeItemReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetGetTradeItemReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetGetTradeItemReward;
    })();

    msg.C2GW_CancelTradeItem = (function() {

        /**
         * Properties of a C2GW_CancelTradeItem.
         * @memberof msg
         * @interface IC2GW_CancelTradeItem
         * @property {number|Long|null} [tradeuid] C2GW_CancelTradeItem tradeuid
         */

        /**
         * Constructs a new C2GW_CancelTradeItem.
         * @memberof msg
         * @classdesc Represents a C2GW_CancelTradeItem.
         * @implements IC2GW_CancelTradeItem
         * @constructor
         * @param {msg.IC2GW_CancelTradeItem=} [properties] Properties to set
         */
        function C2GW_CancelTradeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_CancelTradeItem tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.C2GW_CancelTradeItem
         * @instance
         */
        C2GW_CancelTradeItem.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_CancelTradeItem instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {msg.IC2GW_CancelTradeItem=} [properties] Properties to set
         * @returns {msg.C2GW_CancelTradeItem} C2GW_CancelTradeItem instance
         */
        C2GW_CancelTradeItem.create = function create(properties) {
            return new C2GW_CancelTradeItem(properties);
        };

        /**
         * Encodes the specified C2GW_CancelTradeItem message. Does not implicitly {@link msg.C2GW_CancelTradeItem.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {msg.IC2GW_CancelTradeItem} message C2GW_CancelTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CancelTradeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_CancelTradeItem message, length delimited. Does not implicitly {@link msg.C2GW_CancelTradeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {msg.IC2GW_CancelTradeItem} message C2GW_CancelTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_CancelTradeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_CancelTradeItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_CancelTradeItem} C2GW_CancelTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CancelTradeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_CancelTradeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_CancelTradeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_CancelTradeItem} C2GW_CancelTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_CancelTradeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_CancelTradeItem message.
         * @function verify
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_CancelTradeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_CancelTradeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_CancelTradeItem} C2GW_CancelTradeItem
         */
        C2GW_CancelTradeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_CancelTradeItem)
                return object;
            var message = new $root.msg.C2GW_CancelTradeItem();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_CancelTradeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_CancelTradeItem
         * @static
         * @param {msg.C2GW_CancelTradeItem} message C2GW_CancelTradeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_CancelTradeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this C2GW_CancelTradeItem to JSON.
         * @function toJSON
         * @memberof msg.C2GW_CancelTradeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_CancelTradeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_CancelTradeItem;
    })();

    msg.GW2C_RetCancelTradeItem = (function() {

        /**
         * Properties of a GW2C_RetCancelTradeItem.
         * @memberof msg
         * @interface IGW2C_RetCancelTradeItem
         * @property {number|Long|null} [tradeuid] GW2C_RetCancelTradeItem tradeuid
         */

        /**
         * Constructs a new GW2C_RetCancelTradeItem.
         * @memberof msg
         * @classdesc Represents a GW2C_RetCancelTradeItem.
         * @implements IGW2C_RetCancelTradeItem
         * @constructor
         * @param {msg.IGW2C_RetCancelTradeItem=} [properties] Properties to set
         */
        function GW2C_RetCancelTradeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetCancelTradeItem tradeuid.
         * @member {number|Long} tradeuid
         * @memberof msg.GW2C_RetCancelTradeItem
         * @instance
         */
        GW2C_RetCancelTradeItem.prototype.tradeuid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new GW2C_RetCancelTradeItem instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {msg.IGW2C_RetCancelTradeItem=} [properties] Properties to set
         * @returns {msg.GW2C_RetCancelTradeItem} GW2C_RetCancelTradeItem instance
         */
        GW2C_RetCancelTradeItem.create = function create(properties) {
            return new GW2C_RetCancelTradeItem(properties);
        };

        /**
         * Encodes the specified GW2C_RetCancelTradeItem message. Does not implicitly {@link msg.GW2C_RetCancelTradeItem.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {msg.IGW2C_RetCancelTradeItem} message GW2C_RetCancelTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCancelTradeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.tradeuid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetCancelTradeItem message, length delimited. Does not implicitly {@link msg.GW2C_RetCancelTradeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {msg.IGW2C_RetCancelTradeItem} message GW2C_RetCancelTradeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetCancelTradeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetCancelTradeItem message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetCancelTradeItem} GW2C_RetCancelTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCancelTradeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetCancelTradeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tradeuid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetCancelTradeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetCancelTradeItem} GW2C_RetCancelTradeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetCancelTradeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetCancelTradeItem message.
         * @function verify
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetCancelTradeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (!$util.isInteger(message.tradeuid) && !(message.tradeuid && $util.isInteger(message.tradeuid.low) && $util.isInteger(message.tradeuid.high)))
                    return "tradeuid: integer|Long expected";
            return null;
        };

        /**
         * Creates a GW2C_RetCancelTradeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetCancelTradeItem} GW2C_RetCancelTradeItem
         */
        GW2C_RetCancelTradeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetCancelTradeItem)
                return object;
            var message = new $root.msg.GW2C_RetCancelTradeItem();
            if (object.tradeuid != null)
                if ($util.Long)
                    (message.tradeuid = $util.Long.fromValue(object.tradeuid)).unsigned = true;
                else if (typeof object.tradeuid === "string")
                    message.tradeuid = parseInt(object.tradeuid, 10);
                else if (typeof object.tradeuid === "number")
                    message.tradeuid = object.tradeuid;
                else if (typeof object.tradeuid === "object")
                    message.tradeuid = new $util.LongBits(object.tradeuid.low >>> 0, object.tradeuid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetCancelTradeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetCancelTradeItem
         * @static
         * @param {msg.GW2C_RetCancelTradeItem} message GW2C_RetCancelTradeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetCancelTradeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tradeuid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tradeuid = options.longs === String ? "0" : 0;
            if (message.tradeuid != null && message.hasOwnProperty("tradeuid"))
                if (typeof message.tradeuid === "number")
                    object.tradeuid = options.longs === String ? String(message.tradeuid) : message.tradeuid;
                else
                    object.tradeuid = options.longs === String ? $util.Long.prototype.toString.call(message.tradeuid) : options.longs === Number ? new $util.LongBits(message.tradeuid.low >>> 0, message.tradeuid.high >>> 0).toNumber(true) : message.tradeuid;
            return object;
        };

        /**
         * Converts this GW2C_RetCancelTradeItem to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetCancelTradeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetCancelTradeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetCancelTradeItem;
    })();

    msg.C2GW_AddDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_AddDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_AddDeliveryAddress
         * @property {msg.IUserAddress|null} [info] C2GW_AddDeliveryAddress info
         */

        /**
         * Constructs a new C2GW_AddDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_AddDeliveryAddress.
         * @implements IC2GW_AddDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_AddDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_AddDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_AddDeliveryAddress info.
         * @member {msg.IUserAddress|null|undefined} info
         * @memberof msg.C2GW_AddDeliveryAddress
         * @instance
         */
        C2GW_AddDeliveryAddress.prototype.info = null;

        /**
         * Creates a new C2GW_AddDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress instance
         */
        C2GW_AddDeliveryAddress.create = function create(properties) {
            return new C2GW_AddDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_AddDeliveryAddress message. Does not implicitly {@link msg.C2GW_AddDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_AddDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.UserAddress.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_AddDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_AddDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.IC2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_AddDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_AddDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_AddDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_AddDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.info = $root.msg.UserAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_AddDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_AddDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_AddDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_AddDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.UserAddress.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_AddDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_AddDeliveryAddress} C2GW_AddDeliveryAddress
         */
        C2GW_AddDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_AddDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_AddDeliveryAddress();
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.C2GW_AddDeliveryAddress.info: object expected");
                message.info = $root.msg.UserAddress.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_AddDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_AddDeliveryAddress
         * @static
         * @param {msg.C2GW_AddDeliveryAddress} message C2GW_AddDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_AddDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.info = null;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.UserAddress.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this C2GW_AddDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_AddDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_AddDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_AddDeliveryAddress;
    })();

    msg.C2GW_DelDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_DelDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_DelDeliveryAddress
         * @property {number|null} [index] C2GW_DelDeliveryAddress index
         */

        /**
         * Constructs a new C2GW_DelDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_DelDeliveryAddress.
         * @implements IC2GW_DelDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_DelDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_DelDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_DelDeliveryAddress index.
         * @member {number} index
         * @memberof msg.C2GW_DelDeliveryAddress
         * @instance
         */
        C2GW_DelDeliveryAddress.prototype.index = 0;

        /**
         * Creates a new C2GW_DelDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress instance
         */
        C2GW_DelDeliveryAddress.create = function create(properties) {
            return new C2GW_DelDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_DelDeliveryAddress message. Does not implicitly {@link msg.C2GW_DelDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DelDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified C2GW_DelDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_DelDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.IC2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_DelDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_DelDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DelDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_DelDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_DelDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_DelDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_DelDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_DelDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_DelDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_DelDeliveryAddress} C2GW_DelDeliveryAddress
         */
        C2GW_DelDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_DelDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_DelDeliveryAddress();
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_DelDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_DelDeliveryAddress
         * @static
         * @param {msg.C2GW_DelDeliveryAddress} message C2GW_DelDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_DelDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.index = 0;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this C2GW_DelDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_DelDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_DelDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_DelDeliveryAddress;
    })();

    msg.C2GW_ChangeDeliveryAddress = (function() {

        /**
         * Properties of a C2GW_ChangeDeliveryAddress.
         * @memberof msg
         * @interface IC2GW_ChangeDeliveryAddress
         * @property {number|null} [index] C2GW_ChangeDeliveryAddress index
         * @property {msg.IUserAddress|null} [info] C2GW_ChangeDeliveryAddress info
         */

        /**
         * Constructs a new C2GW_ChangeDeliveryAddress.
         * @memberof msg
         * @classdesc Represents a C2GW_ChangeDeliveryAddress.
         * @implements IC2GW_ChangeDeliveryAddress
         * @constructor
         * @param {msg.IC2GW_ChangeDeliveryAddress=} [properties] Properties to set
         */
        function C2GW_ChangeDeliveryAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ChangeDeliveryAddress index.
         * @member {number} index
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         */
        C2GW_ChangeDeliveryAddress.prototype.index = 0;

        /**
         * C2GW_ChangeDeliveryAddress info.
         * @member {msg.IUserAddress|null|undefined} info
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         */
        C2GW_ChangeDeliveryAddress.prototype.info = null;

        /**
         * Creates a new C2GW_ChangeDeliveryAddress instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress=} [properties] Properties to set
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress instance
         */
        C2GW_ChangeDeliveryAddress.create = function create(properties) {
            return new C2GW_ChangeDeliveryAddress(properties);
        };

        /**
         * Encodes the specified C2GW_ChangeDeliveryAddress message. Does not implicitly {@link msg.C2GW_ChangeDeliveryAddress.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ChangeDeliveryAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            if (message.info != null && message.hasOwnProperty("info"))
                $root.msg.UserAddress.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ChangeDeliveryAddress message, length delimited. Does not implicitly {@link msg.C2GW_ChangeDeliveryAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.IC2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ChangeDeliveryAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ChangeDeliveryAddress message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ChangeDeliveryAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ChangeDeliveryAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                case 2:
                    message.info = $root.msg.UserAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ChangeDeliveryAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ChangeDeliveryAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ChangeDeliveryAddress message.
         * @function verify
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ChangeDeliveryAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                var error = $root.msg.UserAddress.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a C2GW_ChangeDeliveryAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ChangeDeliveryAddress} C2GW_ChangeDeliveryAddress
         */
        C2GW_ChangeDeliveryAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ChangeDeliveryAddress)
                return object;
            var message = new $root.msg.C2GW_ChangeDeliveryAddress();
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".msg.C2GW_ChangeDeliveryAddress.info: object expected");
                message.info = $root.msg.UserAddress.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ChangeDeliveryAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @static
         * @param {msg.C2GW_ChangeDeliveryAddress} message C2GW_ChangeDeliveryAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ChangeDeliveryAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.info = null;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.msg.UserAddress.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this C2GW_ChangeDeliveryAddress to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ChangeDeliveryAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ChangeDeliveryAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ChangeDeliveryAddress;
    })();

    msg.GW2C_SendDeliveryAddressList = (function() {

        /**
         * Properties of a GW2C_SendDeliveryAddressList.
         * @memberof msg
         * @interface IGW2C_SendDeliveryAddressList
         * @property {Array.<msg.IUserAddress>|null} [list] GW2C_SendDeliveryAddressList list
         */

        /**
         * Constructs a new GW2C_SendDeliveryAddressList.
         * @memberof msg
         * @classdesc Represents a GW2C_SendDeliveryAddressList.
         * @implements IGW2C_SendDeliveryAddressList
         * @constructor
         * @param {msg.IGW2C_SendDeliveryAddressList=} [properties] Properties to set
         */
        function GW2C_SendDeliveryAddressList(properties) {
            this.list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendDeliveryAddressList list.
         * @member {Array.<msg.IUserAddress>} list
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @instance
         */
        GW2C_SendDeliveryAddressList.prototype.list = $util.emptyArray;

        /**
         * Creates a new GW2C_SendDeliveryAddressList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList=} [properties] Properties to set
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList instance
         */
        GW2C_SendDeliveryAddressList.create = function create(properties) {
            return new GW2C_SendDeliveryAddressList(properties);
        };

        /**
         * Encodes the specified GW2C_SendDeliveryAddressList message. Does not implicitly {@link msg.GW2C_SendDeliveryAddressList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendDeliveryAddressList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.list != null && message.list.length)
                for (var i = 0; i < message.list.length; ++i)
                    $root.msg.UserAddress.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendDeliveryAddressList message, length delimited. Does not implicitly {@link msg.GW2C_SendDeliveryAddressList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.IGW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendDeliveryAddressList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendDeliveryAddressList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendDeliveryAddressList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendDeliveryAddressList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.list && message.list.length))
                        message.list = [];
                    message.list.push($root.msg.UserAddress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendDeliveryAddressList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendDeliveryAddressList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendDeliveryAddressList message.
         * @function verify
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendDeliveryAddressList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.list != null && message.hasOwnProperty("list")) {
                if (!Array.isArray(message.list))
                    return "list: array expected";
                for (var i = 0; i < message.list.length; ++i) {
                    var error = $root.msg.UserAddress.verify(message.list[i]);
                    if (error)
                        return "list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendDeliveryAddressList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendDeliveryAddressList} GW2C_SendDeliveryAddressList
         */
        GW2C_SendDeliveryAddressList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendDeliveryAddressList)
                return object;
            var message = new $root.msg.GW2C_SendDeliveryAddressList();
            if (object.list) {
                if (!Array.isArray(object.list))
                    throw TypeError(".msg.GW2C_SendDeliveryAddressList.list: array expected");
                message.list = [];
                for (var i = 0; i < object.list.length; ++i) {
                    if (typeof object.list[i] !== "object")
                        throw TypeError(".msg.GW2C_SendDeliveryAddressList.list: object expected");
                    message.list[i] = $root.msg.UserAddress.fromObject(object.list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendDeliveryAddressList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @static
         * @param {msg.GW2C_SendDeliveryAddressList} message GW2C_SendDeliveryAddressList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendDeliveryAddressList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.list = [];
            if (message.list && message.list.length) {
                object.list = [];
                for (var j = 0; j < message.list.length; ++j)
                    object.list[j] = $root.msg.UserAddress.toObject(message.list[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendDeliveryAddressList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendDeliveryAddressList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendDeliveryAddressList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendDeliveryAddressList;
    })();

    msg.C2GW_ReqRechargeMoney = (function() {

        /**
         * Properties of a C2GW_ReqRechargeMoney.
         * @memberof msg
         * @interface IC2GW_ReqRechargeMoney
         * @property {number|null} [amount] C2GW_ReqRechargeMoney amount
         * @property {string|null} [token] C2GW_ReqRechargeMoney token
         * @property {number|null} [type] C2GW_ReqRechargeMoney type
         */

        /**
         * Constructs a new C2GW_ReqRechargeMoney.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqRechargeMoney.
         * @implements IC2GW_ReqRechargeMoney
         * @constructor
         * @param {msg.IC2GW_ReqRechargeMoney=} [properties] Properties to set
         */
        function C2GW_ReqRechargeMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqRechargeMoney amount.
         * @member {number} amount
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.amount = 0;

        /**
         * C2GW_ReqRechargeMoney token.
         * @member {string} token
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.token = "";

        /**
         * C2GW_ReqRechargeMoney type.
         * @member {number} type
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         */
        C2GW_ReqRechargeMoney.prototype.type = 0;

        /**
         * Creates a new C2GW_ReqRechargeMoney instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney=} [properties] Properties to set
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney instance
         */
        C2GW_ReqRechargeMoney.create = function create(properties) {
            return new C2GW_ReqRechargeMoney(properties);
        };

        /**
         * Encodes the specified C2GW_ReqRechargeMoney message. Does not implicitly {@link msg.C2GW_ReqRechargeMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRechargeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.amount != null && message.hasOwnProperty("amount"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.amount);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqRechargeMoney message, length delimited. Does not implicitly {@link msg.C2GW_ReqRechargeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.IC2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqRechargeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqRechargeMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRechargeMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqRechargeMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.amount = reader.uint32();
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                case 3:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqRechargeMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqRechargeMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqRechargeMoney message.
         * @function verify
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqRechargeMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqRechargeMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqRechargeMoney} C2GW_ReqRechargeMoney
         */
        C2GW_ReqRechargeMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqRechargeMoney)
                return object;
            var message = new $root.msg.C2GW_ReqRechargeMoney();
            if (object.amount != null)
                message.amount = object.amount >>> 0;
            if (object.token != null)
                message.token = String(object.token);
            if (object.type != null)
                message.type = object.type >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqRechargeMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqRechargeMoney
         * @static
         * @param {msg.C2GW_ReqRechargeMoney} message C2GW_ReqRechargeMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqRechargeMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.amount = 0;
                object.token = "";
                object.type = 0;
            }
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this C2GW_ReqRechargeMoney to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqRechargeMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqRechargeMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqRechargeMoney;
    })();

    msg.GW2C_RetRechargeMoney = (function() {

        /**
         * Properties of a GW2C_RetRechargeMoney.
         * @memberof msg
         * @interface IGW2C_RetRechargeMoney
         * @property {string|null} [urlcheckout] GW2C_RetRechargeMoney urlcheckout
         */

        /**
         * Constructs a new GW2C_RetRechargeMoney.
         * @memberof msg
         * @classdesc Represents a GW2C_RetRechargeMoney.
         * @implements IGW2C_RetRechargeMoney
         * @constructor
         * @param {msg.IGW2C_RetRechargeMoney=} [properties] Properties to set
         */
        function GW2C_RetRechargeMoney(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_RetRechargeMoney urlcheckout.
         * @member {string} urlcheckout
         * @memberof msg.GW2C_RetRechargeMoney
         * @instance
         */
        GW2C_RetRechargeMoney.prototype.urlcheckout = "";

        /**
         * Creates a new GW2C_RetRechargeMoney instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney=} [properties] Properties to set
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney instance
         */
        GW2C_RetRechargeMoney.create = function create(properties) {
            return new GW2C_RetRechargeMoney(properties);
        };

        /**
         * Encodes the specified GW2C_RetRechargeMoney message. Does not implicitly {@link msg.GW2C_RetRechargeMoney.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney} message GW2C_RetRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetRechargeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.urlcheckout);
            return writer;
        };

        /**
         * Encodes the specified GW2C_RetRechargeMoney message, length delimited. Does not implicitly {@link msg.GW2C_RetRechargeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.IGW2C_RetRechargeMoney} message GW2C_RetRechargeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_RetRechargeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_RetRechargeMoney message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetRechargeMoney.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_RetRechargeMoney();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.urlcheckout = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_RetRechargeMoney message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_RetRechargeMoney.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_RetRechargeMoney message.
         * @function verify
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_RetRechargeMoney.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                if (!$util.isString(message.urlcheckout))
                    return "urlcheckout: string expected";
            return null;
        };

        /**
         * Creates a GW2C_RetRechargeMoney message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_RetRechargeMoney} GW2C_RetRechargeMoney
         */
        GW2C_RetRechargeMoney.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_RetRechargeMoney)
                return object;
            var message = new $root.msg.GW2C_RetRechargeMoney();
            if (object.urlcheckout != null)
                message.urlcheckout = String(object.urlcheckout);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_RetRechargeMoney message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_RetRechargeMoney
         * @static
         * @param {msg.GW2C_RetRechargeMoney} message GW2C_RetRechargeMoney
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_RetRechargeMoney.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.urlcheckout = "";
            if (message.urlcheckout != null && message.hasOwnProperty("urlcheckout"))
                object.urlcheckout = message.urlcheckout;
            return object;
        };

        /**
         * Converts this GW2C_RetRechargeMoney to JSON.
         * @function toJSON
         * @memberof msg.GW2C_RetRechargeMoney
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_RetRechargeMoney.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_RetRechargeMoney;
    })();

    msg.C2GW_PlatformRechargeDone = (function() {

        /**
         * Properties of a C2GW_PlatformRechargeDone.
         * @memberof msg
         * @interface IC2GW_PlatformRechargeDone
         * @property {number|Long|null} [userid] C2GW_PlatformRechargeDone userid
         */

        /**
         * Constructs a new C2GW_PlatformRechargeDone.
         * @memberof msg
         * @classdesc Represents a C2GW_PlatformRechargeDone.
         * @implements IC2GW_PlatformRechargeDone
         * @constructor
         * @param {msg.IC2GW_PlatformRechargeDone=} [properties] Properties to set
         */
        function C2GW_PlatformRechargeDone(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_PlatformRechargeDone userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_PlatformRechargeDone
         * @instance
         */
        C2GW_PlatformRechargeDone.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_PlatformRechargeDone instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone=} [properties] Properties to set
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone instance
         */
        C2GW_PlatformRechargeDone.create = function create(properties) {
            return new C2GW_PlatformRechargeDone(properties);
        };

        /**
         * Encodes the specified C2GW_PlatformRechargeDone message. Does not implicitly {@link msg.C2GW_PlatformRechargeDone.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_PlatformRechargeDone.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_PlatformRechargeDone message, length delimited. Does not implicitly {@link msg.C2GW_PlatformRechargeDone.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.IC2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_PlatformRechargeDone.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_PlatformRechargeDone message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_PlatformRechargeDone.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_PlatformRechargeDone();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_PlatformRechargeDone message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_PlatformRechargeDone.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_PlatformRechargeDone message.
         * @function verify
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_PlatformRechargeDone.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_PlatformRechargeDone message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_PlatformRechargeDone} C2GW_PlatformRechargeDone
         */
        C2GW_PlatformRechargeDone.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_PlatformRechargeDone)
                return object;
            var message = new $root.msg.C2GW_PlatformRechargeDone();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_PlatformRechargeDone message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_PlatformRechargeDone
         * @static
         * @param {msg.C2GW_PlatformRechargeDone} message C2GW_PlatformRechargeDone
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_PlatformRechargeDone.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_PlatformRechargeDone to JSON.
         * @function toJSON
         * @memberof msg.C2GW_PlatformRechargeDone
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_PlatformRechargeDone.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_PlatformRechargeDone;
    })();

    msg.GW2C_SendWechatInfo = (function() {

        /**
         * Properties of a GW2C_SendWechatInfo.
         * @memberof msg
         * @interface IGW2C_SendWechatInfo
         * @property {string|null} [openid] GW2C_SendWechatInfo openid
         */

        /**
         * Constructs a new GW2C_SendWechatInfo.
         * @memberof msg
         * @classdesc Represents a GW2C_SendWechatInfo.
         * @implements IGW2C_SendWechatInfo
         * @constructor
         * @param {msg.IGW2C_SendWechatInfo=} [properties] Properties to set
         */
        function GW2C_SendWechatInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendWechatInfo openid.
         * @member {string} openid
         * @memberof msg.GW2C_SendWechatInfo
         * @instance
         */
        GW2C_SendWechatInfo.prototype.openid = "";

        /**
         * Creates a new GW2C_SendWechatInfo instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo=} [properties] Properties to set
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo instance
         */
        GW2C_SendWechatInfo.create = function create(properties) {
            return new GW2C_SendWechatInfo(properties);
        };

        /**
         * Encodes the specified GW2C_SendWechatInfo message. Does not implicitly {@link msg.GW2C_SendWechatInfo.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo} message GW2C_SendWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendWechatInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.openid != null && message.hasOwnProperty("openid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.openid);
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendWechatInfo message, length delimited. Does not implicitly {@link msg.GW2C_SendWechatInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.IGW2C_SendWechatInfo} message GW2C_SendWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendWechatInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendWechatInfo message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendWechatInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendWechatInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.openid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendWechatInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendWechatInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendWechatInfo message.
         * @function verify
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendWechatInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.openid != null && message.hasOwnProperty("openid"))
                if (!$util.isString(message.openid))
                    return "openid: string expected";
            return null;
        };

        /**
         * Creates a GW2C_SendWechatInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendWechatInfo} GW2C_SendWechatInfo
         */
        GW2C_SendWechatInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendWechatInfo)
                return object;
            var message = new $root.msg.GW2C_SendWechatInfo();
            if (object.openid != null)
                message.openid = String(object.openid);
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendWechatInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendWechatInfo
         * @static
         * @param {msg.GW2C_SendWechatInfo} message GW2C_SendWechatInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendWechatInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.openid = "";
            if (message.openid != null && message.hasOwnProperty("openid"))
                object.openid = message.openid;
            return object;
        };

        /**
         * Converts this GW2C_SendWechatInfo to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendWechatInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendWechatInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendWechatInfo;
    })();

    msg.C2GW_StartLuckyDraw = (function() {

        /**
         * Properties of a C2GW_StartLuckyDraw.
         * @memberof msg
         * @interface IC2GW_StartLuckyDraw
         * @property {number|Long|null} [userid] C2GW_StartLuckyDraw userid
         */

        /**
         * Constructs a new C2GW_StartLuckyDraw.
         * @memberof msg
         * @classdesc Represents a C2GW_StartLuckyDraw.
         * @implements IC2GW_StartLuckyDraw
         * @constructor
         * @param {msg.IC2GW_StartLuckyDraw=} [properties] Properties to set
         */
        function C2GW_StartLuckyDraw(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_StartLuckyDraw userid.
         * @member {number|Long} userid
         * @memberof msg.C2GW_StartLuckyDraw
         * @instance
         */
        C2GW_StartLuckyDraw.prototype.userid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new C2GW_StartLuckyDraw instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw=} [properties] Properties to set
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw instance
         */
        C2GW_StartLuckyDraw.create = function create(properties) {
            return new C2GW_StartLuckyDraw(properties);
        };

        /**
         * Encodes the specified C2GW_StartLuckyDraw message. Does not implicitly {@link msg.C2GW_StartLuckyDraw.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw} message C2GW_StartLuckyDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartLuckyDraw.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userid != null && message.hasOwnProperty("userid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.userid);
            return writer;
        };

        /**
         * Encodes the specified C2GW_StartLuckyDraw message, length delimited. Does not implicitly {@link msg.C2GW_StartLuckyDraw.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.IC2GW_StartLuckyDraw} message C2GW_StartLuckyDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_StartLuckyDraw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_StartLuckyDraw message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartLuckyDraw.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_StartLuckyDraw();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_StartLuckyDraw message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_StartLuckyDraw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_StartLuckyDraw message.
         * @function verify
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_StartLuckyDraw.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (!$util.isInteger(message.userid) && !(message.userid && $util.isInteger(message.userid.low) && $util.isInteger(message.userid.high)))
                    return "userid: integer|Long expected";
            return null;
        };

        /**
         * Creates a C2GW_StartLuckyDraw message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_StartLuckyDraw} C2GW_StartLuckyDraw
         */
        C2GW_StartLuckyDraw.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_StartLuckyDraw)
                return object;
            var message = new $root.msg.C2GW_StartLuckyDraw();
            if (object.userid != null)
                if ($util.Long)
                    (message.userid = $util.Long.fromValue(object.userid)).unsigned = true;
                else if (typeof object.userid === "string")
                    message.userid = parseInt(object.userid, 10);
                else if (typeof object.userid === "number")
                    message.userid = object.userid;
                else if (typeof object.userid === "object")
                    message.userid = new $util.LongBits(object.userid.low >>> 0, object.userid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_StartLuckyDraw message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_StartLuckyDraw
         * @static
         * @param {msg.C2GW_StartLuckyDraw} message C2GW_StartLuckyDraw
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_StartLuckyDraw.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.userid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userid = options.longs === String ? "0" : 0;
            if (message.userid != null && message.hasOwnProperty("userid"))
                if (typeof message.userid === "number")
                    object.userid = options.longs === String ? String(message.userid) : message.userid;
                else
                    object.userid = options.longs === String ? $util.Long.prototype.toString.call(message.userid) : options.longs === Number ? new $util.LongBits(message.userid.low >>> 0, message.userid.high >>> 0).toNumber(true) : message.userid;
            return object;
        };

        /**
         * Converts this C2GW_StartLuckyDraw to JSON.
         * @function toJSON
         * @memberof msg.C2GW_StartLuckyDraw
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_StartLuckyDraw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_StartLuckyDraw;
    })();

    msg.GW2C_LuckyDrawHit = (function() {

        /**
         * Properties of a GW2C_LuckyDrawHit.
         * @memberof msg
         * @interface IGW2C_LuckyDrawHit
         * @property {number|null} [id] GW2C_LuckyDrawHit id
         */

        /**
         * Constructs a new GW2C_LuckyDrawHit.
         * @memberof msg
         * @classdesc Represents a GW2C_LuckyDrawHit.
         * @implements IGW2C_LuckyDrawHit
         * @constructor
         * @param {msg.IGW2C_LuckyDrawHit=} [properties] Properties to set
         */
        function GW2C_LuckyDrawHit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_LuckyDrawHit id.
         * @member {number} id
         * @memberof msg.GW2C_LuckyDrawHit
         * @instance
         */
        GW2C_LuckyDrawHit.prototype.id = 0;

        /**
         * Creates a new GW2C_LuckyDrawHit instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit=} [properties] Properties to set
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit instance
         */
        GW2C_LuckyDrawHit.create = function create(properties) {
            return new GW2C_LuckyDrawHit(properties);
        };

        /**
         * Encodes the specified GW2C_LuckyDrawHit message. Does not implicitly {@link msg.GW2C_LuckyDrawHit.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit} message GW2C_LuckyDrawHit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_LuckyDrawHit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified GW2C_LuckyDrawHit message, length delimited. Does not implicitly {@link msg.GW2C_LuckyDrawHit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.IGW2C_LuckyDrawHit} message GW2C_LuckyDrawHit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_LuckyDrawHit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_LuckyDrawHit message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_LuckyDrawHit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_LuckyDrawHit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_LuckyDrawHit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_LuckyDrawHit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_LuckyDrawHit message.
         * @function verify
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_LuckyDrawHit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_LuckyDrawHit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_LuckyDrawHit} GW2C_LuckyDrawHit
         */
        GW2C_LuckyDrawHit.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_LuckyDrawHit)
                return object;
            var message = new $root.msg.GW2C_LuckyDrawHit();
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_LuckyDrawHit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_LuckyDrawHit
         * @static
         * @param {msg.GW2C_LuckyDrawHit} message GW2C_LuckyDrawHit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_LuckyDrawHit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this GW2C_LuckyDrawHit to JSON.
         * @function toJSON
         * @memberof msg.GW2C_LuckyDrawHit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_LuckyDrawHit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_LuckyDrawHit;
    })();

    msg.GW2C_FreePresentNotify = (function() {

        /**
         * Properties of a GW2C_FreePresentNotify.
         * @memberof msg
         * @interface IGW2C_FreePresentNotify
         * @property {number|null} [money] GW2C_FreePresentNotify money
         */

        /**
         * Constructs a new GW2C_FreePresentNotify.
         * @memberof msg
         * @classdesc Represents a GW2C_FreePresentNotify.
         * @implements IGW2C_FreePresentNotify
         * @constructor
         * @param {msg.IGW2C_FreePresentNotify=} [properties] Properties to set
         */
        function GW2C_FreePresentNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_FreePresentNotify money.
         * @member {number} money
         * @memberof msg.GW2C_FreePresentNotify
         * @instance
         */
        GW2C_FreePresentNotify.prototype.money = 0;

        /**
         * Creates a new GW2C_FreePresentNotify instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.IGW2C_FreePresentNotify=} [properties] Properties to set
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify instance
         */
        GW2C_FreePresentNotify.create = function create(properties) {
            return new GW2C_FreePresentNotify(properties);
        };

        /**
         * Encodes the specified GW2C_FreePresentNotify message. Does not implicitly {@link msg.GW2C_FreePresentNotify.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.IGW2C_FreePresentNotify} message GW2C_FreePresentNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_FreePresentNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.money != null && message.hasOwnProperty("money"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.money);
            return writer;
        };

        /**
         * Encodes the specified GW2C_FreePresentNotify message, length delimited. Does not implicitly {@link msg.GW2C_FreePresentNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.IGW2C_FreePresentNotify} message GW2C_FreePresentNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_FreePresentNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_FreePresentNotify message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_FreePresentNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_FreePresentNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.money = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_FreePresentNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_FreePresentNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_FreePresentNotify message.
         * @function verify
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_FreePresentNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_FreePresentNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_FreePresentNotify} GW2C_FreePresentNotify
         */
        GW2C_FreePresentNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_FreePresentNotify)
                return object;
            var message = new $root.msg.GW2C_FreePresentNotify();
            if (object.money != null)
                message.money = object.money | 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_FreePresentNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_FreePresentNotify
         * @static
         * @param {msg.GW2C_FreePresentNotify} message GW2C_FreePresentNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_FreePresentNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.money = 0;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            return object;
        };

        /**
         * Converts this GW2C_FreePresentNotify to JSON.
         * @function toJSON
         * @memberof msg.GW2C_FreePresentNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_FreePresentNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_FreePresentNotify;
    })();

    msg.GW2C_SendTaskList = (function() {

        /**
         * Properties of a GW2C_SendTaskList.
         * @memberof msg
         * @interface IGW2C_SendTaskList
         * @property {Array.<msg.ITaskData>|null} [tasks] GW2C_SendTaskList tasks
         */

        /**
         * Constructs a new GW2C_SendTaskList.
         * @memberof msg
         * @classdesc Represents a GW2C_SendTaskList.
         * @implements IGW2C_SendTaskList
         * @constructor
         * @param {msg.IGW2C_SendTaskList=} [properties] Properties to set
         */
        function GW2C_SendTaskList(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendTaskList tasks.
         * @member {Array.<msg.ITaskData>} tasks
         * @memberof msg.GW2C_SendTaskList
         * @instance
         */
        GW2C_SendTaskList.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new GW2C_SendTaskList instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList=} [properties] Properties to set
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList instance
         */
        GW2C_SendTaskList.create = function create(properties) {
            return new GW2C_SendTaskList(properties);
        };

        /**
         * Encodes the specified GW2C_SendTaskList message. Does not implicitly {@link msg.GW2C_SendTaskList.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList} message GW2C_SendTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendTaskList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.msg.TaskData.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendTaskList message, length delimited. Does not implicitly {@link msg.GW2C_SendTaskList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.IGW2C_SendTaskList} message GW2C_SendTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendTaskList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendTaskList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendTaskList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendTaskList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.msg.TaskData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendTaskList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendTaskList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendTaskList message.
         * @function verify
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendTaskList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.msg.TaskData.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_SendTaskList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendTaskList} GW2C_SendTaskList
         */
        GW2C_SendTaskList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendTaskList)
                return object;
            var message = new $root.msg.GW2C_SendTaskList();
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".msg.GW2C_SendTaskList.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".msg.GW2C_SendTaskList.tasks: object expected");
                    message.tasks[i] = $root.msg.TaskData.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendTaskList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendTaskList
         * @static
         * @param {msg.GW2C_SendTaskList} message GW2C_SendTaskList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendTaskList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.msg.TaskData.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_SendTaskList to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendTaskList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendTaskList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendTaskList;
    })();

    msg.GW2C_SendLuckyDrawRecord = (function() {

        /**
         * Properties of a GW2C_SendLuckyDrawRecord.
         * @memberof msg
         * @interface IGW2C_SendLuckyDrawRecord
         * @property {msg.ILuckyDrawRecord|null} [luckydraw] GW2C_SendLuckyDrawRecord luckydraw
         */

        /**
         * Constructs a new GW2C_SendLuckyDrawRecord.
         * @memberof msg
         * @classdesc Represents a GW2C_SendLuckyDrawRecord.
         * @implements IGW2C_SendLuckyDrawRecord
         * @constructor
         * @param {msg.IGW2C_SendLuckyDrawRecord=} [properties] Properties to set
         */
        function GW2C_SendLuckyDrawRecord(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_SendLuckyDrawRecord luckydraw.
         * @member {msg.ILuckyDrawRecord|null|undefined} luckydraw
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @instance
         */
        GW2C_SendLuckyDrawRecord.prototype.luckydraw = null;

        /**
         * Creates a new GW2C_SendLuckyDrawRecord instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.IGW2C_SendLuckyDrawRecord=} [properties] Properties to set
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord instance
         */
        GW2C_SendLuckyDrawRecord.create = function create(properties) {
            return new GW2C_SendLuckyDrawRecord(properties);
        };

        /**
         * Encodes the specified GW2C_SendLuckyDrawRecord message. Does not implicitly {@link msg.GW2C_SendLuckyDrawRecord.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.IGW2C_SendLuckyDrawRecord} message GW2C_SendLuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendLuckyDrawRecord.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                $root.msg.LuckyDrawRecord.encode(message.luckydraw, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_SendLuckyDrawRecord message, length delimited. Does not implicitly {@link msg.GW2C_SendLuckyDrawRecord.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.IGW2C_SendLuckyDrawRecord} message GW2C_SendLuckyDrawRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_SendLuckyDrawRecord.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_SendLuckyDrawRecord message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendLuckyDrawRecord.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_SendLuckyDrawRecord();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.luckydraw = $root.msg.LuckyDrawRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_SendLuckyDrawRecord message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_SendLuckyDrawRecord.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_SendLuckyDrawRecord message.
         * @function verify
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_SendLuckyDrawRecord.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw")) {
                var error = $root.msg.LuckyDrawRecord.verify(message.luckydraw);
                if (error)
                    return "luckydraw." + error;
            }
            return null;
        };

        /**
         * Creates a GW2C_SendLuckyDrawRecord message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_SendLuckyDrawRecord} GW2C_SendLuckyDrawRecord
         */
        GW2C_SendLuckyDrawRecord.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_SendLuckyDrawRecord)
                return object;
            var message = new $root.msg.GW2C_SendLuckyDrawRecord();
            if (object.luckydraw != null) {
                if (typeof object.luckydraw !== "object")
                    throw TypeError(".msg.GW2C_SendLuckyDrawRecord.luckydraw: object expected");
                message.luckydraw = $root.msg.LuckyDrawRecord.fromObject(object.luckydraw);
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_SendLuckyDrawRecord message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @static
         * @param {msg.GW2C_SendLuckyDrawRecord} message GW2C_SendLuckyDrawRecord
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_SendLuckyDrawRecord.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.luckydraw = null;
            if (message.luckydraw != null && message.hasOwnProperty("luckydraw"))
                object.luckydraw = $root.msg.LuckyDrawRecord.toObject(message.luckydraw, options);
            return object;
        };

        /**
         * Converts this GW2C_SendLuckyDrawRecord to JSON.
         * @function toJSON
         * @memberof msg.GW2C_SendLuckyDrawRecord
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_SendLuckyDrawRecord.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_SendLuckyDrawRecord;
    })();

    msg.C2GW_ReqTaskList = (function() {

        /**
         * Properties of a C2GW_ReqTaskList.
         * @memberof msg
         * @interface IC2GW_ReqTaskList
         */

        /**
         * Constructs a new C2GW_ReqTaskList.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqTaskList.
         * @implements IC2GW_ReqTaskList
         * @constructor
         * @param {msg.IC2GW_ReqTaskList=} [properties] Properties to set
         */
        function C2GW_ReqTaskList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new C2GW_ReqTaskList instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.IC2GW_ReqTaskList=} [properties] Properties to set
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList instance
         */
        C2GW_ReqTaskList.create = function create(properties) {
            return new C2GW_ReqTaskList(properties);
        };

        /**
         * Encodes the specified C2GW_ReqTaskList message. Does not implicitly {@link msg.C2GW_ReqTaskList.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.IC2GW_ReqTaskList} message C2GW_ReqTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTaskList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqTaskList message, length delimited. Does not implicitly {@link msg.C2GW_ReqTaskList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.IC2GW_ReqTaskList} message C2GW_ReqTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqTaskList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqTaskList message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTaskList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqTaskList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqTaskList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqTaskList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqTaskList message.
         * @function verify
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqTaskList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqTaskList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqTaskList} C2GW_ReqTaskList
         */
        C2GW_ReqTaskList.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqTaskList)
                return object;
            return new $root.msg.C2GW_ReqTaskList();
        };

        /**
         * Creates a plain object from a C2GW_ReqTaskList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqTaskList
         * @static
         * @param {msg.C2GW_ReqTaskList} message C2GW_ReqTaskList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqTaskList.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this C2GW_ReqTaskList to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqTaskList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqTaskList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqTaskList;
    })();

    msg.C2GW_ReqNearUsers = (function() {

        /**
         * Properties of a C2GW_ReqNearUsers.
         * @memberof msg
         * @interface IC2GW_ReqNearUsers
         * @property {number|null} [lng] C2GW_ReqNearUsers lng
         * @property {number|null} [lat] C2GW_ReqNearUsers lat
         */

        /**
         * Constructs a new C2GW_ReqNearUsers.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqNearUsers.
         * @implements IC2GW_ReqNearUsers
         * @constructor
         * @param {msg.IC2GW_ReqNearUsers=} [properties] Properties to set
         */
        function C2GW_ReqNearUsers(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqNearUsers lng.
         * @member {number} lng
         * @memberof msg.C2GW_ReqNearUsers
         * @instance
         */
        C2GW_ReqNearUsers.prototype.lng = 0;

        /**
         * C2GW_ReqNearUsers lat.
         * @member {number} lat
         * @memberof msg.C2GW_ReqNearUsers
         * @instance
         */
        C2GW_ReqNearUsers.prototype.lat = 0;

        /**
         * Creates a new C2GW_ReqNearUsers instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {msg.IC2GW_ReqNearUsers=} [properties] Properties to set
         * @returns {msg.C2GW_ReqNearUsers} C2GW_ReqNearUsers instance
         */
        C2GW_ReqNearUsers.create = function create(properties) {
            return new C2GW_ReqNearUsers(properties);
        };

        /**
         * Encodes the specified C2GW_ReqNearUsers message. Does not implicitly {@link msg.C2GW_ReqNearUsers.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {msg.IC2GW_ReqNearUsers} message C2GW_ReqNearUsers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqNearUsers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lng != null && message.hasOwnProperty("lng"))
                writer.uint32(/* id 1, wireType 5 =*/13).float(message.lng);
            if (message.lat != null && message.hasOwnProperty("lat"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.lat);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqNearUsers message, length delimited. Does not implicitly {@link msg.C2GW_ReqNearUsers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {msg.IC2GW_ReqNearUsers} message C2GW_ReqNearUsers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqNearUsers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqNearUsers message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqNearUsers} C2GW_ReqNearUsers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqNearUsers.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqNearUsers();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lng = reader.float();
                    break;
                case 2:
                    message.lat = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqNearUsers message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqNearUsers} C2GW_ReqNearUsers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqNearUsers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqNearUsers message.
         * @function verify
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqNearUsers.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lng != null && message.hasOwnProperty("lng"))
                if (typeof message.lng !== "number")
                    return "lng: number expected";
            if (message.lat != null && message.hasOwnProperty("lat"))
                if (typeof message.lat !== "number")
                    return "lat: number expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqNearUsers message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqNearUsers} C2GW_ReqNearUsers
         */
        C2GW_ReqNearUsers.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqNearUsers)
                return object;
            var message = new $root.msg.C2GW_ReqNearUsers();
            if (object.lng != null)
                message.lng = Number(object.lng);
            if (object.lat != null)
                message.lat = Number(object.lat);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqNearUsers message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqNearUsers
         * @static
         * @param {msg.C2GW_ReqNearUsers} message C2GW_ReqNearUsers
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqNearUsers.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.lng = 0;
                object.lat = 0;
            }
            if (message.lng != null && message.hasOwnProperty("lng"))
                object.lng = options.json && !isFinite(message.lng) ? String(message.lng) : message.lng;
            if (message.lat != null && message.hasOwnProperty("lat"))
                object.lat = options.json && !isFinite(message.lat) ? String(message.lat) : message.lat;
            return object;
        };

        /**
         * Converts this C2GW_ReqNearUsers to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqNearUsers
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqNearUsers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqNearUsers;
    })();

    msg.GW2C_AckNearUsers = (function() {

        /**
         * Properties of a GW2C_AckNearUsers.
         * @memberof msg
         * @interface IGW2C_AckNearUsers
         * @property {Array.<msg.IPersonSocialInfo>|null} [data] GW2C_AckNearUsers data
         */

        /**
         * Constructs a new GW2C_AckNearUsers.
         * @memberof msg
         * @classdesc Represents a GW2C_AckNearUsers.
         * @implements IGW2C_AckNearUsers
         * @constructor
         * @param {msg.IGW2C_AckNearUsers=} [properties] Properties to set
         */
        function GW2C_AckNearUsers(properties) {
            this.data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckNearUsers data.
         * @member {Array.<msg.IPersonSocialInfo>} data
         * @memberof msg.GW2C_AckNearUsers
         * @instance
         */
        GW2C_AckNearUsers.prototype.data = $util.emptyArray;

        /**
         * Creates a new GW2C_AckNearUsers instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {msg.IGW2C_AckNearUsers=} [properties] Properties to set
         * @returns {msg.GW2C_AckNearUsers} GW2C_AckNearUsers instance
         */
        GW2C_AckNearUsers.create = function create(properties) {
            return new GW2C_AckNearUsers(properties);
        };

        /**
         * Encodes the specified GW2C_AckNearUsers message. Does not implicitly {@link msg.GW2C_AckNearUsers.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {msg.IGW2C_AckNearUsers} message GW2C_AckNearUsers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckNearUsers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.data != null && message.data.length)
                for (var i = 0; i < message.data.length; ++i)
                    $root.msg.PersonSocialInfo.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckNearUsers message, length delimited. Does not implicitly {@link msg.GW2C_AckNearUsers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {msg.IGW2C_AckNearUsers} message GW2C_AckNearUsers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckNearUsers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckNearUsers message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckNearUsers} GW2C_AckNearUsers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckNearUsers.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckNearUsers();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.msg.PersonSocialInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckNearUsers message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckNearUsers} GW2C_AckNearUsers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckNearUsers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckNearUsers message.
         * @function verify
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckNearUsers.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (var i = 0; i < message.data.length; ++i) {
                    var error = $root.msg.PersonSocialInfo.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckNearUsers message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckNearUsers} GW2C_AckNearUsers
         */
        GW2C_AckNearUsers.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckNearUsers)
                return object;
            var message = new $root.msg.GW2C_AckNearUsers();
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".msg.GW2C_AckNearUsers.data: array expected");
                message.data = [];
                for (var i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".msg.GW2C_AckNearUsers.data: object expected");
                    message.data[i] = $root.msg.PersonSocialInfo.fromObject(object.data[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckNearUsers message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckNearUsers
         * @static
         * @param {msg.GW2C_AckNearUsers} message GW2C_AckNearUsers
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckNearUsers.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (message.data && message.data.length) {
                object.data = [];
                for (var j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.msg.PersonSocialInfo.toObject(message.data[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckNearUsers to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckNearUsers
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckNearUsers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckNearUsers;
    })();

    msg.C2GW_ReqSetPos = (function() {

        /**
         * Properties of a C2GW_ReqSetPos.
         * @memberof msg
         * @interface IC2GW_ReqSetPos
         * @property {number|null} [lng] C2GW_ReqSetPos lng
         * @property {number|null} [lat] C2GW_ReqSetPos lat
         * @property {number|null} [province] C2GW_ReqSetPos province
         * @property {number|null} [city] C2GW_ReqSetPos city
         */

        /**
         * Constructs a new C2GW_ReqSetPos.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetPos.
         * @implements IC2GW_ReqSetPos
         * @constructor
         * @param {msg.IC2GW_ReqSetPos=} [properties] Properties to set
         */
        function C2GW_ReqSetPos(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetPos lng.
         * @member {number} lng
         * @memberof msg.C2GW_ReqSetPos
         * @instance
         */
        C2GW_ReqSetPos.prototype.lng = 0;

        /**
         * C2GW_ReqSetPos lat.
         * @member {number} lat
         * @memberof msg.C2GW_ReqSetPos
         * @instance
         */
        C2GW_ReqSetPos.prototype.lat = 0;

        /**
         * C2GW_ReqSetPos province.
         * @member {number} province
         * @memberof msg.C2GW_ReqSetPos
         * @instance
         */
        C2GW_ReqSetPos.prototype.province = 0;

        /**
         * C2GW_ReqSetPos city.
         * @member {number} city
         * @memberof msg.C2GW_ReqSetPos
         * @instance
         */
        C2GW_ReqSetPos.prototype.city = 0;

        /**
         * Creates a new C2GW_ReqSetPos instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {msg.IC2GW_ReqSetPos=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetPos} C2GW_ReqSetPos instance
         */
        C2GW_ReqSetPos.create = function create(properties) {
            return new C2GW_ReqSetPos(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetPos message. Does not implicitly {@link msg.C2GW_ReqSetPos.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {msg.IC2GW_ReqSetPos} message C2GW_ReqSetPos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetPos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lng != null && message.hasOwnProperty("lng"))
                writer.uint32(/* id 1, wireType 5 =*/13).float(message.lng);
            if (message.lat != null && message.hasOwnProperty("lat"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.lat);
            if (message.province != null && message.hasOwnProperty("province"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.province);
            if (message.city != null && message.hasOwnProperty("city"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.city);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetPos message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetPos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {msg.IC2GW_ReqSetPos} message C2GW_ReqSetPos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetPos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetPos message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetPos} C2GW_ReqSetPos
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetPos.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetPos();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lng = reader.float();
                    break;
                case 2:
                    message.lat = reader.float();
                    break;
                case 3:
                    message.province = reader.uint32();
                    break;
                case 4:
                    message.city = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetPos message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetPos} C2GW_ReqSetPos
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetPos.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetPos message.
         * @function verify
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetPos.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lng != null && message.hasOwnProperty("lng"))
                if (typeof message.lng !== "number")
                    return "lng: number expected";
            if (message.lat != null && message.hasOwnProperty("lat"))
                if (typeof message.lat !== "number")
                    return "lat: number expected";
            if (message.province != null && message.hasOwnProperty("province"))
                if (!$util.isInteger(message.province))
                    return "province: integer expected";
            if (message.city != null && message.hasOwnProperty("city"))
                if (!$util.isInteger(message.city))
                    return "city: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetPos message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetPos} C2GW_ReqSetPos
         */
        C2GW_ReqSetPos.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetPos)
                return object;
            var message = new $root.msg.C2GW_ReqSetPos();
            if (object.lng != null)
                message.lng = Number(object.lng);
            if (object.lat != null)
                message.lat = Number(object.lat);
            if (object.province != null)
                message.province = object.province >>> 0;
            if (object.city != null)
                message.city = object.city >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetPos message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetPos
         * @static
         * @param {msg.C2GW_ReqSetPos} message C2GW_ReqSetPos
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetPos.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.lng = 0;
                object.lat = 0;
                object.province = 0;
                object.city = 0;
            }
            if (message.lng != null && message.hasOwnProperty("lng"))
                object.lng = options.json && !isFinite(message.lng) ? String(message.lng) : message.lng;
            if (message.lat != null && message.hasOwnProperty("lat"))
                object.lat = options.json && !isFinite(message.lat) ? String(message.lat) : message.lat;
            if (message.province != null && message.hasOwnProperty("province"))
                object.province = message.province;
            if (message.city != null && message.hasOwnProperty("city"))
                object.city = message.city;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetPos to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetPos
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetPos.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetPos;
    })();

    msg.C2GW_ReqSetUserSex = (function() {

        /**
         * Properties of a C2GW_ReqSetUserSex.
         * @memberof msg
         * @interface IC2GW_ReqSetUserSex
         * @property {number|null} [sex] C2GW_ReqSetUserSex sex
         */

        /**
         * Constructs a new C2GW_ReqSetUserSex.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetUserSex.
         * @implements IC2GW_ReqSetUserSex
         * @constructor
         * @param {msg.IC2GW_ReqSetUserSex=} [properties] Properties to set
         */
        function C2GW_ReqSetUserSex(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetUserSex sex.
         * @member {number} sex
         * @memberof msg.C2GW_ReqSetUserSex
         * @instance
         */
        C2GW_ReqSetUserSex.prototype.sex = 0;

        /**
         * Creates a new C2GW_ReqSetUserSex instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {msg.IC2GW_ReqSetUserSex=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetUserSex} C2GW_ReqSetUserSex instance
         */
        C2GW_ReqSetUserSex.create = function create(properties) {
            return new C2GW_ReqSetUserSex(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetUserSex message. Does not implicitly {@link msg.C2GW_ReqSetUserSex.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {msg.IC2GW_ReqSetUserSex} message C2GW_ReqSetUserSex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserSex.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sex);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetUserSex message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetUserSex.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {msg.IC2GW_ReqSetUserSex} message C2GW_ReqSetUserSex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserSex.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetUserSex message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetUserSex} C2GW_ReqSetUserSex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserSex.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetUserSex();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sex = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetUserSex message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetUserSex} C2GW_ReqSetUserSex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserSex.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetUserSex message.
         * @function verify
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetUserSex.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isInteger(message.sex))
                    return "sex: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetUserSex message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetUserSex} C2GW_ReqSetUserSex
         */
        C2GW_ReqSetUserSex.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetUserSex)
                return object;
            var message = new $root.msg.C2GW_ReqSetUserSex();
            if (object.sex != null)
                message.sex = object.sex | 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetUserSex message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetUserSex
         * @static
         * @param {msg.C2GW_ReqSetUserSex} message C2GW_ReqSetUserSex
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetUserSex.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.sex = 0;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetUserSex to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetUserSex
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetUserSex.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetUserSex;
    })();

    msg.C2GW_ReqSetUserAge = (function() {

        /**
         * Properties of a C2GW_ReqSetUserAge.
         * @memberof msg
         * @interface IC2GW_ReqSetUserAge
         * @property {number|null} [age] C2GW_ReqSetUserAge age
         */

        /**
         * Constructs a new C2GW_ReqSetUserAge.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetUserAge.
         * @implements IC2GW_ReqSetUserAge
         * @constructor
         * @param {msg.IC2GW_ReqSetUserAge=} [properties] Properties to set
         */
        function C2GW_ReqSetUserAge(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetUserAge age.
         * @member {number} age
         * @memberof msg.C2GW_ReqSetUserAge
         * @instance
         */
        C2GW_ReqSetUserAge.prototype.age = 0;

        /**
         * Creates a new C2GW_ReqSetUserAge instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {msg.IC2GW_ReqSetUserAge=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetUserAge} C2GW_ReqSetUserAge instance
         */
        C2GW_ReqSetUserAge.create = function create(properties) {
            return new C2GW_ReqSetUserAge(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetUserAge message. Does not implicitly {@link msg.C2GW_ReqSetUserAge.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {msg.IC2GW_ReqSetUserAge} message C2GW_ReqSetUserAge message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserAge.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.age != null && message.hasOwnProperty("age"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.age);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetUserAge message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetUserAge.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {msg.IC2GW_ReqSetUserAge} message C2GW_ReqSetUserAge message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserAge.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetUserAge message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetUserAge} C2GW_ReqSetUserAge
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserAge.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetUserAge();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.age = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetUserAge message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetUserAge} C2GW_ReqSetUserAge
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserAge.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetUserAge message.
         * @function verify
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetUserAge.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.age != null && message.hasOwnProperty("age"))
                if (!$util.isInteger(message.age))
                    return "age: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetUserAge message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetUserAge} C2GW_ReqSetUserAge
         */
        C2GW_ReqSetUserAge.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetUserAge)
                return object;
            var message = new $root.msg.C2GW_ReqSetUserAge();
            if (object.age != null)
                message.age = object.age >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetUserAge message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetUserAge
         * @static
         * @param {msg.C2GW_ReqSetUserAge} message C2GW_ReqSetUserAge
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetUserAge.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.age = 0;
            if (message.age != null && message.hasOwnProperty("age"))
                object.age = message.age;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetUserAge to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetUserAge
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetUserAge.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetUserAge;
    })();

    msg.C2GW_ReqSetUserConstellation = (function() {

        /**
         * Properties of a C2GW_ReqSetUserConstellation.
         * @memberof msg
         * @interface IC2GW_ReqSetUserConstellation
         * @property {number|null} [constellation] C2GW_ReqSetUserConstellation constellation
         */

        /**
         * Constructs a new C2GW_ReqSetUserConstellation.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetUserConstellation.
         * @implements IC2GW_ReqSetUserConstellation
         * @constructor
         * @param {msg.IC2GW_ReqSetUserConstellation=} [properties] Properties to set
         */
        function C2GW_ReqSetUserConstellation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetUserConstellation constellation.
         * @member {number} constellation
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @instance
         */
        C2GW_ReqSetUserConstellation.prototype.constellation = 0;

        /**
         * Creates a new C2GW_ReqSetUserConstellation instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {msg.IC2GW_ReqSetUserConstellation=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetUserConstellation} C2GW_ReqSetUserConstellation instance
         */
        C2GW_ReqSetUserConstellation.create = function create(properties) {
            return new C2GW_ReqSetUserConstellation(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetUserConstellation message. Does not implicitly {@link msg.C2GW_ReqSetUserConstellation.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {msg.IC2GW_ReqSetUserConstellation} message C2GW_ReqSetUserConstellation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserConstellation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.constellation);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetUserConstellation message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetUserConstellation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {msg.IC2GW_ReqSetUserConstellation} message C2GW_ReqSetUserConstellation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserConstellation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetUserConstellation message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetUserConstellation} C2GW_ReqSetUserConstellation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserConstellation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetUserConstellation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.constellation = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetUserConstellation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetUserConstellation} C2GW_ReqSetUserConstellation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserConstellation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetUserConstellation message.
         * @function verify
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetUserConstellation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                if (!$util.isInteger(message.constellation))
                    return "constellation: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetUserConstellation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetUserConstellation} C2GW_ReqSetUserConstellation
         */
        C2GW_ReqSetUserConstellation.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetUserConstellation)
                return object;
            var message = new $root.msg.C2GW_ReqSetUserConstellation();
            if (object.constellation != null)
                message.constellation = object.constellation >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetUserConstellation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @static
         * @param {msg.C2GW_ReqSetUserConstellation} message C2GW_ReqSetUserConstellation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetUserConstellation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.constellation = 0;
            if (message.constellation != null && message.hasOwnProperty("constellation"))
                object.constellation = message.constellation;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetUserConstellation to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetUserConstellation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetUserConstellation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetUserConstellation;
    })();

    msg.C2GW_ReqSetUserSign = (function() {

        /**
         * Properties of a C2GW_ReqSetUserSign.
         * @memberof msg
         * @interface IC2GW_ReqSetUserSign
         * @property {string|null} [sign] C2GW_ReqSetUserSign sign
         */

        /**
         * Constructs a new C2GW_ReqSetUserSign.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetUserSign.
         * @implements IC2GW_ReqSetUserSign
         * @constructor
         * @param {msg.IC2GW_ReqSetUserSign=} [properties] Properties to set
         */
        function C2GW_ReqSetUserSign(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetUserSign sign.
         * @member {string} sign
         * @memberof msg.C2GW_ReqSetUserSign
         * @instance
         */
        C2GW_ReqSetUserSign.prototype.sign = "";

        /**
         * Creates a new C2GW_ReqSetUserSign instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {msg.IC2GW_ReqSetUserSign=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetUserSign} C2GW_ReqSetUserSign instance
         */
        C2GW_ReqSetUserSign.create = function create(properties) {
            return new C2GW_ReqSetUserSign(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetUserSign message. Does not implicitly {@link msg.C2GW_ReqSetUserSign.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {msg.IC2GW_ReqSetUserSign} message C2GW_ReqSetUserSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserSign.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sign != null && message.hasOwnProperty("sign"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sign);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetUserSign message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetUserSign.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {msg.IC2GW_ReqSetUserSign} message C2GW_ReqSetUserSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserSign.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetUserSign message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetUserSign} C2GW_ReqSetUserSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserSign.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetUserSign();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sign = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetUserSign message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetUserSign} C2GW_ReqSetUserSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserSign.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetUserSign message.
         * @function verify
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetUserSign.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sign != null && message.hasOwnProperty("sign"))
                if (!$util.isString(message.sign))
                    return "sign: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetUserSign message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetUserSign} C2GW_ReqSetUserSign
         */
        C2GW_ReqSetUserSign.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetUserSign)
                return object;
            var message = new $root.msg.C2GW_ReqSetUserSign();
            if (object.sign != null)
                message.sign = String(object.sign);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetUserSign message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetUserSign
         * @static
         * @param {msg.C2GW_ReqSetUserSign} message C2GW_ReqSetUserSign
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetUserSign.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.sign = "";
            if (message.sign != null && message.hasOwnProperty("sign"))
                object.sign = message.sign;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetUserSign to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetUserSign
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetUserSign.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetUserSign;
    })();

    msg.GW2C_AckSetUserSign = (function() {

        /**
         * Properties of a GW2C_AckSetUserSign.
         * @memberof msg
         * @interface IGW2C_AckSetUserSign
         * @property {number|null} [ret] GW2C_AckSetUserSign ret
         */

        /**
         * Constructs a new GW2C_AckSetUserSign.
         * @memberof msg
         * @classdesc Represents a GW2C_AckSetUserSign.
         * @implements IGW2C_AckSetUserSign
         * @constructor
         * @param {msg.IGW2C_AckSetUserSign=} [properties] Properties to set
         */
        function GW2C_AckSetUserSign(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckSetUserSign ret.
         * @member {number} ret
         * @memberof msg.GW2C_AckSetUserSign
         * @instance
         */
        GW2C_AckSetUserSign.prototype.ret = 0;

        /**
         * Creates a new GW2C_AckSetUserSign instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {msg.IGW2C_AckSetUserSign=} [properties] Properties to set
         * @returns {msg.GW2C_AckSetUserSign} GW2C_AckSetUserSign instance
         */
        GW2C_AckSetUserSign.create = function create(properties) {
            return new GW2C_AckSetUserSign(properties);
        };

        /**
         * Encodes the specified GW2C_AckSetUserSign message. Does not implicitly {@link msg.GW2C_AckSetUserSign.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {msg.IGW2C_AckSetUserSign} message GW2C_AckSetUserSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckSetUserSign.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ret);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckSetUserSign message, length delimited. Does not implicitly {@link msg.GW2C_AckSetUserSign.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {msg.IGW2C_AckSetUserSign} message GW2C_AckSetUserSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckSetUserSign.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckSetUserSign message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckSetUserSign} GW2C_AckSetUserSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckSetUserSign.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckSetUserSign();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ret = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckSetUserSign message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckSetUserSign} GW2C_AckSetUserSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckSetUserSign.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckSetUserSign message.
         * @function verify
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckSetUserSign.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_AckSetUserSign message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckSetUserSign} GW2C_AckSetUserSign
         */
        GW2C_AckSetUserSign.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckSetUserSign)
                return object;
            var message = new $root.msg.GW2C_AckSetUserSign();
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckSetUserSign message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckSetUserSign
         * @static
         * @param {msg.GW2C_AckSetUserSign} message GW2C_AckSetUserSign
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckSetUserSign.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ret = 0;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            return object;
        };

        /**
         * Converts this GW2C_AckSetUserSign to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckSetUserSign
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckSetUserSign.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckSetUserSign;
    })();

    msg.C2GW_ReqSetFace = (function() {

        /**
         * Properties of a C2GW_ReqSetFace.
         * @memberof msg
         * @interface IC2GW_ReqSetFace
         * @property {string|null} [face] C2GW_ReqSetFace face
         */

        /**
         * Constructs a new C2GW_ReqSetFace.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetFace.
         * @implements IC2GW_ReqSetFace
         * @constructor
         * @param {msg.IC2GW_ReqSetFace=} [properties] Properties to set
         */
        function C2GW_ReqSetFace(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetFace face.
         * @member {string} face
         * @memberof msg.C2GW_ReqSetFace
         * @instance
         */
        C2GW_ReqSetFace.prototype.face = "";

        /**
         * Creates a new C2GW_ReqSetFace instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {msg.IC2GW_ReqSetFace=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetFace} C2GW_ReqSetFace instance
         */
        C2GW_ReqSetFace.create = function create(properties) {
            return new C2GW_ReqSetFace(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetFace message. Does not implicitly {@link msg.C2GW_ReqSetFace.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {msg.IC2GW_ReqSetFace} message C2GW_ReqSetFace message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetFace.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.face != null && message.hasOwnProperty("face"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.face);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetFace message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetFace.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {msg.IC2GW_ReqSetFace} message C2GW_ReqSetFace message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetFace.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetFace message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetFace} C2GW_ReqSetFace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetFace.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetFace();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.face = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetFace message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetFace} C2GW_ReqSetFace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetFace.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetFace message.
         * @function verify
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetFace.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.face != null && message.hasOwnProperty("face"))
                if (!$util.isString(message.face))
                    return "face: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetFace message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetFace} C2GW_ReqSetFace
         */
        C2GW_ReqSetFace.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetFace)
                return object;
            var message = new $root.msg.C2GW_ReqSetFace();
            if (object.face != null)
                message.face = String(object.face);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetFace message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetFace
         * @static
         * @param {msg.C2GW_ReqSetFace} message C2GW_ReqSetFace
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetFace.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.face = "";
            if (message.face != null && message.hasOwnProperty("face"))
                object.face = message.face;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetFace to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetFace
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetFace.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetFace;
    })();

    msg.C2GW_ReqSetUserName = (function() {

        /**
         * Properties of a C2GW_ReqSetUserName.
         * @memberof msg
         * @interface IC2GW_ReqSetUserName
         * @property {string|null} [name] C2GW_ReqSetUserName name
         */

        /**
         * Constructs a new C2GW_ReqSetUserName.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetUserName.
         * @implements IC2GW_ReqSetUserName
         * @constructor
         * @param {msg.IC2GW_ReqSetUserName=} [properties] Properties to set
         */
        function C2GW_ReqSetUserName(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetUserName name.
         * @member {string} name
         * @memberof msg.C2GW_ReqSetUserName
         * @instance
         */
        C2GW_ReqSetUserName.prototype.name = "";

        /**
         * Creates a new C2GW_ReqSetUserName instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {msg.IC2GW_ReqSetUserName=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetUserName} C2GW_ReqSetUserName instance
         */
        C2GW_ReqSetUserName.create = function create(properties) {
            return new C2GW_ReqSetUserName(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetUserName message. Does not implicitly {@link msg.C2GW_ReqSetUserName.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {msg.IC2GW_ReqSetUserName} message C2GW_ReqSetUserName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserName.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetUserName message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetUserName.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {msg.IC2GW_ReqSetUserName} message C2GW_ReqSetUserName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetUserName.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetUserName message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetUserName} C2GW_ReqSetUserName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserName.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetUserName();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetUserName message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetUserName} C2GW_ReqSetUserName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetUserName.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetUserName message.
         * @function verify
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetUserName.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetUserName message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetUserName} C2GW_ReqSetUserName
         */
        C2GW_ReqSetUserName.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetUserName)
                return object;
            var message = new $root.msg.C2GW_ReqSetUserName();
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetUserName message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetUserName
         * @static
         * @param {msg.C2GW_ReqSetUserName} message C2GW_ReqSetUserName
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetUserName.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.name = "";
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetUserName to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetUserName
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetUserName.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetUserName;
    })();

    msg.GW2C_AckSetUserName = (function() {

        /**
         * Properties of a GW2C_AckSetUserName.
         * @memberof msg
         * @interface IGW2C_AckSetUserName
         * @property {number|null} [ret] GW2C_AckSetUserName ret
         */

        /**
         * Constructs a new GW2C_AckSetUserName.
         * @memberof msg
         * @classdesc Represents a GW2C_AckSetUserName.
         * @implements IGW2C_AckSetUserName
         * @constructor
         * @param {msg.IGW2C_AckSetUserName=} [properties] Properties to set
         */
        function GW2C_AckSetUserName(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckSetUserName ret.
         * @member {number} ret
         * @memberof msg.GW2C_AckSetUserName
         * @instance
         */
        GW2C_AckSetUserName.prototype.ret = 0;

        /**
         * Creates a new GW2C_AckSetUserName instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {msg.IGW2C_AckSetUserName=} [properties] Properties to set
         * @returns {msg.GW2C_AckSetUserName} GW2C_AckSetUserName instance
         */
        GW2C_AckSetUserName.create = function create(properties) {
            return new GW2C_AckSetUserName(properties);
        };

        /**
         * Encodes the specified GW2C_AckSetUserName message. Does not implicitly {@link msg.GW2C_AckSetUserName.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {msg.IGW2C_AckSetUserName} message GW2C_AckSetUserName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckSetUserName.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ret);
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckSetUserName message, length delimited. Does not implicitly {@link msg.GW2C_AckSetUserName.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {msg.IGW2C_AckSetUserName} message GW2C_AckSetUserName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckSetUserName.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckSetUserName message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckSetUserName} GW2C_AckSetUserName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckSetUserName.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckSetUserName();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ret = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckSetUserName message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckSetUserName} GW2C_AckSetUserName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckSetUserName.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckSetUserName message.
         * @function verify
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckSetUserName.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            return null;
        };

        /**
         * Creates a GW2C_AckSetUserName message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckSetUserName} GW2C_AckSetUserName
         */
        GW2C_AckSetUserName.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckSetUserName)
                return object;
            var message = new $root.msg.GW2C_AckSetUserName();
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckSetUserName message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckSetUserName
         * @static
         * @param {msg.GW2C_AckSetUserName} message GW2C_AckSetUserName
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckSetUserName.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ret = 0;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            return object;
        };

        /**
         * Converts this GW2C_AckSetUserName to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckSetUserName
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckSetUserName.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckSetUserName;
    })();

    msg.C2GW_ReqSetBaseArea = (function() {

        /**
         * Properties of a C2GW_ReqSetBaseArea.
         * @memberof msg
         * @interface IC2GW_ReqSetBaseArea
         * @property {number|null} [province] C2GW_ReqSetBaseArea province
         * @property {number|null} [city] C2GW_ReqSetBaseArea city
         */

        /**
         * Constructs a new C2GW_ReqSetBaseArea.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqSetBaseArea.
         * @implements IC2GW_ReqSetBaseArea
         * @constructor
         * @param {msg.IC2GW_ReqSetBaseArea=} [properties] Properties to set
         */
        function C2GW_ReqSetBaseArea(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqSetBaseArea province.
         * @member {number} province
         * @memberof msg.C2GW_ReqSetBaseArea
         * @instance
         */
        C2GW_ReqSetBaseArea.prototype.province = 0;

        /**
         * C2GW_ReqSetBaseArea city.
         * @member {number} city
         * @memberof msg.C2GW_ReqSetBaseArea
         * @instance
         */
        C2GW_ReqSetBaseArea.prototype.city = 0;

        /**
         * Creates a new C2GW_ReqSetBaseArea instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {msg.IC2GW_ReqSetBaseArea=} [properties] Properties to set
         * @returns {msg.C2GW_ReqSetBaseArea} C2GW_ReqSetBaseArea instance
         */
        C2GW_ReqSetBaseArea.create = function create(properties) {
            return new C2GW_ReqSetBaseArea(properties);
        };

        /**
         * Encodes the specified C2GW_ReqSetBaseArea message. Does not implicitly {@link msg.C2GW_ReqSetBaseArea.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {msg.IC2GW_ReqSetBaseArea} message C2GW_ReqSetBaseArea message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetBaseArea.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.province != null && message.hasOwnProperty("province"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.province);
            if (message.city != null && message.hasOwnProperty("city"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.city);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqSetBaseArea message, length delimited. Does not implicitly {@link msg.C2GW_ReqSetBaseArea.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {msg.IC2GW_ReqSetBaseArea} message C2GW_ReqSetBaseArea message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqSetBaseArea.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqSetBaseArea message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqSetBaseArea} C2GW_ReqSetBaseArea
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetBaseArea.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqSetBaseArea();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.province = reader.uint32();
                    break;
                case 2:
                    message.city = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqSetBaseArea message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqSetBaseArea} C2GW_ReqSetBaseArea
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqSetBaseArea.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqSetBaseArea message.
         * @function verify
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqSetBaseArea.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.province != null && message.hasOwnProperty("province"))
                if (!$util.isInteger(message.province))
                    return "province: integer expected";
            if (message.city != null && message.hasOwnProperty("city"))
                if (!$util.isInteger(message.city))
                    return "city: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqSetBaseArea message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqSetBaseArea} C2GW_ReqSetBaseArea
         */
        C2GW_ReqSetBaseArea.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqSetBaseArea)
                return object;
            var message = new $root.msg.C2GW_ReqSetBaseArea();
            if (object.province != null)
                message.province = object.province >>> 0;
            if (object.city != null)
                message.city = object.city >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqSetBaseArea message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqSetBaseArea
         * @static
         * @param {msg.C2GW_ReqSetBaseArea} message C2GW_ReqSetBaseArea
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqSetBaseArea.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.province = 0;
                object.city = 0;
            }
            if (message.province != null && message.hasOwnProperty("province"))
                object.province = message.province;
            if (message.city != null && message.hasOwnProperty("city"))
                object.city = message.city;
            return object;
        };

        /**
         * Converts this C2GW_ReqSetBaseArea to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqSetBaseArea
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqSetBaseArea.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqSetBaseArea;
    })();

    msg.C2GW_ReqPlayerCountByProvince = (function() {

        /**
         * Properties of a C2GW_ReqPlayerCountByProvince.
         * @memberof msg
         * @interface IC2GW_ReqPlayerCountByProvince
         * @property {number|null} [province] C2GW_ReqPlayerCountByProvince province
         */

        /**
         * Constructs a new C2GW_ReqPlayerCountByProvince.
         * @memberof msg
         * @classdesc Represents a C2GW_ReqPlayerCountByProvince.
         * @implements IC2GW_ReqPlayerCountByProvince
         * @constructor
         * @param {msg.IC2GW_ReqPlayerCountByProvince=} [properties] Properties to set
         */
        function C2GW_ReqPlayerCountByProvince(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * C2GW_ReqPlayerCountByProvince province.
         * @member {number} province
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @instance
         */
        C2GW_ReqPlayerCountByProvince.prototype.province = 0;

        /**
         * Creates a new C2GW_ReqPlayerCountByProvince instance using the specified properties.
         * @function create
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {msg.IC2GW_ReqPlayerCountByProvince=} [properties] Properties to set
         * @returns {msg.C2GW_ReqPlayerCountByProvince} C2GW_ReqPlayerCountByProvince instance
         */
        C2GW_ReqPlayerCountByProvince.create = function create(properties) {
            return new C2GW_ReqPlayerCountByProvince(properties);
        };

        /**
         * Encodes the specified C2GW_ReqPlayerCountByProvince message. Does not implicitly {@link msg.C2GW_ReqPlayerCountByProvince.verify|verify} messages.
         * @function encode
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {msg.IC2GW_ReqPlayerCountByProvince} message C2GW_ReqPlayerCountByProvince message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqPlayerCountByProvince.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.province != null && message.hasOwnProperty("province"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.province);
            return writer;
        };

        /**
         * Encodes the specified C2GW_ReqPlayerCountByProvince message, length delimited. Does not implicitly {@link msg.C2GW_ReqPlayerCountByProvince.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {msg.IC2GW_ReqPlayerCountByProvince} message C2GW_ReqPlayerCountByProvince message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        C2GW_ReqPlayerCountByProvince.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a C2GW_ReqPlayerCountByProvince message from the specified reader or buffer.
         * @function decode
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.C2GW_ReqPlayerCountByProvince} C2GW_ReqPlayerCountByProvince
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqPlayerCountByProvince.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.C2GW_ReqPlayerCountByProvince();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.province = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a C2GW_ReqPlayerCountByProvince message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.C2GW_ReqPlayerCountByProvince} C2GW_ReqPlayerCountByProvince
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        C2GW_ReqPlayerCountByProvince.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a C2GW_ReqPlayerCountByProvince message.
         * @function verify
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        C2GW_ReqPlayerCountByProvince.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.province != null && message.hasOwnProperty("province"))
                if (!$util.isInteger(message.province))
                    return "province: integer expected";
            return null;
        };

        /**
         * Creates a C2GW_ReqPlayerCountByProvince message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.C2GW_ReqPlayerCountByProvince} C2GW_ReqPlayerCountByProvince
         */
        C2GW_ReqPlayerCountByProvince.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.C2GW_ReqPlayerCountByProvince)
                return object;
            var message = new $root.msg.C2GW_ReqPlayerCountByProvince();
            if (object.province != null)
                message.province = object.province >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a C2GW_ReqPlayerCountByProvince message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @static
         * @param {msg.C2GW_ReqPlayerCountByProvince} message C2GW_ReqPlayerCountByProvince
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        C2GW_ReqPlayerCountByProvince.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.province = 0;
            if (message.province != null && message.hasOwnProperty("province"))
                object.province = message.province;
            return object;
        };

        /**
         * Converts this C2GW_ReqPlayerCountByProvince to JSON.
         * @function toJSON
         * @memberof msg.C2GW_ReqPlayerCountByProvince
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        C2GW_ReqPlayerCountByProvince.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return C2GW_ReqPlayerCountByProvince;
    })();

    msg.GW2C_AckPlayerCountByProvince = (function() {

        /**
         * Properties of a GW2C_AckPlayerCountByProvince.
         * @memberof msg
         * @interface IGW2C_AckPlayerCountByProvince
         * @property {number|null} [province] GW2C_AckPlayerCountByProvince province
         * @property {Array.<msg.ICommonKeyValue>|null} [data] GW2C_AckPlayerCountByProvince data
         */

        /**
         * Constructs a new GW2C_AckPlayerCountByProvince.
         * @memberof msg
         * @classdesc Represents a GW2C_AckPlayerCountByProvince.
         * @implements IGW2C_AckPlayerCountByProvince
         * @constructor
         * @param {msg.IGW2C_AckPlayerCountByProvince=} [properties] Properties to set
         */
        function GW2C_AckPlayerCountByProvince(properties) {
            this.data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GW2C_AckPlayerCountByProvince province.
         * @member {number} province
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @instance
         */
        GW2C_AckPlayerCountByProvince.prototype.province = 0;

        /**
         * GW2C_AckPlayerCountByProvince data.
         * @member {Array.<msg.ICommonKeyValue>} data
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @instance
         */
        GW2C_AckPlayerCountByProvince.prototype.data = $util.emptyArray;

        /**
         * Creates a new GW2C_AckPlayerCountByProvince instance using the specified properties.
         * @function create
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {msg.IGW2C_AckPlayerCountByProvince=} [properties] Properties to set
         * @returns {msg.GW2C_AckPlayerCountByProvince} GW2C_AckPlayerCountByProvince instance
         */
        GW2C_AckPlayerCountByProvince.create = function create(properties) {
            return new GW2C_AckPlayerCountByProvince(properties);
        };

        /**
         * Encodes the specified GW2C_AckPlayerCountByProvince message. Does not implicitly {@link msg.GW2C_AckPlayerCountByProvince.verify|verify} messages.
         * @function encode
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {msg.IGW2C_AckPlayerCountByProvince} message GW2C_AckPlayerCountByProvince message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckPlayerCountByProvince.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.province != null && message.hasOwnProperty("province"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.province);
            if (message.data != null && message.data.length)
                for (var i = 0; i < message.data.length; ++i)
                    $root.msg.CommonKeyValue.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GW2C_AckPlayerCountByProvince message, length delimited. Does not implicitly {@link msg.GW2C_AckPlayerCountByProvince.verify|verify} messages.
         * @function encodeDelimited
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {msg.IGW2C_AckPlayerCountByProvince} message GW2C_AckPlayerCountByProvince message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GW2C_AckPlayerCountByProvince.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GW2C_AckPlayerCountByProvince message from the specified reader or buffer.
         * @function decode
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {msg.GW2C_AckPlayerCountByProvince} GW2C_AckPlayerCountByProvince
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckPlayerCountByProvince.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GW2C_AckPlayerCountByProvince();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.province = reader.uint32();
                    break;
                case 2:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.msg.CommonKeyValue.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GW2C_AckPlayerCountByProvince message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {msg.GW2C_AckPlayerCountByProvince} GW2C_AckPlayerCountByProvince
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GW2C_AckPlayerCountByProvince.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GW2C_AckPlayerCountByProvince message.
         * @function verify
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GW2C_AckPlayerCountByProvince.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.province != null && message.hasOwnProperty("province"))
                if (!$util.isInteger(message.province))
                    return "province: integer expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (var i = 0; i < message.data.length; ++i) {
                    var error = $root.msg.CommonKeyValue.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GW2C_AckPlayerCountByProvince message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {msg.GW2C_AckPlayerCountByProvince} GW2C_AckPlayerCountByProvince
         */
        GW2C_AckPlayerCountByProvince.fromObject = function fromObject(object) {
            if (object instanceof $root.msg.GW2C_AckPlayerCountByProvince)
                return object;
            var message = new $root.msg.GW2C_AckPlayerCountByProvince();
            if (object.province != null)
                message.province = object.province >>> 0;
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".msg.GW2C_AckPlayerCountByProvince.data: array expected");
                message.data = [];
                for (var i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".msg.GW2C_AckPlayerCountByProvince.data: object expected");
                    message.data[i] = $root.msg.CommonKeyValue.fromObject(object.data[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GW2C_AckPlayerCountByProvince message. Also converts values to other types if specified.
         * @function toObject
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @static
         * @param {msg.GW2C_AckPlayerCountByProvince} message GW2C_AckPlayerCountByProvince
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GW2C_AckPlayerCountByProvince.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (options.defaults)
                object.province = 0;
            if (message.province != null && message.hasOwnProperty("province"))
                object.province = message.province;
            if (message.data && message.data.length) {
                object.data = [];
                for (var j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.msg.CommonKeyValue.toObject(message.data[j], options);
            }
            return object;
        };

        /**
         * Converts this GW2C_AckPlayerCountByProvince to JSON.
         * @function toJSON
         * @memberof msg.GW2C_AckPlayerCountByProvince
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GW2C_AckPlayerCountByProvince.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GW2C_AckPlayerCountByProvince;
    })();

    return msg;
})();

$root.table = (function() {

    /**
     * Namespace table.
     * @exports table
     * @namespace
     */
    var table = {};

    table.TBallBase = (function() {

        /**
         * Properties of a TBallBase.
         * @memberof table
         * @interface ITBallBase
         * @property {Array.<table.ITBallDefine>|null} [TBall] TBallBase TBall
         */

        /**
         * Constructs a new TBallBase.
         * @memberof table
         * @classdesc Represents a TBallBase.
         * @implements ITBallBase
         * @constructor
         * @param {table.ITBallBase=} [properties] Properties to set
         */
        function TBallBase(properties) {
            this.TBall = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBallBase TBall.
         * @member {Array.<table.ITBallDefine>} TBall
         * @memberof table.TBallBase
         * @instance
         */
        TBallBase.prototype.TBall = $util.emptyArray;

        /**
         * Creates a new TBallBase instance using the specified properties.
         * @function create
         * @memberof table.TBallBase
         * @static
         * @param {table.ITBallBase=} [properties] Properties to set
         * @returns {table.TBallBase} TBallBase instance
         */
        TBallBase.create = function create(properties) {
            return new TBallBase(properties);
        };

        /**
         * Encodes the specified TBallBase message. Does not implicitly {@link table.TBallBase.verify|verify} messages.
         * @function encode
         * @memberof table.TBallBase
         * @static
         * @param {table.ITBallBase} message TBallBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBall != null && message.TBall.length)
                for (var i = 0; i < message.TBall.length; ++i)
                    $root.table.TBallDefine.encode(message.TBall[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TBallBase message, length delimited. Does not implicitly {@link table.TBallBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBallBase
         * @static
         * @param {table.ITBallBase} message TBallBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBallBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBallBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBallBase} TBallBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBallBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBall && message.TBall.length))
                        message.TBall = [];
                    message.TBall.push($root.table.TBallDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBallBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBallBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBallBase} TBallBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBallBase message.
         * @function verify
         * @memberof table.TBallBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBallBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBall != null && message.hasOwnProperty("TBall")) {
                if (!Array.isArray(message.TBall))
                    return "TBall: array expected";
                for (var i = 0; i < message.TBall.length; ++i) {
                    var error = $root.table.TBallDefine.verify(message.TBall[i]);
                    if (error)
                        return "TBall." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TBallBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBallBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBallBase} TBallBase
         */
        TBallBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBallBase)
                return object;
            var message = new $root.table.TBallBase();
            if (object.TBall) {
                if (!Array.isArray(object.TBall))
                    throw TypeError(".table.TBallBase.TBall: array expected");
                message.TBall = [];
                for (var i = 0; i < object.TBall.length; ++i) {
                    if (typeof object.TBall[i] !== "object")
                        throw TypeError(".table.TBallBase.TBall: object expected");
                    message.TBall[i] = $root.table.TBallDefine.fromObject(object.TBall[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TBallBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBallBase
         * @static
         * @param {table.TBallBase} message TBallBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBallBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBall = [];
            if (message.TBall && message.TBall.length) {
                object.TBall = [];
                for (var j = 0; j < message.TBall.length; ++j)
                    object.TBall[j] = $root.table.TBallDefine.toObject(message.TBall[j], options);
            }
            return object;
        };

        /**
         * Converts this TBallBase to JSON.
         * @function toJSON
         * @memberof table.TBallBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBallBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBallBase;
    })();

    table.TBallDefine = (function() {

        /**
         * Properties of a TBallDefine.
         * @memberof table
         * @interface ITBallDefine
         * @property {number|null} [Id] TBallDefine Id
         * @property {number|null} [Atk] TBallDefine Atk
         * @property {number|null} [Price] TBallDefine Price
         */

        /**
         * Constructs a new TBallDefine.
         * @memberof table
         * @classdesc Represents a TBallDefine.
         * @implements ITBallDefine
         * @constructor
         * @param {table.ITBallDefine=} [properties] Properties to set
         */
        function TBallDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBallDefine Id.
         * @member {number} Id
         * @memberof table.TBallDefine
         * @instance
         */
        TBallDefine.prototype.Id = 0;

        /**
         * TBallDefine Atk.
         * @member {number} Atk
         * @memberof table.TBallDefine
         * @instance
         */
        TBallDefine.prototype.Atk = 0;

        /**
         * TBallDefine Price.
         * @member {number} Price
         * @memberof table.TBallDefine
         * @instance
         */
        TBallDefine.prototype.Price = 0;

        /**
         * Creates a new TBallDefine instance using the specified properties.
         * @function create
         * @memberof table.TBallDefine
         * @static
         * @param {table.ITBallDefine=} [properties] Properties to set
         * @returns {table.TBallDefine} TBallDefine instance
         */
        TBallDefine.create = function create(properties) {
            return new TBallDefine(properties);
        };

        /**
         * Encodes the specified TBallDefine message. Does not implicitly {@link table.TBallDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBallDefine
         * @static
         * @param {table.ITBallDefine} message TBallDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Atk != null && message.hasOwnProperty("Atk"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Atk);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Price);
            return writer;
        };

        /**
         * Encodes the specified TBallDefine message, length delimited. Does not implicitly {@link table.TBallDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBallDefine
         * @static
         * @param {table.ITBallDefine} message TBallDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBallDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBallDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBallDefine} TBallDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBallDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Atk = reader.int32();
                    break;
                case 3:
                    message.Price = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBallDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBallDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBallDefine} TBallDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBallDefine message.
         * @function verify
         * @memberof table.TBallDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBallDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Atk != null && message.hasOwnProperty("Atk"))
                if (!$util.isInteger(message.Atk))
                    return "Atk: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            return null;
        };

        /**
         * Creates a TBallDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBallDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBallDefine} TBallDefine
         */
        TBallDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBallDefine)
                return object;
            var message = new $root.table.TBallDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Atk != null)
                message.Atk = object.Atk | 0;
            if (object.Price != null)
                message.Price = object.Price | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBallDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBallDefine
         * @static
         * @param {table.TBallDefine} message TBallDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBallDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Atk = 0;
                object.Price = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Atk != null && message.hasOwnProperty("Atk"))
                object.Atk = message.Atk;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            return object;
        };

        /**
         * Converts this TBallDefine to JSON.
         * @function toJSON
         * @memberof table.TBallDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBallDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBallDefine;
    })();

    table.TBallGiftbase = (function() {

        /**
         * Properties of a TBallGiftbase.
         * @memberof table
         * @interface ITBallGiftbase
         * @property {Array.<table.ITBallGiftDefine>|null} [TBallGift] TBallGiftbase TBallGift
         */

        /**
         * Constructs a new TBallGiftbase.
         * @memberof table
         * @classdesc Represents a TBallGiftbase.
         * @implements ITBallGiftbase
         * @constructor
         * @param {table.ITBallGiftbase=} [properties] Properties to set
         */
        function TBallGiftbase(properties) {
            this.TBallGift = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBallGiftbase TBallGift.
         * @member {Array.<table.ITBallGiftDefine>} TBallGift
         * @memberof table.TBallGiftbase
         * @instance
         */
        TBallGiftbase.prototype.TBallGift = $util.emptyArray;

        /**
         * Creates a new TBallGiftbase instance using the specified properties.
         * @function create
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.ITBallGiftbase=} [properties] Properties to set
         * @returns {table.TBallGiftbase} TBallGiftbase instance
         */
        TBallGiftbase.create = function create(properties) {
            return new TBallGiftbase(properties);
        };

        /**
         * Encodes the specified TBallGiftbase message. Does not implicitly {@link table.TBallGiftbase.verify|verify} messages.
         * @function encode
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.ITBallGiftbase} message TBallGiftbase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftbase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBallGift != null && message.TBallGift.length)
                for (var i = 0; i < message.TBallGift.length; ++i)
                    $root.table.TBallGiftDefine.encode(message.TBallGift[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TBallGiftbase message, length delimited. Does not implicitly {@link table.TBallGiftbase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.ITBallGiftbase} message TBallGiftbase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftbase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBallGiftbase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBallGiftbase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBallGiftbase} TBallGiftbase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftbase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBallGiftbase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBallGift && message.TBallGift.length))
                        message.TBallGift = [];
                    message.TBallGift.push($root.table.TBallGiftDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBallGiftbase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBallGiftbase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBallGiftbase} TBallGiftbase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftbase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBallGiftbase message.
         * @function verify
         * @memberof table.TBallGiftbase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBallGiftbase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBallGift != null && message.hasOwnProperty("TBallGift")) {
                if (!Array.isArray(message.TBallGift))
                    return "TBallGift: array expected";
                for (var i = 0; i < message.TBallGift.length; ++i) {
                    var error = $root.table.TBallGiftDefine.verify(message.TBallGift[i]);
                    if (error)
                        return "TBallGift." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TBallGiftbase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBallGiftbase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBallGiftbase} TBallGiftbase
         */
        TBallGiftbase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBallGiftbase)
                return object;
            var message = new $root.table.TBallGiftbase();
            if (object.TBallGift) {
                if (!Array.isArray(object.TBallGift))
                    throw TypeError(".table.TBallGiftbase.TBallGift: array expected");
                message.TBallGift = [];
                for (var i = 0; i < object.TBallGift.length; ++i) {
                    if (typeof object.TBallGift[i] !== "object")
                        throw TypeError(".table.TBallGiftbase.TBallGift: object expected");
                    message.TBallGift[i] = $root.table.TBallGiftDefine.fromObject(object.TBallGift[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TBallGiftbase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBallGiftbase
         * @static
         * @param {table.TBallGiftbase} message TBallGiftbase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBallGiftbase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBallGift = [];
            if (message.TBallGift && message.TBallGift.length) {
                object.TBallGift = [];
                for (var j = 0; j < message.TBallGift.length; ++j)
                    object.TBallGift[j] = $root.table.TBallGiftDefine.toObject(message.TBallGift[j], options);
            }
            return object;
        };

        /**
         * Converts this TBallGiftbase to JSON.
         * @function toJSON
         * @memberof table.TBallGiftbase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBallGiftbase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBallGiftbase;
    })();

    table.TBallGiftDefine = (function() {

        /**
         * Properties of a TBallGiftDefine.
         * @memberof table
         * @interface ITBallGiftDefine
         * @property {number|null} [Id] TBallGiftDefine Id
         * @property {string|null} [Name] TBallGiftDefine Name
         * @property {number|null} [Num] TBallGiftDefine Num
         * @property {number|null} [ItemId] TBallGiftDefine ItemId
         * @property {string|null} [Path] TBallGiftDefine Path
         * @property {number|null} [Pro] TBallGiftDefine Pro
         * @property {number|null} [PushBag] TBallGiftDefine PushBag
         * @property {number|null} [Cost] TBallGiftDefine Cost
         */

        /**
         * Constructs a new TBallGiftDefine.
         * @memberof table
         * @classdesc Represents a TBallGiftDefine.
         * @implements ITBallGiftDefine
         * @constructor
         * @param {table.ITBallGiftDefine=} [properties] Properties to set
         */
        function TBallGiftDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBallGiftDefine Id.
         * @member {number} Id
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Id = 0;

        /**
         * TBallGiftDefine Name.
         * @member {string} Name
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Name = "";

        /**
         * TBallGiftDefine Num.
         * @member {number} Num
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Num = 0;

        /**
         * TBallGiftDefine ItemId.
         * @member {number} ItemId
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.ItemId = 0;

        /**
         * TBallGiftDefine Path.
         * @member {string} Path
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Path = "";

        /**
         * TBallGiftDefine Pro.
         * @member {number} Pro
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Pro = 0;

        /**
         * TBallGiftDefine PushBag.
         * @member {number} PushBag
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.PushBag = 0;

        /**
         * TBallGiftDefine Cost.
         * @member {number} Cost
         * @memberof table.TBallGiftDefine
         * @instance
         */
        TBallGiftDefine.prototype.Cost = 0;

        /**
         * Creates a new TBallGiftDefine instance using the specified properties.
         * @function create
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.ITBallGiftDefine=} [properties] Properties to set
         * @returns {table.TBallGiftDefine} TBallGiftDefine instance
         */
        TBallGiftDefine.create = function create(properties) {
            return new TBallGiftDefine(properties);
        };

        /**
         * Encodes the specified TBallGiftDefine message. Does not implicitly {@link table.TBallGiftDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.ITBallGiftDefine} message TBallGiftDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Num);
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ItemId);
            if (message.Path != null && message.hasOwnProperty("Path"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.Path);
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Pro);
            if (message.PushBag != null && message.hasOwnProperty("PushBag"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.PushBag);
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Cost);
            return writer;
        };

        /**
         * Encodes the specified TBallGiftDefine message, length delimited. Does not implicitly {@link table.TBallGiftDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.ITBallGiftDefine} message TBallGiftDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBallGiftDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBallGiftDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBallGiftDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBallGiftDefine} TBallGiftDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBallGiftDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                case 3:
                    message.Num = reader.int32();
                    break;
                case 4:
                    message.ItemId = reader.int32();
                    break;
                case 5:
                    message.Path = reader.string();
                    break;
                case 6:
                    message.Pro = reader.int32();
                    break;
                case 7:
                    message.PushBag = reader.int32();
                    break;
                case 8:
                    message.Cost = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBallGiftDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBallGiftDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBallGiftDefine} TBallGiftDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBallGiftDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBallGiftDefine message.
         * @function verify
         * @memberof table.TBallGiftDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBallGiftDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                if (!$util.isInteger(message.ItemId))
                    return "ItemId: integer expected";
            if (message.Path != null && message.hasOwnProperty("Path"))
                if (!$util.isString(message.Path))
                    return "Path: string expected";
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                if (!$util.isInteger(message.Pro))
                    return "Pro: integer expected";
            if (message.PushBag != null && message.hasOwnProperty("PushBag"))
                if (!$util.isInteger(message.PushBag))
                    return "PushBag: integer expected";
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                if (!$util.isInteger(message.Cost))
                    return "Cost: integer expected";
            return null;
        };

        /**
         * Creates a TBallGiftDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBallGiftDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBallGiftDefine} TBallGiftDefine
         */
        TBallGiftDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBallGiftDefine)
                return object;
            var message = new $root.table.TBallGiftDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Num != null)
                message.Num = object.Num | 0;
            if (object.ItemId != null)
                message.ItemId = object.ItemId | 0;
            if (object.Path != null)
                message.Path = String(object.Path);
            if (object.Pro != null)
                message.Pro = object.Pro | 0;
            if (object.PushBag != null)
                message.PushBag = object.PushBag | 0;
            if (object.Cost != null)
                message.Cost = object.Cost | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBallGiftDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBallGiftDefine
         * @static
         * @param {table.TBallGiftDefine} message TBallGiftDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBallGiftDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
                object.Num = 0;
                object.ItemId = 0;
                object.Path = "";
                object.Pro = 0;
                object.PushBag = 0;
                object.Cost = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                object.ItemId = message.ItemId;
            if (message.Path != null && message.hasOwnProperty("Path"))
                object.Path = message.Path;
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                object.Pro = message.Pro;
            if (message.PushBag != null && message.hasOwnProperty("PushBag"))
                object.PushBag = message.PushBag;
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                object.Cost = message.Cost;
            return object;
        };

        /**
         * Converts this TBallGiftDefine to JSON.
         * @function toJSON
         * @memberof table.TBallGiftDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBallGiftDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBallGiftDefine;
    })();

    table.TBirckBase = (function() {

        /**
         * Properties of a TBirckBase.
         * @memberof table
         * @interface ITBirckBase
         * @property {Array.<table.ITBirckDefine>|null} [TBirck] TBirckBase TBirck
         */

        /**
         * Constructs a new TBirckBase.
         * @memberof table
         * @classdesc Represents a TBirckBase.
         * @implements ITBirckBase
         * @constructor
         * @param {table.ITBirckBase=} [properties] Properties to set
         */
        function TBirckBase(properties) {
            this.TBirck = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBirckBase TBirck.
         * @member {Array.<table.ITBirckDefine>} TBirck
         * @memberof table.TBirckBase
         * @instance
         */
        TBirckBase.prototype.TBirck = $util.emptyArray;

        /**
         * Creates a new TBirckBase instance using the specified properties.
         * @function create
         * @memberof table.TBirckBase
         * @static
         * @param {table.ITBirckBase=} [properties] Properties to set
         * @returns {table.TBirckBase} TBirckBase instance
         */
        TBirckBase.create = function create(properties) {
            return new TBirckBase(properties);
        };

        /**
         * Encodes the specified TBirckBase message. Does not implicitly {@link table.TBirckBase.verify|verify} messages.
         * @function encode
         * @memberof table.TBirckBase
         * @static
         * @param {table.ITBirckBase} message TBirckBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBirck != null && message.TBirck.length)
                for (var i = 0; i < message.TBirck.length; ++i)
                    $root.table.TBirckDefine.encode(message.TBirck[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TBirckBase message, length delimited. Does not implicitly {@link table.TBirckBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBirckBase
         * @static
         * @param {table.ITBirckBase} message TBirckBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBirckBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBirckBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBirckBase} TBirckBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBirckBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBirck && message.TBirck.length))
                        message.TBirck = [];
                    message.TBirck.push($root.table.TBirckDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBirckBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBirckBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBirckBase} TBirckBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBirckBase message.
         * @function verify
         * @memberof table.TBirckBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBirckBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBirck != null && message.hasOwnProperty("TBirck")) {
                if (!Array.isArray(message.TBirck))
                    return "TBirck: array expected";
                for (var i = 0; i < message.TBirck.length; ++i) {
                    var error = $root.table.TBirckDefine.verify(message.TBirck[i]);
                    if (error)
                        return "TBirck." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TBirckBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBirckBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBirckBase} TBirckBase
         */
        TBirckBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBirckBase)
                return object;
            var message = new $root.table.TBirckBase();
            if (object.TBirck) {
                if (!Array.isArray(object.TBirck))
                    throw TypeError(".table.TBirckBase.TBirck: array expected");
                message.TBirck = [];
                for (var i = 0; i < object.TBirck.length; ++i) {
                    if (typeof object.TBirck[i] !== "object")
                        throw TypeError(".table.TBirckBase.TBirck: object expected");
                    message.TBirck[i] = $root.table.TBirckDefine.fromObject(object.TBirck[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TBirckBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBirckBase
         * @static
         * @param {table.TBirckBase} message TBirckBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBirckBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBirck = [];
            if (message.TBirck && message.TBirck.length) {
                object.TBirck = [];
                for (var j = 0; j < message.TBirck.length; ++j)
                    object.TBirck[j] = $root.table.TBirckDefine.toObject(message.TBirck[j], options);
            }
            return object;
        };

        /**
         * Converts this TBirckBase to JSON.
         * @function toJSON
         * @memberof table.TBirckBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBirckBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBirckBase;
    })();

    table.TBirckDefine = (function() {

        /**
         * Properties of a TBirckDefine.
         * @memberof table
         * @interface ITBirckDefine
         * @property {number|null} [Id] TBirckDefine Id
         * @property {number|null} [High] TBirckDefine High
         * @property {number|null} [Wide] TBirckDefine Wide
         */

        /**
         * Constructs a new TBirckDefine.
         * @memberof table
         * @classdesc Represents a TBirckDefine.
         * @implements ITBirckDefine
         * @constructor
         * @param {table.ITBirckDefine=} [properties] Properties to set
         */
        function TBirckDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBirckDefine Id.
         * @member {number} Id
         * @memberof table.TBirckDefine
         * @instance
         */
        TBirckDefine.prototype.Id = 0;

        /**
         * TBirckDefine High.
         * @member {number} High
         * @memberof table.TBirckDefine
         * @instance
         */
        TBirckDefine.prototype.High = 0;

        /**
         * TBirckDefine Wide.
         * @member {number} Wide
         * @memberof table.TBirckDefine
         * @instance
         */
        TBirckDefine.prototype.Wide = 0;

        /**
         * Creates a new TBirckDefine instance using the specified properties.
         * @function create
         * @memberof table.TBirckDefine
         * @static
         * @param {table.ITBirckDefine=} [properties] Properties to set
         * @returns {table.TBirckDefine} TBirckDefine instance
         */
        TBirckDefine.create = function create(properties) {
            return new TBirckDefine(properties);
        };

        /**
         * Encodes the specified TBirckDefine message. Does not implicitly {@link table.TBirckDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBirckDefine
         * @static
         * @param {table.ITBirckDefine} message TBirckDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.High != null && message.hasOwnProperty("High"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.High);
            if (message.Wide != null && message.hasOwnProperty("Wide"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Wide);
            return writer;
        };

        /**
         * Encodes the specified TBirckDefine message, length delimited. Does not implicitly {@link table.TBirckDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBirckDefine
         * @static
         * @param {table.ITBirckDefine} message TBirckDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBirckDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBirckDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBirckDefine} TBirckDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBirckDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.High = reader.int32();
                    break;
                case 3:
                    message.Wide = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBirckDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBirckDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBirckDefine} TBirckDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBirckDefine message.
         * @function verify
         * @memberof table.TBirckDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBirckDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.High != null && message.hasOwnProperty("High"))
                if (!$util.isInteger(message.High))
                    return "High: integer expected";
            if (message.Wide != null && message.hasOwnProperty("Wide"))
                if (!$util.isInteger(message.Wide))
                    return "Wide: integer expected";
            return null;
        };

        /**
         * Creates a TBirckDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBirckDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBirckDefine} TBirckDefine
         */
        TBirckDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBirckDefine)
                return object;
            var message = new $root.table.TBirckDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.High != null)
                message.High = object.High | 0;
            if (object.Wide != null)
                message.Wide = object.Wide | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBirckDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBirckDefine
         * @static
         * @param {table.TBirckDefine} message TBirckDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBirckDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.High = 0;
                object.Wide = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.High != null && message.hasOwnProperty("High"))
                object.High = message.High;
            if (message.Wide != null && message.hasOwnProperty("Wide"))
                object.Wide = message.Wide;
            return object;
        };

        /**
         * Converts this TBirckDefine to JSON.
         * @function toJSON
         * @memberof table.TBirckDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBirckDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBirckDefine;
    })();

    table.TbirckInfobase = (function() {

        /**
         * Properties of a TbirckInfobase.
         * @memberof table
         * @interface ITbirckInfobase
         * @property {Array.<table.ITBirckInfoDefine>|null} [TBirckInfo] TbirckInfobase TBirckInfo
         */

        /**
         * Constructs a new TbirckInfobase.
         * @memberof table
         * @classdesc Represents a TbirckInfobase.
         * @implements ITbirckInfobase
         * @constructor
         * @param {table.ITbirckInfobase=} [properties] Properties to set
         */
        function TbirckInfobase(properties) {
            this.TBirckInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TbirckInfobase TBirckInfo.
         * @member {Array.<table.ITBirckInfoDefine>} TBirckInfo
         * @memberof table.TbirckInfobase
         * @instance
         */
        TbirckInfobase.prototype.TBirckInfo = $util.emptyArray;

        /**
         * Creates a new TbirckInfobase instance using the specified properties.
         * @function create
         * @memberof table.TbirckInfobase
         * @static
         * @param {table.ITbirckInfobase=} [properties] Properties to set
         * @returns {table.TbirckInfobase} TbirckInfobase instance
         */
        TbirckInfobase.create = function create(properties) {
            return new TbirckInfobase(properties);
        };

        /**
         * Encodes the specified TbirckInfobase message. Does not implicitly {@link table.TbirckInfobase.verify|verify} messages.
         * @function encode
         * @memberof table.TbirckInfobase
         * @static
         * @param {table.ITbirckInfobase} message TbirckInfobase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TbirckInfobase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBirckInfo != null && message.TBirckInfo.length)
                for (var i = 0; i < message.TBirckInfo.length; ++i)
                    $root.table.TBirckInfoDefine.encode(message.TBirckInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TbirckInfobase message, length delimited. Does not implicitly {@link table.TbirckInfobase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TbirckInfobase
         * @static
         * @param {table.ITbirckInfobase} message TbirckInfobase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TbirckInfobase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TbirckInfobase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TbirckInfobase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TbirckInfobase} TbirckInfobase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TbirckInfobase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TbirckInfobase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBirckInfo && message.TBirckInfo.length))
                        message.TBirckInfo = [];
                    message.TBirckInfo.push($root.table.TBirckInfoDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TbirckInfobase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TbirckInfobase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TbirckInfobase} TbirckInfobase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TbirckInfobase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TbirckInfobase message.
         * @function verify
         * @memberof table.TbirckInfobase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TbirckInfobase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBirckInfo != null && message.hasOwnProperty("TBirckInfo")) {
                if (!Array.isArray(message.TBirckInfo))
                    return "TBirckInfo: array expected";
                for (var i = 0; i < message.TBirckInfo.length; ++i) {
                    var error = $root.table.TBirckInfoDefine.verify(message.TBirckInfo[i]);
                    if (error)
                        return "TBirckInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TbirckInfobase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TbirckInfobase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TbirckInfobase} TbirckInfobase
         */
        TbirckInfobase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TbirckInfobase)
                return object;
            var message = new $root.table.TbirckInfobase();
            if (object.TBirckInfo) {
                if (!Array.isArray(object.TBirckInfo))
                    throw TypeError(".table.TbirckInfobase.TBirckInfo: array expected");
                message.TBirckInfo = [];
                for (var i = 0; i < object.TBirckInfo.length; ++i) {
                    if (typeof object.TBirckInfo[i] !== "object")
                        throw TypeError(".table.TbirckInfobase.TBirckInfo: object expected");
                    message.TBirckInfo[i] = $root.table.TBirckInfoDefine.fromObject(object.TBirckInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TbirckInfobase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TbirckInfobase
         * @static
         * @param {table.TbirckInfobase} message TbirckInfobase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TbirckInfobase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBirckInfo = [];
            if (message.TBirckInfo && message.TBirckInfo.length) {
                object.TBirckInfo = [];
                for (var j = 0; j < message.TBirckInfo.length; ++j)
                    object.TBirckInfo[j] = $root.table.TBirckInfoDefine.toObject(message.TBirckInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this TbirckInfobase to JSON.
         * @function toJSON
         * @memberof table.TbirckInfobase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TbirckInfobase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TbirckInfobase;
    })();

    table.TBirckInfoDefine = (function() {

        /**
         * Properties of a TBirckInfoDefine.
         * @memberof table
         * @interface ITBirckInfoDefine
         * @property {number|null} [Id] TBirckInfoDefine Id
         * @property {number|null} [Brickid] TBirckInfoDefine Brickid
         * @property {string|null} [Info] TBirckInfoDefine Info
         * @property {number|null} [Pro] TBirckInfoDefine Pro
         * @property {number|null} [Bullet] TBirckInfoDefine Bullet
         * @property {number|null} [Time] TBirckInfoDefine Time
         * @property {number|null} [kind] TBirckInfoDefine kind
         * @property {number|null} [Type] TBirckInfoDefine Type
         */

        /**
         * Constructs a new TBirckInfoDefine.
         * @memberof table
         * @classdesc Represents a TBirckInfoDefine.
         * @implements ITBirckInfoDefine
         * @constructor
         * @param {table.ITBirckInfoDefine=} [properties] Properties to set
         */
        function TBirckInfoDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBirckInfoDefine Id.
         * @member {number} Id
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Id = 0;

        /**
         * TBirckInfoDefine Brickid.
         * @member {number} Brickid
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Brickid = 0;

        /**
         * TBirckInfoDefine Info.
         * @member {string} Info
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Info = "";

        /**
         * TBirckInfoDefine Pro.
         * @member {number} Pro
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Pro = 0;

        /**
         * TBirckInfoDefine Bullet.
         * @member {number} Bullet
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Bullet = 0;

        /**
         * TBirckInfoDefine Time.
         * @member {number} Time
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Time = 0;

        /**
         * TBirckInfoDefine kind.
         * @member {number} kind
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.kind = 0;

        /**
         * TBirckInfoDefine Type.
         * @member {number} Type
         * @memberof table.TBirckInfoDefine
         * @instance
         */
        TBirckInfoDefine.prototype.Type = 0;

        /**
         * Creates a new TBirckInfoDefine instance using the specified properties.
         * @function create
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {table.ITBirckInfoDefine=} [properties] Properties to set
         * @returns {table.TBirckInfoDefine} TBirckInfoDefine instance
         */
        TBirckInfoDefine.create = function create(properties) {
            return new TBirckInfoDefine(properties);
        };

        /**
         * Encodes the specified TBirckInfoDefine message. Does not implicitly {@link table.TBirckInfoDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {table.ITBirckInfoDefine} message TBirckInfoDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckInfoDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Brickid != null && message.hasOwnProperty("Brickid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Brickid);
            if (message.Info != null && message.hasOwnProperty("Info"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Info);
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Pro);
            if (message.Bullet != null && message.hasOwnProperty("Bullet"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Bullet);
            if (message.Time != null && message.hasOwnProperty("Time"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Time);
            if (message.kind != null && message.hasOwnProperty("kind"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.kind);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Type);
            return writer;
        };

        /**
         * Encodes the specified TBirckInfoDefine message, length delimited. Does not implicitly {@link table.TBirckInfoDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {table.ITBirckInfoDefine} message TBirckInfoDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckInfoDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBirckInfoDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBirckInfoDefine} TBirckInfoDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckInfoDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBirckInfoDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Brickid = reader.int32();
                    break;
                case 3:
                    message.Info = reader.string();
                    break;
                case 4:
                    message.Pro = reader.int32();
                    break;
                case 5:
                    message.Bullet = reader.int32();
                    break;
                case 6:
                    message.Time = reader.int32();
                    break;
                case 7:
                    message.kind = reader.int32();
                    break;
                case 8:
                    message.Type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBirckInfoDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBirckInfoDefine} TBirckInfoDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckInfoDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBirckInfoDefine message.
         * @function verify
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBirckInfoDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Brickid != null && message.hasOwnProperty("Brickid"))
                if (!$util.isInteger(message.Brickid))
                    return "Brickid: integer expected";
            if (message.Info != null && message.hasOwnProperty("Info"))
                if (!$util.isString(message.Info))
                    return "Info: string expected";
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                if (!$util.isInteger(message.Pro))
                    return "Pro: integer expected";
            if (message.Bullet != null && message.hasOwnProperty("Bullet"))
                if (!$util.isInteger(message.Bullet))
                    return "Bullet: integer expected";
            if (message.Time != null && message.hasOwnProperty("Time"))
                if (!$util.isInteger(message.Time))
                    return "Time: integer expected";
            if (message.kind != null && message.hasOwnProperty("kind"))
                if (!$util.isInteger(message.kind))
                    return "kind: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            return null;
        };

        /**
         * Creates a TBirckInfoDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBirckInfoDefine} TBirckInfoDefine
         */
        TBirckInfoDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBirckInfoDefine)
                return object;
            var message = new $root.table.TBirckInfoDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Brickid != null)
                message.Brickid = object.Brickid | 0;
            if (object.Info != null)
                message.Info = String(object.Info);
            if (object.Pro != null)
                message.Pro = object.Pro | 0;
            if (object.Bullet != null)
                message.Bullet = object.Bullet | 0;
            if (object.Time != null)
                message.Time = object.Time | 0;
            if (object.kind != null)
                message.kind = object.kind | 0;
            if (object.Type != null)
                message.Type = object.Type | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBirckInfoDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBirckInfoDefine
         * @static
         * @param {table.TBirckInfoDefine} message TBirckInfoDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBirckInfoDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Brickid = 0;
                object.Info = "";
                object.Pro = 0;
                object.Bullet = 0;
                object.Time = 0;
                object.kind = 0;
                object.Type = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Brickid != null && message.hasOwnProperty("Brickid"))
                object.Brickid = message.Brickid;
            if (message.Info != null && message.hasOwnProperty("Info"))
                object.Info = message.Info;
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                object.Pro = message.Pro;
            if (message.Bullet != null && message.hasOwnProperty("Bullet"))
                object.Bullet = message.Bullet;
            if (message.Time != null && message.hasOwnProperty("Time"))
                object.Time = message.Time;
            if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            return object;
        };

        /**
         * Converts this TBirckInfoDefine to JSON.
         * @function toJSON
         * @memberof table.TBirckInfoDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBirckInfoDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBirckInfoDefine;
    })();

    table.TBirckItembase = (function() {

        /**
         * Properties of a TBirckItembase.
         * @memberof table
         * @interface ITBirckItembase
         * @property {Array.<table.ITBirckItemDefine>|null} [TBirckItem] TBirckItembase TBirckItem
         */

        /**
         * Constructs a new TBirckItembase.
         * @memberof table
         * @classdesc Represents a TBirckItembase.
         * @implements ITBirckItembase
         * @constructor
         * @param {table.ITBirckItembase=} [properties] Properties to set
         */
        function TBirckItembase(properties) {
            this.TBirckItem = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBirckItembase TBirckItem.
         * @member {Array.<table.ITBirckItemDefine>} TBirckItem
         * @memberof table.TBirckItembase
         * @instance
         */
        TBirckItembase.prototype.TBirckItem = $util.emptyArray;

        /**
         * Creates a new TBirckItembase instance using the specified properties.
         * @function create
         * @memberof table.TBirckItembase
         * @static
         * @param {table.ITBirckItembase=} [properties] Properties to set
         * @returns {table.TBirckItembase} TBirckItembase instance
         */
        TBirckItembase.create = function create(properties) {
            return new TBirckItembase(properties);
        };

        /**
         * Encodes the specified TBirckItembase message. Does not implicitly {@link table.TBirckItembase.verify|verify} messages.
         * @function encode
         * @memberof table.TBirckItembase
         * @static
         * @param {table.ITBirckItembase} message TBirckItembase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckItembase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBirckItem != null && message.TBirckItem.length)
                for (var i = 0; i < message.TBirckItem.length; ++i)
                    $root.table.TBirckItemDefine.encode(message.TBirckItem[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TBirckItembase message, length delimited. Does not implicitly {@link table.TBirckItembase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBirckItembase
         * @static
         * @param {table.ITBirckItembase} message TBirckItembase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckItembase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBirckItembase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBirckItembase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBirckItembase} TBirckItembase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckItembase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBirckItembase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBirckItem && message.TBirckItem.length))
                        message.TBirckItem = [];
                    message.TBirckItem.push($root.table.TBirckItemDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBirckItembase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBirckItembase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBirckItembase} TBirckItembase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckItembase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBirckItembase message.
         * @function verify
         * @memberof table.TBirckItembase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBirckItembase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBirckItem != null && message.hasOwnProperty("TBirckItem")) {
                if (!Array.isArray(message.TBirckItem))
                    return "TBirckItem: array expected";
                for (var i = 0; i < message.TBirckItem.length; ++i) {
                    var error = $root.table.TBirckItemDefine.verify(message.TBirckItem[i]);
                    if (error)
                        return "TBirckItem." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TBirckItembase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBirckItembase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBirckItembase} TBirckItembase
         */
        TBirckItembase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBirckItembase)
                return object;
            var message = new $root.table.TBirckItembase();
            if (object.TBirckItem) {
                if (!Array.isArray(object.TBirckItem))
                    throw TypeError(".table.TBirckItembase.TBirckItem: array expected");
                message.TBirckItem = [];
                for (var i = 0; i < object.TBirckItem.length; ++i) {
                    if (typeof object.TBirckItem[i] !== "object")
                        throw TypeError(".table.TBirckItembase.TBirckItem: object expected");
                    message.TBirckItem[i] = $root.table.TBirckItemDefine.fromObject(object.TBirckItem[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TBirckItembase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBirckItembase
         * @static
         * @param {table.TBirckItembase} message TBirckItembase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBirckItembase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBirckItem = [];
            if (message.TBirckItem && message.TBirckItem.length) {
                object.TBirckItem = [];
                for (var j = 0; j < message.TBirckItem.length; ++j)
                    object.TBirckItem[j] = $root.table.TBirckItemDefine.toObject(message.TBirckItem[j], options);
            }
            return object;
        };

        /**
         * Converts this TBirckItembase to JSON.
         * @function toJSON
         * @memberof table.TBirckItembase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBirckItembase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBirckItembase;
    })();

    table.TBirckItemDefine = (function() {

        /**
         * Properties of a TBirckItemDefine.
         * @memberof table
         * @interface ITBirckItemDefine
         * @property {number|null} [Id] TBirckItemDefine Id
         * @property {string|null} [Name] TBirckItemDefine Name
         * @property {number|null} [Num] TBirckItemDefine Num
         * @property {number|null} [Pro] TBirckItemDefine Pro
         */

        /**
         * Constructs a new TBirckItemDefine.
         * @memberof table
         * @classdesc Represents a TBirckItemDefine.
         * @implements ITBirckItemDefine
         * @constructor
         * @param {table.ITBirckItemDefine=} [properties] Properties to set
         */
        function TBirckItemDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBirckItemDefine Id.
         * @member {number} Id
         * @memberof table.TBirckItemDefine
         * @instance
         */
        TBirckItemDefine.prototype.Id = 0;

        /**
         * TBirckItemDefine Name.
         * @member {string} Name
         * @memberof table.TBirckItemDefine
         * @instance
         */
        TBirckItemDefine.prototype.Name = "";

        /**
         * TBirckItemDefine Num.
         * @member {number} Num
         * @memberof table.TBirckItemDefine
         * @instance
         */
        TBirckItemDefine.prototype.Num = 0;

        /**
         * TBirckItemDefine Pro.
         * @member {number} Pro
         * @memberof table.TBirckItemDefine
         * @instance
         */
        TBirckItemDefine.prototype.Pro = 0;

        /**
         * Creates a new TBirckItemDefine instance using the specified properties.
         * @function create
         * @memberof table.TBirckItemDefine
         * @static
         * @param {table.ITBirckItemDefine=} [properties] Properties to set
         * @returns {table.TBirckItemDefine} TBirckItemDefine instance
         */
        TBirckItemDefine.create = function create(properties) {
            return new TBirckItemDefine(properties);
        };

        /**
         * Encodes the specified TBirckItemDefine message. Does not implicitly {@link table.TBirckItemDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBirckItemDefine
         * @static
         * @param {table.ITBirckItemDefine} message TBirckItemDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckItemDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Num);
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Pro);
            return writer;
        };

        /**
         * Encodes the specified TBirckItemDefine message, length delimited. Does not implicitly {@link table.TBirckItemDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBirckItemDefine
         * @static
         * @param {table.ITBirckItemDefine} message TBirckItemDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckItemDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBirckItemDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBirckItemDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBirckItemDefine} TBirckItemDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckItemDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBirckItemDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                case 3:
                    message.Num = reader.int32();
                    break;
                case 4:
                    message.Pro = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBirckItemDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBirckItemDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBirckItemDefine} TBirckItemDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckItemDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBirckItemDefine message.
         * @function verify
         * @memberof table.TBirckItemDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBirckItemDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                if (!$util.isInteger(message.Pro))
                    return "Pro: integer expected";
            return null;
        };

        /**
         * Creates a TBirckItemDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBirckItemDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBirckItemDefine} TBirckItemDefine
         */
        TBirckItemDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBirckItemDefine)
                return object;
            var message = new $root.table.TBirckItemDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Num != null)
                message.Num = object.Num | 0;
            if (object.Pro != null)
                message.Pro = object.Pro | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBirckItemDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBirckItemDefine
         * @static
         * @param {table.TBirckItemDefine} message TBirckItemDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBirckItemDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
                object.Num = 0;
                object.Pro = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                object.Pro = message.Pro;
            return object;
        };

        /**
         * Converts this TBirckItemDefine to JSON.
         * @function toJSON
         * @memberof table.TBirckItemDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBirckItemDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBirckItemDefine;
    })();

    table.TbirckRefreshbase = (function() {

        /**
         * Properties of a TbirckRefreshbase.
         * @memberof table
         * @interface ITbirckRefreshbase
         * @property {Array.<table.ITBirckRefreshDefine>|null} [TBirckRefresh] TbirckRefreshbase TBirckRefresh
         */

        /**
         * Constructs a new TbirckRefreshbase.
         * @memberof table
         * @classdesc Represents a TbirckRefreshbase.
         * @implements ITbirckRefreshbase
         * @constructor
         * @param {table.ITbirckRefreshbase=} [properties] Properties to set
         */
        function TbirckRefreshbase(properties) {
            this.TBirckRefresh = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TbirckRefreshbase TBirckRefresh.
         * @member {Array.<table.ITBirckRefreshDefine>} TBirckRefresh
         * @memberof table.TbirckRefreshbase
         * @instance
         */
        TbirckRefreshbase.prototype.TBirckRefresh = $util.emptyArray;

        /**
         * Creates a new TbirckRefreshbase instance using the specified properties.
         * @function create
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {table.ITbirckRefreshbase=} [properties] Properties to set
         * @returns {table.TbirckRefreshbase} TbirckRefreshbase instance
         */
        TbirckRefreshbase.create = function create(properties) {
            return new TbirckRefreshbase(properties);
        };

        /**
         * Encodes the specified TbirckRefreshbase message. Does not implicitly {@link table.TbirckRefreshbase.verify|verify} messages.
         * @function encode
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {table.ITbirckRefreshbase} message TbirckRefreshbase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TbirckRefreshbase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBirckRefresh != null && message.TBirckRefresh.length)
                for (var i = 0; i < message.TBirckRefresh.length; ++i)
                    $root.table.TBirckRefreshDefine.encode(message.TBirckRefresh[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TbirckRefreshbase message, length delimited. Does not implicitly {@link table.TbirckRefreshbase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {table.ITbirckRefreshbase} message TbirckRefreshbase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TbirckRefreshbase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TbirckRefreshbase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TbirckRefreshbase} TbirckRefreshbase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TbirckRefreshbase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TbirckRefreshbase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBirckRefresh && message.TBirckRefresh.length))
                        message.TBirckRefresh = [];
                    message.TBirckRefresh.push($root.table.TBirckRefreshDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TbirckRefreshbase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TbirckRefreshbase} TbirckRefreshbase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TbirckRefreshbase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TbirckRefreshbase message.
         * @function verify
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TbirckRefreshbase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBirckRefresh != null && message.hasOwnProperty("TBirckRefresh")) {
                if (!Array.isArray(message.TBirckRefresh))
                    return "TBirckRefresh: array expected";
                for (var i = 0; i < message.TBirckRefresh.length; ++i) {
                    var error = $root.table.TBirckRefreshDefine.verify(message.TBirckRefresh[i]);
                    if (error)
                        return "TBirckRefresh." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TbirckRefreshbase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TbirckRefreshbase} TbirckRefreshbase
         */
        TbirckRefreshbase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TbirckRefreshbase)
                return object;
            var message = new $root.table.TbirckRefreshbase();
            if (object.TBirckRefresh) {
                if (!Array.isArray(object.TBirckRefresh))
                    throw TypeError(".table.TbirckRefreshbase.TBirckRefresh: array expected");
                message.TBirckRefresh = [];
                for (var i = 0; i < object.TBirckRefresh.length; ++i) {
                    if (typeof object.TBirckRefresh[i] !== "object")
                        throw TypeError(".table.TbirckRefreshbase.TBirckRefresh: object expected");
                    message.TBirckRefresh[i] = $root.table.TBirckRefreshDefine.fromObject(object.TBirckRefresh[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TbirckRefreshbase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TbirckRefreshbase
         * @static
         * @param {table.TbirckRefreshbase} message TbirckRefreshbase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TbirckRefreshbase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBirckRefresh = [];
            if (message.TBirckRefresh && message.TBirckRefresh.length) {
                object.TBirckRefresh = [];
                for (var j = 0; j < message.TBirckRefresh.length; ++j)
                    object.TBirckRefresh[j] = $root.table.TBirckRefreshDefine.toObject(message.TBirckRefresh[j], options);
            }
            return object;
        };

        /**
         * Converts this TbirckRefreshbase to JSON.
         * @function toJSON
         * @memberof table.TbirckRefreshbase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TbirckRefreshbase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TbirckRefreshbase;
    })();

    table.TBirckRefreshDefine = (function() {

        /**
         * Properties of a TBirckRefreshDefine.
         * @memberof table
         * @interface ITBirckRefreshDefine
         * @property {number|null} [Id] TBirckRefreshDefine Id
         * @property {number|null} [Min] TBirckRefreshDefine Min
         * @property {number|null} [Max] TBirckRefreshDefine Max
         * @property {string|null} [Pro] TBirckRefreshDefine Pro
         * @property {number|null} [Limitnum] TBirckRefreshDefine Limitnum
         */

        /**
         * Constructs a new TBirckRefreshDefine.
         * @memberof table
         * @classdesc Represents a TBirckRefreshDefine.
         * @implements ITBirckRefreshDefine
         * @constructor
         * @param {table.ITBirckRefreshDefine=} [properties] Properties to set
         */
        function TBirckRefreshDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBirckRefreshDefine Id.
         * @member {number} Id
         * @memberof table.TBirckRefreshDefine
         * @instance
         */
        TBirckRefreshDefine.prototype.Id = 0;

        /**
         * TBirckRefreshDefine Min.
         * @member {number} Min
         * @memberof table.TBirckRefreshDefine
         * @instance
         */
        TBirckRefreshDefine.prototype.Min = 0;

        /**
         * TBirckRefreshDefine Max.
         * @member {number} Max
         * @memberof table.TBirckRefreshDefine
         * @instance
         */
        TBirckRefreshDefine.prototype.Max = 0;

        /**
         * TBirckRefreshDefine Pro.
         * @member {string} Pro
         * @memberof table.TBirckRefreshDefine
         * @instance
         */
        TBirckRefreshDefine.prototype.Pro = "";

        /**
         * TBirckRefreshDefine Limitnum.
         * @member {number} Limitnum
         * @memberof table.TBirckRefreshDefine
         * @instance
         */
        TBirckRefreshDefine.prototype.Limitnum = 0;

        /**
         * Creates a new TBirckRefreshDefine instance using the specified properties.
         * @function create
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {table.ITBirckRefreshDefine=} [properties] Properties to set
         * @returns {table.TBirckRefreshDefine} TBirckRefreshDefine instance
         */
        TBirckRefreshDefine.create = function create(properties) {
            return new TBirckRefreshDefine(properties);
        };

        /**
         * Encodes the specified TBirckRefreshDefine message. Does not implicitly {@link table.TBirckRefreshDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {table.ITBirckRefreshDefine} message TBirckRefreshDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckRefreshDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Min != null && message.hasOwnProperty("Min"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Min);
            if (message.Max != null && message.hasOwnProperty("Max"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Max);
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.Pro);
            if (message.Limitnum != null && message.hasOwnProperty("Limitnum"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Limitnum);
            return writer;
        };

        /**
         * Encodes the specified TBirckRefreshDefine message, length delimited. Does not implicitly {@link table.TBirckRefreshDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {table.ITBirckRefreshDefine} message TBirckRefreshDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBirckRefreshDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBirckRefreshDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBirckRefreshDefine} TBirckRefreshDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckRefreshDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBirckRefreshDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Min = reader.int32();
                    break;
                case 3:
                    message.Max = reader.int32();
                    break;
                case 4:
                    message.Pro = reader.string();
                    break;
                case 5:
                    message.Limitnum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBirckRefreshDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBirckRefreshDefine} TBirckRefreshDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBirckRefreshDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBirckRefreshDefine message.
         * @function verify
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBirckRefreshDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Min != null && message.hasOwnProperty("Min"))
                if (!$util.isInteger(message.Min))
                    return "Min: integer expected";
            if (message.Max != null && message.hasOwnProperty("Max"))
                if (!$util.isInteger(message.Max))
                    return "Max: integer expected";
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                if (!$util.isString(message.Pro))
                    return "Pro: string expected";
            if (message.Limitnum != null && message.hasOwnProperty("Limitnum"))
                if (!$util.isInteger(message.Limitnum))
                    return "Limitnum: integer expected";
            return null;
        };

        /**
         * Creates a TBirckRefreshDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBirckRefreshDefine} TBirckRefreshDefine
         */
        TBirckRefreshDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBirckRefreshDefine)
                return object;
            var message = new $root.table.TBirckRefreshDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Min != null)
                message.Min = object.Min | 0;
            if (object.Max != null)
                message.Max = object.Max | 0;
            if (object.Pro != null)
                message.Pro = String(object.Pro);
            if (object.Limitnum != null)
                message.Limitnum = object.Limitnum | 0;
            return message;
        };

        /**
         * Creates a plain object from a TBirckRefreshDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBirckRefreshDefine
         * @static
         * @param {table.TBirckRefreshDefine} message TBirckRefreshDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBirckRefreshDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Min = 0;
                object.Max = 0;
                object.Pro = "";
                object.Limitnum = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Min != null && message.hasOwnProperty("Min"))
                object.Min = message.Min;
            if (message.Max != null && message.hasOwnProperty("Max"))
                object.Max = message.Max;
            if (message.Pro != null && message.hasOwnProperty("Pro"))
                object.Pro = message.Pro;
            if (message.Limitnum != null && message.hasOwnProperty("Limitnum"))
                object.Limitnum = message.Limitnum;
            return object;
        };

        /**
         * Converts this TBirckRefreshDefine to JSON.
         * @function toJSON
         * @memberof table.TBirckRefreshDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBirckRefreshDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBirckRefreshDefine;
    })();

    table.TBuildingsBase = (function() {

        /**
         * Properties of a TBuildingsBase.
         * @memberof table
         * @interface ITBuildingsBase
         * @property {Array.<table.ITBuildingsDefine>|null} [TBuildings] TBuildingsBase TBuildings
         */

        /**
         * Constructs a new TBuildingsBase.
         * @memberof table
         * @classdesc Represents a TBuildingsBase.
         * @implements ITBuildingsBase
         * @constructor
         * @param {table.ITBuildingsBase=} [properties] Properties to set
         */
        function TBuildingsBase(properties) {
            this.TBuildings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBuildingsBase TBuildings.
         * @member {Array.<table.ITBuildingsDefine>} TBuildings
         * @memberof table.TBuildingsBase
         * @instance
         */
        TBuildingsBase.prototype.TBuildings = $util.emptyArray;

        /**
         * Creates a new TBuildingsBase instance using the specified properties.
         * @function create
         * @memberof table.TBuildingsBase
         * @static
         * @param {table.ITBuildingsBase=} [properties] Properties to set
         * @returns {table.TBuildingsBase} TBuildingsBase instance
         */
        TBuildingsBase.create = function create(properties) {
            return new TBuildingsBase(properties);
        };

        /**
         * Encodes the specified TBuildingsBase message. Does not implicitly {@link table.TBuildingsBase.verify|verify} messages.
         * @function encode
         * @memberof table.TBuildingsBase
         * @static
         * @param {table.ITBuildingsBase} message TBuildingsBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBuildingsBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TBuildings != null && message.TBuildings.length)
                for (var i = 0; i < message.TBuildings.length; ++i)
                    $root.table.TBuildingsDefine.encode(message.TBuildings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TBuildingsBase message, length delimited. Does not implicitly {@link table.TBuildingsBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBuildingsBase
         * @static
         * @param {table.ITBuildingsBase} message TBuildingsBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBuildingsBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBuildingsBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBuildingsBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBuildingsBase} TBuildingsBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBuildingsBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBuildingsBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TBuildings && message.TBuildings.length))
                        message.TBuildings = [];
                    message.TBuildings.push($root.table.TBuildingsDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBuildingsBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBuildingsBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBuildingsBase} TBuildingsBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBuildingsBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBuildingsBase message.
         * @function verify
         * @memberof table.TBuildingsBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBuildingsBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TBuildings != null && message.hasOwnProperty("TBuildings")) {
                if (!Array.isArray(message.TBuildings))
                    return "TBuildings: array expected";
                for (var i = 0; i < message.TBuildings.length; ++i) {
                    var error = $root.table.TBuildingsDefine.verify(message.TBuildings[i]);
                    if (error)
                        return "TBuildings." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TBuildingsBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBuildingsBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBuildingsBase} TBuildingsBase
         */
        TBuildingsBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBuildingsBase)
                return object;
            var message = new $root.table.TBuildingsBase();
            if (object.TBuildings) {
                if (!Array.isArray(object.TBuildings))
                    throw TypeError(".table.TBuildingsBase.TBuildings: array expected");
                message.TBuildings = [];
                for (var i = 0; i < object.TBuildings.length; ++i) {
                    if (typeof object.TBuildings[i] !== "object")
                        throw TypeError(".table.TBuildingsBase.TBuildings: object expected");
                    message.TBuildings[i] = $root.table.TBuildingsDefine.fromObject(object.TBuildings[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TBuildingsBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBuildingsBase
         * @static
         * @param {table.TBuildingsBase} message TBuildingsBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBuildingsBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TBuildings = [];
            if (message.TBuildings && message.TBuildings.length) {
                object.TBuildings = [];
                for (var j = 0; j < message.TBuildings.length; ++j)
                    object.TBuildings[j] = $root.table.TBuildingsDefine.toObject(message.TBuildings[j], options);
            }
            return object;
        };

        /**
         * Converts this TBuildingsBase to JSON.
         * @function toJSON
         * @memberof table.TBuildingsBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBuildingsBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBuildingsBase;
    })();

    table.TBuildingsDefine = (function() {

        /**
         * Properties of a TBuildingsDefine.
         * @memberof table
         * @interface ITBuildingsDefine
         * @property {number|null} [Id] TBuildingsDefine Id
         * @property {number|null} [Province] TBuildingsDefine Province
         * @property {number|null} [City] TBuildingsDefine City
         * @property {number|null} [CommunityId] TBuildingsDefine CommunityId
         * @property {string|null} [Icon] TBuildingsDefine Icon
         * @property {string|null} [Community] TBuildingsDefine Community
         * @property {number|null} [Number] TBuildingsDefine Number
         * @property {number|null} [MaxFloor] TBuildingsDefine MaxFloor
         * @property {number|null} [NumPerFloor] TBuildingsDefine NumPerFloor
         * @property {number|null} [BuildingPrice] TBuildingsDefine BuildingPrice
         * @property {string|null} [Houses1] TBuildingsDefine Houses1
         * @property {string|null} [Houses2] TBuildingsDefine Houses2
         * @property {string|null} [Houses3] TBuildingsDefine Houses3
         * @property {string|null} [Houses4] TBuildingsDefine Houses4
         * @property {number|null} [PosX] TBuildingsDefine PosX
         * @property {number|null} [PosY] TBuildingsDefine PosY
         * @property {string|null} [Des] TBuildingsDefine Des
         */

        /**
         * Constructs a new TBuildingsDefine.
         * @memberof table
         * @classdesc Represents a TBuildingsDefine.
         * @implements ITBuildingsDefine
         * @constructor
         * @param {table.ITBuildingsDefine=} [properties] Properties to set
         */
        function TBuildingsDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TBuildingsDefine Id.
         * @member {number} Id
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Id = 0;

        /**
         * TBuildingsDefine Province.
         * @member {number} Province
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Province = 0;

        /**
         * TBuildingsDefine City.
         * @member {number} City
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.City = 0;

        /**
         * TBuildingsDefine CommunityId.
         * @member {number} CommunityId
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.CommunityId = 0;

        /**
         * TBuildingsDefine Icon.
         * @member {string} Icon
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Icon = "";

        /**
         * TBuildingsDefine Community.
         * @member {string} Community
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Community = "";

        /**
         * TBuildingsDefine Number.
         * @member {number} Number
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Number = 0;

        /**
         * TBuildingsDefine MaxFloor.
         * @member {number} MaxFloor
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.MaxFloor = 0;

        /**
         * TBuildingsDefine NumPerFloor.
         * @member {number} NumPerFloor
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.NumPerFloor = 0;

        /**
         * TBuildingsDefine BuildingPrice.
         * @member {number} BuildingPrice
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.BuildingPrice = 0;

        /**
         * TBuildingsDefine Houses1.
         * @member {string} Houses1
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Houses1 = "";

        /**
         * TBuildingsDefine Houses2.
         * @member {string} Houses2
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Houses2 = "";

        /**
         * TBuildingsDefine Houses3.
         * @member {string} Houses3
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Houses3 = "";

        /**
         * TBuildingsDefine Houses4.
         * @member {string} Houses4
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Houses4 = "";

        /**
         * TBuildingsDefine PosX.
         * @member {number} PosX
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.PosX = 0;

        /**
         * TBuildingsDefine PosY.
         * @member {number} PosY
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.PosY = 0;

        /**
         * TBuildingsDefine Des.
         * @member {string} Des
         * @memberof table.TBuildingsDefine
         * @instance
         */
        TBuildingsDefine.prototype.Des = "";

        /**
         * Creates a new TBuildingsDefine instance using the specified properties.
         * @function create
         * @memberof table.TBuildingsDefine
         * @static
         * @param {table.ITBuildingsDefine=} [properties] Properties to set
         * @returns {table.TBuildingsDefine} TBuildingsDefine instance
         */
        TBuildingsDefine.create = function create(properties) {
            return new TBuildingsDefine(properties);
        };

        /**
         * Encodes the specified TBuildingsDefine message. Does not implicitly {@link table.TBuildingsDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TBuildingsDefine
         * @static
         * @param {table.ITBuildingsDefine} message TBuildingsDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBuildingsDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Province != null && message.hasOwnProperty("Province"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Province);
            if (message.City != null && message.hasOwnProperty("City"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.City);
            if (message.CommunityId != null && message.hasOwnProperty("CommunityId"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.CommunityId);
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.Icon);
            if (message.Community != null && message.hasOwnProperty("Community"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.Community);
            if (message.Number != null && message.hasOwnProperty("Number"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.Number);
            if (message.MaxFloor != null && message.hasOwnProperty("MaxFloor"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.MaxFloor);
            if (message.NumPerFloor != null && message.hasOwnProperty("NumPerFloor"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.NumPerFloor);
            if (message.BuildingPrice != null && message.hasOwnProperty("BuildingPrice"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.BuildingPrice);
            if (message.Houses1 != null && message.hasOwnProperty("Houses1"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.Houses1);
            if (message.Houses2 != null && message.hasOwnProperty("Houses2"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.Houses2);
            if (message.Houses3 != null && message.hasOwnProperty("Houses3"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.Houses3);
            if (message.Houses4 != null && message.hasOwnProperty("Houses4"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.Houses4);
            if (message.PosX != null && message.hasOwnProperty("PosX"))
                writer.uint32(/* id 15, wireType 5 =*/125).float(message.PosX);
            if (message.PosY != null && message.hasOwnProperty("PosY"))
                writer.uint32(/* id 16, wireType 5 =*/133).float(message.PosY);
            if (message.Des != null && message.hasOwnProperty("Des"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.Des);
            return writer;
        };

        /**
         * Encodes the specified TBuildingsDefine message, length delimited. Does not implicitly {@link table.TBuildingsDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TBuildingsDefine
         * @static
         * @param {table.ITBuildingsDefine} message TBuildingsDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TBuildingsDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TBuildingsDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TBuildingsDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TBuildingsDefine} TBuildingsDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBuildingsDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TBuildingsDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Province = reader.uint32();
                    break;
                case 3:
                    message.City = reader.uint32();
                    break;
                case 4:
                    message.CommunityId = reader.uint32();
                    break;
                case 5:
                    message.Icon = reader.string();
                    break;
                case 6:
                    message.Community = reader.string();
                    break;
                case 7:
                    message.Number = reader.uint32();
                    break;
                case 8:
                    message.MaxFloor = reader.uint32();
                    break;
                case 9:
                    message.NumPerFloor = reader.uint32();
                    break;
                case 10:
                    message.BuildingPrice = reader.uint32();
                    break;
                case 11:
                    message.Houses1 = reader.string();
                    break;
                case 12:
                    message.Houses2 = reader.string();
                    break;
                case 13:
                    message.Houses3 = reader.string();
                    break;
                case 14:
                    message.Houses4 = reader.string();
                    break;
                case 15:
                    message.PosX = reader.float();
                    break;
                case 16:
                    message.PosY = reader.float();
                    break;
                case 17:
                    message.Des = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TBuildingsDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TBuildingsDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TBuildingsDefine} TBuildingsDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TBuildingsDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TBuildingsDefine message.
         * @function verify
         * @memberof table.TBuildingsDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TBuildingsDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Province != null && message.hasOwnProperty("Province"))
                if (!$util.isInteger(message.Province))
                    return "Province: integer expected";
            if (message.City != null && message.hasOwnProperty("City"))
                if (!$util.isInteger(message.City))
                    return "City: integer expected";
            if (message.CommunityId != null && message.hasOwnProperty("CommunityId"))
                if (!$util.isInteger(message.CommunityId))
                    return "CommunityId: integer expected";
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                if (!$util.isString(message.Icon))
                    return "Icon: string expected";
            if (message.Community != null && message.hasOwnProperty("Community"))
                if (!$util.isString(message.Community))
                    return "Community: string expected";
            if (message.Number != null && message.hasOwnProperty("Number"))
                if (!$util.isInteger(message.Number))
                    return "Number: integer expected";
            if (message.MaxFloor != null && message.hasOwnProperty("MaxFloor"))
                if (!$util.isInteger(message.MaxFloor))
                    return "MaxFloor: integer expected";
            if (message.NumPerFloor != null && message.hasOwnProperty("NumPerFloor"))
                if (!$util.isInteger(message.NumPerFloor))
                    return "NumPerFloor: integer expected";
            if (message.BuildingPrice != null && message.hasOwnProperty("BuildingPrice"))
                if (!$util.isInteger(message.BuildingPrice))
                    return "BuildingPrice: integer expected";
            if (message.Houses1 != null && message.hasOwnProperty("Houses1"))
                if (!$util.isString(message.Houses1))
                    return "Houses1: string expected";
            if (message.Houses2 != null && message.hasOwnProperty("Houses2"))
                if (!$util.isString(message.Houses2))
                    return "Houses2: string expected";
            if (message.Houses3 != null && message.hasOwnProperty("Houses3"))
                if (!$util.isString(message.Houses3))
                    return "Houses3: string expected";
            if (message.Houses4 != null && message.hasOwnProperty("Houses4"))
                if (!$util.isString(message.Houses4))
                    return "Houses4: string expected";
            if (message.PosX != null && message.hasOwnProperty("PosX"))
                if (typeof message.PosX !== "number")
                    return "PosX: number expected";
            if (message.PosY != null && message.hasOwnProperty("PosY"))
                if (typeof message.PosY !== "number")
                    return "PosY: number expected";
            if (message.Des != null && message.hasOwnProperty("Des"))
                if (!$util.isString(message.Des))
                    return "Des: string expected";
            return null;
        };

        /**
         * Creates a TBuildingsDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TBuildingsDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TBuildingsDefine} TBuildingsDefine
         */
        TBuildingsDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TBuildingsDefine)
                return object;
            var message = new $root.table.TBuildingsDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Province != null)
                message.Province = object.Province >>> 0;
            if (object.City != null)
                message.City = object.City >>> 0;
            if (object.CommunityId != null)
                message.CommunityId = object.CommunityId >>> 0;
            if (object.Icon != null)
                message.Icon = String(object.Icon);
            if (object.Community != null)
                message.Community = String(object.Community);
            if (object.Number != null)
                message.Number = object.Number >>> 0;
            if (object.MaxFloor != null)
                message.MaxFloor = object.MaxFloor >>> 0;
            if (object.NumPerFloor != null)
                message.NumPerFloor = object.NumPerFloor >>> 0;
            if (object.BuildingPrice != null)
                message.BuildingPrice = object.BuildingPrice >>> 0;
            if (object.Houses1 != null)
                message.Houses1 = String(object.Houses1);
            if (object.Houses2 != null)
                message.Houses2 = String(object.Houses2);
            if (object.Houses3 != null)
                message.Houses3 = String(object.Houses3);
            if (object.Houses4 != null)
                message.Houses4 = String(object.Houses4);
            if (object.PosX != null)
                message.PosX = Number(object.PosX);
            if (object.PosY != null)
                message.PosY = Number(object.PosY);
            if (object.Des != null)
                message.Des = String(object.Des);
            return message;
        };

        /**
         * Creates a plain object from a TBuildingsDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TBuildingsDefine
         * @static
         * @param {table.TBuildingsDefine} message TBuildingsDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TBuildingsDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Province = 0;
                object.City = 0;
                object.CommunityId = 0;
                object.Icon = "";
                object.Community = "";
                object.Number = 0;
                object.MaxFloor = 0;
                object.NumPerFloor = 0;
                object.BuildingPrice = 0;
                object.Houses1 = "";
                object.Houses2 = "";
                object.Houses3 = "";
                object.Houses4 = "";
                object.PosX = 0;
                object.PosY = 0;
                object.Des = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Province != null && message.hasOwnProperty("Province"))
                object.Province = message.Province;
            if (message.City != null && message.hasOwnProperty("City"))
                object.City = message.City;
            if (message.CommunityId != null && message.hasOwnProperty("CommunityId"))
                object.CommunityId = message.CommunityId;
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                object.Icon = message.Icon;
            if (message.Community != null && message.hasOwnProperty("Community"))
                object.Community = message.Community;
            if (message.Number != null && message.hasOwnProperty("Number"))
                object.Number = message.Number;
            if (message.MaxFloor != null && message.hasOwnProperty("MaxFloor"))
                object.MaxFloor = message.MaxFloor;
            if (message.NumPerFloor != null && message.hasOwnProperty("NumPerFloor"))
                object.NumPerFloor = message.NumPerFloor;
            if (message.BuildingPrice != null && message.hasOwnProperty("BuildingPrice"))
                object.BuildingPrice = message.BuildingPrice;
            if (message.Houses1 != null && message.hasOwnProperty("Houses1"))
                object.Houses1 = message.Houses1;
            if (message.Houses2 != null && message.hasOwnProperty("Houses2"))
                object.Houses2 = message.Houses2;
            if (message.Houses3 != null && message.hasOwnProperty("Houses3"))
                object.Houses3 = message.Houses3;
            if (message.Houses4 != null && message.hasOwnProperty("Houses4"))
                object.Houses4 = message.Houses4;
            if (message.PosX != null && message.hasOwnProperty("PosX"))
                object.PosX = options.json && !isFinite(message.PosX) ? String(message.PosX) : message.PosX;
            if (message.PosY != null && message.hasOwnProperty("PosY"))
                object.PosY = options.json && !isFinite(message.PosY) ? String(message.PosY) : message.PosY;
            if (message.Des != null && message.hasOwnProperty("Des"))
                object.Des = message.Des;
            return object;
        };

        /**
         * Converts this TBuildingsDefine to JSON.
         * @function toJSON
         * @memberof table.TBuildingsDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TBuildingsDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TBuildingsDefine;
    })();

    table.TCarBase = (function() {

        /**
         * Properties of a TCarBase.
         * @memberof table
         * @interface ITCarBase
         * @property {Array.<table.ITCarDefine>|null} [TCar] TCarBase TCar
         */

        /**
         * Constructs a new TCarBase.
         * @memberof table
         * @classdesc Represents a TCarBase.
         * @implements ITCarBase
         * @constructor
         * @param {table.ITCarBase=} [properties] Properties to set
         */
        function TCarBase(properties) {
            this.TCar = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarBase TCar.
         * @member {Array.<table.ITCarDefine>} TCar
         * @memberof table.TCarBase
         * @instance
         */
        TCarBase.prototype.TCar = $util.emptyArray;

        /**
         * Creates a new TCarBase instance using the specified properties.
         * @function create
         * @memberof table.TCarBase
         * @static
         * @param {table.ITCarBase=} [properties] Properties to set
         * @returns {table.TCarBase} TCarBase instance
         */
        TCarBase.create = function create(properties) {
            return new TCarBase(properties);
        };

        /**
         * Encodes the specified TCarBase message. Does not implicitly {@link table.TCarBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCarBase
         * @static
         * @param {table.ITCarBase} message TCarBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCar != null && message.TCar.length)
                for (var i = 0; i < message.TCar.length; ++i)
                    $root.table.TCarDefine.encode(message.TCar[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCarBase message, length delimited. Does not implicitly {@link table.TCarBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarBase
         * @static
         * @param {table.ITCarBase} message TCarBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarBase} TCarBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCar && message.TCar.length))
                        message.TCar = [];
                    message.TCar.push($root.table.TCarDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarBase} TCarBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarBase message.
         * @function verify
         * @memberof table.TCarBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCar != null && message.hasOwnProperty("TCar")) {
                if (!Array.isArray(message.TCar))
                    return "TCar: array expected";
                for (var i = 0; i < message.TCar.length; ++i) {
                    var error = $root.table.TCarDefine.verify(message.TCar[i]);
                    if (error)
                        return "TCar." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCarBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarBase} TCarBase
         */
        TCarBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarBase)
                return object;
            var message = new $root.table.TCarBase();
            if (object.TCar) {
                if (!Array.isArray(object.TCar))
                    throw TypeError(".table.TCarBase.TCar: array expected");
                message.TCar = [];
                for (var i = 0; i < object.TCar.length; ++i) {
                    if (typeof object.TCar[i] !== "object")
                        throw TypeError(".table.TCarBase.TCar: object expected");
                    message.TCar[i] = $root.table.TCarDefine.fromObject(object.TCar[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCarBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarBase
         * @static
         * @param {table.TCarBase} message TCarBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCar = [];
            if (message.TCar && message.TCar.length) {
                object.TCar = [];
                for (var j = 0; j < message.TCar.length; ++j)
                    object.TCar[j] = $root.table.TCarDefine.toObject(message.TCar[j], options);
            }
            return object;
        };

        /**
         * Converts this TCarBase to JSON.
         * @function toJSON
         * @memberof table.TCarBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarBase;
    })();

    table.TCarDefine = (function() {

        /**
         * Properties of a TCarDefine.
         * @memberof table
         * @interface ITCarDefine
         * @property {number|null} [Id] TCarDefine Id
         * @property {number|null} [Brand] TCarDefine Brand
         * @property {number|null} [Model] TCarDefine Model
         * @property {number|null} [Price] TCarDefine Price
         * @property {string|null} [Des] TCarDefine Des
         * @property {string|null} [path] TCarDefine path
         * @property {string|null} [bigpath] TCarDefine bigpath
         * @property {number|null} [Tyre] TCarDefine Tyre
         * @property {number|null} [Tank] TCarDefine Tank
         * @property {number|null} [Trunk] TCarDefine Trunk
         * @property {number|null} [Engine] TCarDefine Engine
         * @property {number|null} [Battery] TCarDefine Battery
         * @property {number|null} [MaxStar] TCarDefine MaxStar
         * @property {number|null} [StarAttrGroup] TCarDefine StarAttrGroup
         */

        /**
         * Constructs a new TCarDefine.
         * @memberof table
         * @classdesc Represents a TCarDefine.
         * @implements ITCarDefine
         * @constructor
         * @param {table.ITCarDefine=} [properties] Properties to set
         */
        function TCarDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarDefine Id.
         * @member {number} Id
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Id = 0;

        /**
         * TCarDefine Brand.
         * @member {number} Brand
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Brand = 0;

        /**
         * TCarDefine Model.
         * @member {number} Model
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Model = 0;

        /**
         * TCarDefine Price.
         * @member {number} Price
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Price = 0;

        /**
         * TCarDefine Des.
         * @member {string} Des
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Des = "";

        /**
         * TCarDefine path.
         * @member {string} path
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.path = "";

        /**
         * TCarDefine bigpath.
         * @member {string} bigpath
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.bigpath = "";

        /**
         * TCarDefine Tyre.
         * @member {number} Tyre
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Tyre = 0;

        /**
         * TCarDefine Tank.
         * @member {number} Tank
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Tank = 0;

        /**
         * TCarDefine Trunk.
         * @member {number} Trunk
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Trunk = 0;

        /**
         * TCarDefine Engine.
         * @member {number} Engine
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Engine = 0;

        /**
         * TCarDefine Battery.
         * @member {number} Battery
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.Battery = 0;

        /**
         * TCarDefine MaxStar.
         * @member {number} MaxStar
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.MaxStar = 0;

        /**
         * TCarDefine StarAttrGroup.
         * @member {number} StarAttrGroup
         * @memberof table.TCarDefine
         * @instance
         */
        TCarDefine.prototype.StarAttrGroup = 0;

        /**
         * Creates a new TCarDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarDefine
         * @static
         * @param {table.ITCarDefine=} [properties] Properties to set
         * @returns {table.TCarDefine} TCarDefine instance
         */
        TCarDefine.create = function create(properties) {
            return new TCarDefine(properties);
        };

        /**
         * Encodes the specified TCarDefine message. Does not implicitly {@link table.TCarDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarDefine
         * @static
         * @param {table.ITCarDefine} message TCarDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Brand != null && message.hasOwnProperty("Brand"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Brand);
            if (message.Model != null && message.hasOwnProperty("Model"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Model);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.Price);
            if (message.Des != null && message.hasOwnProperty("Des"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.Des);
            if (message.path != null && message.hasOwnProperty("path"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.path);
            if (message.bigpath != null && message.hasOwnProperty("bigpath"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.bigpath);
            if (message.Tyre != null && message.hasOwnProperty("Tyre"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.Tyre);
            if (message.Tank != null && message.hasOwnProperty("Tank"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.Tank);
            if (message.Trunk != null && message.hasOwnProperty("Trunk"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.Trunk);
            if (message.Engine != null && message.hasOwnProperty("Engine"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.Engine);
            if (message.Battery != null && message.hasOwnProperty("Battery"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.Battery);
            if (message.MaxStar != null && message.hasOwnProperty("MaxStar"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.MaxStar);
            if (message.StarAttrGroup != null && message.hasOwnProperty("StarAttrGroup"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.StarAttrGroup);
            return writer;
        };

        /**
         * Encodes the specified TCarDefine message, length delimited. Does not implicitly {@link table.TCarDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarDefine
         * @static
         * @param {table.ITCarDefine} message TCarDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarDefine} TCarDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Brand = reader.uint32();
                    break;
                case 3:
                    message.Model = reader.uint32();
                    break;
                case 4:
                    message.Price = reader.uint32();
                    break;
                case 5:
                    message.Des = reader.string();
                    break;
                case 6:
                    message.path = reader.string();
                    break;
                case 7:
                    message.bigpath = reader.string();
                    break;
                case 8:
                    message.Tyre = reader.uint32();
                    break;
                case 9:
                    message.Tank = reader.uint32();
                    break;
                case 10:
                    message.Trunk = reader.uint32();
                    break;
                case 11:
                    message.Engine = reader.uint32();
                    break;
                case 12:
                    message.Battery = reader.uint32();
                    break;
                case 13:
                    message.MaxStar = reader.uint32();
                    break;
                case 14:
                    message.StarAttrGroup = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarDefine} TCarDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarDefine message.
         * @function verify
         * @memberof table.TCarDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Brand != null && message.hasOwnProperty("Brand"))
                if (!$util.isInteger(message.Brand))
                    return "Brand: integer expected";
            if (message.Model != null && message.hasOwnProperty("Model"))
                if (!$util.isInteger(message.Model))
                    return "Model: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Des != null && message.hasOwnProperty("Des"))
                if (!$util.isString(message.Des))
                    return "Des: string expected";
            if (message.path != null && message.hasOwnProperty("path"))
                if (!$util.isString(message.path))
                    return "path: string expected";
            if (message.bigpath != null && message.hasOwnProperty("bigpath"))
                if (!$util.isString(message.bigpath))
                    return "bigpath: string expected";
            if (message.Tyre != null && message.hasOwnProperty("Tyre"))
                if (!$util.isInteger(message.Tyre))
                    return "Tyre: integer expected";
            if (message.Tank != null && message.hasOwnProperty("Tank"))
                if (!$util.isInteger(message.Tank))
                    return "Tank: integer expected";
            if (message.Trunk != null && message.hasOwnProperty("Trunk"))
                if (!$util.isInteger(message.Trunk))
                    return "Trunk: integer expected";
            if (message.Engine != null && message.hasOwnProperty("Engine"))
                if (!$util.isInteger(message.Engine))
                    return "Engine: integer expected";
            if (message.Battery != null && message.hasOwnProperty("Battery"))
                if (!$util.isInteger(message.Battery))
                    return "Battery: integer expected";
            if (message.MaxStar != null && message.hasOwnProperty("MaxStar"))
                if (!$util.isInteger(message.MaxStar))
                    return "MaxStar: integer expected";
            if (message.StarAttrGroup != null && message.hasOwnProperty("StarAttrGroup"))
                if (!$util.isInteger(message.StarAttrGroup))
                    return "StarAttrGroup: integer expected";
            return null;
        };

        /**
         * Creates a TCarDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarDefine} TCarDefine
         */
        TCarDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarDefine)
                return object;
            var message = new $root.table.TCarDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Brand != null)
                message.Brand = object.Brand >>> 0;
            if (object.Model != null)
                message.Model = object.Model >>> 0;
            if (object.Price != null)
                message.Price = object.Price >>> 0;
            if (object.Des != null)
                message.Des = String(object.Des);
            if (object.path != null)
                message.path = String(object.path);
            if (object.bigpath != null)
                message.bigpath = String(object.bigpath);
            if (object.Tyre != null)
                message.Tyre = object.Tyre >>> 0;
            if (object.Tank != null)
                message.Tank = object.Tank >>> 0;
            if (object.Trunk != null)
                message.Trunk = object.Trunk >>> 0;
            if (object.Engine != null)
                message.Engine = object.Engine >>> 0;
            if (object.Battery != null)
                message.Battery = object.Battery >>> 0;
            if (object.MaxStar != null)
                message.MaxStar = object.MaxStar >>> 0;
            if (object.StarAttrGroup != null)
                message.StarAttrGroup = object.StarAttrGroup >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TCarDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarDefine
         * @static
         * @param {table.TCarDefine} message TCarDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Brand = 0;
                object.Model = 0;
                object.Price = 0;
                object.Des = "";
                object.path = "";
                object.bigpath = "";
                object.Tyre = 0;
                object.Tank = 0;
                object.Trunk = 0;
                object.Engine = 0;
                object.Battery = 0;
                object.MaxStar = 0;
                object.StarAttrGroup = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Brand != null && message.hasOwnProperty("Brand"))
                object.Brand = message.Brand;
            if (message.Model != null && message.hasOwnProperty("Model"))
                object.Model = message.Model;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Des != null && message.hasOwnProperty("Des"))
                object.Des = message.Des;
            if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
            if (message.bigpath != null && message.hasOwnProperty("bigpath"))
                object.bigpath = message.bigpath;
            if (message.Tyre != null && message.hasOwnProperty("Tyre"))
                object.Tyre = message.Tyre;
            if (message.Tank != null && message.hasOwnProperty("Tank"))
                object.Tank = message.Tank;
            if (message.Trunk != null && message.hasOwnProperty("Trunk"))
                object.Trunk = message.Trunk;
            if (message.Engine != null && message.hasOwnProperty("Engine"))
                object.Engine = message.Engine;
            if (message.Battery != null && message.hasOwnProperty("Battery"))
                object.Battery = message.Battery;
            if (message.MaxStar != null && message.hasOwnProperty("MaxStar"))
                object.MaxStar = message.MaxStar;
            if (message.StarAttrGroup != null && message.hasOwnProperty("StarAttrGroup"))
                object.StarAttrGroup = message.StarAttrGroup;
            return object;
        };

        /**
         * Converts this TCarDefine to JSON.
         * @function toJSON
         * @memberof table.TCarDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarDefine;
    })();

    table.TCarBrandBase = (function() {

        /**
         * Properties of a TCarBrandBase.
         * @memberof table
         * @interface ITCarBrandBase
         * @property {Array.<table.ITCarBrandDefine>|null} [TCarBrand] TCarBrandBase TCarBrand
         */

        /**
         * Constructs a new TCarBrandBase.
         * @memberof table
         * @classdesc Represents a TCarBrandBase.
         * @implements ITCarBrandBase
         * @constructor
         * @param {table.ITCarBrandBase=} [properties] Properties to set
         */
        function TCarBrandBase(properties) {
            this.TCarBrand = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarBrandBase TCarBrand.
         * @member {Array.<table.ITCarBrandDefine>} TCarBrand
         * @memberof table.TCarBrandBase
         * @instance
         */
        TCarBrandBase.prototype.TCarBrand = $util.emptyArray;

        /**
         * Creates a new TCarBrandBase instance using the specified properties.
         * @function create
         * @memberof table.TCarBrandBase
         * @static
         * @param {table.ITCarBrandBase=} [properties] Properties to set
         * @returns {table.TCarBrandBase} TCarBrandBase instance
         */
        TCarBrandBase.create = function create(properties) {
            return new TCarBrandBase(properties);
        };

        /**
         * Encodes the specified TCarBrandBase message. Does not implicitly {@link table.TCarBrandBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCarBrandBase
         * @static
         * @param {table.ITCarBrandBase} message TCarBrandBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarBrandBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCarBrand != null && message.TCarBrand.length)
                for (var i = 0; i < message.TCarBrand.length; ++i)
                    $root.table.TCarBrandDefine.encode(message.TCarBrand[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCarBrandBase message, length delimited. Does not implicitly {@link table.TCarBrandBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarBrandBase
         * @static
         * @param {table.ITCarBrandBase} message TCarBrandBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarBrandBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarBrandBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarBrandBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarBrandBase} TCarBrandBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarBrandBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarBrandBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCarBrand && message.TCarBrand.length))
                        message.TCarBrand = [];
                    message.TCarBrand.push($root.table.TCarBrandDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarBrandBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarBrandBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarBrandBase} TCarBrandBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarBrandBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarBrandBase message.
         * @function verify
         * @memberof table.TCarBrandBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarBrandBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCarBrand != null && message.hasOwnProperty("TCarBrand")) {
                if (!Array.isArray(message.TCarBrand))
                    return "TCarBrand: array expected";
                for (var i = 0; i < message.TCarBrand.length; ++i) {
                    var error = $root.table.TCarBrandDefine.verify(message.TCarBrand[i]);
                    if (error)
                        return "TCarBrand." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCarBrandBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarBrandBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarBrandBase} TCarBrandBase
         */
        TCarBrandBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarBrandBase)
                return object;
            var message = new $root.table.TCarBrandBase();
            if (object.TCarBrand) {
                if (!Array.isArray(object.TCarBrand))
                    throw TypeError(".table.TCarBrandBase.TCarBrand: array expected");
                message.TCarBrand = [];
                for (var i = 0; i < object.TCarBrand.length; ++i) {
                    if (typeof object.TCarBrand[i] !== "object")
                        throw TypeError(".table.TCarBrandBase.TCarBrand: object expected");
                    message.TCarBrand[i] = $root.table.TCarBrandDefine.fromObject(object.TCarBrand[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCarBrandBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarBrandBase
         * @static
         * @param {table.TCarBrandBase} message TCarBrandBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarBrandBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCarBrand = [];
            if (message.TCarBrand && message.TCarBrand.length) {
                object.TCarBrand = [];
                for (var j = 0; j < message.TCarBrand.length; ++j)
                    object.TCarBrand[j] = $root.table.TCarBrandDefine.toObject(message.TCarBrand[j], options);
            }
            return object;
        };

        /**
         * Converts this TCarBrandBase to JSON.
         * @function toJSON
         * @memberof table.TCarBrandBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarBrandBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarBrandBase;
    })();

    table.TCarBrandDefine = (function() {

        /**
         * Properties of a TCarBrandDefine.
         * @memberof table
         * @interface ITCarBrandDefine
         * @property {number|null} [Id] TCarBrandDefine Id
         * @property {string|null} [Brand] TCarBrandDefine Brand
         */

        /**
         * Constructs a new TCarBrandDefine.
         * @memberof table
         * @classdesc Represents a TCarBrandDefine.
         * @implements ITCarBrandDefine
         * @constructor
         * @param {table.ITCarBrandDefine=} [properties] Properties to set
         */
        function TCarBrandDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarBrandDefine Id.
         * @member {number} Id
         * @memberof table.TCarBrandDefine
         * @instance
         */
        TCarBrandDefine.prototype.Id = 0;

        /**
         * TCarBrandDefine Brand.
         * @member {string} Brand
         * @memberof table.TCarBrandDefine
         * @instance
         */
        TCarBrandDefine.prototype.Brand = "";

        /**
         * Creates a new TCarBrandDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarBrandDefine
         * @static
         * @param {table.ITCarBrandDefine=} [properties] Properties to set
         * @returns {table.TCarBrandDefine} TCarBrandDefine instance
         */
        TCarBrandDefine.create = function create(properties) {
            return new TCarBrandDefine(properties);
        };

        /**
         * Encodes the specified TCarBrandDefine message. Does not implicitly {@link table.TCarBrandDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarBrandDefine
         * @static
         * @param {table.ITCarBrandDefine} message TCarBrandDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarBrandDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Brand != null && message.hasOwnProperty("Brand"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Brand);
            return writer;
        };

        /**
         * Encodes the specified TCarBrandDefine message, length delimited. Does not implicitly {@link table.TCarBrandDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarBrandDefine
         * @static
         * @param {table.ITCarBrandDefine} message TCarBrandDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarBrandDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarBrandDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarBrandDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarBrandDefine} TCarBrandDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarBrandDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarBrandDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Brand = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarBrandDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarBrandDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarBrandDefine} TCarBrandDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarBrandDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarBrandDefine message.
         * @function verify
         * @memberof table.TCarBrandDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarBrandDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Brand != null && message.hasOwnProperty("Brand"))
                if (!$util.isString(message.Brand))
                    return "Brand: string expected";
            return null;
        };

        /**
         * Creates a TCarBrandDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarBrandDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarBrandDefine} TCarBrandDefine
         */
        TCarBrandDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarBrandDefine)
                return object;
            var message = new $root.table.TCarBrandDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Brand != null)
                message.Brand = String(object.Brand);
            return message;
        };

        /**
         * Creates a plain object from a TCarBrandDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarBrandDefine
         * @static
         * @param {table.TCarBrandDefine} message TCarBrandDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarBrandDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Brand = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Brand != null && message.hasOwnProperty("Brand"))
                object.Brand = message.Brand;
            return object;
        };

        /**
         * Converts this TCarBrandDefine to JSON.
         * @function toJSON
         * @memberof table.TCarBrandDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarBrandDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarBrandDefine;
    })();

    table.TCarModelBase = (function() {

        /**
         * Properties of a TCarModelBase.
         * @memberof table
         * @interface ITCarModelBase
         * @property {Array.<table.ITCarModelDefine>|null} [TCarModel] TCarModelBase TCarModel
         */

        /**
         * Constructs a new TCarModelBase.
         * @memberof table
         * @classdesc Represents a TCarModelBase.
         * @implements ITCarModelBase
         * @constructor
         * @param {table.ITCarModelBase=} [properties] Properties to set
         */
        function TCarModelBase(properties) {
            this.TCarModel = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarModelBase TCarModel.
         * @member {Array.<table.ITCarModelDefine>} TCarModel
         * @memberof table.TCarModelBase
         * @instance
         */
        TCarModelBase.prototype.TCarModel = $util.emptyArray;

        /**
         * Creates a new TCarModelBase instance using the specified properties.
         * @function create
         * @memberof table.TCarModelBase
         * @static
         * @param {table.ITCarModelBase=} [properties] Properties to set
         * @returns {table.TCarModelBase} TCarModelBase instance
         */
        TCarModelBase.create = function create(properties) {
            return new TCarModelBase(properties);
        };

        /**
         * Encodes the specified TCarModelBase message. Does not implicitly {@link table.TCarModelBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCarModelBase
         * @static
         * @param {table.ITCarModelBase} message TCarModelBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarModelBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCarModel != null && message.TCarModel.length)
                for (var i = 0; i < message.TCarModel.length; ++i)
                    $root.table.TCarModelDefine.encode(message.TCarModel[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCarModelBase message, length delimited. Does not implicitly {@link table.TCarModelBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarModelBase
         * @static
         * @param {table.ITCarModelBase} message TCarModelBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarModelBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarModelBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarModelBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarModelBase} TCarModelBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarModelBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarModelBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCarModel && message.TCarModel.length))
                        message.TCarModel = [];
                    message.TCarModel.push($root.table.TCarModelDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarModelBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarModelBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarModelBase} TCarModelBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarModelBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarModelBase message.
         * @function verify
         * @memberof table.TCarModelBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarModelBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCarModel != null && message.hasOwnProperty("TCarModel")) {
                if (!Array.isArray(message.TCarModel))
                    return "TCarModel: array expected";
                for (var i = 0; i < message.TCarModel.length; ++i) {
                    var error = $root.table.TCarModelDefine.verify(message.TCarModel[i]);
                    if (error)
                        return "TCarModel." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCarModelBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarModelBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarModelBase} TCarModelBase
         */
        TCarModelBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarModelBase)
                return object;
            var message = new $root.table.TCarModelBase();
            if (object.TCarModel) {
                if (!Array.isArray(object.TCarModel))
                    throw TypeError(".table.TCarModelBase.TCarModel: array expected");
                message.TCarModel = [];
                for (var i = 0; i < object.TCarModel.length; ++i) {
                    if (typeof object.TCarModel[i] !== "object")
                        throw TypeError(".table.TCarModelBase.TCarModel: object expected");
                    message.TCarModel[i] = $root.table.TCarModelDefine.fromObject(object.TCarModel[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCarModelBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarModelBase
         * @static
         * @param {table.TCarModelBase} message TCarModelBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarModelBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCarModel = [];
            if (message.TCarModel && message.TCarModel.length) {
                object.TCarModel = [];
                for (var j = 0; j < message.TCarModel.length; ++j)
                    object.TCarModel[j] = $root.table.TCarModelDefine.toObject(message.TCarModel[j], options);
            }
            return object;
        };

        /**
         * Converts this TCarModelBase to JSON.
         * @function toJSON
         * @memberof table.TCarModelBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarModelBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarModelBase;
    })();

    table.TCarModelDefine = (function() {

        /**
         * Properties of a TCarModelDefine.
         * @memberof table
         * @interface ITCarModelDefine
         * @property {number|null} [Id] TCarModelDefine Id
         * @property {string|null} [Model] TCarModelDefine Model
         */

        /**
         * Constructs a new TCarModelDefine.
         * @memberof table
         * @classdesc Represents a TCarModelDefine.
         * @implements ITCarModelDefine
         * @constructor
         * @param {table.ITCarModelDefine=} [properties] Properties to set
         */
        function TCarModelDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarModelDefine Id.
         * @member {number} Id
         * @memberof table.TCarModelDefine
         * @instance
         */
        TCarModelDefine.prototype.Id = 0;

        /**
         * TCarModelDefine Model.
         * @member {string} Model
         * @memberof table.TCarModelDefine
         * @instance
         */
        TCarModelDefine.prototype.Model = "";

        /**
         * Creates a new TCarModelDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarModelDefine
         * @static
         * @param {table.ITCarModelDefine=} [properties] Properties to set
         * @returns {table.TCarModelDefine} TCarModelDefine instance
         */
        TCarModelDefine.create = function create(properties) {
            return new TCarModelDefine(properties);
        };

        /**
         * Encodes the specified TCarModelDefine message. Does not implicitly {@link table.TCarModelDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarModelDefine
         * @static
         * @param {table.ITCarModelDefine} message TCarModelDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarModelDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Model != null && message.hasOwnProperty("Model"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Model);
            return writer;
        };

        /**
         * Encodes the specified TCarModelDefine message, length delimited. Does not implicitly {@link table.TCarModelDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarModelDefine
         * @static
         * @param {table.ITCarModelDefine} message TCarModelDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarModelDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarModelDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarModelDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarModelDefine} TCarModelDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarModelDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarModelDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Model = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarModelDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarModelDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarModelDefine} TCarModelDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarModelDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarModelDefine message.
         * @function verify
         * @memberof table.TCarModelDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarModelDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Model != null && message.hasOwnProperty("Model"))
                if (!$util.isString(message.Model))
                    return "Model: string expected";
            return null;
        };

        /**
         * Creates a TCarModelDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarModelDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarModelDefine} TCarModelDefine
         */
        TCarModelDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarModelDefine)
                return object;
            var message = new $root.table.TCarModelDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Model != null)
                message.Model = String(object.Model);
            return message;
        };

        /**
         * Creates a plain object from a TCarModelDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarModelDefine
         * @static
         * @param {table.TCarModelDefine} message TCarModelDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarModelDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Model = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Model != null && message.hasOwnProperty("Model"))
                object.Model = message.Model;
            return object;
        };

        /**
         * Converts this TCarModelDefine to JSON.
         * @function toJSON
         * @memberof table.TCarModelDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarModelDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarModelDefine;
    })();

    table.TCarPartBase = (function() {

        /**
         * Properties of a TCarPartBase.
         * @memberof table
         * @interface ITCarPartBase
         * @property {Array.<table.ITCarPartDefine>|null} [TCarPart] TCarPartBase TCarPart
         */

        /**
         * Constructs a new TCarPartBase.
         * @memberof table
         * @classdesc Represents a TCarPartBase.
         * @implements ITCarPartBase
         * @constructor
         * @param {table.ITCarPartBase=} [properties] Properties to set
         */
        function TCarPartBase(properties) {
            this.TCarPart = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarPartBase TCarPart.
         * @member {Array.<table.ITCarPartDefine>} TCarPart
         * @memberof table.TCarPartBase
         * @instance
         */
        TCarPartBase.prototype.TCarPart = $util.emptyArray;

        /**
         * Creates a new TCarPartBase instance using the specified properties.
         * @function create
         * @memberof table.TCarPartBase
         * @static
         * @param {table.ITCarPartBase=} [properties] Properties to set
         * @returns {table.TCarPartBase} TCarPartBase instance
         */
        TCarPartBase.create = function create(properties) {
            return new TCarPartBase(properties);
        };

        /**
         * Encodes the specified TCarPartBase message. Does not implicitly {@link table.TCarPartBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCarPartBase
         * @static
         * @param {table.ITCarPartBase} message TCarPartBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCarPart != null && message.TCarPart.length)
                for (var i = 0; i < message.TCarPart.length; ++i)
                    $root.table.TCarPartDefine.encode(message.TCarPart[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCarPartBase message, length delimited. Does not implicitly {@link table.TCarPartBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarPartBase
         * @static
         * @param {table.ITCarPartBase} message TCarPartBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarPartBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarPartBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarPartBase} TCarPartBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarPartBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCarPart && message.TCarPart.length))
                        message.TCarPart = [];
                    message.TCarPart.push($root.table.TCarPartDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarPartBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarPartBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarPartBase} TCarPartBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarPartBase message.
         * @function verify
         * @memberof table.TCarPartBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarPartBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCarPart != null && message.hasOwnProperty("TCarPart")) {
                if (!Array.isArray(message.TCarPart))
                    return "TCarPart: array expected";
                for (var i = 0; i < message.TCarPart.length; ++i) {
                    var error = $root.table.TCarPartDefine.verify(message.TCarPart[i]);
                    if (error)
                        return "TCarPart." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCarPartBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarPartBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarPartBase} TCarPartBase
         */
        TCarPartBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarPartBase)
                return object;
            var message = new $root.table.TCarPartBase();
            if (object.TCarPart) {
                if (!Array.isArray(object.TCarPart))
                    throw TypeError(".table.TCarPartBase.TCarPart: array expected");
                message.TCarPart = [];
                for (var i = 0; i < object.TCarPart.length; ++i) {
                    if (typeof object.TCarPart[i] !== "object")
                        throw TypeError(".table.TCarPartBase.TCarPart: object expected");
                    message.TCarPart[i] = $root.table.TCarPartDefine.fromObject(object.TCarPart[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCarPartBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarPartBase
         * @static
         * @param {table.TCarPartBase} message TCarPartBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarPartBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCarPart = [];
            if (message.TCarPart && message.TCarPart.length) {
                object.TCarPart = [];
                for (var j = 0; j < message.TCarPart.length; ++j)
                    object.TCarPart[j] = $root.table.TCarPartDefine.toObject(message.TCarPart[j], options);
            }
            return object;
        };

        /**
         * Converts this TCarPartBase to JSON.
         * @function toJSON
         * @memberof table.TCarPartBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarPartBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarPartBase;
    })();

    table.TCarPartDefine = (function() {

        /**
         * Properties of a TCarPartDefine.
         * @memberof table
         * @interface ITCarPartDefine
         * @property {number|null} [Id] TCarPartDefine Id
         * @property {number|null} [Type] TCarPartDefine Type
         * @property {number|null} [Quality] TCarPartDefine Quality
         * @property {number|null} [RewardInit] TCarPartDefine RewardInit
         * @property {number|null} [RangeInit] TCarPartDefine RangeInit
         * @property {number|null} [ItemLimitInit] TCarPartDefine ItemLimitInit
         * @property {number|null} [MoneyLimitInit] TCarPartDefine MoneyLimitInit
         * @property {number|null} [SpeedInit] TCarPartDefine SpeedInit
         * @property {number|null} [StopTimeInit] TCarPartDefine StopTimeInit
         * @property {number|null} [MaxLevel] TCarPartDefine MaxLevel
         * @property {number|null} [RewardAddition] TCarPartDefine RewardAddition
         * @property {number|null} [RangeAddition] TCarPartDefine RangeAddition
         * @property {number|null} [ItemLimitAddition] TCarPartDefine ItemLimitAddition
         * @property {number|null} [MoneyLimitAddition] TCarPartDefine MoneyLimitAddition
         * @property {number|null} [SpeedAddition] TCarPartDefine SpeedAddition
         * @property {number|null} [StopTimeAddition] TCarPartDefine StopTimeAddition
         */

        /**
         * Constructs a new TCarPartDefine.
         * @memberof table
         * @classdesc Represents a TCarPartDefine.
         * @implements ITCarPartDefine
         * @constructor
         * @param {table.ITCarPartDefine=} [properties] Properties to set
         */
        function TCarPartDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarPartDefine Id.
         * @member {number} Id
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.Id = 0;

        /**
         * TCarPartDefine Type.
         * @member {number} Type
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.Type = 0;

        /**
         * TCarPartDefine Quality.
         * @member {number} Quality
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.Quality = 0;

        /**
         * TCarPartDefine RewardInit.
         * @member {number} RewardInit
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.RewardInit = 0;

        /**
         * TCarPartDefine RangeInit.
         * @member {number} RangeInit
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.RangeInit = 0;

        /**
         * TCarPartDefine ItemLimitInit.
         * @member {number} ItemLimitInit
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.ItemLimitInit = 0;

        /**
         * TCarPartDefine MoneyLimitInit.
         * @member {number} MoneyLimitInit
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.MoneyLimitInit = 0;

        /**
         * TCarPartDefine SpeedInit.
         * @member {number} SpeedInit
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.SpeedInit = 0;

        /**
         * TCarPartDefine StopTimeInit.
         * @member {number} StopTimeInit
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.StopTimeInit = 0;

        /**
         * TCarPartDefine MaxLevel.
         * @member {number} MaxLevel
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.MaxLevel = 0;

        /**
         * TCarPartDefine RewardAddition.
         * @member {number} RewardAddition
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.RewardAddition = 0;

        /**
         * TCarPartDefine RangeAddition.
         * @member {number} RangeAddition
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.RangeAddition = 0;

        /**
         * TCarPartDefine ItemLimitAddition.
         * @member {number} ItemLimitAddition
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.ItemLimitAddition = 0;

        /**
         * TCarPartDefine MoneyLimitAddition.
         * @member {number} MoneyLimitAddition
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.MoneyLimitAddition = 0;

        /**
         * TCarPartDefine SpeedAddition.
         * @member {number} SpeedAddition
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.SpeedAddition = 0;

        /**
         * TCarPartDefine StopTimeAddition.
         * @member {number} StopTimeAddition
         * @memberof table.TCarPartDefine
         * @instance
         */
        TCarPartDefine.prototype.StopTimeAddition = 0;

        /**
         * Creates a new TCarPartDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarPartDefine
         * @static
         * @param {table.ITCarPartDefine=} [properties] Properties to set
         * @returns {table.TCarPartDefine} TCarPartDefine instance
         */
        TCarPartDefine.create = function create(properties) {
            return new TCarPartDefine(properties);
        };

        /**
         * Encodes the specified TCarPartDefine message. Does not implicitly {@link table.TCarPartDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarPartDefine
         * @static
         * @param {table.ITCarPartDefine} message TCarPartDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Type);
            if (message.Quality != null && message.hasOwnProperty("Quality"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Quality);
            if (message.RewardInit != null && message.hasOwnProperty("RewardInit"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.RewardInit);
            if (message.RangeInit != null && message.hasOwnProperty("RangeInit"))
                writer.uint32(/* id 5, wireType 5 =*/45).float(message.RangeInit);
            if (message.ItemLimitInit != null && message.hasOwnProperty("ItemLimitInit"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ItemLimitInit);
            if (message.MoneyLimitInit != null && message.hasOwnProperty("MoneyLimitInit"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.MoneyLimitInit);
            if (message.SpeedInit != null && message.hasOwnProperty("SpeedInit"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.SpeedInit);
            if (message.StopTimeInit != null && message.hasOwnProperty("StopTimeInit"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.StopTimeInit);
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.MaxLevel);
            if (message.RewardAddition != null && message.hasOwnProperty("RewardAddition"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.RewardAddition);
            if (message.RangeAddition != null && message.hasOwnProperty("RangeAddition"))
                writer.uint32(/* id 12, wireType 5 =*/101).float(message.RangeAddition);
            if (message.ItemLimitAddition != null && message.hasOwnProperty("ItemLimitAddition"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.ItemLimitAddition);
            if (message.MoneyLimitAddition != null && message.hasOwnProperty("MoneyLimitAddition"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.MoneyLimitAddition);
            if (message.SpeedAddition != null && message.hasOwnProperty("SpeedAddition"))
                writer.uint32(/* id 15, wireType 5 =*/125).float(message.SpeedAddition);
            if (message.StopTimeAddition != null && message.hasOwnProperty("StopTimeAddition"))
                writer.uint32(/* id 16, wireType 5 =*/133).float(message.StopTimeAddition);
            return writer;
        };

        /**
         * Encodes the specified TCarPartDefine message, length delimited. Does not implicitly {@link table.TCarPartDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarPartDefine
         * @static
         * @param {table.ITCarPartDefine} message TCarPartDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarPartDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarPartDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarPartDefine} TCarPartDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarPartDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.uint32();
                    break;
                case 3:
                    message.Quality = reader.uint32();
                    break;
                case 4:
                    message.RewardInit = reader.uint32();
                    break;
                case 5:
                    message.RangeInit = reader.float();
                    break;
                case 6:
                    message.ItemLimitInit = reader.uint32();
                    break;
                case 7:
                    message.MoneyLimitInit = reader.uint32();
                    break;
                case 8:
                    message.SpeedInit = reader.float();
                    break;
                case 9:
                    message.StopTimeInit = reader.float();
                    break;
                case 10:
                    message.MaxLevel = reader.uint32();
                    break;
                case 11:
                    message.RewardAddition = reader.uint32();
                    break;
                case 12:
                    message.RangeAddition = reader.float();
                    break;
                case 13:
                    message.ItemLimitAddition = reader.uint32();
                    break;
                case 14:
                    message.MoneyLimitAddition = reader.uint32();
                    break;
                case 15:
                    message.SpeedAddition = reader.float();
                    break;
                case 16:
                    message.StopTimeAddition = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarPartDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarPartDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarPartDefine} TCarPartDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarPartDefine message.
         * @function verify
         * @memberof table.TCarPartDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarPartDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Quality != null && message.hasOwnProperty("Quality"))
                if (!$util.isInteger(message.Quality))
                    return "Quality: integer expected";
            if (message.RewardInit != null && message.hasOwnProperty("RewardInit"))
                if (!$util.isInteger(message.RewardInit))
                    return "RewardInit: integer expected";
            if (message.RangeInit != null && message.hasOwnProperty("RangeInit"))
                if (typeof message.RangeInit !== "number")
                    return "RangeInit: number expected";
            if (message.ItemLimitInit != null && message.hasOwnProperty("ItemLimitInit"))
                if (!$util.isInteger(message.ItemLimitInit))
                    return "ItemLimitInit: integer expected";
            if (message.MoneyLimitInit != null && message.hasOwnProperty("MoneyLimitInit"))
                if (!$util.isInteger(message.MoneyLimitInit))
                    return "MoneyLimitInit: integer expected";
            if (message.SpeedInit != null && message.hasOwnProperty("SpeedInit"))
                if (typeof message.SpeedInit !== "number")
                    return "SpeedInit: number expected";
            if (message.StopTimeInit != null && message.hasOwnProperty("StopTimeInit"))
                if (typeof message.StopTimeInit !== "number")
                    return "StopTimeInit: number expected";
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                if (!$util.isInteger(message.MaxLevel))
                    return "MaxLevel: integer expected";
            if (message.RewardAddition != null && message.hasOwnProperty("RewardAddition"))
                if (!$util.isInteger(message.RewardAddition))
                    return "RewardAddition: integer expected";
            if (message.RangeAddition != null && message.hasOwnProperty("RangeAddition"))
                if (typeof message.RangeAddition !== "number")
                    return "RangeAddition: number expected";
            if (message.ItemLimitAddition != null && message.hasOwnProperty("ItemLimitAddition"))
                if (!$util.isInteger(message.ItemLimitAddition))
                    return "ItemLimitAddition: integer expected";
            if (message.MoneyLimitAddition != null && message.hasOwnProperty("MoneyLimitAddition"))
                if (!$util.isInteger(message.MoneyLimitAddition))
                    return "MoneyLimitAddition: integer expected";
            if (message.SpeedAddition != null && message.hasOwnProperty("SpeedAddition"))
                if (typeof message.SpeedAddition !== "number")
                    return "SpeedAddition: number expected";
            if (message.StopTimeAddition != null && message.hasOwnProperty("StopTimeAddition"))
                if (typeof message.StopTimeAddition !== "number")
                    return "StopTimeAddition: number expected";
            return null;
        };

        /**
         * Creates a TCarPartDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarPartDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarPartDefine} TCarPartDefine
         */
        TCarPartDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarPartDefine)
                return object;
            var message = new $root.table.TCarPartDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type >>> 0;
            if (object.Quality != null)
                message.Quality = object.Quality >>> 0;
            if (object.RewardInit != null)
                message.RewardInit = object.RewardInit >>> 0;
            if (object.RangeInit != null)
                message.RangeInit = Number(object.RangeInit);
            if (object.ItemLimitInit != null)
                message.ItemLimitInit = object.ItemLimitInit >>> 0;
            if (object.MoneyLimitInit != null)
                message.MoneyLimitInit = object.MoneyLimitInit >>> 0;
            if (object.SpeedInit != null)
                message.SpeedInit = Number(object.SpeedInit);
            if (object.StopTimeInit != null)
                message.StopTimeInit = Number(object.StopTimeInit);
            if (object.MaxLevel != null)
                message.MaxLevel = object.MaxLevel >>> 0;
            if (object.RewardAddition != null)
                message.RewardAddition = object.RewardAddition >>> 0;
            if (object.RangeAddition != null)
                message.RangeAddition = Number(object.RangeAddition);
            if (object.ItemLimitAddition != null)
                message.ItemLimitAddition = object.ItemLimitAddition >>> 0;
            if (object.MoneyLimitAddition != null)
                message.MoneyLimitAddition = object.MoneyLimitAddition >>> 0;
            if (object.SpeedAddition != null)
                message.SpeedAddition = Number(object.SpeedAddition);
            if (object.StopTimeAddition != null)
                message.StopTimeAddition = Number(object.StopTimeAddition);
            return message;
        };

        /**
         * Creates a plain object from a TCarPartDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarPartDefine
         * @static
         * @param {table.TCarPartDefine} message TCarPartDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarPartDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.Quality = 0;
                object.RewardInit = 0;
                object.RangeInit = 0;
                object.ItemLimitInit = 0;
                object.MoneyLimitInit = 0;
                object.SpeedInit = 0;
                object.StopTimeInit = 0;
                object.MaxLevel = 0;
                object.RewardAddition = 0;
                object.RangeAddition = 0;
                object.ItemLimitAddition = 0;
                object.MoneyLimitAddition = 0;
                object.SpeedAddition = 0;
                object.StopTimeAddition = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Quality != null && message.hasOwnProperty("Quality"))
                object.Quality = message.Quality;
            if (message.RewardInit != null && message.hasOwnProperty("RewardInit"))
                object.RewardInit = message.RewardInit;
            if (message.RangeInit != null && message.hasOwnProperty("RangeInit"))
                object.RangeInit = options.json && !isFinite(message.RangeInit) ? String(message.RangeInit) : message.RangeInit;
            if (message.ItemLimitInit != null && message.hasOwnProperty("ItemLimitInit"))
                object.ItemLimitInit = message.ItemLimitInit;
            if (message.MoneyLimitInit != null && message.hasOwnProperty("MoneyLimitInit"))
                object.MoneyLimitInit = message.MoneyLimitInit;
            if (message.SpeedInit != null && message.hasOwnProperty("SpeedInit"))
                object.SpeedInit = options.json && !isFinite(message.SpeedInit) ? String(message.SpeedInit) : message.SpeedInit;
            if (message.StopTimeInit != null && message.hasOwnProperty("StopTimeInit"))
                object.StopTimeInit = options.json && !isFinite(message.StopTimeInit) ? String(message.StopTimeInit) : message.StopTimeInit;
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                object.MaxLevel = message.MaxLevel;
            if (message.RewardAddition != null && message.hasOwnProperty("RewardAddition"))
                object.RewardAddition = message.RewardAddition;
            if (message.RangeAddition != null && message.hasOwnProperty("RangeAddition"))
                object.RangeAddition = options.json && !isFinite(message.RangeAddition) ? String(message.RangeAddition) : message.RangeAddition;
            if (message.ItemLimitAddition != null && message.hasOwnProperty("ItemLimitAddition"))
                object.ItemLimitAddition = message.ItemLimitAddition;
            if (message.MoneyLimitAddition != null && message.hasOwnProperty("MoneyLimitAddition"))
                object.MoneyLimitAddition = message.MoneyLimitAddition;
            if (message.SpeedAddition != null && message.hasOwnProperty("SpeedAddition"))
                object.SpeedAddition = options.json && !isFinite(message.SpeedAddition) ? String(message.SpeedAddition) : message.SpeedAddition;
            if (message.StopTimeAddition != null && message.hasOwnProperty("StopTimeAddition"))
                object.StopTimeAddition = options.json && !isFinite(message.StopTimeAddition) ? String(message.StopTimeAddition) : message.StopTimeAddition;
            return object;
        };

        /**
         * Converts this TCarPartDefine to JSON.
         * @function toJSON
         * @memberof table.TCarPartDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarPartDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarPartDefine;
    })();

    table.TCarPartLevelupBase = (function() {

        /**
         * Properties of a TCarPartLevelupBase.
         * @memberof table
         * @interface ITCarPartLevelupBase
         * @property {Array.<table.ITCarPartLevelupDefine>|null} [TCarPartLevelup] TCarPartLevelupBase TCarPartLevelup
         */

        /**
         * Constructs a new TCarPartLevelupBase.
         * @memberof table
         * @classdesc Represents a TCarPartLevelupBase.
         * @implements ITCarPartLevelupBase
         * @constructor
         * @param {table.ITCarPartLevelupBase=} [properties] Properties to set
         */
        function TCarPartLevelupBase(properties) {
            this.TCarPartLevelup = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarPartLevelupBase TCarPartLevelup.
         * @member {Array.<table.ITCarPartLevelupDefine>} TCarPartLevelup
         * @memberof table.TCarPartLevelupBase
         * @instance
         */
        TCarPartLevelupBase.prototype.TCarPartLevelup = $util.emptyArray;

        /**
         * Creates a new TCarPartLevelupBase instance using the specified properties.
         * @function create
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {table.ITCarPartLevelupBase=} [properties] Properties to set
         * @returns {table.TCarPartLevelupBase} TCarPartLevelupBase instance
         */
        TCarPartLevelupBase.create = function create(properties) {
            return new TCarPartLevelupBase(properties);
        };

        /**
         * Encodes the specified TCarPartLevelupBase message. Does not implicitly {@link table.TCarPartLevelupBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {table.ITCarPartLevelupBase} message TCarPartLevelupBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartLevelupBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCarPartLevelup != null && message.TCarPartLevelup.length)
                for (var i = 0; i < message.TCarPartLevelup.length; ++i)
                    $root.table.TCarPartLevelupDefine.encode(message.TCarPartLevelup[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCarPartLevelupBase message, length delimited. Does not implicitly {@link table.TCarPartLevelupBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {table.ITCarPartLevelupBase} message TCarPartLevelupBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartLevelupBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarPartLevelupBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarPartLevelupBase} TCarPartLevelupBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartLevelupBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarPartLevelupBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCarPartLevelup && message.TCarPartLevelup.length))
                        message.TCarPartLevelup = [];
                    message.TCarPartLevelup.push($root.table.TCarPartLevelupDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarPartLevelupBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarPartLevelupBase} TCarPartLevelupBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartLevelupBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarPartLevelupBase message.
         * @function verify
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarPartLevelupBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCarPartLevelup != null && message.hasOwnProperty("TCarPartLevelup")) {
                if (!Array.isArray(message.TCarPartLevelup))
                    return "TCarPartLevelup: array expected";
                for (var i = 0; i < message.TCarPartLevelup.length; ++i) {
                    var error = $root.table.TCarPartLevelupDefine.verify(message.TCarPartLevelup[i]);
                    if (error)
                        return "TCarPartLevelup." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCarPartLevelupBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarPartLevelupBase} TCarPartLevelupBase
         */
        TCarPartLevelupBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarPartLevelupBase)
                return object;
            var message = new $root.table.TCarPartLevelupBase();
            if (object.TCarPartLevelup) {
                if (!Array.isArray(object.TCarPartLevelup))
                    throw TypeError(".table.TCarPartLevelupBase.TCarPartLevelup: array expected");
                message.TCarPartLevelup = [];
                for (var i = 0; i < object.TCarPartLevelup.length; ++i) {
                    if (typeof object.TCarPartLevelup[i] !== "object")
                        throw TypeError(".table.TCarPartLevelupBase.TCarPartLevelup: object expected");
                    message.TCarPartLevelup[i] = $root.table.TCarPartLevelupDefine.fromObject(object.TCarPartLevelup[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCarPartLevelupBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarPartLevelupBase
         * @static
         * @param {table.TCarPartLevelupBase} message TCarPartLevelupBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarPartLevelupBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCarPartLevelup = [];
            if (message.TCarPartLevelup && message.TCarPartLevelup.length) {
                object.TCarPartLevelup = [];
                for (var j = 0; j < message.TCarPartLevelup.length; ++j)
                    object.TCarPartLevelup[j] = $root.table.TCarPartLevelupDefine.toObject(message.TCarPartLevelup[j], options);
            }
            return object;
        };

        /**
         * Converts this TCarPartLevelupBase to JSON.
         * @function toJSON
         * @memberof table.TCarPartLevelupBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarPartLevelupBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarPartLevelupBase;
    })();

    table.TCarPartLevelupDefine = (function() {

        /**
         * Properties of a TCarPartLevelupDefine.
         * @memberof table
         * @interface ITCarPartLevelupDefine
         * @property {number|null} [Id] TCarPartLevelupDefine Id
         * @property {number|null} [Quality] TCarPartLevelupDefine Quality
         * @property {number|null} [Level] TCarPartLevelupDefine Level
         * @property {number|null} [Exp] TCarPartLevelupDefine Exp
         * @property {number|null} [Cost] TCarPartLevelupDefine Cost
         */

        /**
         * Constructs a new TCarPartLevelupDefine.
         * @memberof table
         * @classdesc Represents a TCarPartLevelupDefine.
         * @implements ITCarPartLevelupDefine
         * @constructor
         * @param {table.ITCarPartLevelupDefine=} [properties] Properties to set
         */
        function TCarPartLevelupDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarPartLevelupDefine Id.
         * @member {number} Id
         * @memberof table.TCarPartLevelupDefine
         * @instance
         */
        TCarPartLevelupDefine.prototype.Id = 0;

        /**
         * TCarPartLevelupDefine Quality.
         * @member {number} Quality
         * @memberof table.TCarPartLevelupDefine
         * @instance
         */
        TCarPartLevelupDefine.prototype.Quality = 0;

        /**
         * TCarPartLevelupDefine Level.
         * @member {number} Level
         * @memberof table.TCarPartLevelupDefine
         * @instance
         */
        TCarPartLevelupDefine.prototype.Level = 0;

        /**
         * TCarPartLevelupDefine Exp.
         * @member {number} Exp
         * @memberof table.TCarPartLevelupDefine
         * @instance
         */
        TCarPartLevelupDefine.prototype.Exp = 0;

        /**
         * TCarPartLevelupDefine Cost.
         * @member {number} Cost
         * @memberof table.TCarPartLevelupDefine
         * @instance
         */
        TCarPartLevelupDefine.prototype.Cost = 0;

        /**
         * Creates a new TCarPartLevelupDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {table.ITCarPartLevelupDefine=} [properties] Properties to set
         * @returns {table.TCarPartLevelupDefine} TCarPartLevelupDefine instance
         */
        TCarPartLevelupDefine.create = function create(properties) {
            return new TCarPartLevelupDefine(properties);
        };

        /**
         * Encodes the specified TCarPartLevelupDefine message. Does not implicitly {@link table.TCarPartLevelupDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {table.ITCarPartLevelupDefine} message TCarPartLevelupDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartLevelupDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Quality != null && message.hasOwnProperty("Quality"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Quality);
            if (message.Level != null && message.hasOwnProperty("Level"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Level);
            if (message.Exp != null && message.hasOwnProperty("Exp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.Exp);
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.Cost);
            return writer;
        };

        /**
         * Encodes the specified TCarPartLevelupDefine message, length delimited. Does not implicitly {@link table.TCarPartLevelupDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {table.ITCarPartLevelupDefine} message TCarPartLevelupDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarPartLevelupDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarPartLevelupDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarPartLevelupDefine} TCarPartLevelupDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartLevelupDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarPartLevelupDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Quality = reader.uint32();
                    break;
                case 3:
                    message.Level = reader.uint32();
                    break;
                case 4:
                    message.Exp = reader.uint32();
                    break;
                case 5:
                    message.Cost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarPartLevelupDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarPartLevelupDefine} TCarPartLevelupDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarPartLevelupDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarPartLevelupDefine message.
         * @function verify
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarPartLevelupDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Quality != null && message.hasOwnProperty("Quality"))
                if (!$util.isInteger(message.Quality))
                    return "Quality: integer expected";
            if (message.Level != null && message.hasOwnProperty("Level"))
                if (!$util.isInteger(message.Level))
                    return "Level: integer expected";
            if (message.Exp != null && message.hasOwnProperty("Exp"))
                if (!$util.isInteger(message.Exp))
                    return "Exp: integer expected";
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                if (!$util.isInteger(message.Cost))
                    return "Cost: integer expected";
            return null;
        };

        /**
         * Creates a TCarPartLevelupDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarPartLevelupDefine} TCarPartLevelupDefine
         */
        TCarPartLevelupDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarPartLevelupDefine)
                return object;
            var message = new $root.table.TCarPartLevelupDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Quality != null)
                message.Quality = object.Quality >>> 0;
            if (object.Level != null)
                message.Level = object.Level >>> 0;
            if (object.Exp != null)
                message.Exp = object.Exp >>> 0;
            if (object.Cost != null)
                message.Cost = object.Cost >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TCarPartLevelupDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarPartLevelupDefine
         * @static
         * @param {table.TCarPartLevelupDefine} message TCarPartLevelupDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarPartLevelupDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Quality = 0;
                object.Level = 0;
                object.Exp = 0;
                object.Cost = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Quality != null && message.hasOwnProperty("Quality"))
                object.Quality = message.Quality;
            if (message.Level != null && message.hasOwnProperty("Level"))
                object.Level = message.Level;
            if (message.Exp != null && message.hasOwnProperty("Exp"))
                object.Exp = message.Exp;
            if (message.Cost != null && message.hasOwnProperty("Cost"))
                object.Cost = message.Cost;
            return object;
        };

        /**
         * Converts this TCarPartLevelupDefine to JSON.
         * @function toJSON
         * @memberof table.TCarPartLevelupDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarPartLevelupDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarPartLevelupDefine;
    })();

    table.CarShopBase = (function() {

        /**
         * Properties of a CarShopBase.
         * @memberof table
         * @interface ICarShopBase
         * @property {Array.<table.ITCarShopDefine>|null} [TCarShop] CarShopBase TCarShop
         */

        /**
         * Constructs a new CarShopBase.
         * @memberof table
         * @classdesc Represents a CarShopBase.
         * @implements ICarShopBase
         * @constructor
         * @param {table.ICarShopBase=} [properties] Properties to set
         */
        function CarShopBase(properties) {
            this.TCarShop = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CarShopBase TCarShop.
         * @member {Array.<table.ITCarShopDefine>} TCarShop
         * @memberof table.CarShopBase
         * @instance
         */
        CarShopBase.prototype.TCarShop = $util.emptyArray;

        /**
         * Creates a new CarShopBase instance using the specified properties.
         * @function create
         * @memberof table.CarShopBase
         * @static
         * @param {table.ICarShopBase=} [properties] Properties to set
         * @returns {table.CarShopBase} CarShopBase instance
         */
        CarShopBase.create = function create(properties) {
            return new CarShopBase(properties);
        };

        /**
         * Encodes the specified CarShopBase message. Does not implicitly {@link table.CarShopBase.verify|verify} messages.
         * @function encode
         * @memberof table.CarShopBase
         * @static
         * @param {table.ICarShopBase} message CarShopBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarShopBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCarShop != null && message.TCarShop.length)
                for (var i = 0; i < message.TCarShop.length; ++i)
                    $root.table.TCarShopDefine.encode(message.TCarShop[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CarShopBase message, length delimited. Does not implicitly {@link table.CarShopBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.CarShopBase
         * @static
         * @param {table.ICarShopBase} message CarShopBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CarShopBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CarShopBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.CarShopBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.CarShopBase} CarShopBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarShopBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.CarShopBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCarShop && message.TCarShop.length))
                        message.TCarShop = [];
                    message.TCarShop.push($root.table.TCarShopDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CarShopBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.CarShopBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.CarShopBase} CarShopBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CarShopBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CarShopBase message.
         * @function verify
         * @memberof table.CarShopBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CarShopBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCarShop != null && message.hasOwnProperty("TCarShop")) {
                if (!Array.isArray(message.TCarShop))
                    return "TCarShop: array expected";
                for (var i = 0; i < message.TCarShop.length; ++i) {
                    var error = $root.table.TCarShopDefine.verify(message.TCarShop[i]);
                    if (error)
                        return "TCarShop." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CarShopBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.CarShopBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.CarShopBase} CarShopBase
         */
        CarShopBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.CarShopBase)
                return object;
            var message = new $root.table.CarShopBase();
            if (object.TCarShop) {
                if (!Array.isArray(object.TCarShop))
                    throw TypeError(".table.CarShopBase.TCarShop: array expected");
                message.TCarShop = [];
                for (var i = 0; i < object.TCarShop.length; ++i) {
                    if (typeof object.TCarShop[i] !== "object")
                        throw TypeError(".table.CarShopBase.TCarShop: object expected");
                    message.TCarShop[i] = $root.table.TCarShopDefine.fromObject(object.TCarShop[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CarShopBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.CarShopBase
         * @static
         * @param {table.CarShopBase} message CarShopBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CarShopBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCarShop = [];
            if (message.TCarShop && message.TCarShop.length) {
                object.TCarShop = [];
                for (var j = 0; j < message.TCarShop.length; ++j)
                    object.TCarShop[j] = $root.table.TCarShopDefine.toObject(message.TCarShop[j], options);
            }
            return object;
        };

        /**
         * Converts this CarShopBase to JSON.
         * @function toJSON
         * @memberof table.CarShopBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CarShopBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CarShopBase;
    })();

    table.TCarShopDefine = (function() {

        /**
         * Properties of a TCarShopDefine.
         * @memberof table
         * @interface ITCarShopDefine
         * @property {number|null} [Id] TCarShopDefine Id
         * @property {number|null} [ShopId] TCarShopDefine ShopId
         * @property {number|null} [Carid] TCarShopDefine Carid
         * @property {number|null} [Price] TCarShopDefine Price
         * @property {number|null} [Nums] TCarShopDefine Nums
         */

        /**
         * Constructs a new TCarShopDefine.
         * @memberof table
         * @classdesc Represents a TCarShopDefine.
         * @implements ITCarShopDefine
         * @constructor
         * @param {table.ITCarShopDefine=} [properties] Properties to set
         */
        function TCarShopDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarShopDefine Id.
         * @member {number} Id
         * @memberof table.TCarShopDefine
         * @instance
         */
        TCarShopDefine.prototype.Id = 0;

        /**
         * TCarShopDefine ShopId.
         * @member {number} ShopId
         * @memberof table.TCarShopDefine
         * @instance
         */
        TCarShopDefine.prototype.ShopId = 0;

        /**
         * TCarShopDefine Carid.
         * @member {number} Carid
         * @memberof table.TCarShopDefine
         * @instance
         */
        TCarShopDefine.prototype.Carid = 0;

        /**
         * TCarShopDefine Price.
         * @member {number} Price
         * @memberof table.TCarShopDefine
         * @instance
         */
        TCarShopDefine.prototype.Price = 0;

        /**
         * TCarShopDefine Nums.
         * @member {number} Nums
         * @memberof table.TCarShopDefine
         * @instance
         */
        TCarShopDefine.prototype.Nums = 0;

        /**
         * Creates a new TCarShopDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarShopDefine
         * @static
         * @param {table.ITCarShopDefine=} [properties] Properties to set
         * @returns {table.TCarShopDefine} TCarShopDefine instance
         */
        TCarShopDefine.create = function create(properties) {
            return new TCarShopDefine(properties);
        };

        /**
         * Encodes the specified TCarShopDefine message. Does not implicitly {@link table.TCarShopDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarShopDefine
         * @static
         * @param {table.ITCarShopDefine} message TCarShopDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarShopDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.ShopId != null && message.hasOwnProperty("ShopId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ShopId);
            if (message.Carid != null && message.hasOwnProperty("Carid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Carid);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.Price);
            if (message.Nums != null && message.hasOwnProperty("Nums"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.Nums);
            return writer;
        };

        /**
         * Encodes the specified TCarShopDefine message, length delimited. Does not implicitly {@link table.TCarShopDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarShopDefine
         * @static
         * @param {table.ITCarShopDefine} message TCarShopDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarShopDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarShopDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarShopDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarShopDefine} TCarShopDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarShopDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarShopDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.ShopId = reader.uint32();
                    break;
                case 3:
                    message.Carid = reader.uint32();
                    break;
                case 4:
                    message.Price = reader.uint32();
                    break;
                case 5:
                    message.Nums = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarShopDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarShopDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarShopDefine} TCarShopDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarShopDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarShopDefine message.
         * @function verify
         * @memberof table.TCarShopDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarShopDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.ShopId != null && message.hasOwnProperty("ShopId"))
                if (!$util.isInteger(message.ShopId))
                    return "ShopId: integer expected";
            if (message.Carid != null && message.hasOwnProperty("Carid"))
                if (!$util.isInteger(message.Carid))
                    return "Carid: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Nums != null && message.hasOwnProperty("Nums"))
                if (!$util.isInteger(message.Nums))
                    return "Nums: integer expected";
            return null;
        };

        /**
         * Creates a TCarShopDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarShopDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarShopDefine} TCarShopDefine
         */
        TCarShopDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarShopDefine)
                return object;
            var message = new $root.table.TCarShopDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.ShopId != null)
                message.ShopId = object.ShopId >>> 0;
            if (object.Carid != null)
                message.Carid = object.Carid >>> 0;
            if (object.Price != null)
                message.Price = object.Price >>> 0;
            if (object.Nums != null)
                message.Nums = object.Nums >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TCarShopDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarShopDefine
         * @static
         * @param {table.TCarShopDefine} message TCarShopDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarShopDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.ShopId = 0;
                object.Carid = 0;
                object.Price = 0;
                object.Nums = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.ShopId != null && message.hasOwnProperty("ShopId"))
                object.ShopId = message.ShopId;
            if (message.Carid != null && message.hasOwnProperty("Carid"))
                object.Carid = message.Carid;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Nums != null && message.hasOwnProperty("Nums"))
                object.Nums = message.Nums;
            return object;
        };

        /**
         * Converts this TCarShopDefine to JSON.
         * @function toJSON
         * @memberof table.TCarShopDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarShopDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarShopDefine;
    })();

    table.TCarStarAttrBase = (function() {

        /**
         * Properties of a TCarStarAttrBase.
         * @memberof table
         * @interface ITCarStarAttrBase
         * @property {Array.<table.ITCarStarAttrDefine>|null} [TCarStarAttr] TCarStarAttrBase TCarStarAttr
         */

        /**
         * Constructs a new TCarStarAttrBase.
         * @memberof table
         * @classdesc Represents a TCarStarAttrBase.
         * @implements ITCarStarAttrBase
         * @constructor
         * @param {table.ITCarStarAttrBase=} [properties] Properties to set
         */
        function TCarStarAttrBase(properties) {
            this.TCarStarAttr = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarStarAttrBase TCarStarAttr.
         * @member {Array.<table.ITCarStarAttrDefine>} TCarStarAttr
         * @memberof table.TCarStarAttrBase
         * @instance
         */
        TCarStarAttrBase.prototype.TCarStarAttr = $util.emptyArray;

        /**
         * Creates a new TCarStarAttrBase instance using the specified properties.
         * @function create
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {table.ITCarStarAttrBase=} [properties] Properties to set
         * @returns {table.TCarStarAttrBase} TCarStarAttrBase instance
         */
        TCarStarAttrBase.create = function create(properties) {
            return new TCarStarAttrBase(properties);
        };

        /**
         * Encodes the specified TCarStarAttrBase message. Does not implicitly {@link table.TCarStarAttrBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {table.ITCarStarAttrBase} message TCarStarAttrBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarStarAttrBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCarStarAttr != null && message.TCarStarAttr.length)
                for (var i = 0; i < message.TCarStarAttr.length; ++i)
                    $root.table.TCarStarAttrDefine.encode(message.TCarStarAttr[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCarStarAttrBase message, length delimited. Does not implicitly {@link table.TCarStarAttrBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {table.ITCarStarAttrBase} message TCarStarAttrBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarStarAttrBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarStarAttrBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarStarAttrBase} TCarStarAttrBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarStarAttrBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarStarAttrBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCarStarAttr && message.TCarStarAttr.length))
                        message.TCarStarAttr = [];
                    message.TCarStarAttr.push($root.table.TCarStarAttrDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarStarAttrBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarStarAttrBase} TCarStarAttrBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarStarAttrBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarStarAttrBase message.
         * @function verify
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarStarAttrBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCarStarAttr != null && message.hasOwnProperty("TCarStarAttr")) {
                if (!Array.isArray(message.TCarStarAttr))
                    return "TCarStarAttr: array expected";
                for (var i = 0; i < message.TCarStarAttr.length; ++i) {
                    var error = $root.table.TCarStarAttrDefine.verify(message.TCarStarAttr[i]);
                    if (error)
                        return "TCarStarAttr." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCarStarAttrBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarStarAttrBase} TCarStarAttrBase
         */
        TCarStarAttrBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarStarAttrBase)
                return object;
            var message = new $root.table.TCarStarAttrBase();
            if (object.TCarStarAttr) {
                if (!Array.isArray(object.TCarStarAttr))
                    throw TypeError(".table.TCarStarAttrBase.TCarStarAttr: array expected");
                message.TCarStarAttr = [];
                for (var i = 0; i < object.TCarStarAttr.length; ++i) {
                    if (typeof object.TCarStarAttr[i] !== "object")
                        throw TypeError(".table.TCarStarAttrBase.TCarStarAttr: object expected");
                    message.TCarStarAttr[i] = $root.table.TCarStarAttrDefine.fromObject(object.TCarStarAttr[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCarStarAttrBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarStarAttrBase
         * @static
         * @param {table.TCarStarAttrBase} message TCarStarAttrBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarStarAttrBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCarStarAttr = [];
            if (message.TCarStarAttr && message.TCarStarAttr.length) {
                object.TCarStarAttr = [];
                for (var j = 0; j < message.TCarStarAttr.length; ++j)
                    object.TCarStarAttr[j] = $root.table.TCarStarAttrDefine.toObject(message.TCarStarAttr[j], options);
            }
            return object;
        };

        /**
         * Converts this TCarStarAttrBase to JSON.
         * @function toJSON
         * @memberof table.TCarStarAttrBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarStarAttrBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarStarAttrBase;
    })();

    table.TCarStarAttrDefine = (function() {

        /**
         * Properties of a TCarStarAttrDefine.
         * @memberof table
         * @interface ITCarStarAttrDefine
         * @property {number|null} [Id] TCarStarAttrDefine Id
         * @property {number|null} [RewardInit] TCarStarAttrDefine RewardInit
         * @property {number|null} [RangeInit] TCarStarAttrDefine RangeInit
         * @property {number|null} [ItemLimitInit] TCarStarAttrDefine ItemLimitInit
         * @property {number|null} [MoneyLimitInit] TCarStarAttrDefine MoneyLimitInit
         * @property {number|null} [SpeedInit] TCarStarAttrDefine SpeedInit
         * @property {number|null} [StopTimeInit] TCarStarAttrDefine StopTimeInit
         * @property {number|null} [RewardAddition] TCarStarAttrDefine RewardAddition
         * @property {number|null} [RangeAddition] TCarStarAttrDefine RangeAddition
         * @property {number|null} [ItemLimitAddition] TCarStarAttrDefine ItemLimitAddition
         * @property {number|null} [MoneyLimitAddition] TCarStarAttrDefine MoneyLimitAddition
         * @property {number|null} [SpeedAddition] TCarStarAttrDefine SpeedAddition
         * @property {number|null} [StopTimeAddition] TCarStarAttrDefine StopTimeAddition
         */

        /**
         * Constructs a new TCarStarAttrDefine.
         * @memberof table
         * @classdesc Represents a TCarStarAttrDefine.
         * @implements ITCarStarAttrDefine
         * @constructor
         * @param {table.ITCarStarAttrDefine=} [properties] Properties to set
         */
        function TCarStarAttrDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCarStarAttrDefine Id.
         * @member {number} Id
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.Id = 0;

        /**
         * TCarStarAttrDefine RewardInit.
         * @member {number} RewardInit
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.RewardInit = 0;

        /**
         * TCarStarAttrDefine RangeInit.
         * @member {number} RangeInit
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.RangeInit = 0;

        /**
         * TCarStarAttrDefine ItemLimitInit.
         * @member {number} ItemLimitInit
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.ItemLimitInit = 0;

        /**
         * TCarStarAttrDefine MoneyLimitInit.
         * @member {number} MoneyLimitInit
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.MoneyLimitInit = 0;

        /**
         * TCarStarAttrDefine SpeedInit.
         * @member {number} SpeedInit
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.SpeedInit = 0;

        /**
         * TCarStarAttrDefine StopTimeInit.
         * @member {number} StopTimeInit
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.StopTimeInit = 0;

        /**
         * TCarStarAttrDefine RewardAddition.
         * @member {number} RewardAddition
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.RewardAddition = 0;

        /**
         * TCarStarAttrDefine RangeAddition.
         * @member {number} RangeAddition
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.RangeAddition = 0;

        /**
         * TCarStarAttrDefine ItemLimitAddition.
         * @member {number} ItemLimitAddition
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.ItemLimitAddition = 0;

        /**
         * TCarStarAttrDefine MoneyLimitAddition.
         * @member {number} MoneyLimitAddition
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.MoneyLimitAddition = 0;

        /**
         * TCarStarAttrDefine SpeedAddition.
         * @member {number} SpeedAddition
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.SpeedAddition = 0;

        /**
         * TCarStarAttrDefine StopTimeAddition.
         * @member {number} StopTimeAddition
         * @memberof table.TCarStarAttrDefine
         * @instance
         */
        TCarStarAttrDefine.prototype.StopTimeAddition = 0;

        /**
         * Creates a new TCarStarAttrDefine instance using the specified properties.
         * @function create
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {table.ITCarStarAttrDefine=} [properties] Properties to set
         * @returns {table.TCarStarAttrDefine} TCarStarAttrDefine instance
         */
        TCarStarAttrDefine.create = function create(properties) {
            return new TCarStarAttrDefine(properties);
        };

        /**
         * Encodes the specified TCarStarAttrDefine message. Does not implicitly {@link table.TCarStarAttrDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {table.ITCarStarAttrDefine} message TCarStarAttrDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarStarAttrDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.RewardInit != null && message.hasOwnProperty("RewardInit"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.RewardInit);
            if (message.RangeInit != null && message.hasOwnProperty("RangeInit"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.RangeInit);
            if (message.ItemLimitInit != null && message.hasOwnProperty("ItemLimitInit"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ItemLimitInit);
            if (message.MoneyLimitInit != null && message.hasOwnProperty("MoneyLimitInit"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.MoneyLimitInit);
            if (message.SpeedInit != null && message.hasOwnProperty("SpeedInit"))
                writer.uint32(/* id 6, wireType 5 =*/53).float(message.SpeedInit);
            if (message.StopTimeInit != null && message.hasOwnProperty("StopTimeInit"))
                writer.uint32(/* id 7, wireType 5 =*/61).float(message.StopTimeInit);
            if (message.RewardAddition != null && message.hasOwnProperty("RewardAddition"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.RewardAddition);
            if (message.RangeAddition != null && message.hasOwnProperty("RangeAddition"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.RangeAddition);
            if (message.ItemLimitAddition != null && message.hasOwnProperty("ItemLimitAddition"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.ItemLimitAddition);
            if (message.MoneyLimitAddition != null && message.hasOwnProperty("MoneyLimitAddition"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.MoneyLimitAddition);
            if (message.SpeedAddition != null && message.hasOwnProperty("SpeedAddition"))
                writer.uint32(/* id 12, wireType 5 =*/101).float(message.SpeedAddition);
            if (message.StopTimeAddition != null && message.hasOwnProperty("StopTimeAddition"))
                writer.uint32(/* id 13, wireType 5 =*/109).float(message.StopTimeAddition);
            return writer;
        };

        /**
         * Encodes the specified TCarStarAttrDefine message, length delimited. Does not implicitly {@link table.TCarStarAttrDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {table.ITCarStarAttrDefine} message TCarStarAttrDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCarStarAttrDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCarStarAttrDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCarStarAttrDefine} TCarStarAttrDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarStarAttrDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCarStarAttrDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.RewardInit = reader.uint32();
                    break;
                case 3:
                    message.RangeInit = reader.float();
                    break;
                case 4:
                    message.ItemLimitInit = reader.uint32();
                    break;
                case 5:
                    message.MoneyLimitInit = reader.uint32();
                    break;
                case 6:
                    message.SpeedInit = reader.float();
                    break;
                case 7:
                    message.StopTimeInit = reader.float();
                    break;
                case 8:
                    message.RewardAddition = reader.uint32();
                    break;
                case 9:
                    message.RangeAddition = reader.float();
                    break;
                case 10:
                    message.ItemLimitAddition = reader.uint32();
                    break;
                case 11:
                    message.MoneyLimitAddition = reader.uint32();
                    break;
                case 12:
                    message.SpeedAddition = reader.float();
                    break;
                case 13:
                    message.StopTimeAddition = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCarStarAttrDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCarStarAttrDefine} TCarStarAttrDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCarStarAttrDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCarStarAttrDefine message.
         * @function verify
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCarStarAttrDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.RewardInit != null && message.hasOwnProperty("RewardInit"))
                if (!$util.isInteger(message.RewardInit))
                    return "RewardInit: integer expected";
            if (message.RangeInit != null && message.hasOwnProperty("RangeInit"))
                if (typeof message.RangeInit !== "number")
                    return "RangeInit: number expected";
            if (message.ItemLimitInit != null && message.hasOwnProperty("ItemLimitInit"))
                if (!$util.isInteger(message.ItemLimitInit))
                    return "ItemLimitInit: integer expected";
            if (message.MoneyLimitInit != null && message.hasOwnProperty("MoneyLimitInit"))
                if (!$util.isInteger(message.MoneyLimitInit))
                    return "MoneyLimitInit: integer expected";
            if (message.SpeedInit != null && message.hasOwnProperty("SpeedInit"))
                if (typeof message.SpeedInit !== "number")
                    return "SpeedInit: number expected";
            if (message.StopTimeInit != null && message.hasOwnProperty("StopTimeInit"))
                if (typeof message.StopTimeInit !== "number")
                    return "StopTimeInit: number expected";
            if (message.RewardAddition != null && message.hasOwnProperty("RewardAddition"))
                if (!$util.isInteger(message.RewardAddition))
                    return "RewardAddition: integer expected";
            if (message.RangeAddition != null && message.hasOwnProperty("RangeAddition"))
                if (typeof message.RangeAddition !== "number")
                    return "RangeAddition: number expected";
            if (message.ItemLimitAddition != null && message.hasOwnProperty("ItemLimitAddition"))
                if (!$util.isInteger(message.ItemLimitAddition))
                    return "ItemLimitAddition: integer expected";
            if (message.MoneyLimitAddition != null && message.hasOwnProperty("MoneyLimitAddition"))
                if (!$util.isInteger(message.MoneyLimitAddition))
                    return "MoneyLimitAddition: integer expected";
            if (message.SpeedAddition != null && message.hasOwnProperty("SpeedAddition"))
                if (typeof message.SpeedAddition !== "number")
                    return "SpeedAddition: number expected";
            if (message.StopTimeAddition != null && message.hasOwnProperty("StopTimeAddition"))
                if (typeof message.StopTimeAddition !== "number")
                    return "StopTimeAddition: number expected";
            return null;
        };

        /**
         * Creates a TCarStarAttrDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCarStarAttrDefine} TCarStarAttrDefine
         */
        TCarStarAttrDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCarStarAttrDefine)
                return object;
            var message = new $root.table.TCarStarAttrDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.RewardInit != null)
                message.RewardInit = object.RewardInit >>> 0;
            if (object.RangeInit != null)
                message.RangeInit = Number(object.RangeInit);
            if (object.ItemLimitInit != null)
                message.ItemLimitInit = object.ItemLimitInit >>> 0;
            if (object.MoneyLimitInit != null)
                message.MoneyLimitInit = object.MoneyLimitInit >>> 0;
            if (object.SpeedInit != null)
                message.SpeedInit = Number(object.SpeedInit);
            if (object.StopTimeInit != null)
                message.StopTimeInit = Number(object.StopTimeInit);
            if (object.RewardAddition != null)
                message.RewardAddition = object.RewardAddition >>> 0;
            if (object.RangeAddition != null)
                message.RangeAddition = Number(object.RangeAddition);
            if (object.ItemLimitAddition != null)
                message.ItemLimitAddition = object.ItemLimitAddition >>> 0;
            if (object.MoneyLimitAddition != null)
                message.MoneyLimitAddition = object.MoneyLimitAddition >>> 0;
            if (object.SpeedAddition != null)
                message.SpeedAddition = Number(object.SpeedAddition);
            if (object.StopTimeAddition != null)
                message.StopTimeAddition = Number(object.StopTimeAddition);
            return message;
        };

        /**
         * Creates a plain object from a TCarStarAttrDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCarStarAttrDefine
         * @static
         * @param {table.TCarStarAttrDefine} message TCarStarAttrDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCarStarAttrDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.RewardInit = 0;
                object.RangeInit = 0;
                object.ItemLimitInit = 0;
                object.MoneyLimitInit = 0;
                object.SpeedInit = 0;
                object.StopTimeInit = 0;
                object.RewardAddition = 0;
                object.RangeAddition = 0;
                object.ItemLimitAddition = 0;
                object.MoneyLimitAddition = 0;
                object.SpeedAddition = 0;
                object.StopTimeAddition = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.RewardInit != null && message.hasOwnProperty("RewardInit"))
                object.RewardInit = message.RewardInit;
            if (message.RangeInit != null && message.hasOwnProperty("RangeInit"))
                object.RangeInit = options.json && !isFinite(message.RangeInit) ? String(message.RangeInit) : message.RangeInit;
            if (message.ItemLimitInit != null && message.hasOwnProperty("ItemLimitInit"))
                object.ItemLimitInit = message.ItemLimitInit;
            if (message.MoneyLimitInit != null && message.hasOwnProperty("MoneyLimitInit"))
                object.MoneyLimitInit = message.MoneyLimitInit;
            if (message.SpeedInit != null && message.hasOwnProperty("SpeedInit"))
                object.SpeedInit = options.json && !isFinite(message.SpeedInit) ? String(message.SpeedInit) : message.SpeedInit;
            if (message.StopTimeInit != null && message.hasOwnProperty("StopTimeInit"))
                object.StopTimeInit = options.json && !isFinite(message.StopTimeInit) ? String(message.StopTimeInit) : message.StopTimeInit;
            if (message.RewardAddition != null && message.hasOwnProperty("RewardAddition"))
                object.RewardAddition = message.RewardAddition;
            if (message.RangeAddition != null && message.hasOwnProperty("RangeAddition"))
                object.RangeAddition = options.json && !isFinite(message.RangeAddition) ? String(message.RangeAddition) : message.RangeAddition;
            if (message.ItemLimitAddition != null && message.hasOwnProperty("ItemLimitAddition"))
                object.ItemLimitAddition = message.ItemLimitAddition;
            if (message.MoneyLimitAddition != null && message.hasOwnProperty("MoneyLimitAddition"))
                object.MoneyLimitAddition = message.MoneyLimitAddition;
            if (message.SpeedAddition != null && message.hasOwnProperty("SpeedAddition"))
                object.SpeedAddition = options.json && !isFinite(message.SpeedAddition) ? String(message.SpeedAddition) : message.SpeedAddition;
            if (message.StopTimeAddition != null && message.hasOwnProperty("StopTimeAddition"))
                object.StopTimeAddition = options.json && !isFinite(message.StopTimeAddition) ? String(message.StopTimeAddition) : message.StopTimeAddition;
            return object;
        };

        /**
         * Converts this TCarStarAttrDefine to JSON.
         * @function toJSON
         * @memberof table.TCarStarAttrDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCarStarAttrDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCarStarAttrDefine;
    })();

    table.TCitysBase = (function() {

        /**
         * Properties of a TCitysBase.
         * @memberof table
         * @interface ITCitysBase
         * @property {Array.<table.ITCitysDefine>|null} [TCitys] TCitysBase TCitys
         */

        /**
         * Constructs a new TCitysBase.
         * @memberof table
         * @classdesc Represents a TCitysBase.
         * @implements ITCitysBase
         * @constructor
         * @param {table.ITCitysBase=} [properties] Properties to set
         */
        function TCitysBase(properties) {
            this.TCitys = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCitysBase TCitys.
         * @member {Array.<table.ITCitysDefine>} TCitys
         * @memberof table.TCitysBase
         * @instance
         */
        TCitysBase.prototype.TCitys = $util.emptyArray;

        /**
         * Creates a new TCitysBase instance using the specified properties.
         * @function create
         * @memberof table.TCitysBase
         * @static
         * @param {table.ITCitysBase=} [properties] Properties to set
         * @returns {table.TCitysBase} TCitysBase instance
         */
        TCitysBase.create = function create(properties) {
            return new TCitysBase(properties);
        };

        /**
         * Encodes the specified TCitysBase message. Does not implicitly {@link table.TCitysBase.verify|verify} messages.
         * @function encode
         * @memberof table.TCitysBase
         * @static
         * @param {table.ITCitysBase} message TCitysBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCitysBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TCitys != null && message.TCitys.length)
                for (var i = 0; i < message.TCitys.length; ++i)
                    $root.table.TCitysDefine.encode(message.TCitys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TCitysBase message, length delimited. Does not implicitly {@link table.TCitysBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCitysBase
         * @static
         * @param {table.ITCitysBase} message TCitysBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCitysBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCitysBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCitysBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCitysBase} TCitysBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCitysBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCitysBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TCitys && message.TCitys.length))
                        message.TCitys = [];
                    message.TCitys.push($root.table.TCitysDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCitysBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCitysBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCitysBase} TCitysBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCitysBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCitysBase message.
         * @function verify
         * @memberof table.TCitysBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCitysBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TCitys != null && message.hasOwnProperty("TCitys")) {
                if (!Array.isArray(message.TCitys))
                    return "TCitys: array expected";
                for (var i = 0; i < message.TCitys.length; ++i) {
                    var error = $root.table.TCitysDefine.verify(message.TCitys[i]);
                    if (error)
                        return "TCitys." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TCitysBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCitysBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCitysBase} TCitysBase
         */
        TCitysBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCitysBase)
                return object;
            var message = new $root.table.TCitysBase();
            if (object.TCitys) {
                if (!Array.isArray(object.TCitys))
                    throw TypeError(".table.TCitysBase.TCitys: array expected");
                message.TCitys = [];
                for (var i = 0; i < object.TCitys.length; ++i) {
                    if (typeof object.TCitys[i] !== "object")
                        throw TypeError(".table.TCitysBase.TCitys: object expected");
                    message.TCitys[i] = $root.table.TCitysDefine.fromObject(object.TCitys[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TCitysBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCitysBase
         * @static
         * @param {table.TCitysBase} message TCitysBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCitysBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TCitys = [];
            if (message.TCitys && message.TCitys.length) {
                object.TCitys = [];
                for (var j = 0; j < message.TCitys.length; ++j)
                    object.TCitys[j] = $root.table.TCitysDefine.toObject(message.TCitys[j], options);
            }
            return object;
        };

        /**
         * Converts this TCitysBase to JSON.
         * @function toJSON
         * @memberof table.TCitysBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCitysBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCitysBase;
    })();

    table.TCitysDefine = (function() {

        /**
         * Properties of a TCitysDefine.
         * @memberof table
         * @interface ITCitysDefine
         * @property {number|null} [Id] TCitysDefine Id
         * @property {number|null} [Type] TCitysDefine Type
         * @property {number|null} [Superior] TCitysDefine Superior
         * @property {string|null} [Name] TCitysDefine Name
         * @property {number|null} [Lat] TCitysDefine Lat
         * @property {number|null} [Lng] TCitysDefine Lng
         */

        /**
         * Constructs a new TCitysDefine.
         * @memberof table
         * @classdesc Represents a TCitysDefine.
         * @implements ITCitysDefine
         * @constructor
         * @param {table.ITCitysDefine=} [properties] Properties to set
         */
        function TCitysDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TCitysDefine Id.
         * @member {number} Id
         * @memberof table.TCitysDefine
         * @instance
         */
        TCitysDefine.prototype.Id = 0;

        /**
         * TCitysDefine Type.
         * @member {number} Type
         * @memberof table.TCitysDefine
         * @instance
         */
        TCitysDefine.prototype.Type = 0;

        /**
         * TCitysDefine Superior.
         * @member {number} Superior
         * @memberof table.TCitysDefine
         * @instance
         */
        TCitysDefine.prototype.Superior = 0;

        /**
         * TCitysDefine Name.
         * @member {string} Name
         * @memberof table.TCitysDefine
         * @instance
         */
        TCitysDefine.prototype.Name = "";

        /**
         * TCitysDefine Lat.
         * @member {number} Lat
         * @memberof table.TCitysDefine
         * @instance
         */
        TCitysDefine.prototype.Lat = 0;

        /**
         * TCitysDefine Lng.
         * @member {number} Lng
         * @memberof table.TCitysDefine
         * @instance
         */
        TCitysDefine.prototype.Lng = 0;

        /**
         * Creates a new TCitysDefine instance using the specified properties.
         * @function create
         * @memberof table.TCitysDefine
         * @static
         * @param {table.ITCitysDefine=} [properties] Properties to set
         * @returns {table.TCitysDefine} TCitysDefine instance
         */
        TCitysDefine.create = function create(properties) {
            return new TCitysDefine(properties);
        };

        /**
         * Encodes the specified TCitysDefine message. Does not implicitly {@link table.TCitysDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TCitysDefine
         * @static
         * @param {table.ITCitysDefine} message TCitysDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCitysDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Type);
            if (message.Superior != null && message.hasOwnProperty("Superior"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Superior);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.Name);
            if (message.Lat != null && message.hasOwnProperty("Lat"))
                writer.uint32(/* id 5, wireType 5 =*/45).float(message.Lat);
            if (message.Lng != null && message.hasOwnProperty("Lng"))
                writer.uint32(/* id 6, wireType 5 =*/53).float(message.Lng);
            return writer;
        };

        /**
         * Encodes the specified TCitysDefine message, length delimited. Does not implicitly {@link table.TCitysDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TCitysDefine
         * @static
         * @param {table.ITCitysDefine} message TCitysDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TCitysDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TCitysDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TCitysDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TCitysDefine} TCitysDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCitysDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TCitysDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.uint32();
                    break;
                case 3:
                    message.Superior = reader.uint32();
                    break;
                case 4:
                    message.Name = reader.string();
                    break;
                case 5:
                    message.Lat = reader.float();
                    break;
                case 6:
                    message.Lng = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TCitysDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TCitysDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TCitysDefine} TCitysDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TCitysDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TCitysDefine message.
         * @function verify
         * @memberof table.TCitysDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TCitysDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Superior != null && message.hasOwnProperty("Superior"))
                if (!$util.isInteger(message.Superior))
                    return "Superior: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Lat != null && message.hasOwnProperty("Lat"))
                if (typeof message.Lat !== "number")
                    return "Lat: number expected";
            if (message.Lng != null && message.hasOwnProperty("Lng"))
                if (typeof message.Lng !== "number")
                    return "Lng: number expected";
            return null;
        };

        /**
         * Creates a TCitysDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TCitysDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TCitysDefine} TCitysDefine
         */
        TCitysDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TCitysDefine)
                return object;
            var message = new $root.table.TCitysDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type >>> 0;
            if (object.Superior != null)
                message.Superior = object.Superior >>> 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Lat != null)
                message.Lat = Number(object.Lat);
            if (object.Lng != null)
                message.Lng = Number(object.Lng);
            return message;
        };

        /**
         * Creates a plain object from a TCitysDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TCitysDefine
         * @static
         * @param {table.TCitysDefine} message TCitysDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TCitysDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.Superior = 0;
                object.Name = "";
                object.Lat = 0;
                object.Lng = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Superior != null && message.hasOwnProperty("Superior"))
                object.Superior = message.Superior;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Lat != null && message.hasOwnProperty("Lat"))
                object.Lat = options.json && !isFinite(message.Lat) ? String(message.Lat) : message.Lat;
            if (message.Lng != null && message.hasOwnProperty("Lng"))
                object.Lng = options.json && !isFinite(message.Lng) ? String(message.Lng) : message.Lng;
            return object;
        };

        /**
         * Converts this TCitysDefine to JSON.
         * @function toJSON
         * @memberof table.TCitysDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TCitysDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TCitysDefine;
    })();

    table.TEquipBase = (function() {

        /**
         * Properties of a TEquipBase.
         * @memberof table
         * @interface ITEquipBase
         * @property {Array.<table.IEquipDefine>|null} [Equip] TEquipBase Equip
         */

        /**
         * Constructs a new TEquipBase.
         * @memberof table
         * @classdesc Represents a TEquipBase.
         * @implements ITEquipBase
         * @constructor
         * @param {table.ITEquipBase=} [properties] Properties to set
         */
        function TEquipBase(properties) {
            this.Equip = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TEquipBase Equip.
         * @member {Array.<table.IEquipDefine>} Equip
         * @memberof table.TEquipBase
         * @instance
         */
        TEquipBase.prototype.Equip = $util.emptyArray;

        /**
         * Creates a new TEquipBase instance using the specified properties.
         * @function create
         * @memberof table.TEquipBase
         * @static
         * @param {table.ITEquipBase=} [properties] Properties to set
         * @returns {table.TEquipBase} TEquipBase instance
         */
        TEquipBase.create = function create(properties) {
            return new TEquipBase(properties);
        };

        /**
         * Encodes the specified TEquipBase message. Does not implicitly {@link table.TEquipBase.verify|verify} messages.
         * @function encode
         * @memberof table.TEquipBase
         * @static
         * @param {table.ITEquipBase} message TEquipBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TEquipBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Equip != null && message.Equip.length)
                for (var i = 0; i < message.Equip.length; ++i)
                    $root.table.EquipDefine.encode(message.Equip[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TEquipBase message, length delimited. Does not implicitly {@link table.TEquipBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TEquipBase
         * @static
         * @param {table.ITEquipBase} message TEquipBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TEquipBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TEquipBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TEquipBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TEquipBase} TEquipBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TEquipBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TEquipBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.Equip && message.Equip.length))
                        message.Equip = [];
                    message.Equip.push($root.table.EquipDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TEquipBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TEquipBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TEquipBase} TEquipBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TEquipBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TEquipBase message.
         * @function verify
         * @memberof table.TEquipBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TEquipBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Equip != null && message.hasOwnProperty("Equip")) {
                if (!Array.isArray(message.Equip))
                    return "Equip: array expected";
                for (var i = 0; i < message.Equip.length; ++i) {
                    var error = $root.table.EquipDefine.verify(message.Equip[i]);
                    if (error)
                        return "Equip." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TEquipBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TEquipBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TEquipBase} TEquipBase
         */
        TEquipBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TEquipBase)
                return object;
            var message = new $root.table.TEquipBase();
            if (object.Equip) {
                if (!Array.isArray(object.Equip))
                    throw TypeError(".table.TEquipBase.Equip: array expected");
                message.Equip = [];
                for (var i = 0; i < object.Equip.length; ++i) {
                    if (typeof object.Equip[i] !== "object")
                        throw TypeError(".table.TEquipBase.Equip: object expected");
                    message.Equip[i] = $root.table.EquipDefine.fromObject(object.Equip[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TEquipBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TEquipBase
         * @static
         * @param {table.TEquipBase} message TEquipBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TEquipBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Equip = [];
            if (message.Equip && message.Equip.length) {
                object.Equip = [];
                for (var j = 0; j < message.Equip.length; ++j)
                    object.Equip[j] = $root.table.EquipDefine.toObject(message.Equip[j], options);
            }
            return object;
        };

        /**
         * Converts this TEquipBase to JSON.
         * @function toJSON
         * @memberof table.TEquipBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TEquipBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TEquipBase;
    })();

    table.EquipDefine = (function() {

        /**
         * Properties of an EquipDefine.
         * @memberof table
         * @interface IEquipDefine
         * @property {number|null} [Id] EquipDefine Id
         * @property {string|null} [Name] EquipDefine Name
         * @property {string|null} [Desc] EquipDefine Desc
         * @property {number|null} [Pos] EquipDefine Pos
         * @property {number|null} [SuitId] EquipDefine SuitId
         * @property {number|null} [Sex] EquipDefine Sex
         * @property {Array.<string>|null} [LoadPoint] EquipDefine LoadPoint
         * @property {string|null} [Path] EquipDefine Path
         * @property {Array.<string>|null} [Skill] EquipDefine Skill
         * @property {number|null} [Price] EquipDefine Price
         * @property {number|null} [CoinType] EquipDefine CoinType
         * @property {string|null} [Suit] EquipDefine Suit
         * @property {number|null} [DebrisId] EquipDefine DebrisId
         * @property {number|null} [DebrisNum] EquipDefine DebrisNum
         */

        /**
         * Constructs a new EquipDefine.
         * @memberof table
         * @classdesc Represents an EquipDefine.
         * @implements IEquipDefine
         * @constructor
         * @param {table.IEquipDefine=} [properties] Properties to set
         */
        function EquipDefine(properties) {
            this.LoadPoint = [];
            this.Skill = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EquipDefine Id.
         * @member {number} Id
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Id = 0;

        /**
         * EquipDefine Name.
         * @member {string} Name
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Name = "";

        /**
         * EquipDefine Desc.
         * @member {string} Desc
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Desc = "";

        /**
         * EquipDefine Pos.
         * @member {number} Pos
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Pos = 0;

        /**
         * EquipDefine SuitId.
         * @member {number} SuitId
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.SuitId = 0;

        /**
         * EquipDefine Sex.
         * @member {number} Sex
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Sex = 0;

        /**
         * EquipDefine LoadPoint.
         * @member {Array.<string>} LoadPoint
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.LoadPoint = $util.emptyArray;

        /**
         * EquipDefine Path.
         * @member {string} Path
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Path = "";

        /**
         * EquipDefine Skill.
         * @member {Array.<string>} Skill
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Skill = $util.emptyArray;

        /**
         * EquipDefine Price.
         * @member {number} Price
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Price = 0;

        /**
         * EquipDefine CoinType.
         * @member {number} CoinType
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.CoinType = 0;

        /**
         * EquipDefine Suit.
         * @member {string} Suit
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.Suit = "";

        /**
         * EquipDefine DebrisId.
         * @member {number} DebrisId
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.DebrisId = 0;

        /**
         * EquipDefine DebrisNum.
         * @member {number} DebrisNum
         * @memberof table.EquipDefine
         * @instance
         */
        EquipDefine.prototype.DebrisNum = 0;

        /**
         * Creates a new EquipDefine instance using the specified properties.
         * @function create
         * @memberof table.EquipDefine
         * @static
         * @param {table.IEquipDefine=} [properties] Properties to set
         * @returns {table.EquipDefine} EquipDefine instance
         */
        EquipDefine.create = function create(properties) {
            return new EquipDefine(properties);
        };

        /**
         * Encodes the specified EquipDefine message. Does not implicitly {@link table.EquipDefine.verify|verify} messages.
         * @function encode
         * @memberof table.EquipDefine
         * @static
         * @param {table.IEquipDefine} message EquipDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EquipDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Desc);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Pos);
            if (message.SuitId != null && message.hasOwnProperty("SuitId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.SuitId);
            if (message.Sex != null && message.hasOwnProperty("Sex"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Sex);
            if (message.LoadPoint != null && message.LoadPoint.length)
                for (var i = 0; i < message.LoadPoint.length; ++i)
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.LoadPoint[i]);
            if (message.Path != null && message.hasOwnProperty("Path"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.Path);
            if (message.Skill != null && message.Skill.length)
                for (var i = 0; i < message.Skill.length; ++i)
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.Skill[i]);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.Price);
            if (message.CoinType != null && message.hasOwnProperty("CoinType"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.CoinType);
            if (message.Suit != null && message.hasOwnProperty("Suit"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.Suit);
            if (message.DebrisId != null && message.hasOwnProperty("DebrisId"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.DebrisId);
            if (message.DebrisNum != null && message.hasOwnProperty("DebrisNum"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.DebrisNum);
            return writer;
        };

        /**
         * Encodes the specified EquipDefine message, length delimited. Does not implicitly {@link table.EquipDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.EquipDefine
         * @static
         * @param {table.IEquipDefine} message EquipDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EquipDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EquipDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.EquipDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.EquipDefine} EquipDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EquipDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.EquipDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                case 3:
                    message.Desc = reader.string();
                    break;
                case 4:
                    message.Pos = reader.int32();
                    break;
                case 5:
                    message.SuitId = reader.int32();
                    break;
                case 6:
                    message.Sex = reader.int32();
                    break;
                case 7:
                    if (!(message.LoadPoint && message.LoadPoint.length))
                        message.LoadPoint = [];
                    message.LoadPoint.push(reader.string());
                    break;
                case 8:
                    message.Path = reader.string();
                    break;
                case 9:
                    if (!(message.Skill && message.Skill.length))
                        message.Skill = [];
                    message.Skill.push(reader.string());
                    break;
                case 10:
                    message.Price = reader.int32();
                    break;
                case 11:
                    message.CoinType = reader.int32();
                    break;
                case 12:
                    message.Suit = reader.string();
                    break;
                case 13:
                    message.DebrisId = reader.uint32();
                    break;
                case 14:
                    message.DebrisNum = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EquipDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.EquipDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.EquipDefine} EquipDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EquipDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EquipDefine message.
         * @function verify
         * @memberof table.EquipDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EquipDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                if (!$util.isInteger(message.Pos))
                    return "Pos: integer expected";
            if (message.SuitId != null && message.hasOwnProperty("SuitId"))
                if (!$util.isInteger(message.SuitId))
                    return "SuitId: integer expected";
            if (message.Sex != null && message.hasOwnProperty("Sex"))
                if (!$util.isInteger(message.Sex))
                    return "Sex: integer expected";
            if (message.LoadPoint != null && message.hasOwnProperty("LoadPoint")) {
                if (!Array.isArray(message.LoadPoint))
                    return "LoadPoint: array expected";
                for (var i = 0; i < message.LoadPoint.length; ++i)
                    if (!$util.isString(message.LoadPoint[i]))
                        return "LoadPoint: string[] expected";
            }
            if (message.Path != null && message.hasOwnProperty("Path"))
                if (!$util.isString(message.Path))
                    return "Path: string expected";
            if (message.Skill != null && message.hasOwnProperty("Skill")) {
                if (!Array.isArray(message.Skill))
                    return "Skill: array expected";
                for (var i = 0; i < message.Skill.length; ++i)
                    if (!$util.isString(message.Skill[i]))
                        return "Skill: string[] expected";
            }
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.CoinType != null && message.hasOwnProperty("CoinType"))
                if (!$util.isInteger(message.CoinType))
                    return "CoinType: integer expected";
            if (message.Suit != null && message.hasOwnProperty("Suit"))
                if (!$util.isString(message.Suit))
                    return "Suit: string expected";
            if (message.DebrisId != null && message.hasOwnProperty("DebrisId"))
                if (!$util.isInteger(message.DebrisId))
                    return "DebrisId: integer expected";
            if (message.DebrisNum != null && message.hasOwnProperty("DebrisNum"))
                if (!$util.isInteger(message.DebrisNum))
                    return "DebrisNum: integer expected";
            return null;
        };

        /**
         * Creates an EquipDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.EquipDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.EquipDefine} EquipDefine
         */
        EquipDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.EquipDefine)
                return object;
            var message = new $root.table.EquipDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.Pos != null)
                message.Pos = object.Pos | 0;
            if (object.SuitId != null)
                message.SuitId = object.SuitId | 0;
            if (object.Sex != null)
                message.Sex = object.Sex | 0;
            if (object.LoadPoint) {
                if (!Array.isArray(object.LoadPoint))
                    throw TypeError(".table.EquipDefine.LoadPoint: array expected");
                message.LoadPoint = [];
                for (var i = 0; i < object.LoadPoint.length; ++i)
                    message.LoadPoint[i] = String(object.LoadPoint[i]);
            }
            if (object.Path != null)
                message.Path = String(object.Path);
            if (object.Skill) {
                if (!Array.isArray(object.Skill))
                    throw TypeError(".table.EquipDefine.Skill: array expected");
                message.Skill = [];
                for (var i = 0; i < object.Skill.length; ++i)
                    message.Skill[i] = String(object.Skill[i]);
            }
            if (object.Price != null)
                message.Price = object.Price | 0;
            if (object.CoinType != null)
                message.CoinType = object.CoinType | 0;
            if (object.Suit != null)
                message.Suit = String(object.Suit);
            if (object.DebrisId != null)
                message.DebrisId = object.DebrisId >>> 0;
            if (object.DebrisNum != null)
                message.DebrisNum = object.DebrisNum >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an EquipDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.EquipDefine
         * @static
         * @param {table.EquipDefine} message EquipDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EquipDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.LoadPoint = [];
                object.Skill = [];
            }
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
                object.Desc = "";
                object.Pos = 0;
                object.SuitId = 0;
                object.Sex = 0;
                object.Path = "";
                object.Price = 0;
                object.CoinType = 0;
                object.Suit = "";
                object.DebrisId = 0;
                object.DebrisNum = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = message.Pos;
            if (message.SuitId != null && message.hasOwnProperty("SuitId"))
                object.SuitId = message.SuitId;
            if (message.Sex != null && message.hasOwnProperty("Sex"))
                object.Sex = message.Sex;
            if (message.LoadPoint && message.LoadPoint.length) {
                object.LoadPoint = [];
                for (var j = 0; j < message.LoadPoint.length; ++j)
                    object.LoadPoint[j] = message.LoadPoint[j];
            }
            if (message.Path != null && message.hasOwnProperty("Path"))
                object.Path = message.Path;
            if (message.Skill && message.Skill.length) {
                object.Skill = [];
                for (var j = 0; j < message.Skill.length; ++j)
                    object.Skill[j] = message.Skill[j];
            }
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.CoinType != null && message.hasOwnProperty("CoinType"))
                object.CoinType = message.CoinType;
            if (message.Suit != null && message.hasOwnProperty("Suit"))
                object.Suit = message.Suit;
            if (message.DebrisId != null && message.hasOwnProperty("DebrisId"))
                object.DebrisId = message.DebrisId;
            if (message.DebrisNum != null && message.hasOwnProperty("DebrisNum"))
                object.DebrisNum = message.DebrisNum;
            return object;
        };

        /**
         * Converts this EquipDefine to JSON.
         * @function toJSON
         * @memberof table.EquipDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EquipDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EquipDefine;
    })();

    table.GiftProBase = (function() {

        /**
         * Properties of a GiftProBase.
         * @memberof table
         * @interface IGiftProBase
         * @property {Array.<table.ITGiftProDefine>|null} [TGiftPro] GiftProBase TGiftPro
         */

        /**
         * Constructs a new GiftProBase.
         * @memberof table
         * @classdesc Represents a GiftProBase.
         * @implements IGiftProBase
         * @constructor
         * @param {table.IGiftProBase=} [properties] Properties to set
         */
        function GiftProBase(properties) {
            this.TGiftPro = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GiftProBase TGiftPro.
         * @member {Array.<table.ITGiftProDefine>} TGiftPro
         * @memberof table.GiftProBase
         * @instance
         */
        GiftProBase.prototype.TGiftPro = $util.emptyArray;

        /**
         * Creates a new GiftProBase instance using the specified properties.
         * @function create
         * @memberof table.GiftProBase
         * @static
         * @param {table.IGiftProBase=} [properties] Properties to set
         * @returns {table.GiftProBase} GiftProBase instance
         */
        GiftProBase.create = function create(properties) {
            return new GiftProBase(properties);
        };

        /**
         * Encodes the specified GiftProBase message. Does not implicitly {@link table.GiftProBase.verify|verify} messages.
         * @function encode
         * @memberof table.GiftProBase
         * @static
         * @param {table.IGiftProBase} message GiftProBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftProBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TGiftPro != null && message.TGiftPro.length)
                for (var i = 0; i < message.TGiftPro.length; ++i)
                    $root.table.TGiftProDefine.encode(message.TGiftPro[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GiftProBase message, length delimited. Does not implicitly {@link table.GiftProBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.GiftProBase
         * @static
         * @param {table.IGiftProBase} message GiftProBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftProBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GiftProBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.GiftProBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.GiftProBase} GiftProBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftProBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.GiftProBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TGiftPro && message.TGiftPro.length))
                        message.TGiftPro = [];
                    message.TGiftPro.push($root.table.TGiftProDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GiftProBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.GiftProBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.GiftProBase} GiftProBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftProBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GiftProBase message.
         * @function verify
         * @memberof table.GiftProBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GiftProBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TGiftPro != null && message.hasOwnProperty("TGiftPro")) {
                if (!Array.isArray(message.TGiftPro))
                    return "TGiftPro: array expected";
                for (var i = 0; i < message.TGiftPro.length; ++i) {
                    var error = $root.table.TGiftProDefine.verify(message.TGiftPro[i]);
                    if (error)
                        return "TGiftPro." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GiftProBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.GiftProBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.GiftProBase} GiftProBase
         */
        GiftProBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.GiftProBase)
                return object;
            var message = new $root.table.GiftProBase();
            if (object.TGiftPro) {
                if (!Array.isArray(object.TGiftPro))
                    throw TypeError(".table.GiftProBase.TGiftPro: array expected");
                message.TGiftPro = [];
                for (var i = 0; i < object.TGiftPro.length; ++i) {
                    if (typeof object.TGiftPro[i] !== "object")
                        throw TypeError(".table.GiftProBase.TGiftPro: object expected");
                    message.TGiftPro[i] = $root.table.TGiftProDefine.fromObject(object.TGiftPro[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GiftProBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.GiftProBase
         * @static
         * @param {table.GiftProBase} message GiftProBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GiftProBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TGiftPro = [];
            if (message.TGiftPro && message.TGiftPro.length) {
                object.TGiftPro = [];
                for (var j = 0; j < message.TGiftPro.length; ++j)
                    object.TGiftPro[j] = $root.table.TGiftProDefine.toObject(message.TGiftPro[j], options);
            }
            return object;
        };

        /**
         * Converts this GiftProBase to JSON.
         * @function toJSON
         * @memberof table.GiftProBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GiftProBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GiftProBase;
    })();

    table.TGiftProDefine = (function() {

        /**
         * Properties of a TGiftProDefine.
         * @memberof table
         * @interface ITGiftProDefine
         * @property {number|null} [Id] TGiftProDefine Id
         * @property {number|null} [Limitmin] TGiftProDefine Limitmin
         * @property {number|null} [Limitmax] TGiftProDefine Limitmax
         * @property {Array.<string>|null} [Pro] TGiftProDefine Pro
         */

        /**
         * Constructs a new TGiftProDefine.
         * @memberof table
         * @classdesc Represents a TGiftProDefine.
         * @implements ITGiftProDefine
         * @constructor
         * @param {table.ITGiftProDefine=} [properties] Properties to set
         */
        function TGiftProDefine(properties) {
            this.Pro = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TGiftProDefine Id.
         * @member {number} Id
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Id = 0;

        /**
         * TGiftProDefine Limitmin.
         * @member {number} Limitmin
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Limitmin = 0;

        /**
         * TGiftProDefine Limitmax.
         * @member {number} Limitmax
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Limitmax = 0;

        /**
         * TGiftProDefine Pro.
         * @member {Array.<string>} Pro
         * @memberof table.TGiftProDefine
         * @instance
         */
        TGiftProDefine.prototype.Pro = $util.emptyArray;

        /**
         * Creates a new TGiftProDefine instance using the specified properties.
         * @function create
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.ITGiftProDefine=} [properties] Properties to set
         * @returns {table.TGiftProDefine} TGiftProDefine instance
         */
        TGiftProDefine.create = function create(properties) {
            return new TGiftProDefine(properties);
        };

        /**
         * Encodes the specified TGiftProDefine message. Does not implicitly {@link table.TGiftProDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.ITGiftProDefine} message TGiftProDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TGiftProDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Limitmin != null && message.hasOwnProperty("Limitmin"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Limitmin);
            if (message.Limitmax != null && message.hasOwnProperty("Limitmax"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Limitmax);
            if (message.Pro != null && message.Pro.length)
                for (var i = 0; i < message.Pro.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Pro[i]);
            return writer;
        };

        /**
         * Encodes the specified TGiftProDefine message, length delimited. Does not implicitly {@link table.TGiftProDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.ITGiftProDefine} message TGiftProDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TGiftProDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TGiftProDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TGiftProDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TGiftProDefine} TGiftProDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TGiftProDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TGiftProDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Limitmin = reader.uint32();
                    break;
                case 3:
                    message.Limitmax = reader.uint32();
                    break;
                case 4:
                    if (!(message.Pro && message.Pro.length))
                        message.Pro = [];
                    message.Pro.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TGiftProDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TGiftProDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TGiftProDefine} TGiftProDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TGiftProDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TGiftProDefine message.
         * @function verify
         * @memberof table.TGiftProDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TGiftProDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Limitmin != null && message.hasOwnProperty("Limitmin"))
                if (!$util.isInteger(message.Limitmin))
                    return "Limitmin: integer expected";
            if (message.Limitmax != null && message.hasOwnProperty("Limitmax"))
                if (!$util.isInteger(message.Limitmax))
                    return "Limitmax: integer expected";
            if (message.Pro != null && message.hasOwnProperty("Pro")) {
                if (!Array.isArray(message.Pro))
                    return "Pro: array expected";
                for (var i = 0; i < message.Pro.length; ++i)
                    if (!$util.isString(message.Pro[i]))
                        return "Pro: string[] expected";
            }
            return null;
        };

        /**
         * Creates a TGiftProDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TGiftProDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TGiftProDefine} TGiftProDefine
         */
        TGiftProDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TGiftProDefine)
                return object;
            var message = new $root.table.TGiftProDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Limitmin != null)
                message.Limitmin = object.Limitmin >>> 0;
            if (object.Limitmax != null)
                message.Limitmax = object.Limitmax >>> 0;
            if (object.Pro) {
                if (!Array.isArray(object.Pro))
                    throw TypeError(".table.TGiftProDefine.Pro: array expected");
                message.Pro = [];
                for (var i = 0; i < object.Pro.length; ++i)
                    message.Pro[i] = String(object.Pro[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a TGiftProDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TGiftProDefine
         * @static
         * @param {table.TGiftProDefine} message TGiftProDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TGiftProDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Pro = [];
            if (options.defaults) {
                object.Id = 0;
                object.Limitmin = 0;
                object.Limitmax = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Limitmin != null && message.hasOwnProperty("Limitmin"))
                object.Limitmin = message.Limitmin;
            if (message.Limitmax != null && message.hasOwnProperty("Limitmax"))
                object.Limitmax = message.Limitmax;
            if (message.Pro && message.Pro.length) {
                object.Pro = [];
                for (var j = 0; j < message.Pro.length; ++j)
                    object.Pro[j] = message.Pro[j];
            }
            return object;
        };

        /**
         * Converts this TGiftProDefine to JSON.
         * @function toJSON
         * @memberof table.TGiftProDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TGiftProDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TGiftProDefine;
    })();

    table.THouseBase = (function() {

        /**
         * Properties of a THouseBase.
         * @memberof table
         * @interface ITHouseBase
         * @property {Array.<table.ITHouseDefine>|null} [THouse] THouseBase THouse
         */

        /**
         * Constructs a new THouseBase.
         * @memberof table
         * @classdesc Represents a THouseBase.
         * @implements ITHouseBase
         * @constructor
         * @param {table.ITHouseBase=} [properties] Properties to set
         */
        function THouseBase(properties) {
            this.THouse = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * THouseBase THouse.
         * @member {Array.<table.ITHouseDefine>} THouse
         * @memberof table.THouseBase
         * @instance
         */
        THouseBase.prototype.THouse = $util.emptyArray;

        /**
         * Creates a new THouseBase instance using the specified properties.
         * @function create
         * @memberof table.THouseBase
         * @static
         * @param {table.ITHouseBase=} [properties] Properties to set
         * @returns {table.THouseBase} THouseBase instance
         */
        THouseBase.create = function create(properties) {
            return new THouseBase(properties);
        };

        /**
         * Encodes the specified THouseBase message. Does not implicitly {@link table.THouseBase.verify|verify} messages.
         * @function encode
         * @memberof table.THouseBase
         * @static
         * @param {table.ITHouseBase} message THouseBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.THouse != null && message.THouse.length)
                for (var i = 0; i < message.THouse.length; ++i)
                    $root.table.THouseDefine.encode(message.THouse[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified THouseBase message, length delimited. Does not implicitly {@link table.THouseBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.THouseBase
         * @static
         * @param {table.ITHouseBase} message THouseBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a THouseBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.THouseBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.THouseBase} THouseBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.THouseBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.THouse && message.THouse.length))
                        message.THouse = [];
                    message.THouse.push($root.table.THouseDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a THouseBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.THouseBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.THouseBase} THouseBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a THouseBase message.
         * @function verify
         * @memberof table.THouseBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        THouseBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.THouse != null && message.hasOwnProperty("THouse")) {
                if (!Array.isArray(message.THouse))
                    return "THouse: array expected";
                for (var i = 0; i < message.THouse.length; ++i) {
                    var error = $root.table.THouseDefine.verify(message.THouse[i]);
                    if (error)
                        return "THouse." + error;
                }
            }
            return null;
        };

        /**
         * Creates a THouseBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.THouseBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.THouseBase} THouseBase
         */
        THouseBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.THouseBase)
                return object;
            var message = new $root.table.THouseBase();
            if (object.THouse) {
                if (!Array.isArray(object.THouse))
                    throw TypeError(".table.THouseBase.THouse: array expected");
                message.THouse = [];
                for (var i = 0; i < object.THouse.length; ++i) {
                    if (typeof object.THouse[i] !== "object")
                        throw TypeError(".table.THouseBase.THouse: object expected");
                    message.THouse[i] = $root.table.THouseDefine.fromObject(object.THouse[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a THouseBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.THouseBase
         * @static
         * @param {table.THouseBase} message THouseBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        THouseBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.THouse = [];
            if (message.THouse && message.THouse.length) {
                object.THouse = [];
                for (var j = 0; j < message.THouse.length; ++j)
                    object.THouse[j] = $root.table.THouseDefine.toObject(message.THouse[j], options);
            }
            return object;
        };

        /**
         * Converts this THouseBase to JSON.
         * @function toJSON
         * @memberof table.THouseBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        THouseBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return THouseBase;
    })();

    table.THouseDefine = (function() {

        /**
         * Properties of a THouseDefine.
         * @memberof table
         * @interface ITHouseDefine
         * @property {number|null} [Id] THouseDefine Id
         * @property {number|null} [ImageId] THouseDefine ImageId
         * @property {number|null} [Type] THouseDefine Type
         * @property {number|null} [MaxLevel] THouseDefine MaxLevel
         * @property {number|null} [MaxCells] THouseDefine MaxCells
         * @property {string|null} [Cells] THouseDefine Cells
         * @property {number|null} [LevelUpCost] THouseDefine LevelUpCost
         * @property {string|null} [LevelUpNeedItem] THouseDefine LevelUpNeedItem
         * @property {string|null} [Des] THouseDefine Des
         * @property {string|null} [RoomPosition] THouseDefine RoomPosition
         * @property {string|null} [GirlsPosition] THouseDefine GirlsPosition
         */

        /**
         * Constructs a new THouseDefine.
         * @memberof table
         * @classdesc Represents a THouseDefine.
         * @implements ITHouseDefine
         * @constructor
         * @param {table.ITHouseDefine=} [properties] Properties to set
         */
        function THouseDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * THouseDefine Id.
         * @member {number} Id
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.Id = 0;

        /**
         * THouseDefine ImageId.
         * @member {number} ImageId
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.ImageId = 0;

        /**
         * THouseDefine Type.
         * @member {number} Type
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.Type = 0;

        /**
         * THouseDefine MaxLevel.
         * @member {number} MaxLevel
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.MaxLevel = 0;

        /**
         * THouseDefine MaxCells.
         * @member {number} MaxCells
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.MaxCells = 0;

        /**
         * THouseDefine Cells.
         * @member {string} Cells
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.Cells = "";

        /**
         * THouseDefine LevelUpCost.
         * @member {number} LevelUpCost
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.LevelUpCost = 0;

        /**
         * THouseDefine LevelUpNeedItem.
         * @member {string} LevelUpNeedItem
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.LevelUpNeedItem = "";

        /**
         * THouseDefine Des.
         * @member {string} Des
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.Des = "";

        /**
         * THouseDefine RoomPosition.
         * @member {string} RoomPosition
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.RoomPosition = "";

        /**
         * THouseDefine GirlsPosition.
         * @member {string} GirlsPosition
         * @memberof table.THouseDefine
         * @instance
         */
        THouseDefine.prototype.GirlsPosition = "";

        /**
         * Creates a new THouseDefine instance using the specified properties.
         * @function create
         * @memberof table.THouseDefine
         * @static
         * @param {table.ITHouseDefine=} [properties] Properties to set
         * @returns {table.THouseDefine} THouseDefine instance
         */
        THouseDefine.create = function create(properties) {
            return new THouseDefine(properties);
        };

        /**
         * Encodes the specified THouseDefine message. Does not implicitly {@link table.THouseDefine.verify|verify} messages.
         * @function encode
         * @memberof table.THouseDefine
         * @static
         * @param {table.ITHouseDefine} message THouseDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ImageId);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Type);
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.MaxLevel);
            if (message.MaxCells != null && message.hasOwnProperty("MaxCells"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.MaxCells);
            if (message.Cells != null && message.hasOwnProperty("Cells"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.Cells);
            if (message.LevelUpCost != null && message.hasOwnProperty("LevelUpCost"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.LevelUpCost);
            if (message.LevelUpNeedItem != null && message.hasOwnProperty("LevelUpNeedItem"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.LevelUpNeedItem);
            if (message.Des != null && message.hasOwnProperty("Des"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.Des);
            if (message.RoomPosition != null && message.hasOwnProperty("RoomPosition"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.RoomPosition);
            if (message.GirlsPosition != null && message.hasOwnProperty("GirlsPosition"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.GirlsPosition);
            return writer;
        };

        /**
         * Encodes the specified THouseDefine message, length delimited. Does not implicitly {@link table.THouseDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.THouseDefine
         * @static
         * @param {table.ITHouseDefine} message THouseDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a THouseDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.THouseDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.THouseDefine} THouseDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.THouseDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.ImageId = reader.uint32();
                    break;
                case 3:
                    message.Type = reader.uint32();
                    break;
                case 4:
                    message.MaxLevel = reader.uint32();
                    break;
                case 5:
                    message.MaxCells = reader.uint32();
                    break;
                case 6:
                    message.Cells = reader.string();
                    break;
                case 7:
                    message.LevelUpCost = reader.uint32();
                    break;
                case 8:
                    message.LevelUpNeedItem = reader.string();
                    break;
                case 9:
                    message.Des = reader.string();
                    break;
                case 10:
                    message.RoomPosition = reader.string();
                    break;
                case 11:
                    message.GirlsPosition = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a THouseDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.THouseDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.THouseDefine} THouseDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a THouseDefine message.
         * @function verify
         * @memberof table.THouseDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        THouseDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                if (!$util.isInteger(message.ImageId))
                    return "ImageId: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                if (!$util.isInteger(message.MaxLevel))
                    return "MaxLevel: integer expected";
            if (message.MaxCells != null && message.hasOwnProperty("MaxCells"))
                if (!$util.isInteger(message.MaxCells))
                    return "MaxCells: integer expected";
            if (message.Cells != null && message.hasOwnProperty("Cells"))
                if (!$util.isString(message.Cells))
                    return "Cells: string expected";
            if (message.LevelUpCost != null && message.hasOwnProperty("LevelUpCost"))
                if (!$util.isInteger(message.LevelUpCost))
                    return "LevelUpCost: integer expected";
            if (message.LevelUpNeedItem != null && message.hasOwnProperty("LevelUpNeedItem"))
                if (!$util.isString(message.LevelUpNeedItem))
                    return "LevelUpNeedItem: string expected";
            if (message.Des != null && message.hasOwnProperty("Des"))
                if (!$util.isString(message.Des))
                    return "Des: string expected";
            if (message.RoomPosition != null && message.hasOwnProperty("RoomPosition"))
                if (!$util.isString(message.RoomPosition))
                    return "RoomPosition: string expected";
            if (message.GirlsPosition != null && message.hasOwnProperty("GirlsPosition"))
                if (!$util.isString(message.GirlsPosition))
                    return "GirlsPosition: string expected";
            return null;
        };

        /**
         * Creates a THouseDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.THouseDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.THouseDefine} THouseDefine
         */
        THouseDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.THouseDefine)
                return object;
            var message = new $root.table.THouseDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.ImageId != null)
                message.ImageId = object.ImageId >>> 0;
            if (object.Type != null)
                message.Type = object.Type >>> 0;
            if (object.MaxLevel != null)
                message.MaxLevel = object.MaxLevel >>> 0;
            if (object.MaxCells != null)
                message.MaxCells = object.MaxCells >>> 0;
            if (object.Cells != null)
                message.Cells = String(object.Cells);
            if (object.LevelUpCost != null)
                message.LevelUpCost = object.LevelUpCost >>> 0;
            if (object.LevelUpNeedItem != null)
                message.LevelUpNeedItem = String(object.LevelUpNeedItem);
            if (object.Des != null)
                message.Des = String(object.Des);
            if (object.RoomPosition != null)
                message.RoomPosition = String(object.RoomPosition);
            if (object.GirlsPosition != null)
                message.GirlsPosition = String(object.GirlsPosition);
            return message;
        };

        /**
         * Creates a plain object from a THouseDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.THouseDefine
         * @static
         * @param {table.THouseDefine} message THouseDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        THouseDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.ImageId = 0;
                object.Type = 0;
                object.MaxLevel = 0;
                object.MaxCells = 0;
                object.Cells = "";
                object.LevelUpCost = 0;
                object.LevelUpNeedItem = "";
                object.Des = "";
                object.RoomPosition = "";
                object.GirlsPosition = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                object.ImageId = message.ImageId;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                object.MaxLevel = message.MaxLevel;
            if (message.MaxCells != null && message.hasOwnProperty("MaxCells"))
                object.MaxCells = message.MaxCells;
            if (message.Cells != null && message.hasOwnProperty("Cells"))
                object.Cells = message.Cells;
            if (message.LevelUpCost != null && message.hasOwnProperty("LevelUpCost"))
                object.LevelUpCost = message.LevelUpCost;
            if (message.LevelUpNeedItem != null && message.hasOwnProperty("LevelUpNeedItem"))
                object.LevelUpNeedItem = message.LevelUpNeedItem;
            if (message.Des != null && message.hasOwnProperty("Des"))
                object.Des = message.Des;
            if (message.RoomPosition != null && message.hasOwnProperty("RoomPosition"))
                object.RoomPosition = message.RoomPosition;
            if (message.GirlsPosition != null && message.hasOwnProperty("GirlsPosition"))
                object.GirlsPosition = message.GirlsPosition;
            return object;
        };

        /**
         * Converts this THouseDefine to JSON.
         * @function toJSON
         * @memberof table.THouseDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        THouseDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return THouseDefine;
    })();

    table.THouseCellBase = (function() {

        /**
         * Properties of a THouseCellBase.
         * @memberof table
         * @interface ITHouseCellBase
         * @property {Array.<table.ITHouseCellDefine>|null} [THouseCell] THouseCellBase THouseCell
         */

        /**
         * Constructs a new THouseCellBase.
         * @memberof table
         * @classdesc Represents a THouseCellBase.
         * @implements ITHouseCellBase
         * @constructor
         * @param {table.ITHouseCellBase=} [properties] Properties to set
         */
        function THouseCellBase(properties) {
            this.THouseCell = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * THouseCellBase THouseCell.
         * @member {Array.<table.ITHouseCellDefine>} THouseCell
         * @memberof table.THouseCellBase
         * @instance
         */
        THouseCellBase.prototype.THouseCell = $util.emptyArray;

        /**
         * Creates a new THouseCellBase instance using the specified properties.
         * @function create
         * @memberof table.THouseCellBase
         * @static
         * @param {table.ITHouseCellBase=} [properties] Properties to set
         * @returns {table.THouseCellBase} THouseCellBase instance
         */
        THouseCellBase.create = function create(properties) {
            return new THouseCellBase(properties);
        };

        /**
         * Encodes the specified THouseCellBase message. Does not implicitly {@link table.THouseCellBase.verify|verify} messages.
         * @function encode
         * @memberof table.THouseCellBase
         * @static
         * @param {table.ITHouseCellBase} message THouseCellBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseCellBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.THouseCell != null && message.THouseCell.length)
                for (var i = 0; i < message.THouseCell.length; ++i)
                    $root.table.THouseCellDefine.encode(message.THouseCell[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified THouseCellBase message, length delimited. Does not implicitly {@link table.THouseCellBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.THouseCellBase
         * @static
         * @param {table.ITHouseCellBase} message THouseCellBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseCellBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a THouseCellBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.THouseCellBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.THouseCellBase} THouseCellBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseCellBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.THouseCellBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.THouseCell && message.THouseCell.length))
                        message.THouseCell = [];
                    message.THouseCell.push($root.table.THouseCellDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a THouseCellBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.THouseCellBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.THouseCellBase} THouseCellBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseCellBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a THouseCellBase message.
         * @function verify
         * @memberof table.THouseCellBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        THouseCellBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.THouseCell != null && message.hasOwnProperty("THouseCell")) {
                if (!Array.isArray(message.THouseCell))
                    return "THouseCell: array expected";
                for (var i = 0; i < message.THouseCell.length; ++i) {
                    var error = $root.table.THouseCellDefine.verify(message.THouseCell[i]);
                    if (error)
                        return "THouseCell." + error;
                }
            }
            return null;
        };

        /**
         * Creates a THouseCellBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.THouseCellBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.THouseCellBase} THouseCellBase
         */
        THouseCellBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.THouseCellBase)
                return object;
            var message = new $root.table.THouseCellBase();
            if (object.THouseCell) {
                if (!Array.isArray(object.THouseCell))
                    throw TypeError(".table.THouseCellBase.THouseCell: array expected");
                message.THouseCell = [];
                for (var i = 0; i < object.THouseCell.length; ++i) {
                    if (typeof object.THouseCell[i] !== "object")
                        throw TypeError(".table.THouseCellBase.THouseCell: object expected");
                    message.THouseCell[i] = $root.table.THouseCellDefine.fromObject(object.THouseCell[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a THouseCellBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.THouseCellBase
         * @static
         * @param {table.THouseCellBase} message THouseCellBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        THouseCellBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.THouseCell = [];
            if (message.THouseCell && message.THouseCell.length) {
                object.THouseCell = [];
                for (var j = 0; j < message.THouseCell.length; ++j)
                    object.THouseCell[j] = $root.table.THouseCellDefine.toObject(message.THouseCell[j], options);
            }
            return object;
        };

        /**
         * Converts this THouseCellBase to JSON.
         * @function toJSON
         * @memberof table.THouseCellBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        THouseCellBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return THouseCellBase;
    })();

    table.THouseCellDefine = (function() {

        /**
         * Properties of a THouseCellDefine.
         * @memberof table
         * @interface ITHouseCellDefine
         * @property {number|null} [Id] THouseCellDefine Id
         * @property {number|null} [Type] THouseCellDefine Type
         * @property {number|null} [MaxLevel] THouseCellDefine MaxLevel
         * @property {number|null} [ProduceGold] THouseCellDefine ProduceGold
         * @property {number|null} [ProduceTime] THouseCellDefine ProduceTime
         * @property {string|null} [ProduceItem] THouseCellDefine ProduceItem
         * @property {number|null} [LevelUpCost] THouseCellDefine LevelUpCost
         * @property {string|null} [LevelUpNeedItem] THouseCellDefine LevelUpNeedItem
         * @property {string|null} [Des] THouseCellDefine Des
         * @property {number|null} [IncomePerSecond] THouseCellDefine IncomePerSecond
         * @property {number|null} [UnlockGold] THouseCellDefine UnlockGold
         */

        /**
         * Constructs a new THouseCellDefine.
         * @memberof table
         * @classdesc Represents a THouseCellDefine.
         * @implements ITHouseCellDefine
         * @constructor
         * @param {table.ITHouseCellDefine=} [properties] Properties to set
         */
        function THouseCellDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * THouseCellDefine Id.
         * @member {number} Id
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.Id = 0;

        /**
         * THouseCellDefine Type.
         * @member {number} Type
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.Type = 0;

        /**
         * THouseCellDefine MaxLevel.
         * @member {number} MaxLevel
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.MaxLevel = 0;

        /**
         * THouseCellDefine ProduceGold.
         * @member {number} ProduceGold
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.ProduceGold = 0;

        /**
         * THouseCellDefine ProduceTime.
         * @member {number} ProduceTime
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.ProduceTime = 0;

        /**
         * THouseCellDefine ProduceItem.
         * @member {string} ProduceItem
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.ProduceItem = "";

        /**
         * THouseCellDefine LevelUpCost.
         * @member {number} LevelUpCost
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.LevelUpCost = 0;

        /**
         * THouseCellDefine LevelUpNeedItem.
         * @member {string} LevelUpNeedItem
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.LevelUpNeedItem = "";

        /**
         * THouseCellDefine Des.
         * @member {string} Des
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.Des = "";

        /**
         * THouseCellDefine IncomePerSecond.
         * @member {number} IncomePerSecond
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.IncomePerSecond = 0;

        /**
         * THouseCellDefine UnlockGold.
         * @member {number} UnlockGold
         * @memberof table.THouseCellDefine
         * @instance
         */
        THouseCellDefine.prototype.UnlockGold = 0;

        /**
         * Creates a new THouseCellDefine instance using the specified properties.
         * @function create
         * @memberof table.THouseCellDefine
         * @static
         * @param {table.ITHouseCellDefine=} [properties] Properties to set
         * @returns {table.THouseCellDefine} THouseCellDefine instance
         */
        THouseCellDefine.create = function create(properties) {
            return new THouseCellDefine(properties);
        };

        /**
         * Encodes the specified THouseCellDefine message. Does not implicitly {@link table.THouseCellDefine.verify|verify} messages.
         * @function encode
         * @memberof table.THouseCellDefine
         * @static
         * @param {table.ITHouseCellDefine} message THouseCellDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseCellDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Type);
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.MaxLevel);
            if (message.ProduceGold != null && message.hasOwnProperty("ProduceGold"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ProduceGold);
            if (message.ProduceTime != null && message.hasOwnProperty("ProduceTime"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ProduceTime);
            if (message.ProduceItem != null && message.hasOwnProperty("ProduceItem"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.ProduceItem);
            if (message.LevelUpCost != null && message.hasOwnProperty("LevelUpCost"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.LevelUpCost);
            if (message.LevelUpNeedItem != null && message.hasOwnProperty("LevelUpNeedItem"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.LevelUpNeedItem);
            if (message.Des != null && message.hasOwnProperty("Des"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.Des);
            if (message.IncomePerSecond != null && message.hasOwnProperty("IncomePerSecond"))
                writer.uint32(/* id 10, wireType 5 =*/85).float(message.IncomePerSecond);
            if (message.UnlockGold != null && message.hasOwnProperty("UnlockGold"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.UnlockGold);
            return writer;
        };

        /**
         * Encodes the specified THouseCellDefine message, length delimited. Does not implicitly {@link table.THouseCellDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.THouseCellDefine
         * @static
         * @param {table.ITHouseCellDefine} message THouseCellDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        THouseCellDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a THouseCellDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.THouseCellDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.THouseCellDefine} THouseCellDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseCellDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.THouseCellDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.uint32();
                    break;
                case 3:
                    message.MaxLevel = reader.uint32();
                    break;
                case 4:
                    message.ProduceGold = reader.uint32();
                    break;
                case 5:
                    message.ProduceTime = reader.uint32();
                    break;
                case 6:
                    message.ProduceItem = reader.string();
                    break;
                case 7:
                    message.LevelUpCost = reader.uint32();
                    break;
                case 8:
                    message.LevelUpNeedItem = reader.string();
                    break;
                case 9:
                    message.Des = reader.string();
                    break;
                case 10:
                    message.IncomePerSecond = reader.float();
                    break;
                case 11:
                    message.UnlockGold = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a THouseCellDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.THouseCellDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.THouseCellDefine} THouseCellDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        THouseCellDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a THouseCellDefine message.
         * @function verify
         * @memberof table.THouseCellDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        THouseCellDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                if (!$util.isInteger(message.MaxLevel))
                    return "MaxLevel: integer expected";
            if (message.ProduceGold != null && message.hasOwnProperty("ProduceGold"))
                if (!$util.isInteger(message.ProduceGold))
                    return "ProduceGold: integer expected";
            if (message.ProduceTime != null && message.hasOwnProperty("ProduceTime"))
                if (!$util.isInteger(message.ProduceTime))
                    return "ProduceTime: integer expected";
            if (message.ProduceItem != null && message.hasOwnProperty("ProduceItem"))
                if (!$util.isString(message.ProduceItem))
                    return "ProduceItem: string expected";
            if (message.LevelUpCost != null && message.hasOwnProperty("LevelUpCost"))
                if (!$util.isInteger(message.LevelUpCost))
                    return "LevelUpCost: integer expected";
            if (message.LevelUpNeedItem != null && message.hasOwnProperty("LevelUpNeedItem"))
                if (!$util.isString(message.LevelUpNeedItem))
                    return "LevelUpNeedItem: string expected";
            if (message.Des != null && message.hasOwnProperty("Des"))
                if (!$util.isString(message.Des))
                    return "Des: string expected";
            if (message.IncomePerSecond != null && message.hasOwnProperty("IncomePerSecond"))
                if (typeof message.IncomePerSecond !== "number")
                    return "IncomePerSecond: number expected";
            if (message.UnlockGold != null && message.hasOwnProperty("UnlockGold"))
                if (!$util.isInteger(message.UnlockGold))
                    return "UnlockGold: integer expected";
            return null;
        };

        /**
         * Creates a THouseCellDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.THouseCellDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.THouseCellDefine} THouseCellDefine
         */
        THouseCellDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.THouseCellDefine)
                return object;
            var message = new $root.table.THouseCellDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type >>> 0;
            if (object.MaxLevel != null)
                message.MaxLevel = object.MaxLevel >>> 0;
            if (object.ProduceGold != null)
                message.ProduceGold = object.ProduceGold >>> 0;
            if (object.ProduceTime != null)
                message.ProduceTime = object.ProduceTime >>> 0;
            if (object.ProduceItem != null)
                message.ProduceItem = String(object.ProduceItem);
            if (object.LevelUpCost != null)
                message.LevelUpCost = object.LevelUpCost >>> 0;
            if (object.LevelUpNeedItem != null)
                message.LevelUpNeedItem = String(object.LevelUpNeedItem);
            if (object.Des != null)
                message.Des = String(object.Des);
            if (object.IncomePerSecond != null)
                message.IncomePerSecond = Number(object.IncomePerSecond);
            if (object.UnlockGold != null)
                message.UnlockGold = object.UnlockGold >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a THouseCellDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.THouseCellDefine
         * @static
         * @param {table.THouseCellDefine} message THouseCellDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        THouseCellDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.MaxLevel = 0;
                object.ProduceGold = 0;
                object.ProduceTime = 0;
                object.ProduceItem = "";
                object.LevelUpCost = 0;
                object.LevelUpNeedItem = "";
                object.Des = "";
                object.IncomePerSecond = 0;
                object.UnlockGold = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.MaxLevel != null && message.hasOwnProperty("MaxLevel"))
                object.MaxLevel = message.MaxLevel;
            if (message.ProduceGold != null && message.hasOwnProperty("ProduceGold"))
                object.ProduceGold = message.ProduceGold;
            if (message.ProduceTime != null && message.hasOwnProperty("ProduceTime"))
                object.ProduceTime = message.ProduceTime;
            if (message.ProduceItem != null && message.hasOwnProperty("ProduceItem"))
                object.ProduceItem = message.ProduceItem;
            if (message.LevelUpCost != null && message.hasOwnProperty("LevelUpCost"))
                object.LevelUpCost = message.LevelUpCost;
            if (message.LevelUpNeedItem != null && message.hasOwnProperty("LevelUpNeedItem"))
                object.LevelUpNeedItem = message.LevelUpNeedItem;
            if (message.Des != null && message.hasOwnProperty("Des"))
                object.Des = message.Des;
            if (message.IncomePerSecond != null && message.hasOwnProperty("IncomePerSecond"))
                object.IncomePerSecond = options.json && !isFinite(message.IncomePerSecond) ? String(message.IncomePerSecond) : message.IncomePerSecond;
            if (message.UnlockGold != null && message.hasOwnProperty("UnlockGold"))
                object.UnlockGold = message.UnlockGold;
            return object;
        };

        /**
         * Converts this THouseCellDefine to JSON.
         * @function toJSON
         * @memberof table.THouseCellDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        THouseCellDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return THouseCellDefine;
    })();

    table.ItemBase = (function() {

        /**
         * Properties of an ItemBase.
         * @memberof table
         * @interface IItemBase
         * @property {Array.<table.IItemBaseDataDefine>|null} [ItemBaseData] ItemBase ItemBaseData
         */

        /**
         * Constructs a new ItemBase.
         * @memberof table
         * @classdesc Represents an ItemBase.
         * @implements IItemBase
         * @constructor
         * @param {table.IItemBase=} [properties] Properties to set
         */
        function ItemBase(properties) {
            this.ItemBaseData = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBase ItemBaseData.
         * @member {Array.<table.IItemBaseDataDefine>} ItemBaseData
         * @memberof table.ItemBase
         * @instance
         */
        ItemBase.prototype.ItemBaseData = $util.emptyArray;

        /**
         * Creates a new ItemBase instance using the specified properties.
         * @function create
         * @memberof table.ItemBase
         * @static
         * @param {table.IItemBase=} [properties] Properties to set
         * @returns {table.ItemBase} ItemBase instance
         */
        ItemBase.create = function create(properties) {
            return new ItemBase(properties);
        };

        /**
         * Encodes the specified ItemBase message. Does not implicitly {@link table.ItemBase.verify|verify} messages.
         * @function encode
         * @memberof table.ItemBase
         * @static
         * @param {table.IItemBase} message ItemBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ItemBaseData != null && message.ItemBaseData.length)
                for (var i = 0; i < message.ItemBaseData.length; ++i)
                    $root.table.ItemBaseDataDefine.encode(message.ItemBaseData[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ItemBase message, length delimited. Does not implicitly {@link table.ItemBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ItemBase
         * @static
         * @param {table.IItemBase} message ItemBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.ItemBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ItemBase} ItemBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ItemBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ItemBaseData && message.ItemBaseData.length))
                        message.ItemBaseData = [];
                    message.ItemBaseData.push($root.table.ItemBaseDataDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ItemBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ItemBase} ItemBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBase message.
         * @function verify
         * @memberof table.ItemBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ItemBaseData != null && message.hasOwnProperty("ItemBaseData")) {
                if (!Array.isArray(message.ItemBaseData))
                    return "ItemBaseData: array expected";
                for (var i = 0; i < message.ItemBaseData.length; ++i) {
                    var error = $root.table.ItemBaseDataDefine.verify(message.ItemBaseData[i]);
                    if (error)
                        return "ItemBaseData." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ItemBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ItemBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ItemBase} ItemBase
         */
        ItemBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ItemBase)
                return object;
            var message = new $root.table.ItemBase();
            if (object.ItemBaseData) {
                if (!Array.isArray(object.ItemBaseData))
                    throw TypeError(".table.ItemBase.ItemBaseData: array expected");
                message.ItemBaseData = [];
                for (var i = 0; i < object.ItemBaseData.length; ++i) {
                    if (typeof object.ItemBaseData[i] !== "object")
                        throw TypeError(".table.ItemBase.ItemBaseData: object expected");
                    message.ItemBaseData[i] = $root.table.ItemBaseDataDefine.fromObject(object.ItemBaseData[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ItemBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ItemBase
         * @static
         * @param {table.ItemBase} message ItemBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ItemBaseData = [];
            if (message.ItemBaseData && message.ItemBaseData.length) {
                object.ItemBaseData = [];
                for (var j = 0; j < message.ItemBaseData.length; ++j)
                    object.ItemBaseData[j] = $root.table.ItemBaseDataDefine.toObject(message.ItemBaseData[j], options);
            }
            return object;
        };

        /**
         * Converts this ItemBase to JSON.
         * @function toJSON
         * @memberof table.ItemBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBase;
    })();

    table.ItemBaseDataDefine = (function() {

        /**
         * Properties of an ItemBaseDataDefine.
         * @memberof table
         * @interface IItemBaseDataDefine
         * @property {number|null} [Id] ItemBaseDataDefine Id
         * @property {number|null} [Type] ItemBaseDataDefine Type
         * @property {number|null} [SubType] ItemBaseDataDefine SubType
         * @property {number|null} [Color] ItemBaseDataDefine Color
         * @property {number|null} [ImageId] ItemBaseDataDefine ImageId
         * @property {string|null} [Name] ItemBaseDataDefine Name
         * @property {string|null} [Desc] ItemBaseDataDefine Desc
         * @property {number|null} [Clothes] ItemBaseDataDefine Clothes
         * @property {string|null} [TypeDes] ItemBaseDataDefine TypeDes
         * @property {number|null} [Tradable] ItemBaseDataDefine Tradable
         */

        /**
         * Constructs a new ItemBaseDataDefine.
         * @memberof table
         * @classdesc Represents an ItemBaseDataDefine.
         * @implements IItemBaseDataDefine
         * @constructor
         * @param {table.IItemBaseDataDefine=} [properties] Properties to set
         */
        function ItemBaseDataDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemBaseDataDefine Id.
         * @member {number} Id
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Id = 0;

        /**
         * ItemBaseDataDefine Type.
         * @member {number} Type
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Type = 0;

        /**
         * ItemBaseDataDefine SubType.
         * @member {number} SubType
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.SubType = 0;

        /**
         * ItemBaseDataDefine Color.
         * @member {number} Color
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Color = 0;

        /**
         * ItemBaseDataDefine ImageId.
         * @member {number} ImageId
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.ImageId = 0;

        /**
         * ItemBaseDataDefine Name.
         * @member {string} Name
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Name = "";

        /**
         * ItemBaseDataDefine Desc.
         * @member {string} Desc
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Desc = "";

        /**
         * ItemBaseDataDefine Clothes.
         * @member {number} Clothes
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Clothes = 0;

        /**
         * ItemBaseDataDefine TypeDes.
         * @member {string} TypeDes
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.TypeDes = "";

        /**
         * ItemBaseDataDefine Tradable.
         * @member {number} Tradable
         * @memberof table.ItemBaseDataDefine
         * @instance
         */
        ItemBaseDataDefine.prototype.Tradable = 0;

        /**
         * Creates a new ItemBaseDataDefine instance using the specified properties.
         * @function create
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.IItemBaseDataDefine=} [properties] Properties to set
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine instance
         */
        ItemBaseDataDefine.create = function create(properties) {
            return new ItemBaseDataDefine(properties);
        };

        /**
         * Encodes the specified ItemBaseDataDefine message. Does not implicitly {@link table.ItemBaseDataDefine.verify|verify} messages.
         * @function encode
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.IItemBaseDataDefine} message ItemBaseDataDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBaseDataDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Type);
            if (message.SubType != null && message.hasOwnProperty("SubType"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.SubType);
            if (message.Color != null && message.hasOwnProperty("Color"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.Color);
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ImageId);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.Name);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.Desc);
            if (message.Clothes != null && message.hasOwnProperty("Clothes"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.Clothes);
            if (message.TypeDes != null && message.hasOwnProperty("TypeDes"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.TypeDes);
            if (message.Tradable != null && message.hasOwnProperty("Tradable"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.Tradable);
            return writer;
        };

        /**
         * Encodes the specified ItemBaseDataDefine message, length delimited. Does not implicitly {@link table.ItemBaseDataDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.IItemBaseDataDefine} message ItemBaseDataDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemBaseDataDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemBaseDataDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBaseDataDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ItemBaseDataDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.int32();
                    break;
                case 3:
                    message.SubType = reader.uint32();
                    break;
                case 4:
                    message.Color = reader.uint32();
                    break;
                case 5:
                    message.ImageId = reader.uint32();
                    break;
                case 6:
                    message.Name = reader.string();
                    break;
                case 7:
                    message.Desc = reader.string();
                    break;
                case 8:
                    message.Clothes = reader.uint32();
                    break;
                case 9:
                    message.TypeDes = reader.string();
                    break;
                case 10:
                    message.Tradable = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemBaseDataDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemBaseDataDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemBaseDataDefine message.
         * @function verify
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemBaseDataDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.SubType != null && message.hasOwnProperty("SubType"))
                if (!$util.isInteger(message.SubType))
                    return "SubType: integer expected";
            if (message.Color != null && message.hasOwnProperty("Color"))
                if (!$util.isInteger(message.Color))
                    return "Color: integer expected";
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                if (!$util.isInteger(message.ImageId))
                    return "ImageId: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.Clothes != null && message.hasOwnProperty("Clothes"))
                if (!$util.isInteger(message.Clothes))
                    return "Clothes: integer expected";
            if (message.TypeDes != null && message.hasOwnProperty("TypeDes"))
                if (!$util.isString(message.TypeDes))
                    return "TypeDes: string expected";
            if (message.Tradable != null && message.hasOwnProperty("Tradable"))
                if (!$util.isInteger(message.Tradable))
                    return "Tradable: integer expected";
            return null;
        };

        /**
         * Creates an ItemBaseDataDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ItemBaseDataDefine} ItemBaseDataDefine
         */
        ItemBaseDataDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ItemBaseDataDefine)
                return object;
            var message = new $root.table.ItemBaseDataDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.SubType != null)
                message.SubType = object.SubType >>> 0;
            if (object.Color != null)
                message.Color = object.Color >>> 0;
            if (object.ImageId != null)
                message.ImageId = object.ImageId >>> 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.Clothes != null)
                message.Clothes = object.Clothes >>> 0;
            if (object.TypeDes != null)
                message.TypeDes = String(object.TypeDes);
            if (object.Tradable != null)
                message.Tradable = object.Tradable >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an ItemBaseDataDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ItemBaseDataDefine
         * @static
         * @param {table.ItemBaseDataDefine} message ItemBaseDataDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemBaseDataDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.SubType = 0;
                object.Color = 0;
                object.ImageId = 0;
                object.Name = "";
                object.Desc = "";
                object.Clothes = 0;
                object.TypeDes = "";
                object.Tradable = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.SubType != null && message.hasOwnProperty("SubType"))
                object.SubType = message.SubType;
            if (message.Color != null && message.hasOwnProperty("Color"))
                object.Color = message.Color;
            if (message.ImageId != null && message.hasOwnProperty("ImageId"))
                object.ImageId = message.ImageId;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.Clothes != null && message.hasOwnProperty("Clothes"))
                object.Clothes = message.Clothes;
            if (message.TypeDes != null && message.hasOwnProperty("TypeDes"))
                object.TypeDes = message.TypeDes;
            if (message.Tradable != null && message.hasOwnProperty("Tradable"))
                object.Tradable = message.Tradable;
            return object;
        };

        /**
         * Converts this ItemBaseDataDefine to JSON.
         * @function toJSON
         * @memberof table.ItemBaseDataDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemBaseDataDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemBaseDataDefine;
    })();

    table.LevelBasee = (function() {

        /**
         * Properties of a LevelBasee.
         * @memberof table
         * @interface ILevelBasee
         * @property {Array.<table.ITLevelDefine>|null} [TLevel] LevelBasee TLevel
         */

        /**
         * Constructs a new LevelBasee.
         * @memberof table
         * @classdesc Represents a LevelBasee.
         * @implements ILevelBasee
         * @constructor
         * @param {table.ILevelBasee=} [properties] Properties to set
         */
        function LevelBasee(properties) {
            this.TLevel = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LevelBasee TLevel.
         * @member {Array.<table.ITLevelDefine>} TLevel
         * @memberof table.LevelBasee
         * @instance
         */
        LevelBasee.prototype.TLevel = $util.emptyArray;

        /**
         * Creates a new LevelBasee instance using the specified properties.
         * @function create
         * @memberof table.LevelBasee
         * @static
         * @param {table.ILevelBasee=} [properties] Properties to set
         * @returns {table.LevelBasee} LevelBasee instance
         */
        LevelBasee.create = function create(properties) {
            return new LevelBasee(properties);
        };

        /**
         * Encodes the specified LevelBasee message. Does not implicitly {@link table.LevelBasee.verify|verify} messages.
         * @function encode
         * @memberof table.LevelBasee
         * @static
         * @param {table.ILevelBasee} message LevelBasee message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelBasee.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TLevel != null && message.TLevel.length)
                for (var i = 0; i < message.TLevel.length; ++i)
                    $root.table.TLevelDefine.encode(message.TLevel[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LevelBasee message, length delimited. Does not implicitly {@link table.LevelBasee.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.LevelBasee
         * @static
         * @param {table.ILevelBasee} message LevelBasee message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelBasee.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LevelBasee message from the specified reader or buffer.
         * @function decode
         * @memberof table.LevelBasee
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.LevelBasee} LevelBasee
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelBasee.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.LevelBasee();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TLevel && message.TLevel.length))
                        message.TLevel = [];
                    message.TLevel.push($root.table.TLevelDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LevelBasee message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.LevelBasee
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.LevelBasee} LevelBasee
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelBasee.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LevelBasee message.
         * @function verify
         * @memberof table.LevelBasee
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LevelBasee.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TLevel != null && message.hasOwnProperty("TLevel")) {
                if (!Array.isArray(message.TLevel))
                    return "TLevel: array expected";
                for (var i = 0; i < message.TLevel.length; ++i) {
                    var error = $root.table.TLevelDefine.verify(message.TLevel[i]);
                    if (error)
                        return "TLevel." + error;
                }
            }
            return null;
        };

        /**
         * Creates a LevelBasee message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.LevelBasee
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.LevelBasee} LevelBasee
         */
        LevelBasee.fromObject = function fromObject(object) {
            if (object instanceof $root.table.LevelBasee)
                return object;
            var message = new $root.table.LevelBasee();
            if (object.TLevel) {
                if (!Array.isArray(object.TLevel))
                    throw TypeError(".table.LevelBasee.TLevel: array expected");
                message.TLevel = [];
                for (var i = 0; i < object.TLevel.length; ++i) {
                    if (typeof object.TLevel[i] !== "object")
                        throw TypeError(".table.LevelBasee.TLevel: object expected");
                    message.TLevel[i] = $root.table.TLevelDefine.fromObject(object.TLevel[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a LevelBasee message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.LevelBasee
         * @static
         * @param {table.LevelBasee} message LevelBasee
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LevelBasee.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TLevel = [];
            if (message.TLevel && message.TLevel.length) {
                object.TLevel = [];
                for (var j = 0; j < message.TLevel.length; ++j)
                    object.TLevel[j] = $root.table.TLevelDefine.toObject(message.TLevel[j], options);
            }
            return object;
        };

        /**
         * Converts this LevelBasee to JSON.
         * @function toJSON
         * @memberof table.LevelBasee
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LevelBasee.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LevelBasee;
    })();

    table.TLevelDefine = (function() {

        /**
         * Properties of a TLevelDefine.
         * @memberof table
         * @interface ITLevelDefine
         * @property {number|null} [Id] TLevelDefine Id
         * @property {number|null} [ExpNums] TLevelDefine ExpNums
         * @property {number|null} [Reward] TLevelDefine Reward
         */

        /**
         * Constructs a new TLevelDefine.
         * @memberof table
         * @classdesc Represents a TLevelDefine.
         * @implements ITLevelDefine
         * @constructor
         * @param {table.ITLevelDefine=} [properties] Properties to set
         */
        function TLevelDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TLevelDefine Id.
         * @member {number} Id
         * @memberof table.TLevelDefine
         * @instance
         */
        TLevelDefine.prototype.Id = 0;

        /**
         * TLevelDefine ExpNums.
         * @member {number} ExpNums
         * @memberof table.TLevelDefine
         * @instance
         */
        TLevelDefine.prototype.ExpNums = 0;

        /**
         * TLevelDefine Reward.
         * @member {number} Reward
         * @memberof table.TLevelDefine
         * @instance
         */
        TLevelDefine.prototype.Reward = 0;

        /**
         * Creates a new TLevelDefine instance using the specified properties.
         * @function create
         * @memberof table.TLevelDefine
         * @static
         * @param {table.ITLevelDefine=} [properties] Properties to set
         * @returns {table.TLevelDefine} TLevelDefine instance
         */
        TLevelDefine.create = function create(properties) {
            return new TLevelDefine(properties);
        };

        /**
         * Encodes the specified TLevelDefine message. Does not implicitly {@link table.TLevelDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TLevelDefine
         * @static
         * @param {table.ITLevelDefine} message TLevelDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.ExpNums != null && message.hasOwnProperty("ExpNums"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ExpNums);
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Reward);
            return writer;
        };

        /**
         * Encodes the specified TLevelDefine message, length delimited. Does not implicitly {@link table.TLevelDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TLevelDefine
         * @static
         * @param {table.ITLevelDefine} message TLevelDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TLevelDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TLevelDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TLevelDefine} TLevelDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TLevelDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.ExpNums = reader.int32();
                    break;
                case 3:
                    message.Reward = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TLevelDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TLevelDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TLevelDefine} TLevelDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TLevelDefine message.
         * @function verify
         * @memberof table.TLevelDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TLevelDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.ExpNums != null && message.hasOwnProperty("ExpNums"))
                if (!$util.isInteger(message.ExpNums))
                    return "ExpNums: integer expected";
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                if (!$util.isInteger(message.Reward))
                    return "Reward: integer expected";
            return null;
        };

        /**
         * Creates a TLevelDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TLevelDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TLevelDefine} TLevelDefine
         */
        TLevelDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TLevelDefine)
                return object;
            var message = new $root.table.TLevelDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.ExpNums != null)
                message.ExpNums = object.ExpNums | 0;
            if (object.Reward != null)
                message.Reward = object.Reward | 0;
            return message;
        };

        /**
         * Creates a plain object from a TLevelDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TLevelDefine
         * @static
         * @param {table.TLevelDefine} message TLevelDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TLevelDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.ExpNums = 0;
                object.Reward = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.ExpNums != null && message.hasOwnProperty("ExpNums"))
                object.ExpNums = message.ExpNums;
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                object.Reward = message.Reward;
            return object;
        };

        /**
         * Converts this TLevelDefine to JSON.
         * @function toJSON
         * @memberof table.TLevelDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TLevelDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TLevelDefine;
    })();

    table.TLevelCarPartBase = (function() {

        /**
         * Properties of a TLevelCarPartBase.
         * @memberof table
         * @interface ITLevelCarPartBase
         * @property {Array.<table.ITLevelCarPartDefine>|null} [TLevelCarPart] TLevelCarPartBase TLevelCarPart
         */

        /**
         * Constructs a new TLevelCarPartBase.
         * @memberof table
         * @classdesc Represents a TLevelCarPartBase.
         * @implements ITLevelCarPartBase
         * @constructor
         * @param {table.ITLevelCarPartBase=} [properties] Properties to set
         */
        function TLevelCarPartBase(properties) {
            this.TLevelCarPart = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TLevelCarPartBase TLevelCarPart.
         * @member {Array.<table.ITLevelCarPartDefine>} TLevelCarPart
         * @memberof table.TLevelCarPartBase
         * @instance
         */
        TLevelCarPartBase.prototype.TLevelCarPart = $util.emptyArray;

        /**
         * Creates a new TLevelCarPartBase instance using the specified properties.
         * @function create
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {table.ITLevelCarPartBase=} [properties] Properties to set
         * @returns {table.TLevelCarPartBase} TLevelCarPartBase instance
         */
        TLevelCarPartBase.create = function create(properties) {
            return new TLevelCarPartBase(properties);
        };

        /**
         * Encodes the specified TLevelCarPartBase message. Does not implicitly {@link table.TLevelCarPartBase.verify|verify} messages.
         * @function encode
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {table.ITLevelCarPartBase} message TLevelCarPartBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelCarPartBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TLevelCarPart != null && message.TLevelCarPart.length)
                for (var i = 0; i < message.TLevelCarPart.length; ++i)
                    $root.table.TLevelCarPartDefine.encode(message.TLevelCarPart[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TLevelCarPartBase message, length delimited. Does not implicitly {@link table.TLevelCarPartBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {table.ITLevelCarPartBase} message TLevelCarPartBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelCarPartBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TLevelCarPartBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TLevelCarPartBase} TLevelCarPartBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelCarPartBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TLevelCarPartBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TLevelCarPart && message.TLevelCarPart.length))
                        message.TLevelCarPart = [];
                    message.TLevelCarPart.push($root.table.TLevelCarPartDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TLevelCarPartBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TLevelCarPartBase} TLevelCarPartBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelCarPartBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TLevelCarPartBase message.
         * @function verify
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TLevelCarPartBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TLevelCarPart != null && message.hasOwnProperty("TLevelCarPart")) {
                if (!Array.isArray(message.TLevelCarPart))
                    return "TLevelCarPart: array expected";
                for (var i = 0; i < message.TLevelCarPart.length; ++i) {
                    var error = $root.table.TLevelCarPartDefine.verify(message.TLevelCarPart[i]);
                    if (error)
                        return "TLevelCarPart." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TLevelCarPartBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TLevelCarPartBase} TLevelCarPartBase
         */
        TLevelCarPartBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TLevelCarPartBase)
                return object;
            var message = new $root.table.TLevelCarPartBase();
            if (object.TLevelCarPart) {
                if (!Array.isArray(object.TLevelCarPart))
                    throw TypeError(".table.TLevelCarPartBase.TLevelCarPart: array expected");
                message.TLevelCarPart = [];
                for (var i = 0; i < object.TLevelCarPart.length; ++i) {
                    if (typeof object.TLevelCarPart[i] !== "object")
                        throw TypeError(".table.TLevelCarPartBase.TLevelCarPart: object expected");
                    message.TLevelCarPart[i] = $root.table.TLevelCarPartDefine.fromObject(object.TLevelCarPart[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TLevelCarPartBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TLevelCarPartBase
         * @static
         * @param {table.TLevelCarPartBase} message TLevelCarPartBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TLevelCarPartBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TLevelCarPart = [];
            if (message.TLevelCarPart && message.TLevelCarPart.length) {
                object.TLevelCarPart = [];
                for (var j = 0; j < message.TLevelCarPart.length; ++j)
                    object.TLevelCarPart[j] = $root.table.TLevelCarPartDefine.toObject(message.TLevelCarPart[j], options);
            }
            return object;
        };

        /**
         * Converts this TLevelCarPartBase to JSON.
         * @function toJSON
         * @memberof table.TLevelCarPartBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TLevelCarPartBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TLevelCarPartBase;
    })();

    table.TLevelCarPartDefine = (function() {

        /**
         * Properties of a TLevelCarPartDefine.
         * @memberof table
         * @interface ITLevelCarPartDefine
         * @property {number|null} [Id] TLevelCarPartDefine Id
         * @property {number|null} [Exp] TLevelCarPartDefine Exp
         * @property {number|null} [PartType] TLevelCarPartDefine PartType
         */

        /**
         * Constructs a new TLevelCarPartDefine.
         * @memberof table
         * @classdesc Represents a TLevelCarPartDefine.
         * @implements ITLevelCarPartDefine
         * @constructor
         * @param {table.ITLevelCarPartDefine=} [properties] Properties to set
         */
        function TLevelCarPartDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TLevelCarPartDefine Id.
         * @member {number} Id
         * @memberof table.TLevelCarPartDefine
         * @instance
         */
        TLevelCarPartDefine.prototype.Id = 0;

        /**
         * TLevelCarPartDefine Exp.
         * @member {number} Exp
         * @memberof table.TLevelCarPartDefine
         * @instance
         */
        TLevelCarPartDefine.prototype.Exp = 0;

        /**
         * TLevelCarPartDefine PartType.
         * @member {number} PartType
         * @memberof table.TLevelCarPartDefine
         * @instance
         */
        TLevelCarPartDefine.prototype.PartType = 0;

        /**
         * Creates a new TLevelCarPartDefine instance using the specified properties.
         * @function create
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {table.ITLevelCarPartDefine=} [properties] Properties to set
         * @returns {table.TLevelCarPartDefine} TLevelCarPartDefine instance
         */
        TLevelCarPartDefine.create = function create(properties) {
            return new TLevelCarPartDefine(properties);
        };

        /**
         * Encodes the specified TLevelCarPartDefine message. Does not implicitly {@link table.TLevelCarPartDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {table.ITLevelCarPartDefine} message TLevelCarPartDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelCarPartDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Exp != null && message.hasOwnProperty("Exp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Exp);
            if (message.PartType != null && message.hasOwnProperty("PartType"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.PartType);
            return writer;
        };

        /**
         * Encodes the specified TLevelCarPartDefine message, length delimited. Does not implicitly {@link table.TLevelCarPartDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {table.ITLevelCarPartDefine} message TLevelCarPartDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelCarPartDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TLevelCarPartDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TLevelCarPartDefine} TLevelCarPartDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelCarPartDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TLevelCarPartDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Exp = reader.uint32();
                    break;
                case 3:
                    message.PartType = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TLevelCarPartDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TLevelCarPartDefine} TLevelCarPartDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelCarPartDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TLevelCarPartDefine message.
         * @function verify
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TLevelCarPartDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Exp != null && message.hasOwnProperty("Exp"))
                if (!$util.isInteger(message.Exp))
                    return "Exp: integer expected";
            if (message.PartType != null && message.hasOwnProperty("PartType"))
                if (!$util.isInteger(message.PartType))
                    return "PartType: integer expected";
            return null;
        };

        /**
         * Creates a TLevelCarPartDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TLevelCarPartDefine} TLevelCarPartDefine
         */
        TLevelCarPartDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TLevelCarPartDefine)
                return object;
            var message = new $root.table.TLevelCarPartDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Exp != null)
                message.Exp = object.Exp >>> 0;
            if (object.PartType != null)
                message.PartType = object.PartType >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TLevelCarPartDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TLevelCarPartDefine
         * @static
         * @param {table.TLevelCarPartDefine} message TLevelCarPartDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TLevelCarPartDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Exp = 0;
                object.PartType = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Exp != null && message.hasOwnProperty("Exp"))
                object.Exp = message.Exp;
            if (message.PartType != null && message.hasOwnProperty("PartType"))
                object.PartType = message.PartType;
            return object;
        };

        /**
         * Converts this TLevelCarPartDefine to JSON.
         * @function toJSON
         * @memberof table.TLevelCarPartDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TLevelCarPartDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TLevelCarPartDefine;
    })();

    table.LevelMaidBase = (function() {

        /**
         * Properties of a LevelMaidBase.
         * @memberof table
         * @interface ILevelMaidBase
         * @property {Array.<table.ITLevelMaidDefine>|null} [TLevelMaid] LevelMaidBase TLevelMaid
         */

        /**
         * Constructs a new LevelMaidBase.
         * @memberof table
         * @classdesc Represents a LevelMaidBase.
         * @implements ILevelMaidBase
         * @constructor
         * @param {table.ILevelMaidBase=} [properties] Properties to set
         */
        function LevelMaidBase(properties) {
            this.TLevelMaid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LevelMaidBase TLevelMaid.
         * @member {Array.<table.ITLevelMaidDefine>} TLevelMaid
         * @memberof table.LevelMaidBase
         * @instance
         */
        LevelMaidBase.prototype.TLevelMaid = $util.emptyArray;

        /**
         * Creates a new LevelMaidBase instance using the specified properties.
         * @function create
         * @memberof table.LevelMaidBase
         * @static
         * @param {table.ILevelMaidBase=} [properties] Properties to set
         * @returns {table.LevelMaidBase} LevelMaidBase instance
         */
        LevelMaidBase.create = function create(properties) {
            return new LevelMaidBase(properties);
        };

        /**
         * Encodes the specified LevelMaidBase message. Does not implicitly {@link table.LevelMaidBase.verify|verify} messages.
         * @function encode
         * @memberof table.LevelMaidBase
         * @static
         * @param {table.ILevelMaidBase} message LevelMaidBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelMaidBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TLevelMaid != null && message.TLevelMaid.length)
                for (var i = 0; i < message.TLevelMaid.length; ++i)
                    $root.table.TLevelMaidDefine.encode(message.TLevelMaid[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LevelMaidBase message, length delimited. Does not implicitly {@link table.LevelMaidBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.LevelMaidBase
         * @static
         * @param {table.ILevelMaidBase} message LevelMaidBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelMaidBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LevelMaidBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.LevelMaidBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.LevelMaidBase} LevelMaidBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelMaidBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.LevelMaidBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TLevelMaid && message.TLevelMaid.length))
                        message.TLevelMaid = [];
                    message.TLevelMaid.push($root.table.TLevelMaidDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LevelMaidBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.LevelMaidBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.LevelMaidBase} LevelMaidBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelMaidBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LevelMaidBase message.
         * @function verify
         * @memberof table.LevelMaidBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LevelMaidBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TLevelMaid != null && message.hasOwnProperty("TLevelMaid")) {
                if (!Array.isArray(message.TLevelMaid))
                    return "TLevelMaid: array expected";
                for (var i = 0; i < message.TLevelMaid.length; ++i) {
                    var error = $root.table.TLevelMaidDefine.verify(message.TLevelMaid[i]);
                    if (error)
                        return "TLevelMaid." + error;
                }
            }
            return null;
        };

        /**
         * Creates a LevelMaidBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.LevelMaidBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.LevelMaidBase} LevelMaidBase
         */
        LevelMaidBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.LevelMaidBase)
                return object;
            var message = new $root.table.LevelMaidBase();
            if (object.TLevelMaid) {
                if (!Array.isArray(object.TLevelMaid))
                    throw TypeError(".table.LevelMaidBase.TLevelMaid: array expected");
                message.TLevelMaid = [];
                for (var i = 0; i < object.TLevelMaid.length; ++i) {
                    if (typeof object.TLevelMaid[i] !== "object")
                        throw TypeError(".table.LevelMaidBase.TLevelMaid: object expected");
                    message.TLevelMaid[i] = $root.table.TLevelMaidDefine.fromObject(object.TLevelMaid[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a LevelMaidBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.LevelMaidBase
         * @static
         * @param {table.LevelMaidBase} message LevelMaidBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LevelMaidBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TLevelMaid = [];
            if (message.TLevelMaid && message.TLevelMaid.length) {
                object.TLevelMaid = [];
                for (var j = 0; j < message.TLevelMaid.length; ++j)
                    object.TLevelMaid[j] = $root.table.TLevelMaidDefine.toObject(message.TLevelMaid[j], options);
            }
            return object;
        };

        /**
         * Converts this LevelMaidBase to JSON.
         * @function toJSON
         * @memberof table.LevelMaidBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LevelMaidBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LevelMaidBase;
    })();

    table.TLevelMaidDefine = (function() {

        /**
         * Properties of a TLevelMaidDefine.
         * @memberof table
         * @interface ITLevelMaidDefine
         * @property {number|null} [Id] TLevelMaidDefine Id
         * @property {number|null} [UpgradeID] TLevelMaidDefine UpgradeID
         * @property {number|null} [Upgradenum] TLevelMaidDefine Upgradenum
         * @property {number|null} [ProduceGold] TLevelMaidDefine ProduceGold
         * @property {number|Long|null} [ProduceTime] TLevelMaidDefine ProduceTime
         * @property {Array.<string>|null} [ProduceItem] TLevelMaidDefine ProduceItem
         * @property {number|null} [NextLevel] TLevelMaidDefine NextLevel
         * @property {number|null} [TakeBackCost] TLevelMaidDefine TakeBackCost
         */

        /**
         * Constructs a new TLevelMaidDefine.
         * @memberof table
         * @classdesc Represents a TLevelMaidDefine.
         * @implements ITLevelMaidDefine
         * @constructor
         * @param {table.ITLevelMaidDefine=} [properties] Properties to set
         */
        function TLevelMaidDefine(properties) {
            this.ProduceItem = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TLevelMaidDefine Id.
         * @member {number} Id
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.Id = 0;

        /**
         * TLevelMaidDefine UpgradeID.
         * @member {number} UpgradeID
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.UpgradeID = 0;

        /**
         * TLevelMaidDefine Upgradenum.
         * @member {number} Upgradenum
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.Upgradenum = 0;

        /**
         * TLevelMaidDefine ProduceGold.
         * @member {number} ProduceGold
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.ProduceGold = 0;

        /**
         * TLevelMaidDefine ProduceTime.
         * @member {number|Long} ProduceTime
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.ProduceTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * TLevelMaidDefine ProduceItem.
         * @member {Array.<string>} ProduceItem
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.ProduceItem = $util.emptyArray;

        /**
         * TLevelMaidDefine NextLevel.
         * @member {number} NextLevel
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.NextLevel = 0;

        /**
         * TLevelMaidDefine TakeBackCost.
         * @member {number} TakeBackCost
         * @memberof table.TLevelMaidDefine
         * @instance
         */
        TLevelMaidDefine.prototype.TakeBackCost = 0;

        /**
         * Creates a new TLevelMaidDefine instance using the specified properties.
         * @function create
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {table.ITLevelMaidDefine=} [properties] Properties to set
         * @returns {table.TLevelMaidDefine} TLevelMaidDefine instance
         */
        TLevelMaidDefine.create = function create(properties) {
            return new TLevelMaidDefine(properties);
        };

        /**
         * Encodes the specified TLevelMaidDefine message. Does not implicitly {@link table.TLevelMaidDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {table.ITLevelMaidDefine} message TLevelMaidDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelMaidDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.UpgradeID != null && message.hasOwnProperty("UpgradeID"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.UpgradeID);
            if (message.Upgradenum != null && message.hasOwnProperty("Upgradenum"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Upgradenum);
            if (message.ProduceGold != null && message.hasOwnProperty("ProduceGold"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ProduceGold);
            if (message.ProduceTime != null && message.hasOwnProperty("ProduceTime"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.ProduceTime);
            if (message.ProduceItem != null && message.ProduceItem.length)
                for (var i = 0; i < message.ProduceItem.length; ++i)
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.ProduceItem[i]);
            if (message.NextLevel != null && message.hasOwnProperty("NextLevel"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.NextLevel);
            if (message.TakeBackCost != null && message.hasOwnProperty("TakeBackCost"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.TakeBackCost);
            return writer;
        };

        /**
         * Encodes the specified TLevelMaidDefine message, length delimited. Does not implicitly {@link table.TLevelMaidDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {table.ITLevelMaidDefine} message TLevelMaidDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TLevelMaidDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TLevelMaidDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TLevelMaidDefine} TLevelMaidDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelMaidDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TLevelMaidDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.UpgradeID = reader.uint32();
                    break;
                case 3:
                    message.Upgradenum = reader.uint32();
                    break;
                case 4:
                    message.ProduceGold = reader.uint32();
                    break;
                case 5:
                    message.ProduceTime = reader.int64();
                    break;
                case 6:
                    if (!(message.ProduceItem && message.ProduceItem.length))
                        message.ProduceItem = [];
                    message.ProduceItem.push(reader.string());
                    break;
                case 7:
                    message.NextLevel = reader.int32();
                    break;
                case 8:
                    message.TakeBackCost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TLevelMaidDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TLevelMaidDefine} TLevelMaidDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TLevelMaidDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TLevelMaidDefine message.
         * @function verify
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TLevelMaidDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.UpgradeID != null && message.hasOwnProperty("UpgradeID"))
                if (!$util.isInteger(message.UpgradeID))
                    return "UpgradeID: integer expected";
            if (message.Upgradenum != null && message.hasOwnProperty("Upgradenum"))
                if (!$util.isInteger(message.Upgradenum))
                    return "Upgradenum: integer expected";
            if (message.ProduceGold != null && message.hasOwnProperty("ProduceGold"))
                if (!$util.isInteger(message.ProduceGold))
                    return "ProduceGold: integer expected";
            if (message.ProduceTime != null && message.hasOwnProperty("ProduceTime"))
                if (!$util.isInteger(message.ProduceTime) && !(message.ProduceTime && $util.isInteger(message.ProduceTime.low) && $util.isInteger(message.ProduceTime.high)))
                    return "ProduceTime: integer|Long expected";
            if (message.ProduceItem != null && message.hasOwnProperty("ProduceItem")) {
                if (!Array.isArray(message.ProduceItem))
                    return "ProduceItem: array expected";
                for (var i = 0; i < message.ProduceItem.length; ++i)
                    if (!$util.isString(message.ProduceItem[i]))
                        return "ProduceItem: string[] expected";
            }
            if (message.NextLevel != null && message.hasOwnProperty("NextLevel"))
                if (!$util.isInteger(message.NextLevel))
                    return "NextLevel: integer expected";
            if (message.TakeBackCost != null && message.hasOwnProperty("TakeBackCost"))
                if (!$util.isInteger(message.TakeBackCost))
                    return "TakeBackCost: integer expected";
            return null;
        };

        /**
         * Creates a TLevelMaidDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TLevelMaidDefine} TLevelMaidDefine
         */
        TLevelMaidDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TLevelMaidDefine)
                return object;
            var message = new $root.table.TLevelMaidDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.UpgradeID != null)
                message.UpgradeID = object.UpgradeID >>> 0;
            if (object.Upgradenum != null)
                message.Upgradenum = object.Upgradenum >>> 0;
            if (object.ProduceGold != null)
                message.ProduceGold = object.ProduceGold >>> 0;
            if (object.ProduceTime != null)
                if ($util.Long)
                    (message.ProduceTime = $util.Long.fromValue(object.ProduceTime)).unsigned = false;
                else if (typeof object.ProduceTime === "string")
                    message.ProduceTime = parseInt(object.ProduceTime, 10);
                else if (typeof object.ProduceTime === "number")
                    message.ProduceTime = object.ProduceTime;
                else if (typeof object.ProduceTime === "object")
                    message.ProduceTime = new $util.LongBits(object.ProduceTime.low >>> 0, object.ProduceTime.high >>> 0).toNumber();
            if (object.ProduceItem) {
                if (!Array.isArray(object.ProduceItem))
                    throw TypeError(".table.TLevelMaidDefine.ProduceItem: array expected");
                message.ProduceItem = [];
                for (var i = 0; i < object.ProduceItem.length; ++i)
                    message.ProduceItem[i] = String(object.ProduceItem[i]);
            }
            if (object.NextLevel != null)
                message.NextLevel = object.NextLevel | 0;
            if (object.TakeBackCost != null)
                message.TakeBackCost = object.TakeBackCost >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TLevelMaidDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TLevelMaidDefine
         * @static
         * @param {table.TLevelMaidDefine} message TLevelMaidDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TLevelMaidDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ProduceItem = [];
            if (options.defaults) {
                object.Id = 0;
                object.UpgradeID = 0;
                object.Upgradenum = 0;
                object.ProduceGold = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ProduceTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ProduceTime = options.longs === String ? "0" : 0;
                object.NextLevel = 0;
                object.TakeBackCost = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.UpgradeID != null && message.hasOwnProperty("UpgradeID"))
                object.UpgradeID = message.UpgradeID;
            if (message.Upgradenum != null && message.hasOwnProperty("Upgradenum"))
                object.Upgradenum = message.Upgradenum;
            if (message.ProduceGold != null && message.hasOwnProperty("ProduceGold"))
                object.ProduceGold = message.ProduceGold;
            if (message.ProduceTime != null && message.hasOwnProperty("ProduceTime"))
                if (typeof message.ProduceTime === "number")
                    object.ProduceTime = options.longs === String ? String(message.ProduceTime) : message.ProduceTime;
                else
                    object.ProduceTime = options.longs === String ? $util.Long.prototype.toString.call(message.ProduceTime) : options.longs === Number ? new $util.LongBits(message.ProduceTime.low >>> 0, message.ProduceTime.high >>> 0).toNumber() : message.ProduceTime;
            if (message.ProduceItem && message.ProduceItem.length) {
                object.ProduceItem = [];
                for (var j = 0; j < message.ProduceItem.length; ++j)
                    object.ProduceItem[j] = message.ProduceItem[j];
            }
            if (message.NextLevel != null && message.hasOwnProperty("NextLevel"))
                object.NextLevel = message.NextLevel;
            if (message.TakeBackCost != null && message.hasOwnProperty("TakeBackCost"))
                object.TakeBackCost = message.TakeBackCost;
            return object;
        };

        /**
         * Converts this TLevelMaidDefine to JSON.
         * @function toJSON
         * @memberof table.TLevelMaidDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TLevelMaidDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TLevelMaidDefine;
    })();

    table.MapEventBase = (function() {

        /**
         * Properties of a MapEventBase.
         * @memberof table
         * @interface IMapEventBase
         * @property {Array.<table.ITMapEventDefine>|null} [TMapEvent] MapEventBase TMapEvent
         */

        /**
         * Constructs a new MapEventBase.
         * @memberof table
         * @classdesc Represents a MapEventBase.
         * @implements IMapEventBase
         * @constructor
         * @param {table.IMapEventBase=} [properties] Properties to set
         */
        function MapEventBase(properties) {
            this.TMapEvent = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapEventBase TMapEvent.
         * @member {Array.<table.ITMapEventDefine>} TMapEvent
         * @memberof table.MapEventBase
         * @instance
         */
        MapEventBase.prototype.TMapEvent = $util.emptyArray;

        /**
         * Creates a new MapEventBase instance using the specified properties.
         * @function create
         * @memberof table.MapEventBase
         * @static
         * @param {table.IMapEventBase=} [properties] Properties to set
         * @returns {table.MapEventBase} MapEventBase instance
         */
        MapEventBase.create = function create(properties) {
            return new MapEventBase(properties);
        };

        /**
         * Encodes the specified MapEventBase message. Does not implicitly {@link table.MapEventBase.verify|verify} messages.
         * @function encode
         * @memberof table.MapEventBase
         * @static
         * @param {table.IMapEventBase} message MapEventBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TMapEvent != null && message.TMapEvent.length)
                for (var i = 0; i < message.TMapEvent.length; ++i)
                    $root.table.TMapEventDefine.encode(message.TMapEvent[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MapEventBase message, length delimited. Does not implicitly {@link table.MapEventBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.MapEventBase
         * @static
         * @param {table.IMapEventBase} message MapEventBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapEventBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.MapEventBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.MapEventBase} MapEventBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.MapEventBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TMapEvent && message.TMapEvent.length))
                        message.TMapEvent = [];
                    message.TMapEvent.push($root.table.TMapEventDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapEventBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.MapEventBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.MapEventBase} MapEventBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapEventBase message.
         * @function verify
         * @memberof table.MapEventBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapEventBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TMapEvent != null && message.hasOwnProperty("TMapEvent")) {
                if (!Array.isArray(message.TMapEvent))
                    return "TMapEvent: array expected";
                for (var i = 0; i < message.TMapEvent.length; ++i) {
                    var error = $root.table.TMapEventDefine.verify(message.TMapEvent[i]);
                    if (error)
                        return "TMapEvent." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MapEventBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.MapEventBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.MapEventBase} MapEventBase
         */
        MapEventBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.MapEventBase)
                return object;
            var message = new $root.table.MapEventBase();
            if (object.TMapEvent) {
                if (!Array.isArray(object.TMapEvent))
                    throw TypeError(".table.MapEventBase.TMapEvent: array expected");
                message.TMapEvent = [];
                for (var i = 0; i < object.TMapEvent.length; ++i) {
                    if (typeof object.TMapEvent[i] !== "object")
                        throw TypeError(".table.MapEventBase.TMapEvent: object expected");
                    message.TMapEvent[i] = $root.table.TMapEventDefine.fromObject(object.TMapEvent[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MapEventBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.MapEventBase
         * @static
         * @param {table.MapEventBase} message MapEventBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapEventBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TMapEvent = [];
            if (message.TMapEvent && message.TMapEvent.length) {
                object.TMapEvent = [];
                for (var j = 0; j < message.TMapEvent.length; ++j)
                    object.TMapEvent[j] = $root.table.TMapEventDefine.toObject(message.TMapEvent[j], options);
            }
            return object;
        };

        /**
         * Converts this MapEventBase to JSON.
         * @function toJSON
         * @memberof table.MapEventBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapEventBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapEventBase;
    })();

    table.TMapEventDefine = (function() {

        /**
         * Properties of a TMapEventDefine.
         * @memberof table
         * @interface ITMapEventDefine
         * @property {number|null} [Id] TMapEventDefine Id
         * @property {number|null} [Type] TMapEventDefine Type
         * @property {string|null} [Desc] TMapEventDefine Desc
         * @property {number|null} [MoneyType] TMapEventDefine MoneyType
         * @property {number|null} [Price] TMapEventDefine Price
         * @property {string|null} [Icon] TMapEventDefine Icon
         * @property {Array.<string>|null} [Reward] TMapEventDefine Reward
         * @property {string|null} [Params] TMapEventDefine Params
         */

        /**
         * Constructs a new TMapEventDefine.
         * @memberof table
         * @classdesc Represents a TMapEventDefine.
         * @implements ITMapEventDefine
         * @constructor
         * @param {table.ITMapEventDefine=} [properties] Properties to set
         */
        function TMapEventDefine(properties) {
            this.Reward = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TMapEventDefine Id.
         * @member {number} Id
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Id = 0;

        /**
         * TMapEventDefine Type.
         * @member {number} Type
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Type = 0;

        /**
         * TMapEventDefine Desc.
         * @member {string} Desc
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Desc = "";

        /**
         * TMapEventDefine MoneyType.
         * @member {number} MoneyType
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.MoneyType = 0;

        /**
         * TMapEventDefine Price.
         * @member {number} Price
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Price = 0;

        /**
         * TMapEventDefine Icon.
         * @member {string} Icon
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Icon = "";

        /**
         * TMapEventDefine Reward.
         * @member {Array.<string>} Reward
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Reward = $util.emptyArray;

        /**
         * TMapEventDefine Params.
         * @member {string} Params
         * @memberof table.TMapEventDefine
         * @instance
         */
        TMapEventDefine.prototype.Params = "";

        /**
         * Creates a new TMapEventDefine instance using the specified properties.
         * @function create
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.ITMapEventDefine=} [properties] Properties to set
         * @returns {table.TMapEventDefine} TMapEventDefine instance
         */
        TMapEventDefine.create = function create(properties) {
            return new TMapEventDefine(properties);
        };

        /**
         * Encodes the specified TMapEventDefine message. Does not implicitly {@link table.TMapEventDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.ITMapEventDefine} message TMapEventDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Type);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Desc);
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.MoneyType);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.Price);
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.Icon);
            if (message.Reward != null && message.Reward.length)
                for (var i = 0; i < message.Reward.length; ++i)
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Reward[i]);
            if (message.Params != null && message.hasOwnProperty("Params"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.Params);
            return writer;
        };

        /**
         * Encodes the specified TMapEventDefine message, length delimited. Does not implicitly {@link table.TMapEventDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.ITMapEventDefine} message TMapEventDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TMapEventDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TMapEventDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TMapEventDefine} TMapEventDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TMapEventDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.uint32();
                    break;
                case 3:
                    message.Desc = reader.string();
                    break;
                case 4:
                    message.MoneyType = reader.uint32();
                    break;
                case 5:
                    message.Price = reader.uint32();
                    break;
                case 6:
                    message.Icon = reader.string();
                    break;
                case 7:
                    if (!(message.Reward && message.Reward.length))
                        message.Reward = [];
                    message.Reward.push(reader.string());
                    break;
                case 8:
                    message.Params = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TMapEventDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TMapEventDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TMapEventDefine} TMapEventDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TMapEventDefine message.
         * @function verify
         * @memberof table.TMapEventDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TMapEventDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                if (!$util.isInteger(message.MoneyType))
                    return "MoneyType: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                if (!$util.isString(message.Icon))
                    return "Icon: string expected";
            if (message.Reward != null && message.hasOwnProperty("Reward")) {
                if (!Array.isArray(message.Reward))
                    return "Reward: array expected";
                for (var i = 0; i < message.Reward.length; ++i)
                    if (!$util.isString(message.Reward[i]))
                        return "Reward: string[] expected";
            }
            if (message.Params != null && message.hasOwnProperty("Params"))
                if (!$util.isString(message.Params))
                    return "Params: string expected";
            return null;
        };

        /**
         * Creates a TMapEventDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TMapEventDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TMapEventDefine} TMapEventDefine
         */
        TMapEventDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TMapEventDefine)
                return object;
            var message = new $root.table.TMapEventDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type >>> 0;
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.MoneyType != null)
                message.MoneyType = object.MoneyType >>> 0;
            if (object.Price != null)
                message.Price = object.Price >>> 0;
            if (object.Icon != null)
                message.Icon = String(object.Icon);
            if (object.Reward) {
                if (!Array.isArray(object.Reward))
                    throw TypeError(".table.TMapEventDefine.Reward: array expected");
                message.Reward = [];
                for (var i = 0; i < object.Reward.length; ++i)
                    message.Reward[i] = String(object.Reward[i]);
            }
            if (object.Params != null)
                message.Params = String(object.Params);
            return message;
        };

        /**
         * Creates a plain object from a TMapEventDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TMapEventDefine
         * @static
         * @param {table.TMapEventDefine} message TMapEventDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TMapEventDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Reward = [];
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.Desc = "";
                object.MoneyType = 0;
                object.Price = 0;
                object.Icon = "";
                object.Params = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                object.MoneyType = message.MoneyType;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Icon != null && message.hasOwnProperty("Icon"))
                object.Icon = message.Icon;
            if (message.Reward && message.Reward.length) {
                object.Reward = [];
                for (var j = 0; j < message.Reward.length; ++j)
                    object.Reward[j] = message.Reward[j];
            }
            if (message.Params != null && message.hasOwnProperty("Params"))
                object.Params = message.Params;
            return object;
        };

        /**
         * Converts this TMapEventDefine to JSON.
         * @function toJSON
         * @memberof table.TMapEventDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TMapEventDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TMapEventDefine;
    })();

    table.MapEventRefreshBase = (function() {

        /**
         * Properties of a MapEventRefreshBase.
         * @memberof table
         * @interface IMapEventRefreshBase
         * @property {Array.<table.ITMapEventRefreshDefine>|null} [TMapEventRefresh] MapEventRefreshBase TMapEventRefresh
         */

        /**
         * Constructs a new MapEventRefreshBase.
         * @memberof table
         * @classdesc Represents a MapEventRefreshBase.
         * @implements IMapEventRefreshBase
         * @constructor
         * @param {table.IMapEventRefreshBase=} [properties] Properties to set
         */
        function MapEventRefreshBase(properties) {
            this.TMapEventRefresh = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapEventRefreshBase TMapEventRefresh.
         * @member {Array.<table.ITMapEventRefreshDefine>} TMapEventRefresh
         * @memberof table.MapEventRefreshBase
         * @instance
         */
        MapEventRefreshBase.prototype.TMapEventRefresh = $util.emptyArray;

        /**
         * Creates a new MapEventRefreshBase instance using the specified properties.
         * @function create
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.IMapEventRefreshBase=} [properties] Properties to set
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase instance
         */
        MapEventRefreshBase.create = function create(properties) {
            return new MapEventRefreshBase(properties);
        };

        /**
         * Encodes the specified MapEventRefreshBase message. Does not implicitly {@link table.MapEventRefreshBase.verify|verify} messages.
         * @function encode
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.IMapEventRefreshBase} message MapEventRefreshBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventRefreshBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TMapEventRefresh != null && message.TMapEventRefresh.length)
                for (var i = 0; i < message.TMapEventRefresh.length; ++i)
                    $root.table.TMapEventRefreshDefine.encode(message.TMapEventRefresh[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MapEventRefreshBase message, length delimited. Does not implicitly {@link table.MapEventRefreshBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.IMapEventRefreshBase} message MapEventRefreshBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapEventRefreshBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapEventRefreshBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventRefreshBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.MapEventRefreshBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TMapEventRefresh && message.TMapEventRefresh.length))
                        message.TMapEventRefresh = [];
                    message.TMapEventRefresh.push($root.table.TMapEventRefreshDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapEventRefreshBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapEventRefreshBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapEventRefreshBase message.
         * @function verify
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapEventRefreshBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TMapEventRefresh != null && message.hasOwnProperty("TMapEventRefresh")) {
                if (!Array.isArray(message.TMapEventRefresh))
                    return "TMapEventRefresh: array expected";
                for (var i = 0; i < message.TMapEventRefresh.length; ++i) {
                    var error = $root.table.TMapEventRefreshDefine.verify(message.TMapEventRefresh[i]);
                    if (error)
                        return "TMapEventRefresh." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MapEventRefreshBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.MapEventRefreshBase} MapEventRefreshBase
         */
        MapEventRefreshBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.MapEventRefreshBase)
                return object;
            var message = new $root.table.MapEventRefreshBase();
            if (object.TMapEventRefresh) {
                if (!Array.isArray(object.TMapEventRefresh))
                    throw TypeError(".table.MapEventRefreshBase.TMapEventRefresh: array expected");
                message.TMapEventRefresh = [];
                for (var i = 0; i < object.TMapEventRefresh.length; ++i) {
                    if (typeof object.TMapEventRefresh[i] !== "object")
                        throw TypeError(".table.MapEventRefreshBase.TMapEventRefresh: object expected");
                    message.TMapEventRefresh[i] = $root.table.TMapEventRefreshDefine.fromObject(object.TMapEventRefresh[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MapEventRefreshBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.MapEventRefreshBase
         * @static
         * @param {table.MapEventRefreshBase} message MapEventRefreshBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapEventRefreshBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TMapEventRefresh = [];
            if (message.TMapEventRefresh && message.TMapEventRefresh.length) {
                object.TMapEventRefresh = [];
                for (var j = 0; j < message.TMapEventRefresh.length; ++j)
                    object.TMapEventRefresh[j] = $root.table.TMapEventRefreshDefine.toObject(message.TMapEventRefresh[j], options);
            }
            return object;
        };

        /**
         * Converts this MapEventRefreshBase to JSON.
         * @function toJSON
         * @memberof table.MapEventRefreshBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapEventRefreshBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapEventRefreshBase;
    })();

    table.TMapEventRefreshDefine = (function() {

        /**
         * Properties of a TMapEventRefreshDefine.
         * @memberof table
         * @interface ITMapEventRefreshDefine
         * @property {number|null} [Id] TMapEventRefreshDefine Id
         * @property {Array.<string>|null} [TypeRand] TMapEventRefreshDefine TypeRand
         * @property {number|null} [RangeMin] TMapEventRefreshDefine RangeMin
         * @property {number|null} [RangeMax] TMapEventRefreshDefine RangeMax
         * @property {number|null} [Num] TMapEventRefreshDefine Num
         */

        /**
         * Constructs a new TMapEventRefreshDefine.
         * @memberof table
         * @classdesc Represents a TMapEventRefreshDefine.
         * @implements ITMapEventRefreshDefine
         * @constructor
         * @param {table.ITMapEventRefreshDefine=} [properties] Properties to set
         */
        function TMapEventRefreshDefine(properties) {
            this.TypeRand = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TMapEventRefreshDefine Id.
         * @member {number} Id
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.Id = 0;

        /**
         * TMapEventRefreshDefine TypeRand.
         * @member {Array.<string>} TypeRand
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.TypeRand = $util.emptyArray;

        /**
         * TMapEventRefreshDefine RangeMin.
         * @member {number} RangeMin
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.RangeMin = 0;

        /**
         * TMapEventRefreshDefine RangeMax.
         * @member {number} RangeMax
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.RangeMax = 0;

        /**
         * TMapEventRefreshDefine Num.
         * @member {number} Num
         * @memberof table.TMapEventRefreshDefine
         * @instance
         */
        TMapEventRefreshDefine.prototype.Num = 0;

        /**
         * Creates a new TMapEventRefreshDefine instance using the specified properties.
         * @function create
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.ITMapEventRefreshDefine=} [properties] Properties to set
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine instance
         */
        TMapEventRefreshDefine.create = function create(properties) {
            return new TMapEventRefreshDefine(properties);
        };

        /**
         * Encodes the specified TMapEventRefreshDefine message. Does not implicitly {@link table.TMapEventRefreshDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.ITMapEventRefreshDefine} message TMapEventRefreshDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventRefreshDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.TypeRand != null && message.TypeRand.length)
                for (var i = 0; i < message.TypeRand.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.TypeRand[i]);
            if (message.RangeMin != null && message.hasOwnProperty("RangeMin"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.RangeMin);
            if (message.RangeMax != null && message.hasOwnProperty("RangeMax"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.RangeMax);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.Num);
            return writer;
        };

        /**
         * Encodes the specified TMapEventRefreshDefine message, length delimited. Does not implicitly {@link table.TMapEventRefreshDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.ITMapEventRefreshDefine} message TMapEventRefreshDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapEventRefreshDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TMapEventRefreshDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventRefreshDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TMapEventRefreshDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    if (!(message.TypeRand && message.TypeRand.length))
                        message.TypeRand = [];
                    message.TypeRand.push(reader.string());
                    break;
                case 3:
                    message.RangeMin = reader.uint32();
                    break;
                case 4:
                    message.RangeMax = reader.uint32();
                    break;
                case 5:
                    message.Num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TMapEventRefreshDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapEventRefreshDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TMapEventRefreshDefine message.
         * @function verify
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TMapEventRefreshDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.TypeRand != null && message.hasOwnProperty("TypeRand")) {
                if (!Array.isArray(message.TypeRand))
                    return "TypeRand: array expected";
                for (var i = 0; i < message.TypeRand.length; ++i)
                    if (!$util.isString(message.TypeRand[i]))
                        return "TypeRand: string[] expected";
            }
            if (message.RangeMin != null && message.hasOwnProperty("RangeMin"))
                if (!$util.isInteger(message.RangeMin))
                    return "RangeMin: integer expected";
            if (message.RangeMax != null && message.hasOwnProperty("RangeMax"))
                if (!$util.isInteger(message.RangeMax))
                    return "RangeMax: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            return null;
        };

        /**
         * Creates a TMapEventRefreshDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TMapEventRefreshDefine} TMapEventRefreshDefine
         */
        TMapEventRefreshDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TMapEventRefreshDefine)
                return object;
            var message = new $root.table.TMapEventRefreshDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.TypeRand) {
                if (!Array.isArray(object.TypeRand))
                    throw TypeError(".table.TMapEventRefreshDefine.TypeRand: array expected");
                message.TypeRand = [];
                for (var i = 0; i < object.TypeRand.length; ++i)
                    message.TypeRand[i] = String(object.TypeRand[i]);
            }
            if (object.RangeMin != null)
                message.RangeMin = object.RangeMin >>> 0;
            if (object.RangeMax != null)
                message.RangeMax = object.RangeMax >>> 0;
            if (object.Num != null)
                message.Num = object.Num >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TMapEventRefreshDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TMapEventRefreshDefine
         * @static
         * @param {table.TMapEventRefreshDefine} message TMapEventRefreshDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TMapEventRefreshDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TypeRand = [];
            if (options.defaults) {
                object.Id = 0;
                object.RangeMin = 0;
                object.RangeMax = 0;
                object.Num = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.TypeRand && message.TypeRand.length) {
                object.TypeRand = [];
                for (var j = 0; j < message.TypeRand.length; ++j)
                    object.TypeRand[j] = message.TypeRand[j];
            }
            if (message.RangeMin != null && message.hasOwnProperty("RangeMin"))
                object.RangeMin = message.RangeMin;
            if (message.RangeMax != null && message.hasOwnProperty("RangeMax"))
                object.RangeMax = message.RangeMax;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            return object;
        };

        /**
         * Converts this TMapEventRefreshDefine to JSON.
         * @function toJSON
         * @memberof table.TMapEventRefreshDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TMapEventRefreshDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TMapEventRefreshDefine;
    })();

    table.MapStoreBase = (function() {

        /**
         * Properties of a MapStoreBase.
         * @memberof table
         * @interface IMapStoreBase
         * @property {Array.<table.ITMapStoreDefine>|null} [TMapStore] MapStoreBase TMapStore
         */

        /**
         * Constructs a new MapStoreBase.
         * @memberof table
         * @classdesc Represents a MapStoreBase.
         * @implements IMapStoreBase
         * @constructor
         * @param {table.IMapStoreBase=} [properties] Properties to set
         */
        function MapStoreBase(properties) {
            this.TMapStore = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapStoreBase TMapStore.
         * @member {Array.<table.ITMapStoreDefine>} TMapStore
         * @memberof table.MapStoreBase
         * @instance
         */
        MapStoreBase.prototype.TMapStore = $util.emptyArray;

        /**
         * Creates a new MapStoreBase instance using the specified properties.
         * @function create
         * @memberof table.MapStoreBase
         * @static
         * @param {table.IMapStoreBase=} [properties] Properties to set
         * @returns {table.MapStoreBase} MapStoreBase instance
         */
        MapStoreBase.create = function create(properties) {
            return new MapStoreBase(properties);
        };

        /**
         * Encodes the specified MapStoreBase message. Does not implicitly {@link table.MapStoreBase.verify|verify} messages.
         * @function encode
         * @memberof table.MapStoreBase
         * @static
         * @param {table.IMapStoreBase} message MapStoreBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapStoreBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TMapStore != null && message.TMapStore.length)
                for (var i = 0; i < message.TMapStore.length; ++i)
                    $root.table.TMapStoreDefine.encode(message.TMapStore[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MapStoreBase message, length delimited. Does not implicitly {@link table.MapStoreBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.MapStoreBase
         * @static
         * @param {table.IMapStoreBase} message MapStoreBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapStoreBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapStoreBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.MapStoreBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.MapStoreBase} MapStoreBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapStoreBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.MapStoreBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TMapStore && message.TMapStore.length))
                        message.TMapStore = [];
                    message.TMapStore.push($root.table.TMapStoreDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MapStoreBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.MapStoreBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.MapStoreBase} MapStoreBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapStoreBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapStoreBase message.
         * @function verify
         * @memberof table.MapStoreBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapStoreBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TMapStore != null && message.hasOwnProperty("TMapStore")) {
                if (!Array.isArray(message.TMapStore))
                    return "TMapStore: array expected";
                for (var i = 0; i < message.TMapStore.length; ++i) {
                    var error = $root.table.TMapStoreDefine.verify(message.TMapStore[i]);
                    if (error)
                        return "TMapStore." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MapStoreBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.MapStoreBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.MapStoreBase} MapStoreBase
         */
        MapStoreBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.MapStoreBase)
                return object;
            var message = new $root.table.MapStoreBase();
            if (object.TMapStore) {
                if (!Array.isArray(object.TMapStore))
                    throw TypeError(".table.MapStoreBase.TMapStore: array expected");
                message.TMapStore = [];
                for (var i = 0; i < object.TMapStore.length; ++i) {
                    if (typeof object.TMapStore[i] !== "object")
                        throw TypeError(".table.MapStoreBase.TMapStore: object expected");
                    message.TMapStore[i] = $root.table.TMapStoreDefine.fromObject(object.TMapStore[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MapStoreBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.MapStoreBase
         * @static
         * @param {table.MapStoreBase} message MapStoreBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapStoreBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TMapStore = [];
            if (message.TMapStore && message.TMapStore.length) {
                object.TMapStore = [];
                for (var j = 0; j < message.TMapStore.length; ++j)
                    object.TMapStore[j] = $root.table.TMapStoreDefine.toObject(message.TMapStore[j], options);
            }
            return object;
        };

        /**
         * Converts this MapStoreBase to JSON.
         * @function toJSON
         * @memberof table.MapStoreBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapStoreBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapStoreBase;
    })();

    table.TMapStoreDefine = (function() {

        /**
         * Properties of a TMapStoreDefine.
         * @memberof table
         * @interface ITMapStoreDefine
         * @property {number|null} [Id] TMapStoreDefine Id
         * @property {number|null} [ShopId] TMapStoreDefine ShopId
         * @property {number|null} [MoneyType] TMapStoreDefine MoneyType
         * @property {number|null} [Price] TMapStoreDefine Price
         * @property {number|null} [Nums] TMapStoreDefine Nums
         */

        /**
         * Constructs a new TMapStoreDefine.
         * @memberof table
         * @classdesc Represents a TMapStoreDefine.
         * @implements ITMapStoreDefine
         * @constructor
         * @param {table.ITMapStoreDefine=} [properties] Properties to set
         */
        function TMapStoreDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TMapStoreDefine Id.
         * @member {number} Id
         * @memberof table.TMapStoreDefine
         * @instance
         */
        TMapStoreDefine.prototype.Id = 0;

        /**
         * TMapStoreDefine ShopId.
         * @member {number} ShopId
         * @memberof table.TMapStoreDefine
         * @instance
         */
        TMapStoreDefine.prototype.ShopId = 0;

        /**
         * TMapStoreDefine MoneyType.
         * @member {number} MoneyType
         * @memberof table.TMapStoreDefine
         * @instance
         */
        TMapStoreDefine.prototype.MoneyType = 0;

        /**
         * TMapStoreDefine Price.
         * @member {number} Price
         * @memberof table.TMapStoreDefine
         * @instance
         */
        TMapStoreDefine.prototype.Price = 0;

        /**
         * TMapStoreDefine Nums.
         * @member {number} Nums
         * @memberof table.TMapStoreDefine
         * @instance
         */
        TMapStoreDefine.prototype.Nums = 0;

        /**
         * Creates a new TMapStoreDefine instance using the specified properties.
         * @function create
         * @memberof table.TMapStoreDefine
         * @static
         * @param {table.ITMapStoreDefine=} [properties] Properties to set
         * @returns {table.TMapStoreDefine} TMapStoreDefine instance
         */
        TMapStoreDefine.create = function create(properties) {
            return new TMapStoreDefine(properties);
        };

        /**
         * Encodes the specified TMapStoreDefine message. Does not implicitly {@link table.TMapStoreDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TMapStoreDefine
         * @static
         * @param {table.ITMapStoreDefine} message TMapStoreDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapStoreDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.ShopId != null && message.hasOwnProperty("ShopId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ShopId);
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.MoneyType);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.Price);
            if (message.Nums != null && message.hasOwnProperty("Nums"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Nums);
            return writer;
        };

        /**
         * Encodes the specified TMapStoreDefine message, length delimited. Does not implicitly {@link table.TMapStoreDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TMapStoreDefine
         * @static
         * @param {table.ITMapStoreDefine} message TMapStoreDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMapStoreDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TMapStoreDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TMapStoreDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TMapStoreDefine} TMapStoreDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapStoreDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TMapStoreDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.ShopId = reader.uint32();
                    break;
                case 3:
                    message.MoneyType = reader.uint32();
                    break;
                case 4:
                    message.Price = reader.uint32();
                    break;
                case 5:
                    message.Nums = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TMapStoreDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TMapStoreDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TMapStoreDefine} TMapStoreDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMapStoreDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TMapStoreDefine message.
         * @function verify
         * @memberof table.TMapStoreDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TMapStoreDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.ShopId != null && message.hasOwnProperty("ShopId"))
                if (!$util.isInteger(message.ShopId))
                    return "ShopId: integer expected";
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                if (!$util.isInteger(message.MoneyType))
                    return "MoneyType: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Nums != null && message.hasOwnProperty("Nums"))
                if (!$util.isInteger(message.Nums))
                    return "Nums: integer expected";
            return null;
        };

        /**
         * Creates a TMapStoreDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TMapStoreDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TMapStoreDefine} TMapStoreDefine
         */
        TMapStoreDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TMapStoreDefine)
                return object;
            var message = new $root.table.TMapStoreDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.ShopId != null)
                message.ShopId = object.ShopId >>> 0;
            if (object.MoneyType != null)
                message.MoneyType = object.MoneyType >>> 0;
            if (object.Price != null)
                message.Price = object.Price >>> 0;
            if (object.Nums != null)
                message.Nums = object.Nums | 0;
            return message;
        };

        /**
         * Creates a plain object from a TMapStoreDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TMapStoreDefine
         * @static
         * @param {table.TMapStoreDefine} message TMapStoreDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TMapStoreDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.ShopId = 0;
                object.MoneyType = 0;
                object.Price = 0;
                object.Nums = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.ShopId != null && message.hasOwnProperty("ShopId"))
                object.ShopId = message.ShopId;
            if (message.MoneyType != null && message.hasOwnProperty("MoneyType"))
                object.MoneyType = message.MoneyType;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Nums != null && message.hasOwnProperty("Nums"))
                object.Nums = message.Nums;
            return object;
        };

        /**
         * Converts this TMapStoreDefine to JSON.
         * @function toJSON
         * @memberof table.TMapStoreDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TMapStoreDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TMapStoreDefine;
    })();

    table.MusicBase = (function() {

        /**
         * Properties of a MusicBase.
         * @memberof table
         * @interface IMusicBase
         * @property {Array.<table.ITMusicDefine>|null} [TMusic] MusicBase TMusic
         */

        /**
         * Constructs a new MusicBase.
         * @memberof table
         * @classdesc Represents a MusicBase.
         * @implements IMusicBase
         * @constructor
         * @param {table.IMusicBase=} [properties] Properties to set
         */
        function MusicBase(properties) {
            this.TMusic = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MusicBase TMusic.
         * @member {Array.<table.ITMusicDefine>} TMusic
         * @memberof table.MusicBase
         * @instance
         */
        MusicBase.prototype.TMusic = $util.emptyArray;

        /**
         * Creates a new MusicBase instance using the specified properties.
         * @function create
         * @memberof table.MusicBase
         * @static
         * @param {table.IMusicBase=} [properties] Properties to set
         * @returns {table.MusicBase} MusicBase instance
         */
        MusicBase.create = function create(properties) {
            return new MusicBase(properties);
        };

        /**
         * Encodes the specified MusicBase message. Does not implicitly {@link table.MusicBase.verify|verify} messages.
         * @function encode
         * @memberof table.MusicBase
         * @static
         * @param {table.IMusicBase} message MusicBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MusicBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TMusic != null && message.TMusic.length)
                for (var i = 0; i < message.TMusic.length; ++i)
                    $root.table.TMusicDefine.encode(message.TMusic[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MusicBase message, length delimited. Does not implicitly {@link table.MusicBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.MusicBase
         * @static
         * @param {table.IMusicBase} message MusicBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MusicBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MusicBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.MusicBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.MusicBase} MusicBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MusicBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.MusicBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TMusic && message.TMusic.length))
                        message.TMusic = [];
                    message.TMusic.push($root.table.TMusicDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MusicBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.MusicBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.MusicBase} MusicBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MusicBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MusicBase message.
         * @function verify
         * @memberof table.MusicBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MusicBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TMusic != null && message.hasOwnProperty("TMusic")) {
                if (!Array.isArray(message.TMusic))
                    return "TMusic: array expected";
                for (var i = 0; i < message.TMusic.length; ++i) {
                    var error = $root.table.TMusicDefine.verify(message.TMusic[i]);
                    if (error)
                        return "TMusic." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MusicBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.MusicBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.MusicBase} MusicBase
         */
        MusicBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.MusicBase)
                return object;
            var message = new $root.table.MusicBase();
            if (object.TMusic) {
                if (!Array.isArray(object.TMusic))
                    throw TypeError(".table.MusicBase.TMusic: array expected");
                message.TMusic = [];
                for (var i = 0; i < object.TMusic.length; ++i) {
                    if (typeof object.TMusic[i] !== "object")
                        throw TypeError(".table.MusicBase.TMusic: object expected");
                    message.TMusic[i] = $root.table.TMusicDefine.fromObject(object.TMusic[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MusicBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.MusicBase
         * @static
         * @param {table.MusicBase} message MusicBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MusicBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TMusic = [];
            if (message.TMusic && message.TMusic.length) {
                object.TMusic = [];
                for (var j = 0; j < message.TMusic.length; ++j)
                    object.TMusic[j] = $root.table.TMusicDefine.toObject(message.TMusic[j], options);
            }
            return object;
        };

        /**
         * Converts this MusicBase to JSON.
         * @function toJSON
         * @memberof table.MusicBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MusicBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MusicBase;
    })();

    table.TMusicDefine = (function() {

        /**
         * Properties of a TMusicDefine.
         * @memberof table
         * @interface ITMusicDefine
         * @property {number|null} [Id] TMusicDefine Id
         * @property {string|null} [Pos] TMusicDefine Pos
         * @property {string|null} [Name] TMusicDefine Name
         */

        /**
         * Constructs a new TMusicDefine.
         * @memberof table
         * @classdesc Represents a TMusicDefine.
         * @implements ITMusicDefine
         * @constructor
         * @param {table.ITMusicDefine=} [properties] Properties to set
         */
        function TMusicDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TMusicDefine Id.
         * @member {number} Id
         * @memberof table.TMusicDefine
         * @instance
         */
        TMusicDefine.prototype.Id = 0;

        /**
         * TMusicDefine Pos.
         * @member {string} Pos
         * @memberof table.TMusicDefine
         * @instance
         */
        TMusicDefine.prototype.Pos = "";

        /**
         * TMusicDefine Name.
         * @member {string} Name
         * @memberof table.TMusicDefine
         * @instance
         */
        TMusicDefine.prototype.Name = "";

        /**
         * Creates a new TMusicDefine instance using the specified properties.
         * @function create
         * @memberof table.TMusicDefine
         * @static
         * @param {table.ITMusicDefine=} [properties] Properties to set
         * @returns {table.TMusicDefine} TMusicDefine instance
         */
        TMusicDefine.create = function create(properties) {
            return new TMusicDefine(properties);
        };

        /**
         * Encodes the specified TMusicDefine message. Does not implicitly {@link table.TMusicDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TMusicDefine
         * @static
         * @param {table.ITMusicDefine} message TMusicDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMusicDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Pos);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Name);
            return writer;
        };

        /**
         * Encodes the specified TMusicDefine message, length delimited. Does not implicitly {@link table.TMusicDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TMusicDefine
         * @static
         * @param {table.ITMusicDefine} message TMusicDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TMusicDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TMusicDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TMusicDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TMusicDefine} TMusicDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMusicDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TMusicDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Pos = reader.string();
                    break;
                case 3:
                    message.Name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TMusicDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TMusicDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TMusicDefine} TMusicDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TMusicDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TMusicDefine message.
         * @function verify
         * @memberof table.TMusicDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TMusicDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                if (!$util.isString(message.Pos))
                    return "Pos: string expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            return null;
        };

        /**
         * Creates a TMusicDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TMusicDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TMusicDefine} TMusicDefine
         */
        TMusicDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TMusicDefine)
                return object;
            var message = new $root.table.TMusicDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Pos != null)
                message.Pos = String(object.Pos);
            if (object.Name != null)
                message.Name = String(object.Name);
            return message;
        };

        /**
         * Creates a plain object from a TMusicDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TMusicDefine
         * @static
         * @param {table.TMusicDefine} message TMusicDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TMusicDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Pos = "";
                object.Name = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = message.Pos;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            return object;
        };

        /**
         * Converts this TMusicDefine to JSON.
         * @function toJSON
         * @memberof table.TMusicDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TMusicDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TMusicDefine;
    })();

    table.NameBase = (function() {

        /**
         * Properties of a NameBase.
         * @memberof table
         * @interface INameBase
         * @property {Array.<table.ITNameDefine>|null} [TName] NameBase TName
         */

        /**
         * Constructs a new NameBase.
         * @memberof table
         * @classdesc Represents a NameBase.
         * @implements INameBase
         * @constructor
         * @param {table.INameBase=} [properties] Properties to set
         */
        function NameBase(properties) {
            this.TName = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NameBase TName.
         * @member {Array.<table.ITNameDefine>} TName
         * @memberof table.NameBase
         * @instance
         */
        NameBase.prototype.TName = $util.emptyArray;

        /**
         * Creates a new NameBase instance using the specified properties.
         * @function create
         * @memberof table.NameBase
         * @static
         * @param {table.INameBase=} [properties] Properties to set
         * @returns {table.NameBase} NameBase instance
         */
        NameBase.create = function create(properties) {
            return new NameBase(properties);
        };

        /**
         * Encodes the specified NameBase message. Does not implicitly {@link table.NameBase.verify|verify} messages.
         * @function encode
         * @memberof table.NameBase
         * @static
         * @param {table.INameBase} message NameBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NameBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TName != null && message.TName.length)
                for (var i = 0; i < message.TName.length; ++i)
                    $root.table.TNameDefine.encode(message.TName[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NameBase message, length delimited. Does not implicitly {@link table.NameBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.NameBase
         * @static
         * @param {table.INameBase} message NameBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NameBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NameBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.NameBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.NameBase} NameBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NameBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.NameBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TName && message.TName.length))
                        message.TName = [];
                    message.TName.push($root.table.TNameDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NameBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.NameBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.NameBase} NameBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NameBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NameBase message.
         * @function verify
         * @memberof table.NameBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NameBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TName != null && message.hasOwnProperty("TName")) {
                if (!Array.isArray(message.TName))
                    return "TName: array expected";
                for (var i = 0; i < message.TName.length; ++i) {
                    var error = $root.table.TNameDefine.verify(message.TName[i]);
                    if (error)
                        return "TName." + error;
                }
            }
            return null;
        };

        /**
         * Creates a NameBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.NameBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.NameBase} NameBase
         */
        NameBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.NameBase)
                return object;
            var message = new $root.table.NameBase();
            if (object.TName) {
                if (!Array.isArray(object.TName))
                    throw TypeError(".table.NameBase.TName: array expected");
                message.TName = [];
                for (var i = 0; i < object.TName.length; ++i) {
                    if (typeof object.TName[i] !== "object")
                        throw TypeError(".table.NameBase.TName: object expected");
                    message.TName[i] = $root.table.TNameDefine.fromObject(object.TName[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a NameBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.NameBase
         * @static
         * @param {table.NameBase} message NameBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NameBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TName = [];
            if (message.TName && message.TName.length) {
                object.TName = [];
                for (var j = 0; j < message.TName.length; ++j)
                    object.TName[j] = $root.table.TNameDefine.toObject(message.TName[j], options);
            }
            return object;
        };

        /**
         * Converts this NameBase to JSON.
         * @function toJSON
         * @memberof table.NameBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NameBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NameBase;
    })();

    table.TNameDefine = (function() {

        /**
         * Properties of a TNameDefine.
         * @memberof table
         * @interface ITNameDefine
         * @property {number|null} [Id] TNameDefine Id
         * @property {string|null} [Name] TNameDefine Name
         */

        /**
         * Constructs a new TNameDefine.
         * @memberof table
         * @classdesc Represents a TNameDefine.
         * @implements ITNameDefine
         * @constructor
         * @param {table.ITNameDefine=} [properties] Properties to set
         */
        function TNameDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TNameDefine Id.
         * @member {number} Id
         * @memberof table.TNameDefine
         * @instance
         */
        TNameDefine.prototype.Id = 0;

        /**
         * TNameDefine Name.
         * @member {string} Name
         * @memberof table.TNameDefine
         * @instance
         */
        TNameDefine.prototype.Name = "";

        /**
         * Creates a new TNameDefine instance using the specified properties.
         * @function create
         * @memberof table.TNameDefine
         * @static
         * @param {table.ITNameDefine=} [properties] Properties to set
         * @returns {table.TNameDefine} TNameDefine instance
         */
        TNameDefine.create = function create(properties) {
            return new TNameDefine(properties);
        };

        /**
         * Encodes the specified TNameDefine message. Does not implicitly {@link table.TNameDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TNameDefine
         * @static
         * @param {table.ITNameDefine} message TNameDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNameDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            return writer;
        };

        /**
         * Encodes the specified TNameDefine message, length delimited. Does not implicitly {@link table.TNameDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TNameDefine
         * @static
         * @param {table.ITNameDefine} message TNameDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNameDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TNameDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TNameDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TNameDefine} TNameDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNameDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TNameDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TNameDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TNameDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TNameDefine} TNameDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNameDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TNameDefine message.
         * @function verify
         * @memberof table.TNameDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TNameDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            return null;
        };

        /**
         * Creates a TNameDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TNameDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TNameDefine} TNameDefine
         */
        TNameDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TNameDefine)
                return object;
            var message = new $root.table.TNameDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            return message;
        };

        /**
         * Creates a plain object from a TNameDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TNameDefine
         * @static
         * @param {table.TNameDefine} message TNameDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TNameDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            return object;
        };

        /**
         * Converts this TNameDefine to JSON.
         * @function toJSON
         * @memberof table.TNameDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TNameDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TNameDefine;
    })();

    table.NoticeBase = (function() {

        /**
         * Properties of a NoticeBase.
         * @memberof table
         * @interface INoticeBase
         * @property {Array.<table.ITNoticeDefine>|null} [TNotice] NoticeBase TNotice
         */

        /**
         * Constructs a new NoticeBase.
         * @memberof table
         * @classdesc Represents a NoticeBase.
         * @implements INoticeBase
         * @constructor
         * @param {table.INoticeBase=} [properties] Properties to set
         */
        function NoticeBase(properties) {
            this.TNotice = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NoticeBase TNotice.
         * @member {Array.<table.ITNoticeDefine>} TNotice
         * @memberof table.NoticeBase
         * @instance
         */
        NoticeBase.prototype.TNotice = $util.emptyArray;

        /**
         * Creates a new NoticeBase instance using the specified properties.
         * @function create
         * @memberof table.NoticeBase
         * @static
         * @param {table.INoticeBase=} [properties] Properties to set
         * @returns {table.NoticeBase} NoticeBase instance
         */
        NoticeBase.create = function create(properties) {
            return new NoticeBase(properties);
        };

        /**
         * Encodes the specified NoticeBase message. Does not implicitly {@link table.NoticeBase.verify|verify} messages.
         * @function encode
         * @memberof table.NoticeBase
         * @static
         * @param {table.INoticeBase} message NoticeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoticeBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TNotice != null && message.TNotice.length)
                for (var i = 0; i < message.TNotice.length; ++i)
                    $root.table.TNoticeDefine.encode(message.TNotice[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NoticeBase message, length delimited. Does not implicitly {@link table.NoticeBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.NoticeBase
         * @static
         * @param {table.INoticeBase} message NoticeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoticeBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NoticeBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.NoticeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.NoticeBase} NoticeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoticeBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.NoticeBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TNotice && message.TNotice.length))
                        message.TNotice = [];
                    message.TNotice.push($root.table.TNoticeDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NoticeBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.NoticeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.NoticeBase} NoticeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoticeBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NoticeBase message.
         * @function verify
         * @memberof table.NoticeBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NoticeBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TNotice != null && message.hasOwnProperty("TNotice")) {
                if (!Array.isArray(message.TNotice))
                    return "TNotice: array expected";
                for (var i = 0; i < message.TNotice.length; ++i) {
                    var error = $root.table.TNoticeDefine.verify(message.TNotice[i]);
                    if (error)
                        return "TNotice." + error;
                }
            }
            return null;
        };

        /**
         * Creates a NoticeBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.NoticeBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.NoticeBase} NoticeBase
         */
        NoticeBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.NoticeBase)
                return object;
            var message = new $root.table.NoticeBase();
            if (object.TNotice) {
                if (!Array.isArray(object.TNotice))
                    throw TypeError(".table.NoticeBase.TNotice: array expected");
                message.TNotice = [];
                for (var i = 0; i < object.TNotice.length; ++i) {
                    if (typeof object.TNotice[i] !== "object")
                        throw TypeError(".table.NoticeBase.TNotice: object expected");
                    message.TNotice[i] = $root.table.TNoticeDefine.fromObject(object.TNotice[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a NoticeBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.NoticeBase
         * @static
         * @param {table.NoticeBase} message NoticeBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NoticeBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TNotice = [];
            if (message.TNotice && message.TNotice.length) {
                object.TNotice = [];
                for (var j = 0; j < message.TNotice.length; ++j)
                    object.TNotice[j] = $root.table.TNoticeDefine.toObject(message.TNotice[j], options);
            }
            return object;
        };

        /**
         * Converts this NoticeBase to JSON.
         * @function toJSON
         * @memberof table.NoticeBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NoticeBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NoticeBase;
    })();

    table.TNoticeDefine = (function() {

        /**
         * Properties of a TNoticeDefine.
         * @memberof table
         * @interface ITNoticeDefine
         * @property {number|null} [Id] TNoticeDefine Id
         * @property {number|null} [Avatar] TNoticeDefine Avatar
         * @property {string|null} [Info] TNoticeDefine Info
         */

        /**
         * Constructs a new TNoticeDefine.
         * @memberof table
         * @classdesc Represents a TNoticeDefine.
         * @implements ITNoticeDefine
         * @constructor
         * @param {table.ITNoticeDefine=} [properties] Properties to set
         */
        function TNoticeDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TNoticeDefine Id.
         * @member {number} Id
         * @memberof table.TNoticeDefine
         * @instance
         */
        TNoticeDefine.prototype.Id = 0;

        /**
         * TNoticeDefine Avatar.
         * @member {number} Avatar
         * @memberof table.TNoticeDefine
         * @instance
         */
        TNoticeDefine.prototype.Avatar = 0;

        /**
         * TNoticeDefine Info.
         * @member {string} Info
         * @memberof table.TNoticeDefine
         * @instance
         */
        TNoticeDefine.prototype.Info = "";

        /**
         * Creates a new TNoticeDefine instance using the specified properties.
         * @function create
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.ITNoticeDefine=} [properties] Properties to set
         * @returns {table.TNoticeDefine} TNoticeDefine instance
         */
        TNoticeDefine.create = function create(properties) {
            return new TNoticeDefine(properties);
        };

        /**
         * Encodes the specified TNoticeDefine message. Does not implicitly {@link table.TNoticeDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.ITNoticeDefine} message TNoticeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNoticeDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Avatar);
            if (message.Info != null && message.hasOwnProperty("Info"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Info);
            return writer;
        };

        /**
         * Encodes the specified TNoticeDefine message, length delimited. Does not implicitly {@link table.TNoticeDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.ITNoticeDefine} message TNoticeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TNoticeDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TNoticeDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TNoticeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TNoticeDefine} TNoticeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNoticeDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TNoticeDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Avatar = reader.uint32();
                    break;
                case 3:
                    message.Info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TNoticeDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TNoticeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TNoticeDefine} TNoticeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TNoticeDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TNoticeDefine message.
         * @function verify
         * @memberof table.TNoticeDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TNoticeDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                if (!$util.isInteger(message.Avatar))
                    return "Avatar: integer expected";
            if (message.Info != null && message.hasOwnProperty("Info"))
                if (!$util.isString(message.Info))
                    return "Info: string expected";
            return null;
        };

        /**
         * Creates a TNoticeDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TNoticeDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TNoticeDefine} TNoticeDefine
         */
        TNoticeDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TNoticeDefine)
                return object;
            var message = new $root.table.TNoticeDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Avatar != null)
                message.Avatar = object.Avatar >>> 0;
            if (object.Info != null)
                message.Info = String(object.Info);
            return message;
        };

        /**
         * Creates a plain object from a TNoticeDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TNoticeDefine
         * @static
         * @param {table.TNoticeDefine} message TNoticeDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TNoticeDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Avatar = 0;
                object.Info = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                object.Avatar = message.Avatar;
            if (message.Info != null && message.hasOwnProperty("Info"))
                object.Info = message.Info;
            return object;
        };

        /**
         * Converts this TNoticeDefine to JSON.
         * @function toJSON
         * @memberof table.TNoticeDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TNoticeDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TNoticeDefine;
    })();

    table.TParkingBase = (function() {

        /**
         * Properties of a TParkingBase.
         * @memberof table
         * @interface ITParkingBase
         * @property {Array.<table.ITParkingDefine>|null} [TParking] TParkingBase TParking
         */

        /**
         * Constructs a new TParkingBase.
         * @memberof table
         * @classdesc Represents a TParkingBase.
         * @implements ITParkingBase
         * @constructor
         * @param {table.ITParkingBase=} [properties] Properties to set
         */
        function TParkingBase(properties) {
            this.TParking = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TParkingBase TParking.
         * @member {Array.<table.ITParkingDefine>} TParking
         * @memberof table.TParkingBase
         * @instance
         */
        TParkingBase.prototype.TParking = $util.emptyArray;

        /**
         * Creates a new TParkingBase instance using the specified properties.
         * @function create
         * @memberof table.TParkingBase
         * @static
         * @param {table.ITParkingBase=} [properties] Properties to set
         * @returns {table.TParkingBase} TParkingBase instance
         */
        TParkingBase.create = function create(properties) {
            return new TParkingBase(properties);
        };

        /**
         * Encodes the specified TParkingBase message. Does not implicitly {@link table.TParkingBase.verify|verify} messages.
         * @function encode
         * @memberof table.TParkingBase
         * @static
         * @param {table.ITParkingBase} message TParkingBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TParkingBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TParking != null && message.TParking.length)
                for (var i = 0; i < message.TParking.length; ++i)
                    $root.table.TParkingDefine.encode(message.TParking[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TParkingBase message, length delimited. Does not implicitly {@link table.TParkingBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TParkingBase
         * @static
         * @param {table.ITParkingBase} message TParkingBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TParkingBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TParkingBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TParkingBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TParkingBase} TParkingBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TParkingBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TParkingBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TParking && message.TParking.length))
                        message.TParking = [];
                    message.TParking.push($root.table.TParkingDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TParkingBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TParkingBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TParkingBase} TParkingBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TParkingBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TParkingBase message.
         * @function verify
         * @memberof table.TParkingBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TParkingBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TParking != null && message.hasOwnProperty("TParking")) {
                if (!Array.isArray(message.TParking))
                    return "TParking: array expected";
                for (var i = 0; i < message.TParking.length; ++i) {
                    var error = $root.table.TParkingDefine.verify(message.TParking[i]);
                    if (error)
                        return "TParking." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TParkingBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TParkingBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TParkingBase} TParkingBase
         */
        TParkingBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TParkingBase)
                return object;
            var message = new $root.table.TParkingBase();
            if (object.TParking) {
                if (!Array.isArray(object.TParking))
                    throw TypeError(".table.TParkingBase.TParking: array expected");
                message.TParking = [];
                for (var i = 0; i < object.TParking.length; ++i) {
                    if (typeof object.TParking[i] !== "object")
                        throw TypeError(".table.TParkingBase.TParking: object expected");
                    message.TParking[i] = $root.table.TParkingDefine.fromObject(object.TParking[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TParkingBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TParkingBase
         * @static
         * @param {table.TParkingBase} message TParkingBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TParkingBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TParking = [];
            if (message.TParking && message.TParking.length) {
                object.TParking = [];
                for (var j = 0; j < message.TParking.length; ++j)
                    object.TParking[j] = $root.table.TParkingDefine.toObject(message.TParking[j], options);
            }
            return object;
        };

        /**
         * Converts this TParkingBase to JSON.
         * @function toJSON
         * @memberof table.TParkingBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TParkingBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TParkingBase;
    })();

    table.TParkingDefine = (function() {

        /**
         * Properties of a TParkingDefine.
         * @memberof table
         * @interface ITParkingDefine
         * @property {number|null} [Id] TParkingDefine Id
         * @property {number|null} [Type] TParkingDefine Type
         * @property {number|null} [RewardPercent] TParkingDefine RewardPercent
         */

        /**
         * Constructs a new TParkingDefine.
         * @memberof table
         * @classdesc Represents a TParkingDefine.
         * @implements ITParkingDefine
         * @constructor
         * @param {table.ITParkingDefine=} [properties] Properties to set
         */
        function TParkingDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TParkingDefine Id.
         * @member {number} Id
         * @memberof table.TParkingDefine
         * @instance
         */
        TParkingDefine.prototype.Id = 0;

        /**
         * TParkingDefine Type.
         * @member {number} Type
         * @memberof table.TParkingDefine
         * @instance
         */
        TParkingDefine.prototype.Type = 0;

        /**
         * TParkingDefine RewardPercent.
         * @member {number} RewardPercent
         * @memberof table.TParkingDefine
         * @instance
         */
        TParkingDefine.prototype.RewardPercent = 0;

        /**
         * Creates a new TParkingDefine instance using the specified properties.
         * @function create
         * @memberof table.TParkingDefine
         * @static
         * @param {table.ITParkingDefine=} [properties] Properties to set
         * @returns {table.TParkingDefine} TParkingDefine instance
         */
        TParkingDefine.create = function create(properties) {
            return new TParkingDefine(properties);
        };

        /**
         * Encodes the specified TParkingDefine message. Does not implicitly {@link table.TParkingDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TParkingDefine
         * @static
         * @param {table.ITParkingDefine} message TParkingDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TParkingDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Type);
            if (message.RewardPercent != null && message.hasOwnProperty("RewardPercent"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.RewardPercent);
            return writer;
        };

        /**
         * Encodes the specified TParkingDefine message, length delimited. Does not implicitly {@link table.TParkingDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TParkingDefine
         * @static
         * @param {table.ITParkingDefine} message TParkingDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TParkingDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TParkingDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TParkingDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TParkingDefine} TParkingDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TParkingDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TParkingDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.uint32();
                    break;
                case 3:
                    message.RewardPercent = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TParkingDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TParkingDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TParkingDefine} TParkingDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TParkingDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TParkingDefine message.
         * @function verify
         * @memberof table.TParkingDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TParkingDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.RewardPercent != null && message.hasOwnProperty("RewardPercent"))
                if (!$util.isInteger(message.RewardPercent))
                    return "RewardPercent: integer expected";
            return null;
        };

        /**
         * Creates a TParkingDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TParkingDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TParkingDefine} TParkingDefine
         */
        TParkingDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TParkingDefine)
                return object;
            var message = new $root.table.TParkingDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type >>> 0;
            if (object.RewardPercent != null)
                message.RewardPercent = object.RewardPercent >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TParkingDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TParkingDefine
         * @static
         * @param {table.TParkingDefine} message TParkingDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TParkingDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.RewardPercent = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.RewardPercent != null && message.hasOwnProperty("RewardPercent"))
                object.RewardPercent = message.RewardPercent;
            return object;
        };

        /**
         * Converts this TParkingDefine to JSON.
         * @function toJSON
         * @memberof table.TParkingDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TParkingDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TParkingDefine;
    })();

    table.ProtoMsgIndex = (function() {

        /**
         * Properties of a ProtoMsgIndex.
         * @memberof table
         * @interface IProtoMsgIndex
         * @property {Array.<table.IProtoIdDefine>|null} [ProtoId] ProtoMsgIndex ProtoId
         */

        /**
         * Constructs a new ProtoMsgIndex.
         * @memberof table
         * @classdesc Represents a ProtoMsgIndex.
         * @implements IProtoMsgIndex
         * @constructor
         * @param {table.IProtoMsgIndex=} [properties] Properties to set
         */
        function ProtoMsgIndex(properties) {
            this.ProtoId = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProtoMsgIndex ProtoId.
         * @member {Array.<table.IProtoIdDefine>} ProtoId
         * @memberof table.ProtoMsgIndex
         * @instance
         */
        ProtoMsgIndex.prototype.ProtoId = $util.emptyArray;

        /**
         * Creates a new ProtoMsgIndex instance using the specified properties.
         * @function create
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.IProtoMsgIndex=} [properties] Properties to set
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex instance
         */
        ProtoMsgIndex.create = function create(properties) {
            return new ProtoMsgIndex(properties);
        };

        /**
         * Encodes the specified ProtoMsgIndex message. Does not implicitly {@link table.ProtoMsgIndex.verify|verify} messages.
         * @function encode
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.IProtoMsgIndex} message ProtoMsgIndex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoMsgIndex.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ProtoId != null && message.ProtoId.length)
                for (var i = 0; i < message.ProtoId.length; ++i)
                    $root.table.ProtoIdDefine.encode(message.ProtoId[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProtoMsgIndex message, length delimited. Does not implicitly {@link table.ProtoMsgIndex.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.IProtoMsgIndex} message ProtoMsgIndex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoMsgIndex.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProtoMsgIndex message from the specified reader or buffer.
         * @function decode
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoMsgIndex.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ProtoMsgIndex();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ProtoId && message.ProtoId.length))
                        message.ProtoId = [];
                    message.ProtoId.push($root.table.ProtoIdDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProtoMsgIndex message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoMsgIndex.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProtoMsgIndex message.
         * @function verify
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProtoMsgIndex.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ProtoId != null && message.hasOwnProperty("ProtoId")) {
                if (!Array.isArray(message.ProtoId))
                    return "ProtoId: array expected";
                for (var i = 0; i < message.ProtoId.length; ++i) {
                    var error = $root.table.ProtoIdDefine.verify(message.ProtoId[i]);
                    if (error)
                        return "ProtoId." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProtoMsgIndex message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ProtoMsgIndex} ProtoMsgIndex
         */
        ProtoMsgIndex.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ProtoMsgIndex)
                return object;
            var message = new $root.table.ProtoMsgIndex();
            if (object.ProtoId) {
                if (!Array.isArray(object.ProtoId))
                    throw TypeError(".table.ProtoMsgIndex.ProtoId: array expected");
                message.ProtoId = [];
                for (var i = 0; i < object.ProtoId.length; ++i) {
                    if (typeof object.ProtoId[i] !== "object")
                        throw TypeError(".table.ProtoMsgIndex.ProtoId: object expected");
                    message.ProtoId[i] = $root.table.ProtoIdDefine.fromObject(object.ProtoId[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProtoMsgIndex message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ProtoMsgIndex
         * @static
         * @param {table.ProtoMsgIndex} message ProtoMsgIndex
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProtoMsgIndex.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ProtoId = [];
            if (message.ProtoId && message.ProtoId.length) {
                object.ProtoId = [];
                for (var j = 0; j < message.ProtoId.length; ++j)
                    object.ProtoId[j] = $root.table.ProtoIdDefine.toObject(message.ProtoId[j], options);
            }
            return object;
        };

        /**
         * Converts this ProtoMsgIndex to JSON.
         * @function toJSON
         * @memberof table.ProtoMsgIndex
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProtoMsgIndex.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProtoMsgIndex;
    })();

    table.ProtoIdDefine = (function() {

        /**
         * Properties of a ProtoIdDefine.
         * @memberof table
         * @interface IProtoIdDefine
         * @property {number|null} [Id] ProtoIdDefine Id
         * @property {string|null} [Name] ProtoIdDefine Name
         */

        /**
         * Constructs a new ProtoIdDefine.
         * @memberof table
         * @classdesc Represents a ProtoIdDefine.
         * @implements IProtoIdDefine
         * @constructor
         * @param {table.IProtoIdDefine=} [properties] Properties to set
         */
        function ProtoIdDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProtoIdDefine Id.
         * @member {number} Id
         * @memberof table.ProtoIdDefine
         * @instance
         */
        ProtoIdDefine.prototype.Id = 0;

        /**
         * ProtoIdDefine Name.
         * @member {string} Name
         * @memberof table.ProtoIdDefine
         * @instance
         */
        ProtoIdDefine.prototype.Name = "";

        /**
         * Creates a new ProtoIdDefine instance using the specified properties.
         * @function create
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.IProtoIdDefine=} [properties] Properties to set
         * @returns {table.ProtoIdDefine} ProtoIdDefine instance
         */
        ProtoIdDefine.create = function create(properties) {
            return new ProtoIdDefine(properties);
        };

        /**
         * Encodes the specified ProtoIdDefine message. Does not implicitly {@link table.ProtoIdDefine.verify|verify} messages.
         * @function encode
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.IProtoIdDefine} message ProtoIdDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoIdDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
            return writer;
        };

        /**
         * Encodes the specified ProtoIdDefine message, length delimited. Does not implicitly {@link table.ProtoIdDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.IProtoIdDefine} message ProtoIdDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtoIdDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProtoIdDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.ProtoIdDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ProtoIdDefine} ProtoIdDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoIdDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ProtoIdDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.int32();
                    break;
                case 2:
                    message.Name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProtoIdDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ProtoIdDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ProtoIdDefine} ProtoIdDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtoIdDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProtoIdDefine message.
         * @function verify
         * @memberof table.ProtoIdDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProtoIdDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            return null;
        };

        /**
         * Creates a ProtoIdDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ProtoIdDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ProtoIdDefine} ProtoIdDefine
         */
        ProtoIdDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ProtoIdDefine)
                return object;
            var message = new $root.table.ProtoIdDefine();
            if (object.Id != null)
                message.Id = object.Id | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            return message;
        };

        /**
         * Creates a plain object from a ProtoIdDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ProtoIdDefine
         * @static
         * @param {table.ProtoIdDefine} message ProtoIdDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProtoIdDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Name = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            return object;
        };

        /**
         * Converts this ProtoIdDefine to JSON.
         * @function toJSON
         * @memberof table.ProtoIdDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProtoIdDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProtoIdDefine;
    })();

    table.RechargeBase = (function() {

        /**
         * Properties of a RechargeBase.
         * @memberof table
         * @interface IRechargeBase
         * @property {Array.<table.ITRechargeDefine>|null} [TRecharge] RechargeBase TRecharge
         */

        /**
         * Constructs a new RechargeBase.
         * @memberof table
         * @classdesc Represents a RechargeBase.
         * @implements IRechargeBase
         * @constructor
         * @param {table.IRechargeBase=} [properties] Properties to set
         */
        function RechargeBase(properties) {
            this.TRecharge = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RechargeBase TRecharge.
         * @member {Array.<table.ITRechargeDefine>} TRecharge
         * @memberof table.RechargeBase
         * @instance
         */
        RechargeBase.prototype.TRecharge = $util.emptyArray;

        /**
         * Creates a new RechargeBase instance using the specified properties.
         * @function create
         * @memberof table.RechargeBase
         * @static
         * @param {table.IRechargeBase=} [properties] Properties to set
         * @returns {table.RechargeBase} RechargeBase instance
         */
        RechargeBase.create = function create(properties) {
            return new RechargeBase(properties);
        };

        /**
         * Encodes the specified RechargeBase message. Does not implicitly {@link table.RechargeBase.verify|verify} messages.
         * @function encode
         * @memberof table.RechargeBase
         * @static
         * @param {table.IRechargeBase} message RechargeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RechargeBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TRecharge != null && message.TRecharge.length)
                for (var i = 0; i < message.TRecharge.length; ++i)
                    $root.table.TRechargeDefine.encode(message.TRecharge[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RechargeBase message, length delimited. Does not implicitly {@link table.RechargeBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.RechargeBase
         * @static
         * @param {table.IRechargeBase} message RechargeBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RechargeBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RechargeBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.RechargeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.RechargeBase} RechargeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RechargeBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.RechargeBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TRecharge && message.TRecharge.length))
                        message.TRecharge = [];
                    message.TRecharge.push($root.table.TRechargeDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RechargeBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.RechargeBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.RechargeBase} RechargeBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RechargeBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RechargeBase message.
         * @function verify
         * @memberof table.RechargeBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RechargeBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TRecharge != null && message.hasOwnProperty("TRecharge")) {
                if (!Array.isArray(message.TRecharge))
                    return "TRecharge: array expected";
                for (var i = 0; i < message.TRecharge.length; ++i) {
                    var error = $root.table.TRechargeDefine.verify(message.TRecharge[i]);
                    if (error)
                        return "TRecharge." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RechargeBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.RechargeBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.RechargeBase} RechargeBase
         */
        RechargeBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.RechargeBase)
                return object;
            var message = new $root.table.RechargeBase();
            if (object.TRecharge) {
                if (!Array.isArray(object.TRecharge))
                    throw TypeError(".table.RechargeBase.TRecharge: array expected");
                message.TRecharge = [];
                for (var i = 0; i < object.TRecharge.length; ++i) {
                    if (typeof object.TRecharge[i] !== "object")
                        throw TypeError(".table.RechargeBase.TRecharge: object expected");
                    message.TRecharge[i] = $root.table.TRechargeDefine.fromObject(object.TRecharge[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RechargeBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.RechargeBase
         * @static
         * @param {table.RechargeBase} message RechargeBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RechargeBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TRecharge = [];
            if (message.TRecharge && message.TRecharge.length) {
                object.TRecharge = [];
                for (var j = 0; j < message.TRecharge.length; ++j)
                    object.TRecharge[j] = $root.table.TRechargeDefine.toObject(message.TRecharge[j], options);
            }
            return object;
        };

        /**
         * Converts this RechargeBase to JSON.
         * @function toJSON
         * @memberof table.RechargeBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RechargeBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RechargeBase;
    })();

    table.TRechargeDefine = (function() {

        /**
         * Properties of a TRechargeDefine.
         * @memberof table
         * @interface ITRechargeDefine
         * @property {number|null} [Id] TRechargeDefine Id
         * @property {number|null} [Price] TRechargeDefine Price
         * @property {string|null} [Info] TRechargeDefine Info
         */

        /**
         * Constructs a new TRechargeDefine.
         * @memberof table
         * @classdesc Represents a TRechargeDefine.
         * @implements ITRechargeDefine
         * @constructor
         * @param {table.ITRechargeDefine=} [properties] Properties to set
         */
        function TRechargeDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TRechargeDefine Id.
         * @member {number} Id
         * @memberof table.TRechargeDefine
         * @instance
         */
        TRechargeDefine.prototype.Id = 0;

        /**
         * TRechargeDefine Price.
         * @member {number} Price
         * @memberof table.TRechargeDefine
         * @instance
         */
        TRechargeDefine.prototype.Price = 0;

        /**
         * TRechargeDefine Info.
         * @member {string} Info
         * @memberof table.TRechargeDefine
         * @instance
         */
        TRechargeDefine.prototype.Info = "";

        /**
         * Creates a new TRechargeDefine instance using the specified properties.
         * @function create
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.ITRechargeDefine=} [properties] Properties to set
         * @returns {table.TRechargeDefine} TRechargeDefine instance
         */
        TRechargeDefine.create = function create(properties) {
            return new TRechargeDefine(properties);
        };

        /**
         * Encodes the specified TRechargeDefine message. Does not implicitly {@link table.TRechargeDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.ITRechargeDefine} message TRechargeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TRechargeDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Price);
            if (message.Info != null && message.hasOwnProperty("Info"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Info);
            return writer;
        };

        /**
         * Encodes the specified TRechargeDefine message, length delimited. Does not implicitly {@link table.TRechargeDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.ITRechargeDefine} message TRechargeDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TRechargeDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TRechargeDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TRechargeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TRechargeDefine} TRechargeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TRechargeDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TRechargeDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Price = reader.int32();
                    break;
                case 3:
                    message.Info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TRechargeDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TRechargeDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TRechargeDefine} TRechargeDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TRechargeDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TRechargeDefine message.
         * @function verify
         * @memberof table.TRechargeDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TRechargeDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Info != null && message.hasOwnProperty("Info"))
                if (!$util.isString(message.Info))
                    return "Info: string expected";
            return null;
        };

        /**
         * Creates a TRechargeDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TRechargeDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TRechargeDefine} TRechargeDefine
         */
        TRechargeDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TRechargeDefine)
                return object;
            var message = new $root.table.TRechargeDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Price != null)
                message.Price = object.Price | 0;
            if (object.Info != null)
                message.Info = String(object.Info);
            return message;
        };

        /**
         * Creates a plain object from a TRechargeDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TRechargeDefine
         * @static
         * @param {table.TRechargeDefine} message TRechargeDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TRechargeDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Price = 0;
                object.Info = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Info != null && message.hasOwnProperty("Info"))
                object.Info = message.Info;
            return object;
        };

        /**
         * Converts this TRechargeDefine to JSON.
         * @function toJSON
         * @memberof table.TRechargeDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TRechargeDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TRechargeDefine;
    })();

    table.ShopBase = (function() {

        /**
         * Properties of a ShopBase.
         * @memberof table
         * @interface IShopBase
         * @property {Array.<table.ITShopDefine>|null} [TShop] ShopBase TShop
         */

        /**
         * Constructs a new ShopBase.
         * @memberof table
         * @classdesc Represents a ShopBase.
         * @implements IShopBase
         * @constructor
         * @param {table.IShopBase=} [properties] Properties to set
         */
        function ShopBase(properties) {
            this.TShop = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShopBase TShop.
         * @member {Array.<table.ITShopDefine>} TShop
         * @memberof table.ShopBase
         * @instance
         */
        ShopBase.prototype.TShop = $util.emptyArray;

        /**
         * Creates a new ShopBase instance using the specified properties.
         * @function create
         * @memberof table.ShopBase
         * @static
         * @param {table.IShopBase=} [properties] Properties to set
         * @returns {table.ShopBase} ShopBase instance
         */
        ShopBase.create = function create(properties) {
            return new ShopBase(properties);
        };

        /**
         * Encodes the specified ShopBase message. Does not implicitly {@link table.ShopBase.verify|verify} messages.
         * @function encode
         * @memberof table.ShopBase
         * @static
         * @param {table.IShopBase} message ShopBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TShop != null && message.TShop.length)
                for (var i = 0; i < message.TShop.length; ++i)
                    $root.table.TShopDefine.encode(message.TShop[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShopBase message, length delimited. Does not implicitly {@link table.ShopBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.ShopBase
         * @static
         * @param {table.IShopBase} message ShopBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShopBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.ShopBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.ShopBase} ShopBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.ShopBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TShop && message.TShop.length))
                        message.TShop = [];
                    message.TShop.push($root.table.TShopDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShopBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.ShopBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.ShopBase} ShopBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShopBase message.
         * @function verify
         * @memberof table.ShopBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShopBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TShop != null && message.hasOwnProperty("TShop")) {
                if (!Array.isArray(message.TShop))
                    return "TShop: array expected";
                for (var i = 0; i < message.TShop.length; ++i) {
                    var error = $root.table.TShopDefine.verify(message.TShop[i]);
                    if (error)
                        return "TShop." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ShopBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.ShopBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.ShopBase} ShopBase
         */
        ShopBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.ShopBase)
                return object;
            var message = new $root.table.ShopBase();
            if (object.TShop) {
                if (!Array.isArray(object.TShop))
                    throw TypeError(".table.ShopBase.TShop: array expected");
                message.TShop = [];
                for (var i = 0; i < object.TShop.length; ++i) {
                    if (typeof object.TShop[i] !== "object")
                        throw TypeError(".table.ShopBase.TShop: object expected");
                    message.TShop[i] = $root.table.TShopDefine.fromObject(object.TShop[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ShopBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.ShopBase
         * @static
         * @param {table.ShopBase} message ShopBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShopBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TShop = [];
            if (message.TShop && message.TShop.length) {
                object.TShop = [];
                for (var j = 0; j < message.TShop.length; ++j)
                    object.TShop[j] = $root.table.TShopDefine.toObject(message.TShop[j], options);
            }
            return object;
        };

        /**
         * Converts this ShopBase to JSON.
         * @function toJSON
         * @memberof table.ShopBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShopBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShopBase;
    })();

    table.TShopDefine = (function() {

        /**
         * Properties of a TShopDefine.
         * @memberof table
         * @interface ITShopDefine
         * @property {number|null} [Id] TShopDefine Id
         * @property {number|null} [Itemid] TShopDefine Itemid
         * @property {string|null} [Name] TShopDefine Name
         * @property {number|null} [Type] TShopDefine Type
         * @property {number|null} [Num] TShopDefine Num
         * @property {number|null} [Rmb] TShopDefine Rmb
         * @property {number|null} [Price] TShopDefine Price
         * @property {number|null} [Send] TShopDefine Send
         */

        /**
         * Constructs a new TShopDefine.
         * @memberof table
         * @classdesc Represents a TShopDefine.
         * @implements ITShopDefine
         * @constructor
         * @param {table.ITShopDefine=} [properties] Properties to set
         */
        function TShopDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TShopDefine Id.
         * @member {number} Id
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Id = 0;

        /**
         * TShopDefine Itemid.
         * @member {number} Itemid
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Itemid = 0;

        /**
         * TShopDefine Name.
         * @member {string} Name
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Name = "";

        /**
         * TShopDefine Type.
         * @member {number} Type
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Type = 0;

        /**
         * TShopDefine Num.
         * @member {number} Num
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Num = 0;

        /**
         * TShopDefine Rmb.
         * @member {number} Rmb
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Rmb = 0;

        /**
         * TShopDefine Price.
         * @member {number} Price
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Price = 0;

        /**
         * TShopDefine Send.
         * @member {number} Send
         * @memberof table.TShopDefine
         * @instance
         */
        TShopDefine.prototype.Send = 0;

        /**
         * Creates a new TShopDefine instance using the specified properties.
         * @function create
         * @memberof table.TShopDefine
         * @static
         * @param {table.ITShopDefine=} [properties] Properties to set
         * @returns {table.TShopDefine} TShopDefine instance
         */
        TShopDefine.create = function create(properties) {
            return new TShopDefine(properties);
        };

        /**
         * Encodes the specified TShopDefine message. Does not implicitly {@link table.TShopDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TShopDefine
         * @static
         * @param {table.ITShopDefine} message TShopDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TShopDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Itemid != null && message.hasOwnProperty("Itemid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Itemid);
            if (message.Name != null && message.hasOwnProperty("Name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.Name);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Type);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Num);
            if (message.Rmb != null && message.hasOwnProperty("Rmb"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Rmb);
            if (message.Price != null && message.hasOwnProperty("Price"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.Price);
            if (message.Send != null && message.hasOwnProperty("Send"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Send);
            return writer;
        };

        /**
         * Encodes the specified TShopDefine message, length delimited. Does not implicitly {@link table.TShopDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TShopDefine
         * @static
         * @param {table.ITShopDefine} message TShopDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TShopDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TShopDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TShopDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TShopDefine} TShopDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TShopDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TShopDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Itemid = reader.int32();
                    break;
                case 3:
                    message.Name = reader.string();
                    break;
                case 4:
                    message.Type = reader.int32();
                    break;
                case 5:
                    message.Num = reader.int32();
                    break;
                case 6:
                    message.Rmb = reader.int32();
                    break;
                case 7:
                    message.Price = reader.int32();
                    break;
                case 8:
                    message.Send = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TShopDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TShopDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TShopDefine} TShopDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TShopDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TShopDefine message.
         * @function verify
         * @memberof table.TShopDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TShopDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Itemid != null && message.hasOwnProperty("Itemid"))
                if (!$util.isInteger(message.Itemid))
                    return "Itemid: integer expected";
            if (message.Name != null && message.hasOwnProperty("Name"))
                if (!$util.isString(message.Name))
                    return "Name: string expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.Rmb != null && message.hasOwnProperty("Rmb"))
                if (!$util.isInteger(message.Rmb))
                    return "Rmb: integer expected";
            if (message.Price != null && message.hasOwnProperty("Price"))
                if (!$util.isInteger(message.Price))
                    return "Price: integer expected";
            if (message.Send != null && message.hasOwnProperty("Send"))
                if (!$util.isInteger(message.Send))
                    return "Send: integer expected";
            return null;
        };

        /**
         * Creates a TShopDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TShopDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TShopDefine} TShopDefine
         */
        TShopDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TShopDefine)
                return object;
            var message = new $root.table.TShopDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Itemid != null)
                message.Itemid = object.Itemid | 0;
            if (object.Name != null)
                message.Name = String(object.Name);
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.Num != null)
                message.Num = object.Num | 0;
            if (object.Rmb != null)
                message.Rmb = object.Rmb | 0;
            if (object.Price != null)
                message.Price = object.Price | 0;
            if (object.Send != null)
                message.Send = object.Send | 0;
            return message;
        };

        /**
         * Creates a plain object from a TShopDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TShopDefine
         * @static
         * @param {table.TShopDefine} message TShopDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TShopDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Itemid = 0;
                object.Name = "";
                object.Type = 0;
                object.Num = 0;
                object.Rmb = 0;
                object.Price = 0;
                object.Send = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Itemid != null && message.hasOwnProperty("Itemid"))
                object.Itemid = message.Itemid;
            if (message.Name != null && message.hasOwnProperty("Name"))
                object.Name = message.Name;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.Rmb != null && message.hasOwnProperty("Rmb"))
                object.Rmb = message.Rmb;
            if (message.Price != null && message.hasOwnProperty("Price"))
                object.Price = message.Price;
            if (message.Send != null && message.hasOwnProperty("Send"))
                object.Send = message.Send;
            return object;
        };

        /**
         * Converts this TShopDefine to JSON.
         * @function toJSON
         * @memberof table.TShopDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TShopDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TShopDefine;
    })();

    table.SignBase = (function() {

        /**
         * Properties of a SignBase.
         * @memberof table
         * @interface ISignBase
         * @property {Array.<table.ITSignDefine>|null} [TSign] SignBase TSign
         */

        /**
         * Constructs a new SignBase.
         * @memberof table
         * @classdesc Represents a SignBase.
         * @implements ISignBase
         * @constructor
         * @param {table.ISignBase=} [properties] Properties to set
         */
        function SignBase(properties) {
            this.TSign = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SignBase TSign.
         * @member {Array.<table.ITSignDefine>} TSign
         * @memberof table.SignBase
         * @instance
         */
        SignBase.prototype.TSign = $util.emptyArray;

        /**
         * Creates a new SignBase instance using the specified properties.
         * @function create
         * @memberof table.SignBase
         * @static
         * @param {table.ISignBase=} [properties] Properties to set
         * @returns {table.SignBase} SignBase instance
         */
        SignBase.create = function create(properties) {
            return new SignBase(properties);
        };

        /**
         * Encodes the specified SignBase message. Does not implicitly {@link table.SignBase.verify|verify} messages.
         * @function encode
         * @memberof table.SignBase
         * @static
         * @param {table.ISignBase} message SignBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SignBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TSign != null && message.TSign.length)
                for (var i = 0; i < message.TSign.length; ++i)
                    $root.table.TSignDefine.encode(message.TSign[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SignBase message, length delimited. Does not implicitly {@link table.SignBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.SignBase
         * @static
         * @param {table.ISignBase} message SignBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SignBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SignBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.SignBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.SignBase} SignBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SignBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.SignBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TSign && message.TSign.length))
                        message.TSign = [];
                    message.TSign.push($root.table.TSignDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SignBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.SignBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.SignBase} SignBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SignBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SignBase message.
         * @function verify
         * @memberof table.SignBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SignBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TSign != null && message.hasOwnProperty("TSign")) {
                if (!Array.isArray(message.TSign))
                    return "TSign: array expected";
                for (var i = 0; i < message.TSign.length; ++i) {
                    var error = $root.table.TSignDefine.verify(message.TSign[i]);
                    if (error)
                        return "TSign." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SignBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.SignBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.SignBase} SignBase
         */
        SignBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.SignBase)
                return object;
            var message = new $root.table.SignBase();
            if (object.TSign) {
                if (!Array.isArray(object.TSign))
                    throw TypeError(".table.SignBase.TSign: array expected");
                message.TSign = [];
                for (var i = 0; i < object.TSign.length; ++i) {
                    if (typeof object.TSign[i] !== "object")
                        throw TypeError(".table.SignBase.TSign: object expected");
                    message.TSign[i] = $root.table.TSignDefine.fromObject(object.TSign[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SignBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.SignBase
         * @static
         * @param {table.SignBase} message SignBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SignBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TSign = [];
            if (message.TSign && message.TSign.length) {
                object.TSign = [];
                for (var j = 0; j < message.TSign.length; ++j)
                    object.TSign[j] = $root.table.TSignDefine.toObject(message.TSign[j], options);
            }
            return object;
        };

        /**
         * Converts this SignBase to JSON.
         * @function toJSON
         * @memberof table.SignBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SignBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SignBase;
    })();

    table.TSignDefine = (function() {

        /**
         * Properties of a TSignDefine.
         * @memberof table
         * @interface ITSignDefine
         * @property {number|null} [Id] TSignDefine Id
         * @property {number|null} [CostId] TSignDefine CostId
         * @property {number|null} [Num] TSignDefine Num
         */

        /**
         * Constructs a new TSignDefine.
         * @memberof table
         * @classdesc Represents a TSignDefine.
         * @implements ITSignDefine
         * @constructor
         * @param {table.ITSignDefine=} [properties] Properties to set
         */
        function TSignDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TSignDefine Id.
         * @member {number} Id
         * @memberof table.TSignDefine
         * @instance
         */
        TSignDefine.prototype.Id = 0;

        /**
         * TSignDefine CostId.
         * @member {number} CostId
         * @memberof table.TSignDefine
         * @instance
         */
        TSignDefine.prototype.CostId = 0;

        /**
         * TSignDefine Num.
         * @member {number} Num
         * @memberof table.TSignDefine
         * @instance
         */
        TSignDefine.prototype.Num = 0;

        /**
         * Creates a new TSignDefine instance using the specified properties.
         * @function create
         * @memberof table.TSignDefine
         * @static
         * @param {table.ITSignDefine=} [properties] Properties to set
         * @returns {table.TSignDefine} TSignDefine instance
         */
        TSignDefine.create = function create(properties) {
            return new TSignDefine(properties);
        };

        /**
         * Encodes the specified TSignDefine message. Does not implicitly {@link table.TSignDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TSignDefine
         * @static
         * @param {table.ITSignDefine} message TSignDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSignDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.CostId != null && message.hasOwnProperty("CostId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.CostId);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Num);
            return writer;
        };

        /**
         * Encodes the specified TSignDefine message, length delimited. Does not implicitly {@link table.TSignDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TSignDefine
         * @static
         * @param {table.ITSignDefine} message TSignDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSignDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TSignDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TSignDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TSignDefine} TSignDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSignDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TSignDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.CostId = reader.int32();
                    break;
                case 3:
                    message.Num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TSignDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TSignDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TSignDefine} TSignDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSignDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TSignDefine message.
         * @function verify
         * @memberof table.TSignDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TSignDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.CostId != null && message.hasOwnProperty("CostId"))
                if (!$util.isInteger(message.CostId))
                    return "CostId: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            return null;
        };

        /**
         * Creates a TSignDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TSignDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TSignDefine} TSignDefine
         */
        TSignDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TSignDefine)
                return object;
            var message = new $root.table.TSignDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.CostId != null)
                message.CostId = object.CostId | 0;
            if (object.Num != null)
                message.Num = object.Num | 0;
            return message;
        };

        /**
         * Creates a plain object from a TSignDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TSignDefine
         * @static
         * @param {table.TSignDefine} message TSignDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TSignDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.CostId = 0;
                object.Num = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.CostId != null && message.hasOwnProperty("CostId"))
                object.CostId = message.CostId;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            return object;
        };

        /**
         * Converts this TSignDefine to JSON.
         * @function toJSON
         * @memberof table.TSignDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TSignDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TSignDefine;
    })();

    table.TSkillpBase = (function() {

        /**
         * Properties of a TSkillpBase.
         * @memberof table
         * @interface ITSkillpBase
         * @property {Array.<table.ITSkillDefine>|null} [TSkill] TSkillpBase TSkill
         */

        /**
         * Constructs a new TSkillpBase.
         * @memberof table
         * @classdesc Represents a TSkillpBase.
         * @implements ITSkillpBase
         * @constructor
         * @param {table.ITSkillpBase=} [properties] Properties to set
         */
        function TSkillpBase(properties) {
            this.TSkill = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TSkillpBase TSkill.
         * @member {Array.<table.ITSkillDefine>} TSkill
         * @memberof table.TSkillpBase
         * @instance
         */
        TSkillpBase.prototype.TSkill = $util.emptyArray;

        /**
         * Creates a new TSkillpBase instance using the specified properties.
         * @function create
         * @memberof table.TSkillpBase
         * @static
         * @param {table.ITSkillpBase=} [properties] Properties to set
         * @returns {table.TSkillpBase} TSkillpBase instance
         */
        TSkillpBase.create = function create(properties) {
            return new TSkillpBase(properties);
        };

        /**
         * Encodes the specified TSkillpBase message. Does not implicitly {@link table.TSkillpBase.verify|verify} messages.
         * @function encode
         * @memberof table.TSkillpBase
         * @static
         * @param {table.ITSkillpBase} message TSkillpBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSkillpBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TSkill != null && message.TSkill.length)
                for (var i = 0; i < message.TSkill.length; ++i)
                    $root.table.TSkillDefine.encode(message.TSkill[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TSkillpBase message, length delimited. Does not implicitly {@link table.TSkillpBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TSkillpBase
         * @static
         * @param {table.ITSkillpBase} message TSkillpBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSkillpBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TSkillpBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TSkillpBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TSkillpBase} TSkillpBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSkillpBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TSkillpBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TSkill && message.TSkill.length))
                        message.TSkill = [];
                    message.TSkill.push($root.table.TSkillDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TSkillpBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TSkillpBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TSkillpBase} TSkillpBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSkillpBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TSkillpBase message.
         * @function verify
         * @memberof table.TSkillpBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TSkillpBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TSkill != null && message.hasOwnProperty("TSkill")) {
                if (!Array.isArray(message.TSkill))
                    return "TSkill: array expected";
                for (var i = 0; i < message.TSkill.length; ++i) {
                    var error = $root.table.TSkillDefine.verify(message.TSkill[i]);
                    if (error)
                        return "TSkill." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TSkillpBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TSkillpBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TSkillpBase} TSkillpBase
         */
        TSkillpBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TSkillpBase)
                return object;
            var message = new $root.table.TSkillpBase();
            if (object.TSkill) {
                if (!Array.isArray(object.TSkill))
                    throw TypeError(".table.TSkillpBase.TSkill: array expected");
                message.TSkill = [];
                for (var i = 0; i < object.TSkill.length; ++i) {
                    if (typeof object.TSkill[i] !== "object")
                        throw TypeError(".table.TSkillpBase.TSkill: object expected");
                    message.TSkill[i] = $root.table.TSkillDefine.fromObject(object.TSkill[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TSkillpBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TSkillpBase
         * @static
         * @param {table.TSkillpBase} message TSkillpBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TSkillpBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TSkill = [];
            if (message.TSkill && message.TSkill.length) {
                object.TSkill = [];
                for (var j = 0; j < message.TSkill.length; ++j)
                    object.TSkill[j] = $root.table.TSkillDefine.toObject(message.TSkill[j], options);
            }
            return object;
        };

        /**
         * Converts this TSkillpBase to JSON.
         * @function toJSON
         * @memberof table.TSkillpBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TSkillpBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TSkillpBase;
    })();

    table.TSkillDefine = (function() {

        /**
         * Properties of a TSkillDefine.
         * @memberof table
         * @interface ITSkillDefine
         * @property {number|null} [Id] TSkillDefine Id
         * @property {number|null} [Type] TSkillDefine Type
         * @property {number|null} [Num] TSkillDefine Num
         * @property {number|null} [NumPer] TSkillDefine NumPer
         * @property {string|null} [Des] TSkillDefine Des
         */

        /**
         * Constructs a new TSkillDefine.
         * @memberof table
         * @classdesc Represents a TSkillDefine.
         * @implements ITSkillDefine
         * @constructor
         * @param {table.ITSkillDefine=} [properties] Properties to set
         */
        function TSkillDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TSkillDefine Id.
         * @member {number} Id
         * @memberof table.TSkillDefine
         * @instance
         */
        TSkillDefine.prototype.Id = 0;

        /**
         * TSkillDefine Type.
         * @member {number} Type
         * @memberof table.TSkillDefine
         * @instance
         */
        TSkillDefine.prototype.Type = 0;

        /**
         * TSkillDefine Num.
         * @member {number} Num
         * @memberof table.TSkillDefine
         * @instance
         */
        TSkillDefine.prototype.Num = 0;

        /**
         * TSkillDefine NumPer.
         * @member {number} NumPer
         * @memberof table.TSkillDefine
         * @instance
         */
        TSkillDefine.prototype.NumPer = 0;

        /**
         * TSkillDefine Des.
         * @member {string} Des
         * @memberof table.TSkillDefine
         * @instance
         */
        TSkillDefine.prototype.Des = "";

        /**
         * Creates a new TSkillDefine instance using the specified properties.
         * @function create
         * @memberof table.TSkillDefine
         * @static
         * @param {table.ITSkillDefine=} [properties] Properties to set
         * @returns {table.TSkillDefine} TSkillDefine instance
         */
        TSkillDefine.create = function create(properties) {
            return new TSkillDefine(properties);
        };

        /**
         * Encodes the specified TSkillDefine message. Does not implicitly {@link table.TSkillDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TSkillDefine
         * @static
         * @param {table.ITSkillDefine} message TSkillDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSkillDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Type != null && message.hasOwnProperty("Type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Type);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Num);
            if (message.NumPer != null && message.hasOwnProperty("NumPer"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.NumPer);
            if (message.Des != null && message.hasOwnProperty("Des"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.Des);
            return writer;
        };

        /**
         * Encodes the specified TSkillDefine message, length delimited. Does not implicitly {@link table.TSkillDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TSkillDefine
         * @static
         * @param {table.ITSkillDefine} message TSkillDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSkillDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TSkillDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TSkillDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TSkillDefine} TSkillDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSkillDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TSkillDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Type = reader.int32();
                    break;
                case 3:
                    message.Num = reader.int32();
                    break;
                case 4:
                    message.NumPer = reader.int32();
                    break;
                case 5:
                    message.Des = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TSkillDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TSkillDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TSkillDefine} TSkillDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSkillDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TSkillDefine message.
         * @function verify
         * @memberof table.TSkillDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TSkillDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Type != null && message.hasOwnProperty("Type"))
                if (!$util.isInteger(message.Type))
                    return "Type: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.NumPer != null && message.hasOwnProperty("NumPer"))
                if (!$util.isInteger(message.NumPer))
                    return "NumPer: integer expected";
            if (message.Des != null && message.hasOwnProperty("Des"))
                if (!$util.isString(message.Des))
                    return "Des: string expected";
            return null;
        };

        /**
         * Creates a TSkillDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TSkillDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TSkillDefine} TSkillDefine
         */
        TSkillDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TSkillDefine)
                return object;
            var message = new $root.table.TSkillDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Type != null)
                message.Type = object.Type | 0;
            if (object.Num != null)
                message.Num = object.Num | 0;
            if (object.NumPer != null)
                message.NumPer = object.NumPer | 0;
            if (object.Des != null)
                message.Des = String(object.Des);
            return message;
        };

        /**
         * Creates a plain object from a TSkillDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TSkillDefine
         * @static
         * @param {table.TSkillDefine} message TSkillDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TSkillDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Type = 0;
                object.Num = 0;
                object.NumPer = 0;
                object.Des = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Type != null && message.hasOwnProperty("Type"))
                object.Type = message.Type;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.NumPer != null && message.hasOwnProperty("NumPer"))
                object.NumPer = message.NumPer;
            if (message.Des != null && message.hasOwnProperty("Des"))
                object.Des = message.Des;
            return object;
        };

        /**
         * Converts this TSkillDefine to JSON.
         * @function toJSON
         * @memberof table.TSkillDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TSkillDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TSkillDefine;
    })();

    table.TStarupCarBase = (function() {

        /**
         * Properties of a TStarupCarBase.
         * @memberof table
         * @interface ITStarupCarBase
         * @property {Array.<table.ITStarupCarDefine>|null} [TStarupCar] TStarupCarBase TStarupCar
         */

        /**
         * Constructs a new TStarupCarBase.
         * @memberof table
         * @classdesc Represents a TStarupCarBase.
         * @implements ITStarupCarBase
         * @constructor
         * @param {table.ITStarupCarBase=} [properties] Properties to set
         */
        function TStarupCarBase(properties) {
            this.TStarupCar = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TStarupCarBase TStarupCar.
         * @member {Array.<table.ITStarupCarDefine>} TStarupCar
         * @memberof table.TStarupCarBase
         * @instance
         */
        TStarupCarBase.prototype.TStarupCar = $util.emptyArray;

        /**
         * Creates a new TStarupCarBase instance using the specified properties.
         * @function create
         * @memberof table.TStarupCarBase
         * @static
         * @param {table.ITStarupCarBase=} [properties] Properties to set
         * @returns {table.TStarupCarBase} TStarupCarBase instance
         */
        TStarupCarBase.create = function create(properties) {
            return new TStarupCarBase(properties);
        };

        /**
         * Encodes the specified TStarupCarBase message. Does not implicitly {@link table.TStarupCarBase.verify|verify} messages.
         * @function encode
         * @memberof table.TStarupCarBase
         * @static
         * @param {table.ITStarupCarBase} message TStarupCarBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TStarupCarBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TStarupCar != null && message.TStarupCar.length)
                for (var i = 0; i < message.TStarupCar.length; ++i)
                    $root.table.TStarupCarDefine.encode(message.TStarupCar[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TStarupCarBase message, length delimited. Does not implicitly {@link table.TStarupCarBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TStarupCarBase
         * @static
         * @param {table.ITStarupCarBase} message TStarupCarBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TStarupCarBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TStarupCarBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TStarupCarBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TStarupCarBase} TStarupCarBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TStarupCarBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TStarupCarBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TStarupCar && message.TStarupCar.length))
                        message.TStarupCar = [];
                    message.TStarupCar.push($root.table.TStarupCarDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TStarupCarBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TStarupCarBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TStarupCarBase} TStarupCarBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TStarupCarBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TStarupCarBase message.
         * @function verify
         * @memberof table.TStarupCarBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TStarupCarBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TStarupCar != null && message.hasOwnProperty("TStarupCar")) {
                if (!Array.isArray(message.TStarupCar))
                    return "TStarupCar: array expected";
                for (var i = 0; i < message.TStarupCar.length; ++i) {
                    var error = $root.table.TStarupCarDefine.verify(message.TStarupCar[i]);
                    if (error)
                        return "TStarupCar." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TStarupCarBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TStarupCarBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TStarupCarBase} TStarupCarBase
         */
        TStarupCarBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TStarupCarBase)
                return object;
            var message = new $root.table.TStarupCarBase();
            if (object.TStarupCar) {
                if (!Array.isArray(object.TStarupCar))
                    throw TypeError(".table.TStarupCarBase.TStarupCar: array expected");
                message.TStarupCar = [];
                for (var i = 0; i < object.TStarupCar.length; ++i) {
                    if (typeof object.TStarupCar[i] !== "object")
                        throw TypeError(".table.TStarupCarBase.TStarupCar: object expected");
                    message.TStarupCar[i] = $root.table.TStarupCarDefine.fromObject(object.TStarupCar[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TStarupCarBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TStarupCarBase
         * @static
         * @param {table.TStarupCarBase} message TStarupCarBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TStarupCarBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TStarupCar = [];
            if (message.TStarupCar && message.TStarupCar.length) {
                object.TStarupCar = [];
                for (var j = 0; j < message.TStarupCar.length; ++j)
                    object.TStarupCar[j] = $root.table.TStarupCarDefine.toObject(message.TStarupCar[j], options);
            }
            return object;
        };

        /**
         * Converts this TStarupCarBase to JSON.
         * @function toJSON
         * @memberof table.TStarupCarBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TStarupCarBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TStarupCarBase;
    })();

    table.TStarupCarDefine = (function() {

        /**
         * Properties of a TStarupCarDefine.
         * @memberof table
         * @interface ITStarupCarDefine
         * @property {number|null} [Id] TStarupCarDefine Id
         * @property {number|null} [Money] TStarupCarDefine Money
         * @property {Array.<string>|null} [Item] TStarupCarDefine Item
         */

        /**
         * Constructs a new TStarupCarDefine.
         * @memberof table
         * @classdesc Represents a TStarupCarDefine.
         * @implements ITStarupCarDefine
         * @constructor
         * @param {table.ITStarupCarDefine=} [properties] Properties to set
         */
        function TStarupCarDefine(properties) {
            this.Item = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TStarupCarDefine Id.
         * @member {number} Id
         * @memberof table.TStarupCarDefine
         * @instance
         */
        TStarupCarDefine.prototype.Id = 0;

        /**
         * TStarupCarDefine Money.
         * @member {number} Money
         * @memberof table.TStarupCarDefine
         * @instance
         */
        TStarupCarDefine.prototype.Money = 0;

        /**
         * TStarupCarDefine Item.
         * @member {Array.<string>} Item
         * @memberof table.TStarupCarDefine
         * @instance
         */
        TStarupCarDefine.prototype.Item = $util.emptyArray;

        /**
         * Creates a new TStarupCarDefine instance using the specified properties.
         * @function create
         * @memberof table.TStarupCarDefine
         * @static
         * @param {table.ITStarupCarDefine=} [properties] Properties to set
         * @returns {table.TStarupCarDefine} TStarupCarDefine instance
         */
        TStarupCarDefine.create = function create(properties) {
            return new TStarupCarDefine(properties);
        };

        /**
         * Encodes the specified TStarupCarDefine message. Does not implicitly {@link table.TStarupCarDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TStarupCarDefine
         * @static
         * @param {table.ITStarupCarDefine} message TStarupCarDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TStarupCarDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Money != null && message.hasOwnProperty("Money"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Money);
            if (message.Item != null && message.Item.length)
                for (var i = 0; i < message.Item.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Item[i]);
            return writer;
        };

        /**
         * Encodes the specified TStarupCarDefine message, length delimited. Does not implicitly {@link table.TStarupCarDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TStarupCarDefine
         * @static
         * @param {table.ITStarupCarDefine} message TStarupCarDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TStarupCarDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TStarupCarDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TStarupCarDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TStarupCarDefine} TStarupCarDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TStarupCarDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TStarupCarDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Money = reader.uint32();
                    break;
                case 3:
                    if (!(message.Item && message.Item.length))
                        message.Item = [];
                    message.Item.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TStarupCarDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TStarupCarDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TStarupCarDefine} TStarupCarDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TStarupCarDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TStarupCarDefine message.
         * @function verify
         * @memberof table.TStarupCarDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TStarupCarDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Money != null && message.hasOwnProperty("Money"))
                if (!$util.isInteger(message.Money))
                    return "Money: integer expected";
            if (message.Item != null && message.hasOwnProperty("Item")) {
                if (!Array.isArray(message.Item))
                    return "Item: array expected";
                for (var i = 0; i < message.Item.length; ++i)
                    if (!$util.isString(message.Item[i]))
                        return "Item: string[] expected";
            }
            return null;
        };

        /**
         * Creates a TStarupCarDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TStarupCarDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TStarupCarDefine} TStarupCarDefine
         */
        TStarupCarDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TStarupCarDefine)
                return object;
            var message = new $root.table.TStarupCarDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Money != null)
                message.Money = object.Money >>> 0;
            if (object.Item) {
                if (!Array.isArray(object.Item))
                    throw TypeError(".table.TStarupCarDefine.Item: array expected");
                message.Item = [];
                for (var i = 0; i < object.Item.length; ++i)
                    message.Item[i] = String(object.Item[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a TStarupCarDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TStarupCarDefine
         * @static
         * @param {table.TStarupCarDefine} message TStarupCarDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TStarupCarDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Item = [];
            if (options.defaults) {
                object.Id = 0;
                object.Money = 0;
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Money != null && message.hasOwnProperty("Money"))
                object.Money = message.Money;
            if (message.Item && message.Item.length) {
                object.Item = [];
                for (var j = 0; j < message.Item.length; ++j)
                    object.Item[j] = message.Item[j];
            }
            return object;
        };

        /**
         * Converts this TStarupCarDefine to JSON.
         * @function toJSON
         * @memberof table.TStarupCarDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TStarupCarDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TStarupCarDefine;
    })();

    table.TSupermarketBase = (function() {

        /**
         * Properties of a TSupermarketBase.
         * @memberof table
         * @interface ITSupermarketBase
         * @property {Array.<table.ITSupermarketDefine>|null} [TSupermarket] TSupermarketBase TSupermarket
         */

        /**
         * Constructs a new TSupermarketBase.
         * @memberof table
         * @classdesc Represents a TSupermarketBase.
         * @implements ITSupermarketBase
         * @constructor
         * @param {table.ITSupermarketBase=} [properties] Properties to set
         */
        function TSupermarketBase(properties) {
            this.TSupermarket = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TSupermarketBase TSupermarket.
         * @member {Array.<table.ITSupermarketDefine>} TSupermarket
         * @memberof table.TSupermarketBase
         * @instance
         */
        TSupermarketBase.prototype.TSupermarket = $util.emptyArray;

        /**
         * Creates a new TSupermarketBase instance using the specified properties.
         * @function create
         * @memberof table.TSupermarketBase
         * @static
         * @param {table.ITSupermarketBase=} [properties] Properties to set
         * @returns {table.TSupermarketBase} TSupermarketBase instance
         */
        TSupermarketBase.create = function create(properties) {
            return new TSupermarketBase(properties);
        };

        /**
         * Encodes the specified TSupermarketBase message. Does not implicitly {@link table.TSupermarketBase.verify|verify} messages.
         * @function encode
         * @memberof table.TSupermarketBase
         * @static
         * @param {table.ITSupermarketBase} message TSupermarketBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSupermarketBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TSupermarket != null && message.TSupermarket.length)
                for (var i = 0; i < message.TSupermarket.length; ++i)
                    $root.table.TSupermarketDefine.encode(message.TSupermarket[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TSupermarketBase message, length delimited. Does not implicitly {@link table.TSupermarketBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TSupermarketBase
         * @static
         * @param {table.ITSupermarketBase} message TSupermarketBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSupermarketBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TSupermarketBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TSupermarketBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TSupermarketBase} TSupermarketBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSupermarketBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TSupermarketBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TSupermarket && message.TSupermarket.length))
                        message.TSupermarket = [];
                    message.TSupermarket.push($root.table.TSupermarketDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TSupermarketBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TSupermarketBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TSupermarketBase} TSupermarketBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSupermarketBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TSupermarketBase message.
         * @function verify
         * @memberof table.TSupermarketBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TSupermarketBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TSupermarket != null && message.hasOwnProperty("TSupermarket")) {
                if (!Array.isArray(message.TSupermarket))
                    return "TSupermarket: array expected";
                for (var i = 0; i < message.TSupermarket.length; ++i) {
                    var error = $root.table.TSupermarketDefine.verify(message.TSupermarket[i]);
                    if (error)
                        return "TSupermarket." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TSupermarketBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TSupermarketBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TSupermarketBase} TSupermarketBase
         */
        TSupermarketBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TSupermarketBase)
                return object;
            var message = new $root.table.TSupermarketBase();
            if (object.TSupermarket) {
                if (!Array.isArray(object.TSupermarket))
                    throw TypeError(".table.TSupermarketBase.TSupermarket: array expected");
                message.TSupermarket = [];
                for (var i = 0; i < object.TSupermarket.length; ++i) {
                    if (typeof object.TSupermarket[i] !== "object")
                        throw TypeError(".table.TSupermarketBase.TSupermarket: object expected");
                    message.TSupermarket[i] = $root.table.TSupermarketDefine.fromObject(object.TSupermarket[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TSupermarketBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TSupermarketBase
         * @static
         * @param {table.TSupermarketBase} message TSupermarketBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TSupermarketBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TSupermarket = [];
            if (message.TSupermarket && message.TSupermarket.length) {
                object.TSupermarket = [];
                for (var j = 0; j < message.TSupermarket.length; ++j)
                    object.TSupermarket[j] = $root.table.TSupermarketDefine.toObject(message.TSupermarket[j], options);
            }
            return object;
        };

        /**
         * Converts this TSupermarketBase to JSON.
         * @function toJSON
         * @memberof table.TSupermarketBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TSupermarketBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TSupermarketBase;
    })();

    table.TSupermarketDefine = (function() {

        /**
         * Properties of a TSupermarketDefine.
         * @memberof table
         * @interface ITSupermarketDefine
         * @property {number|null} [Id] TSupermarketDefine Id
         * @property {number|null} [ItemId] TSupermarketDefine ItemId
         * @property {number|null} [Num] TSupermarketDefine Num
         * @property {number|null} [Odds] TSupermarketDefine Odds
         * @property {string|null} [Show] TSupermarketDefine Show
         */

        /**
         * Constructs a new TSupermarketDefine.
         * @memberof table
         * @classdesc Represents a TSupermarketDefine.
         * @implements ITSupermarketDefine
         * @constructor
         * @param {table.ITSupermarketDefine=} [properties] Properties to set
         */
        function TSupermarketDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TSupermarketDefine Id.
         * @member {number} Id
         * @memberof table.TSupermarketDefine
         * @instance
         */
        TSupermarketDefine.prototype.Id = 0;

        /**
         * TSupermarketDefine ItemId.
         * @member {number} ItemId
         * @memberof table.TSupermarketDefine
         * @instance
         */
        TSupermarketDefine.prototype.ItemId = 0;

        /**
         * TSupermarketDefine Num.
         * @member {number} Num
         * @memberof table.TSupermarketDefine
         * @instance
         */
        TSupermarketDefine.prototype.Num = 0;

        /**
         * TSupermarketDefine Odds.
         * @member {number} Odds
         * @memberof table.TSupermarketDefine
         * @instance
         */
        TSupermarketDefine.prototype.Odds = 0;

        /**
         * TSupermarketDefine Show.
         * @member {string} Show
         * @memberof table.TSupermarketDefine
         * @instance
         */
        TSupermarketDefine.prototype.Show = "";

        /**
         * Creates a new TSupermarketDefine instance using the specified properties.
         * @function create
         * @memberof table.TSupermarketDefine
         * @static
         * @param {table.ITSupermarketDefine=} [properties] Properties to set
         * @returns {table.TSupermarketDefine} TSupermarketDefine instance
         */
        TSupermarketDefine.create = function create(properties) {
            return new TSupermarketDefine(properties);
        };

        /**
         * Encodes the specified TSupermarketDefine message. Does not implicitly {@link table.TSupermarketDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TSupermarketDefine
         * @static
         * @param {table.ITSupermarketDefine} message TSupermarketDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSupermarketDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ItemId);
            if (message.Num != null && message.hasOwnProperty("Num"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.Num);
            if (message.Odds != null && message.hasOwnProperty("Odds"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.Odds);
            if (message.Show != null && message.hasOwnProperty("Show"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.Show);
            return writer;
        };

        /**
         * Encodes the specified TSupermarketDefine message, length delimited. Does not implicitly {@link table.TSupermarketDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TSupermarketDefine
         * @static
         * @param {table.ITSupermarketDefine} message TSupermarketDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TSupermarketDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TSupermarketDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TSupermarketDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TSupermarketDefine} TSupermarketDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSupermarketDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TSupermarketDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.ItemId = reader.uint32();
                    break;
                case 3:
                    message.Num = reader.uint32();
                    break;
                case 4:
                    message.Odds = reader.uint32();
                    break;
                case 5:
                    message.Show = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TSupermarketDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TSupermarketDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TSupermarketDefine} TSupermarketDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TSupermarketDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TSupermarketDefine message.
         * @function verify
         * @memberof table.TSupermarketDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TSupermarketDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                if (!$util.isInteger(message.ItemId))
                    return "ItemId: integer expected";
            if (message.Num != null && message.hasOwnProperty("Num"))
                if (!$util.isInteger(message.Num))
                    return "Num: integer expected";
            if (message.Odds != null && message.hasOwnProperty("Odds"))
                if (!$util.isInteger(message.Odds))
                    return "Odds: integer expected";
            if (message.Show != null && message.hasOwnProperty("Show"))
                if (!$util.isString(message.Show))
                    return "Show: string expected";
            return null;
        };

        /**
         * Creates a TSupermarketDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TSupermarketDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TSupermarketDefine} TSupermarketDefine
         */
        TSupermarketDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TSupermarketDefine)
                return object;
            var message = new $root.table.TSupermarketDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.ItemId != null)
                message.ItemId = object.ItemId >>> 0;
            if (object.Num != null)
                message.Num = object.Num >>> 0;
            if (object.Odds != null)
                message.Odds = object.Odds >>> 0;
            if (object.Show != null)
                message.Show = String(object.Show);
            return message;
        };

        /**
         * Creates a plain object from a TSupermarketDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TSupermarketDefine
         * @static
         * @param {table.TSupermarketDefine} message TSupermarketDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TSupermarketDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.ItemId = 0;
                object.Num = 0;
                object.Odds = 0;
                object.Show = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.ItemId != null && message.hasOwnProperty("ItemId"))
                object.ItemId = message.ItemId;
            if (message.Num != null && message.hasOwnProperty("Num"))
                object.Num = message.Num;
            if (message.Odds != null && message.hasOwnProperty("Odds"))
                object.Odds = message.Odds;
            if (message.Show != null && message.hasOwnProperty("Show"))
                object.Show = message.Show;
            return object;
        };

        /**
         * Converts this TSupermarketDefine to JSON.
         * @function toJSON
         * @memberof table.TSupermarketDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TSupermarketDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TSupermarketDefine;
    })();

    table.TaskBase = (function() {

        /**
         * Properties of a TaskBase.
         * @memberof table
         * @interface ITaskBase
         * @property {Array.<table.ITTaskDefine>|null} [TTask] TaskBase TTask
         */

        /**
         * Constructs a new TaskBase.
         * @memberof table
         * @classdesc Represents a TaskBase.
         * @implements ITaskBase
         * @constructor
         * @param {table.ITaskBase=} [properties] Properties to set
         */
        function TaskBase(properties) {
            this.TTask = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaskBase TTask.
         * @member {Array.<table.ITTaskDefine>} TTask
         * @memberof table.TaskBase
         * @instance
         */
        TaskBase.prototype.TTask = $util.emptyArray;

        /**
         * Creates a new TaskBase instance using the specified properties.
         * @function create
         * @memberof table.TaskBase
         * @static
         * @param {table.ITaskBase=} [properties] Properties to set
         * @returns {table.TaskBase} TaskBase instance
         */
        TaskBase.create = function create(properties) {
            return new TaskBase(properties);
        };

        /**
         * Encodes the specified TaskBase message. Does not implicitly {@link table.TaskBase.verify|verify} messages.
         * @function encode
         * @memberof table.TaskBase
         * @static
         * @param {table.ITaskBase} message TaskBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.TTask != null && message.TTask.length)
                for (var i = 0; i < message.TTask.length; ++i)
                    $root.table.TTaskDefine.encode(message.TTask[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TaskBase message, length delimited. Does not implicitly {@link table.TaskBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TaskBase
         * @static
         * @param {table.ITaskBase} message TaskBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaskBase message from the specified reader or buffer.
         * @function decode
         * @memberof table.TaskBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TaskBase} TaskBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskBase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TaskBase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.TTask && message.TTask.length))
                        message.TTask = [];
                    message.TTask.push($root.table.TTaskDefine.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaskBase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TaskBase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TaskBase} TaskBase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskBase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaskBase message.
         * @function verify
         * @memberof table.TaskBase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaskBase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.TTask != null && message.hasOwnProperty("TTask")) {
                if (!Array.isArray(message.TTask))
                    return "TTask: array expected";
                for (var i = 0; i < message.TTask.length; ++i) {
                    var error = $root.table.TTaskDefine.verify(message.TTask[i]);
                    if (error)
                        return "TTask." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TaskBase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TaskBase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TaskBase} TaskBase
         */
        TaskBase.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TaskBase)
                return object;
            var message = new $root.table.TaskBase();
            if (object.TTask) {
                if (!Array.isArray(object.TTask))
                    throw TypeError(".table.TaskBase.TTask: array expected");
                message.TTask = [];
                for (var i = 0; i < object.TTask.length; ++i) {
                    if (typeof object.TTask[i] !== "object")
                        throw TypeError(".table.TaskBase.TTask: object expected");
                    message.TTask[i] = $root.table.TTaskDefine.fromObject(object.TTask[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TaskBase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TaskBase
         * @static
         * @param {table.TaskBase} message TaskBase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaskBase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.TTask = [];
            if (message.TTask && message.TTask.length) {
                object.TTask = [];
                for (var j = 0; j < message.TTask.length; ++j)
                    object.TTask[j] = $root.table.TTaskDefine.toObject(message.TTask[j], options);
            }
            return object;
        };

        /**
         * Converts this TaskBase to JSON.
         * @function toJSON
         * @memberof table.TaskBase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaskBase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaskBase;
    })();

    table.TTaskDefine = (function() {

        /**
         * Properties of a TTaskDefine.
         * @memberof table
         * @interface ITTaskDefine
         * @property {number|null} [Id] TTaskDefine Id
         * @property {string|null} [Desc] TTaskDefine Desc
         * @property {number|null} [Count] TTaskDefine Count
         * @property {string|null} [Reward] TTaskDefine Reward
         */

        /**
         * Constructs a new TTaskDefine.
         * @memberof table
         * @classdesc Represents a TTaskDefine.
         * @implements ITTaskDefine
         * @constructor
         * @param {table.ITTaskDefine=} [properties] Properties to set
         */
        function TTaskDefine(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TTaskDefine Id.
         * @member {number} Id
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Id = 0;

        /**
         * TTaskDefine Desc.
         * @member {string} Desc
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Desc = "";

        /**
         * TTaskDefine Count.
         * @member {number} Count
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Count = 0;

        /**
         * TTaskDefine Reward.
         * @member {string} Reward
         * @memberof table.TTaskDefine
         * @instance
         */
        TTaskDefine.prototype.Reward = "";

        /**
         * Creates a new TTaskDefine instance using the specified properties.
         * @function create
         * @memberof table.TTaskDefine
         * @static
         * @param {table.ITTaskDefine=} [properties] Properties to set
         * @returns {table.TTaskDefine} TTaskDefine instance
         */
        TTaskDefine.create = function create(properties) {
            return new TTaskDefine(properties);
        };

        /**
         * Encodes the specified TTaskDefine message. Does not implicitly {@link table.TTaskDefine.verify|verify} messages.
         * @function encode
         * @memberof table.TTaskDefine
         * @static
         * @param {table.ITTaskDefine} message TTaskDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TTaskDefine.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Id != null && message.hasOwnProperty("Id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.Desc);
            if (message.Count != null && message.hasOwnProperty("Count"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Count);
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.Reward);
            return writer;
        };

        /**
         * Encodes the specified TTaskDefine message, length delimited. Does not implicitly {@link table.TTaskDefine.verify|verify} messages.
         * @function encodeDelimited
         * @memberof table.TTaskDefine
         * @static
         * @param {table.ITTaskDefine} message TTaskDefine message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TTaskDefine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TTaskDefine message from the specified reader or buffer.
         * @function decode
         * @memberof table.TTaskDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {table.TTaskDefine} TTaskDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TTaskDefine.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.table.TTaskDefine();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Id = reader.uint32();
                    break;
                case 2:
                    message.Desc = reader.string();
                    break;
                case 3:
                    message.Count = reader.int32();
                    break;
                case 4:
                    message.Reward = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TTaskDefine message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof table.TTaskDefine
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {table.TTaskDefine} TTaskDefine
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TTaskDefine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TTaskDefine message.
         * @function verify
         * @memberof table.TTaskDefine
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TTaskDefine.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Id != null && message.hasOwnProperty("Id"))
                if (!$util.isInteger(message.Id))
                    return "Id: integer expected";
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                if (!$util.isString(message.Desc))
                    return "Desc: string expected";
            if (message.Count != null && message.hasOwnProperty("Count"))
                if (!$util.isInteger(message.Count))
                    return "Count: integer expected";
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                if (!$util.isString(message.Reward))
                    return "Reward: string expected";
            return null;
        };

        /**
         * Creates a TTaskDefine message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof table.TTaskDefine
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {table.TTaskDefine} TTaskDefine
         */
        TTaskDefine.fromObject = function fromObject(object) {
            if (object instanceof $root.table.TTaskDefine)
                return object;
            var message = new $root.table.TTaskDefine();
            if (object.Id != null)
                message.Id = object.Id >>> 0;
            if (object.Desc != null)
                message.Desc = String(object.Desc);
            if (object.Count != null)
                message.Count = object.Count | 0;
            if (object.Reward != null)
                message.Reward = String(object.Reward);
            return message;
        };

        /**
         * Creates a plain object from a TTaskDefine message. Also converts values to other types if specified.
         * @function toObject
         * @memberof table.TTaskDefine
         * @static
         * @param {table.TTaskDefine} message TTaskDefine
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TTaskDefine.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Id = 0;
                object.Desc = "";
                object.Count = 0;
                object.Reward = "";
            }
            if (message.Id != null && message.hasOwnProperty("Id"))
                object.Id = message.Id;
            if (message.Desc != null && message.hasOwnProperty("Desc"))
                object.Desc = message.Desc;
            if (message.Count != null && message.hasOwnProperty("Count"))
                object.Count = message.Count;
            if (message.Reward != null && message.hasOwnProperty("Reward"))
                object.Reward = message.Reward;
            return object;
        };

        /**
         * Converts this TTaskDefine to JSON.
         * @function toJSON
         * @memberof table.TTaskDefine
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TTaskDefine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TTaskDefine;
    })();

    return table;
})();